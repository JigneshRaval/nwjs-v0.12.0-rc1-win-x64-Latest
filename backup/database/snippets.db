{"id":"0","category":"javascript","categoryId":"30","title":"Javascript BEST PRACTICES PART 1","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><h3>Make it Understandable</h3>\n\t\t\t\t\t<p>Choose easy to understand and short names for variables and functions.</p>\n\t\t\t\t\t<p><em>Bad variable names:</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>x1 fe2 xbqne</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p><em>Also bad variable names:</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>incrementerForMainLoopWhichSpansFromTenToTwenty\n}\ncreateNewMemberIfAgeOverTwentyOneAndMoonIsFull</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Avoid describing a value with your variable or function name.</p>\n\t\t\t\t\t<p><em>Might not make sense in some countries:</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>isOverEighteen()</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p><em>Works everywhere:</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>isLegalAge()</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Your code is a story - make your storyline easy to follow!</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Avoid Globals</h3>\n\t\t\t\t\t<p>Global variables are a terribly bad idea.</p>\n\t\t\t\t\t<p><em>Reason:</em> You run the danger of your code being overwritten by any other JavaScript added to the page after yours.</p>\n\t\t\t\t\t<p><em>Workaround:</em> use closures and the module pattern</p>\n\t\t\t\t\t<p><em>Problem:</em> all variables are global and can be accessed; access is not contained, anything in the page can overwrite what you do.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code><span><span>var</span></span> current = <span><span>null</span></span>;\n<span><span>var</span></span> labels = {\n   <span><span>'home'</span></span>:<span><span>'home'</span></span>,\n   <span><span>'articles'</span></span>:<span><span>'articles'</span></span>,\n   <span><span>'contact'</span></span>:<span><span>'contact'</span></span>\t\n};\n<span><span><span><span>function</span></span></span><span> <span><span>init</span></span><span><span>()</span></span>{</span></span>\n};\n<span><span><span><span>function</span></span></span><span> <span><span>show</span></span><span><span>()</span></span>{</span></span>\n   current = <span><span>1</span></span>;\n};\n<span><span><span><span>function</span></span></span><span> <span><span>hide</span></span><span><span>()</span></span>{</span></span>\n   show();\n};</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p><em>Object Literal:</em> Everything is contained but can be accessed via the object name.</p>\n\t\t\t\t\t<p><em>Problem:</em> Repetition of module name leads to huge code and is annoying.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>demo = {\n   current:<span><span>null</span></span>,\n   labels:{\n      <span><span>'home'</span></span>:<span><span>'home'</span></span>,\n      <span><span>'articles'</span></span>:<span><span>'articles'</span></span>,\n      <span><span>'contact'</span></span>:<span><span>'contact'</span></span>\n   },\n   init:<span><span>function</span></span>(){\n   },\n   show:<span><span>function</span></span>(){\n      demo.current = <span><span>1</span></span>;\n   },\n   hide:<span><span>function</span></span>(){\n      demo.show();\n   }\n}</code></pre>\n\t\t\t\t\t</div>\t\n\t\t\t\t\t<p><em>Module Pattern:</em> You need to specify what is global and what isnt - switching syntax in between.</p>\n\t\t\t\t\t<p><em>Problem:</em> Repetition of module name, different syntax for inner functions.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>module = <span><span>function</span></span>(){\n   <span><span>var</span></span> labels = {\n      <span><span>'home'</span></span>:<span><span>'home'</span></span>,\n      <span><span>'articles'</span></span>:<span><span>'articles'</span></span>,\n      <span><span>'contact'</span></span>:<span><span>'contact'</span></span>\n   };\n   <span><span>return</span></span> {\n      current:<span><span>null</span></span>,\n      init:<span><span>function</span></span>(){\n      },\n      show:<span><span>function</span></span>(){\n         module.current = <span><span>1</span></span>;\n      },\n      hide:<span><span>function</span></span>(){\n         module.show();\n      }\n   }\n}();</code></pre>\n\t\t\t\t\t</div>\t\t\t\t\n\t\t\t\t\t<p><em>Revealing Module Pattern:</em> Keep consistent syntax and mix and match what to make global.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>module = <span><span>function</span></span>(){\n   <span><span>var</span></span> current = <span><span>null</span></span>;\n   <span><span>var</span></span> labels = {\n      <span><span>'home'</span></span>:<span><span>'home'</span></span>,\n      <span><span>'articles'</span></span>:<span><span>'articles'</span></span>,\n      <span><span>'contact'</span></span>:<span><span>'contact'</span></span>\n   };\n   <span><span>var</span></span> init = <span><span>function</span></span>(){\n   };\n   <span><span>var</span></span> show = <span><span>function</span></span>(){\n      current = <span><span>1</span></span>;\n   };\n   <span><span>var</span></span> hide = <span><span>function</span></span>(){\n      show();\n   }\n   <span><span>return</span></span>{init:init, show:show, current:current}\n}();\nmodule.init();</code></pre>\n\t\t\t\t\t</div>\t\t\t\t\t\n\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Stick to a Strict Coding Style</h3>\n\t\t\t\t\t<p>Browsers are very forgiving JavaScript parsers.  However, lax \ncoding style will hurt you when you shift to another environment or hand\n over to another developer.  Valid code is secure code.</p>\n\t\t\t\t\t<p><em>Validate your code:</em> <a target=\"_blank\" href=\"http://www.jslint.com/\">http://www.jslint.com/</a></p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Comment as Much as Needed but Not More</h3>\n\t\t\t\t\t<p>“Good code explains itself” is an arrogant myth.</p>\n\t\t\t\t\t<p>Comment what you consider needed - but don’t tell others your life story.</p>\n\t\t\t\t\t<p>Avoid using the line comment //.  /* */ is much safer to use because it doesn’t cause errors when the line break is removed.</p>\n\t\t\t\t\t<p>If you debug using comments, there is a nice little trick:</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>module = <span><span>function</span></span>(){\n   <span><span>var</span></span> current = <span><span>null</span></span>;\n<span><span>/*\n   var init = function(){\n   };\n   var show = function(){\n      current = 1;\n   };\n   var hide = function(){\n      show();\n   }\n// */</span></span>\n   <span><span>return</span></span>{init:init, show:show, current:current}\n}();</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Comments should never go out to the end user in plain HTML or JavaScript. See <em>Development code is not live code</em></p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Avoid Mixing with Other Technologies</h3>\n\t\t\t\t\t<p>JavaScript is good for calculation, conversion, access to \noutside sources (Ajax) and to define the behavior of an interface (event\n handling).  Anything else should be kept to the technology we have to \ndo that job.</p>\n\t\t\t\t\t<p>FOR EXAMPLE:</p>\n\t\t\t\t\t<p><em>Put a red border around all fields with a class of “mandatory” when they are empty.</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code><span><span>var</span></span> f = document.getElementById(<span><span>'mainform'</span></span>);\n<span><span>var</span></span> inputs = f.getElementsByTagName(<span><span>'input'</span></span>);\n<span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>,j=inputs.length;i&lt;j;i++){\n   <span><span>if</span></span>(inputs[i].className === <span><span>'mandatory'</span></span> &amp;&amp; inputs.value === <span><span>''</span></span>){\n      inputs[i].style.borderColor = <span><span>'#f00'</span></span>;\n      inputs[i].style.borderStyle = <span><span>'solid'</span></span>;\n      inputs[i].style.borderWidth = <span><span>'1px'</span></span>;\n   }\n}</code></pre>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<p><em>...Two months down the line:</em> All styles \nhave to comply with the new company style guide, no borders are allowed \nand errors should be shown by an alert icon next to the element.</p>\n\t\t\t\t\t<p>People shouldn’t have to change your JavaScript code to change the look and feel.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code><span><span>var</span></span> f = document.getElementById(<span><span>'mainform'</span></span>);\n<span><span>var</span></span> inputs = f.getElementsByTagName(<span><span>'input'</span></span>);\n<span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>,j=inputs.length;i&lt;j;i++){\n   <span><span>if</span></span>(inputs[i].className === <span><span>'mandatory'</span></span> &amp;&amp; inputs.value === <span><span>''</span></span>){\n      inputs[i].className+=<span><span>' error'</span></span>;\n   }\n}</code></pre>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Using CSS inheritance you can avoid having to loop over a lot of elements.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Use Shortcut Notations</h3>\n\t\t\t\t\t<p>Shortcut notations keep your code snappy and easier to read once you get used to it.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>This code</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> lunch = <span><span>new</span></span> Array();\nlunch[<span><span>0</span></span>]=<span><span>'Dosa'</span></span>;\nlunch[<span><span>1</span></span>]=<span><span>'Roti'</span></span>;\nlunch[<span><span>2</span></span>]=<span><span>'Rice'</span></span>;\nlunch[<span><span>3</span></span>]=<span><span>'what the heck is this?'</span></span>;</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>Is the same as...</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> lunch = [\n   <span><span>'Dosa'</span></span>,\n   <span><span>'Roti'</span></span>,\n   <span><span>'Rice'</span></span>,\n   <span><span>'what the heck is this?'</span></span>\n];</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>This code</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>if</span></span>(v){\n   <span><span>var</span></span> x = v;\n} <span><span>else</span></span> {\n   <span><span>var</span></span> x =<span><span>10</span></span>;\n}</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>Is the same as...</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> x = v || <span><span>10</span></span>;</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>This code</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> direction;\n<span><span>if</span></span>(x &gt; <span><span>100</span></span>){\n   direction = <span><span>1</span></span>;\n} <span><span>else</span></span> {\n   direction = -<span><span>1</span></span>;\n}</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p><em>Is the same as...</em></p>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> direction = (x &gt; <span><span>100</span></span>) ? <span><span>1</span></span> : -<span><span>1</span></span>;</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Modularize</h3>\n\t\t\t\t\t<p>Keep your code modularized and specialized.</p>\n\t\t\t\t\t<p>It is tempting and easy to write one function that does \neverything.  However, as you extend the functionality you will find that\n you do the same things in several functions.</p>\n\t\t\t\t\t<p>To prevent that, make sure to write smaller, generic helper \nfunctions that fulfill one specific task rather than catch-all methods.</p>\n\t\t\t\t\t<p>At a later stage you can also expose these functions when using \nthe revealing module pattern to create an API to extend the main \nfunctionality.</p>\n\t\t\t\t\t<p>Good code should be easy to build upon without rewriting the core.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Enhance Progressively</h3>\n\t\t\t\t\t<p>Avoid creating a lot of JavaScript dependent code.</p>\n\t\t\t\t\t<p>DOM generation is slow and expensive.</p>\n\t\t\t\t\t<p>Elements that are dependent on JavaScript but are available when JavaScript is turned off are a broken promise to our users.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Allow for Configuration and Translation</h3>\n\t\t\t\t\t<p>Everything that is likely to change in your code should not be scattered throughout your code.</p>\n\t\t\t\t\t<p>This includes labels, CSS classes, IDs and presets.</p>\n\t\t\t\t\t<p>By putting these into a configuration object and making this one public we make maintenance easy and allow for customization.</p>\n\t\t\t\t\t<p><em>For example:</em></p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code>carousel = <span><span>function</span></span>(){\n   <span><span>var</span></span> config = {\n      CSS:{\n         classes:{\n            current:<span><span>'current'</span></span>,\n            scrollContainer:<span><span>'scroll'</span></span>\n         },\n         IDs:{\n            maincontainer:<span><span>'carousel'</span></span>\n         }\n      },\n      labels:{\n         previous:<span><span>'back'</span></span>,\n         next:<span><span>'next'</span></span>,\n         auto:<span><span>'play'</span></span>\n      },\n      settings:{\n         amount:<span><span>5</span></span>,\n         skin:<span><span>'blue'</span></span>,\n         autoplay:<span><span>false</span></span>\n      },\n   };\n   <span><span><span><span>function</span></span></span><span> <span><span>init</span></span><span><span>()</span></span>{</span></span>\n   };\n   <span><span><span><span>function</span></span></span><span> <span><span>scroll</span></span><span><span>()</span></span>{</span></span>\n   };\n   <span><span><span><span>function</span></span></span><span> <span><span>highlight</span></span><span><span>()</span></span>{</span></span>\n   };\n   <span><span>return</span></span> {config:config,init:init}\n}();</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Summary</h3>\n\t\t\t\t\t<p>In this section, we covered the best practices for naming \nvariables, commenting, and gave a few tips to help you organize your \ncode. Head over to part 2 to learn more about effective ways to deal \nwith loops, nesting and more.</p>\n\t\t\t\t\t<p><a href=\"http://www.thinkful.com/learn/javascript-best-practices-2/\"> Go To JavaScript Best Practices Part 2</a></p>\n\n\t\t\t\t\t<p>If you enjoyed this guide, you might also like our <a href=\"http://www.thinkful.com/learn/intro-to-jquery?utm_source=tf_js_best_practices_guide_1&amp;utm_medium=tf_relevant_guide&amp;utm_campaign=tf_guides\">intro to jQuery guide</a>. Also, if you're interested in learning more about web development, you should take a look at our <a href=\"http://wow.thinkful.com/courses/learn-web-development-online/?utm_source=tf_js_best_practices_guide_1&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides\">Frontend Web Development Course</a> or our <a href=\"http://wow.thinkful.com/courses/learn-angularjs-online/?utm_source=tf_js_best_practices_guide_1&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides\">AngularJS Course</a>.</p></div>","tags":"javascript,Practice","isStarred":"false","note":"","dateCreated":"Fri Feb 20 2015 12:25:17 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 20 2015 12:25:17 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"0fTHyKILdkgLMQWn"}
{"id":"0hwoUnLxevuVJAgy","category":"node.js","categoryId":"31","title":"Read files in node.js","codes":[{"code":"/*===============================\nSyntex :\nfs = require('fs');\nfs.readFile(file, [encoding], [callback]);\n\n// file = (string) filepath of the file to read\n======================================*/\n\nfs = require('fs')\nfs.readFile('/etc/hosts', 'utf8', function (err,data) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log(data);\n});","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"Reading the contents of a file into memory is a very common programming \ntask, and, as with many other things, the Node.js core API provides \nmethods to make this trivial.  There are a variety of file system \nmethods, all contained in the <code>fs</code> module.  The easiest way to read the entire contents of a file is with <code>fs.readFile</code>, as follows: &nbsp;<p><br></p>","tags":"node.js,javascript","isStarred":"false","note":"","dateCreated":"Sat Jan 24 2015 17:27:05 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422107405714},"mode":"add","comments":[],"images":["01_16_2_2015.png","0_16_2_2015.png","any-do_17_2_2015.jpg","any-do-1_17_2_2015.jpg","backpacker-planner_17_2_2015.png","bignoodle_titling_17_2_2015.zip"],"_id":"0hwoUnLxevuVJAgy"}
{"id":"1g5rIQ1sgqQFGBDj","category":"javascript","categoryId":"30","title":"How to trigger an event in input text after I stop typing/writing?","codes":[{"code":"var delay = (function(){\n  var timer = 0;\n  return function(callback, ms){\n  clearTimeout (timer);\n  timer = setTimeout(callback, ms);\n };\n})();\n\n// Usage\n$('input').keyup(function() {\n  delay(function(){\n    alert('Hi, func called');\n  }, 1000 );\n});","codeLanguage":"javascript"},{"code":"// Example 2\n//setup before functions\nvar typingTimer;                //timer identifier\nvar doneTypingInterval = 5000;  //time in ms, 5 second for example\n\n//on keyup, start the countdown\n$('#myInput').keyup(function(){\n    clearTimeout(typingTimer);\n    typingTimer = setTimeout(doneTyping, doneTypingInterval);\n});\n\n//on keydown, clear the countdown \n$('#myInput').keydown(function(){\n    clearTimeout(typingTimer);\n});\n\n//user is \"finished typing,\" do something\nfunction doneTyping () {\n    //do something\n}","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"}],"description":"<p>Here is the solution. Executing a function after the user has stopped typing for a specified amount of time:<br></p>","tags":"javascript,js","isStarred":"false","note":"","dateCreated":"Tue Jan 20 2015 18:11:33 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423920647131},"mode":"add","comments":[],"images":["____by_ajkabajka-d6ra827_28_1_2015.jpg"],"_id":"1g5rIQ1sgqQFGBDj"}
{"id":"0","category":"patterns","categoryId":"58","title":"A jQuery Pub Sub Implementation","refSite":"http://javascriptplayground.com/blog/2012/04/a-jquery-pub-sub-implementation/","codes":[{"code":"<!DOCTYPE html>\n<html>\n<head>\n<title>Basic Pub Sub with jQuery</title>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"></script>\n<script src=\"pubsub.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<style type=\"text/css\" media=\"all\">\n.flash { display: none; width: 90%; margin: 0 auto; padding: 10px; position: absolute; top: 0; background: rgba(0,0,0,0.5); color: #fff; text-align: center; }\nbody {\npadding-top: 50px;\nfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\nfont-size: 16px;\n}\nform {\nfloat: left;\nwidth: 40%;\n}\n.messages {\nfloat: right;\nwidth: 45%;\n}\n</style>\n</head>\n<body>\n<div class=\"flash\"></div>\n<form action=\"get\" method=\"\">\n<label>Send a Message:</label> <input type=\"text\" name=\"message\" />\n<input type=\"submit\" value=\"Submit\">\n</form>\n<div class=\"messages\">\n<h2>Messages Recieved</h2>\n<ul class=\"recieved_messages\">\n</ul>\n</div>\n</html>","codeLanguage":"html"},{"code":"var pubsub = {\n\tsendMessage: function() {\n\t\tmessage = $(\"input\").val();\n\t\t$(\"body\").trigger(\"messageReceived\", { message: message});\n\t\treturn false;\n\t},\n\tdisplayMessage: function(data) {\n\t\t$(\"body\").trigger(\"messageDisplayed\");\n\t\tli = $(\"<li />\").text(data.message).css(\"display\", \"none\");\n\t\t$(\"ul\").append(li);\n\t\t$(\"ul>li\").last().fadeIn()\n\t},\n\tflashMessage: function() {\n\t\t$(\".flash\").text(\"you've got a new message\")\n\t\t.fadeIn(500, function() {\n\t\t\tvar that = this;\n\t\t\tsetTimeout(function() {\n\t\t\t\t$(that).fadeOut(500);\n\t\t\t}, 2000);\n\t\t});\n\t},\n\tbindEvents: function() {\n\t\t$(\"form\").on(\"submit\",function() {\n\t\t\tpubsub.sendMessage();\n\t\t\treturn false;\n\t\t});\n\t\t$(\"body\").on(\"messageReceived\", function(event,data) {\n\t\t\tpubsub.displayMessage(data);\n\t\t});\n\t\t$(\"body\").on(\"messageDisplayed\", function(event, data) {\n\t\t\tpubsub.flashMessage();\n\t\t});\n\t},\n\tinit: function() {\n\t\tthis.bindEvents();\n\t}\n};\n$(function() {\n\tpubsub.init();\n});","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"}],"description":"<section>\n    <p>Having <a href=\"http://javascriptplayground.com/blog/2012/04/javascript-module-pattern\">discussed the Module pattern</a> briefly a few days ago, today I want to tackle another pattern, the Pub Sub (or <em>Publish</em> and <em>Subscribe</em>)\n pattern, also known as the Observer Pattern. If you've not heard of \nthis implementation, it's pretty straight forward. It allows different \naspects of your application, usually called <em>modules</em>, to both \nsubscribe to events other modules might publish, &amp; publish events \nitself. This means no two modules of your system are directly linked, as\n each module just relies on events to know what to do &amp; when to do \nit. In the future we'll look into this pattern using plain JavaScript, \nbut as an introduction to it it makes sense to use jQuery, a framework \nthat allows us to publish &amp; subscribe to events really easily, using\n <code>.on()</code> <a href=\"http://javascriptplayground.com/blog/2012/04/jquery-1-7-event-binding-on-and-off\">which I covered very recently on this very blog</a> and then <code>.trigger()</code>, which lets us trigger events. Most people will use this to trigger events like <code>click</code> or <code>submit</code>, but did you know you can use it to trigger your own, custom events? It's this functionality we will use today.</p>\n\n<p>The app we will be building is very simple, it's a little app that \nlets you send messages to yourself. Of course, this is very, very easy \n(it's a bit of DOM manipulation) but the app is split up into 3 parts \nwhich lets me nicely demonstrate some of the PubSub ideas. The app can \nbe seen on the <a href=\"http://javascriptplayground.com/demos/jquerypubsub/\">online demo here</a></p>\n\n<p>There are three key parts:</p>\n\n<ul>\n<li>User sends a message via the form,</li>\n<li>message is shown on the right panel,</li>\n<li>flash notice displays on top of screen to notify user.</li>\n</ul>\n\n<p>The source code for this is all available on Github so for the \npurposes of this tutorial I wont talk at all about the (tiny) bit of CSS\n I've done or even the HTML, it will focus purely on the JavaScript. All\n you need to know really is that I've got a <code>div#flash</code> for the flash message, a <code>form</code> for sending a message and that each message is displayed as a <code>li</code> inside a <code>ul</code>. All of our code will go inside a JavaScript object I'm going to call <code>pubsub</code>, although in real life it would most likely be called something more relevant to your app:</p>\n<div><pre><code data-lang=\"text\">var pubsub = {\n\n}\n</code></pre></div>\n<p>Firstly, lets tackle what happens when a user submits the form. We can use jQuery's <code>submit</code> event to hijack the event &amp; prevent the default action easily enough:</p>\n<div><pre><code data-lang=\"text\">$(\"form\").on(\"submit\", function() {\n    return false;\n});\n</code></pre></div>\n<p>Then I'm going to want to call my method for dealing with this event.\n In practise, each module would probably have its own namespace and have\n its events in there, such as:</p>\n<div><pre><code data-lang=\"text\">pubsub.messages.send\npubsub.messages.receive\npubsub.flash.show\npubsub.flash.hide\n</code></pre></div>\n<p>But as we have only 3 events, I'm going to keep them in the main <code>pubsub</code> namespace. So lets create our event for the sending of a message. Within our <code>pubsub</code> object, add this method:</p>\n<div><pre><code data-lang=\"text\">sendMessage: function() {\n    var message = $(\"input\").val();\n    $(\"body\").trigger(\"messageReceived\", { message: message});\n    return false;\n}\n</code></pre></div>\n<p>Notice how with <code>.trigger()</code> we can send extra data \nthrough as the second parameter, so this makes it easy to send custom \ndata with our custom events. You may have realised, but as part of our \nsystem we're going to need to bind our functions to regular DOM events, \nsuch as the form <code>submit</code> event. I decided, as there's very few, to create a new method within <code>pubsub</code>, called <code>bindEvents()</code> that will do that for me. Here's the code for all the events we need:</p>\n<div><pre><code data-lang=\"text\">bindEvents: function() {\n    $(\"form\").on(\"submit\",function() {\n        pubsub.sendMessage();\n        return false;\n    });\n    $(\"body\").on(\"messageReceived\", function(event,data) {\n        pubsub.displayMessage(data);\n    });\n    $(\"body\").on(\"messageDisplayed\", function(event, data) {\n        pubsub.flashMessage();\n    });\n}\n</code></pre></div>\n<p>Note that when we pass data through an event, like we did with <code>messageReceived</code>, we get at it through <code>function(event, data)</code>. By default jQuery passes us lots of information about the event and then custom data is passed as the <em>second parameter</em>.</p>\n\n<p>Obviously, this could (and will) get messy if we had many more \nevents, so again if there were more I'd split these up further into the \nindividual modules, and probably give each module an <code>init()</code> method to do the set up, and then a <code>bindEvents()</code> method for each module to set it up. Speaking of <code>init()</code> methods, I'll add one to <code>pubsub</code> and for now have it just call <code>bindEvents()</code>:</p>\n<div><pre><code data-lang=\"text\">init: function() {\n    this.bindEvents();\n}\n</code></pre></div>\n<p>Then we can set our entire app up when the DOM is ready with:</p>\n<div><pre><code data-lang=\"text\">$(function() {\n    pubsub.init();  \n});\n</code></pre></div>\n<p>Now, the <code>displayMessage()</code> and <code>flashMessage()</code> methods are fairly straight forward:</p>\n<div><pre><code data-lang=\"text\">displayMessage: function(data) {\n    $(\"body\").trigger(\"messageDisplayed\");\n    var li = $(\"&lt;li /&gt;\").text(data.message).css(\"display\", \"none\");\n    $(\"ul\").append(li);\n    $(\"ul&gt;li\").last().fadeIn()\n},\nflashMessage: function() {\n    $(\".flash\").text(\"you've got a new message\")\n    .fadeIn(500, function() {\n      var that = this;\n      setTimeout(function() {\n        $(that).fadeOut(500);\n      }, 2000);\n    });\n}\n</code></pre></div>\n<p>Notice that every event I trigger is on <code>$(\"body\")</code>. There's no reason I couldn't do it on a particular <code>div</code>, but I like to do it on <code>body</code> as I know that <code>body</code>\n incorporates everything on the page. The code for each of these methods\n are pretty straight forward, just a bit of jQuery DOM manipulation.</p>\n\n<p>All the code covered in this article is available on <a href=\"https://github.com/jackfranklin/JavaScript-Playground--Simple-jQuery-PubSub\">My Github as a Public Repository</a>, and if you want to try it, <a href=\"http://javascriptplayground.com/demos/jquerypubsub/\">there's a demo online here</a>.</p>\n\n<p>Now, this might not seem very worthwhile <em>in this instance</em>, but take a moment to think what you would have had code wise, if you had implemented all of the code above within the form's <code>submit</code>\n event (like I have done in the past with projects, and I'm sure you \nhave too). It would be a complete mess of code, all within one form \nevent. Then imagine you had another method of sending a message. How \nwould you deal with that? You would either have to copy &amp; paste all \nthe code into another event, or trigger the form's <code>submit</code> \nevent. Neither of those solutions are good. With this method though, all\n you have to do is make that new way of sending messages trigger a <code>messageReceived</code>\n event &amp; pass the message with it, and then you're set. You could \nthen remove the other way of sending messages, and nothing would break. \nAnother issue is if one module breaks, it <em>shouldn't break the entire application</em>.\n Having the entire implementation within one function means if just one \nline fails, the entire application will fall to its knees. With each \nmodule firing events, if one module fails and doesn't send the events \nit's expected to, other modules can still send theirs, and as such one \nmodule breaking doesn't bring the application down. This is the \nadvantage of using such a pattern, code resuse, not repeating code &amp;\n implementing a modular approach.</p>\n\n<p>I will be covering this pattern in large detail over the near future \nas it's something I've been using a lot recently. I'm aware that this \nimplementation is another post on the JavaScript Playground that uses \njQuery, but fear not, in a coming article we will go head on into a \nbasic PubSub written in plain JavaScript. If you can't wait that long, <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\">Addy Osmani's section on the Observer Pattern</a> in his JS Patterns book is well worth your time.</p></section>","tags":"javascript,Observer Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 19:48:36 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 19:48:36 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"4UX2l5ZC8nbgHmyk"}
{"id":"0","category":"javascript","categoryId":"30","title":"Sophisticated Sorting in JavaScript","refSite":"http://www.sitepoint.com/sophisticated-sorting-in-javascript/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>&nbsp;JavaScript’s sorting mechanism is a model of simplicity, yet bubbling \nunder the surface is some incredibly flexible and powerful \nfunctionality. Using <code>sort</code> it’s possible to organise arrays, not just into alphabetical or numerical order, but into <em>any</em> bespoke arrangement we can express in conditional logic.\n</p>\n<h2>How the sort function works</h2>\n<p>\n<em>→ If you already know the basics then you might want to <a href=\"http://www.sitepoint.com/sophisticated-sorting-in-javascript/#skip-the-basics\">skip ahead</a>.</em>\n</p>\n<p>\nIf <code>sort()</code> is called with no argument, then the array is sorted <strong>lexicographically</strong> — in dictionary order, when each value is treated as a string:\n</p>\n<pre><code>var letters = [\"R\",\"O\",\"F\",\"L\"];\n    \nletters.sort();\n    \nalert(letters);    //produces [\"F\",\"L\",\"O\",\"R\"]</code></pre>\n<p>\nOtherwise the argument to <code>sort</code> is a <strong>comparison function</strong>,\n which defines the sort behavior according to how it returns. The \ncomparison function itself accepts two arguments, usually referred to as\n <code>a</code> and <code>b</code>, which represent the two values being compared in each operation. Then:\n</p>\n<ol>\n<li>if the function <em>returns less than zero</em>, sort <code>a</code> before <code>b</code></li>\n<li>if the function <em>returns greater than zero</em>, sort <code>b</code> before <code>a</code></li>\n<li>if the function <em>returns zero</em>, leave <code>a</code> and <code>b</code> unchanged with respect to each other</li>\n</ol>\n<div>\n<div><strong></strong>The specification defines the rules in a confusing way</div>\n<p>\nThe JavaScript specification refers to the first sort-condition as <q>sort <code>b</code> to a lower index than <code>a</code></q>. But what this actually means is, <em>“sort <code>b</code> lower down the list than <code>a</code>”</em>, which in terms of numerical indexing is a <em>higher</em>, not lower index. It’s using the word <i>“index”</i> in a very confusing way; how I’ve expressed the conditions above should hopefully be much clearer.\n</p>\n</div>\n<p>\nSo the normal way of using the comparison function, is to perform and \nreturn a simple evaluation which produces the desired sort. For example,\n if the function returns <code>(a - b)</code>, then that will produce a <strong>numerical sort</strong>:\n</p>\n<pre><code>var numbers = [8,5];\n    \nnumbers.sort(function(a, b)\n{\n    return a - b;\t\n});\n    \nalert(numbers);    //produces [5,8]</code></pre>\n<p>\nWe can work through that with value examples: since <code>a = 8</code> and <code>b = 5</code>, then <code>(a - b) == 3</code>; three is greater than zero, so <code>b</code> will be sorted before <code>a</code>, producing the order <code>[5,8]</code>.\n</p>\n<p>\nSo inverse-numerical order can be produced simply by reversing the equation:\n</p>\n<pre><code>var numbers = [4,3,5,9];\n    \nnumbers.sort(function(a, b)\n{\n    return b - a;\t\n});\n    \nalert(numbers);    //produces [9,5,4,3]</code></pre>\n<p>\nWe can also create a comparison function that produces a dictionary \nsort, by defining three comparisons to evaluate each pair of strings — \nin computational terms, <code>\"a\"</code> is less than <code>\"b\"</code>, so we can directly compare the strings like that, to then return one of the three sorting values:\n</p>\n<pre><code>var letters = [\"R\",\"O\",\"F\",\"L\"];\n    \nletters.sort(function(a, b)\n{\n    var x = a.toLowerCase(), y = b.toLowerCase();\n    \n    return x &lt; y ? -1 : x &gt; y ? 1 : 0;\n});</code></pre>\n<p>\nNote how we pre-convert each of the strings to lower-case, which ensures\n we get a case-insensitive sort (if we didn’t do that then lower and \nupper-case letters would be sorted separately). We also assign the \nresults of those operations to new variables, because some browsers \nobject to having the arguments over-written.\n</p>\n<h2>Multi-dimensional sorting</h2>\n<p>\nIf <code>a</code> and <code>b</code> are \nthemselves arrays, well, directly comparing arrays using mathematical \nevaluation won’t produce the results we want; but we can compare their <em>inner values</em>\n and do the sort with them. This is how we sort multi-dimensional \narrays, using a value from each inner array as the sort criterion. All \nthe other inner values just ‘come along for the ride’, as it were, and \nthis way we can sort arrays containing a mixture of values. The \nfollowing example will sort the matrix by the number of sides on each \nshape:\n</p>\n<pre><code>var shapes = [\n    [5, \"Pentagon\"],\n    [3, \"Triangle\"],\n    [8, \"Octagon\"],\n    [4, \"Rectangle\"]\n    ];\n    \nshapes.sort(function(a, b)\n{\n    return a[0] - b[0];\n});</code></pre>\n<h2>Multi-criteria sorting</h2>\n<p>\nIf we can sort multi-dimensional arrays using only one of the values, couldn’t we also sort them using <em>both</em>\n their values, as independent criteria? The answer of course is, yes we \ncan, simply by adding further conditions to the logic inside the \ncomparison function. For example, use value <code>[0]</code> for primary sort, but if the two values are equal, then use value <code>[1]</code>\n for secondary sort. The following example uses shapes again, sorting \nfirst by the number of sides, and then by the alphabetical name of the \nshape, if the number of sides is equal:\n</p>\n<pre><code>var shapes = [\n    [4, \"Trapezium\"],\n    [5, \"Pentagon\"],\n    [3, \"Triangle\"],\n    [4, \"Rectangle\"],\n    [4, \"Square\"]\n    ];\n    \nshapes.sort(function(a, b)\n{\n    if(a[0] === b[0])\n    {\n        var x = a[1].toLowerCase(), y = b[1].toLowerCase();\n        \n        return x &lt; y ? -1 : x &gt; y ? 1 : 0;\n    }\n    return a[0] - b[0];\n});</code></pre>\n<p>\nThe principal can be extended as far as we need it to go — if the \nprimary test is equal, then sort by the secondary test; if the secondary\n test is equal then sort by the tertiary test; and so on, for as many \npoints of comparison as we have.\n</p>\n<h2>Sorting arrays of objects</h2>\n<p>\nAs the comparisons get more complex, it’s best to abandon the use of multi-dimensional arrays, and favor instead the use of <strong>arrays of object-literals</strong>. This makes it easier to see what’s going on in the comparison function, simply because we have <em>intuitive names</em> for the criteria. A neat example of this can be seen in the <a href=\"http://www.brothercake.com/site/resources/scripts/cssutilities/\">CSSUtilities</a> library, which parses document <abbr title=\"Cascading Style Sheets\">CSS</abbr> to create its own collection of rule-objects.\n</p>\n<p>\nThe overall rules collection is stored as an array, and each of its members is an object with properties like <code>specificity</code> (the “strength” of the rule as determined by its selector and inheritance context), <code>index</code> (the overall position of the rule within the rules collection), and <code>depth</code> (a numerical value for inherited rules that indicates the depth of the inheritance chain, ie. a rule inherited from <code>&lt;html&gt;</code> would have a value that’s greater (by one) than a rule inherited from <code>&lt;body&gt;</code>). The <code>specificity</code> itself is also an array of four independent values, one for each of the specificity categories (see <a href=\"http://www.w3.org/TR/css3-selectors/#specificity\"><cite>Calculating a selector’s specificity</cite></a> in the <abbr title=\"Cascading Style Sheets Level 3\">CSS3</abbr> specification, for details).\n</p>\n<p>\nSo how do we sort the rule-objects, considering all those values, to get\n an array that falls in absolute order of specificity? The first thing, \nof course, is to have a clear sense of the rules we’re trying to \nimplement:\n</p>\n<ol>\n<li>sort on specificity if the values are not equal:\n<ol type=\"a\">\n<li>sort on the first category if the values are not equal</li>\n<li>else sort on the second category if the values are not equal</li>\n<li>else sort on the third category if the values are not equal</li>\n<li>else sort on the fourth and final category</li>\n</ol>\n</li>\n<li>else sort on index if the values are not equal</li>\n<li>else sort on inheritance depth</li>\n</ol>\n<p>\nAnd then it’s just a case of expressing that in code:\n</p>\n<pre><code>rules.sort(function(a, b)\n{\n    if(a.specificity.toString() === b.specificity.toString()) \n    { \n        if(a.index === b.index) \n        { \n            return b.depth - a.depth; \n        }\n        return a.index - b.index; \n    }\n    \n    if(a.specificity[0] !== b.specificity[0]) \n    { \n        return a.specificity[0] - b.specificity[0]; \n    }\n    if(a.specificity[1] !== b.specificity[1]) \n    { \n        return a.specificity[1] - b.specificity[1]; \n    }\n    if(a.specificity[2] !== b.specificity[2]) \n    { \n        return a.specificity[2] - b.specificity[2]; \n    }\n    return a.specificity[3] - b.specificity[3];\n});</code></pre>\n<p>\nThe logic has been jigged around a bit, so that some of the rules are \nexpressed as inverse conditions; this is to improve the efficiency of \nthe function, so it takes less code to implement and it <strong>returns as soon as possible</strong>. There’s probably several different ways of coding the same conditions.\n</p>\n<h2>A note about stable sort</h2>\n<p>\nThe only real issue with this technique is the question of <strong>stable sort</strong>, which means — if <code>a</code> and <code>b</code> are the same then they don’t change with respect to each other. The problem is that stable sort is for <strong>sortable values themselves</strong>; but in these examples, <code>a</code> and <code>b</code> are <em>not</em> themselves the values we’re evaluating for the sort, they’re merely <em>containers</em>\n for the values that are. Therefore, a stable sort cannot be guaranteed,\n and what actually happens will vary in different browsers (some will \nleave them, some will move them)\n</p>\n<p>\nPersonally, I’ve never found a situation in which this is significant. \nBut if you do, the way to prevent it is to make sure that <strong>no two sortable objects are ever exactly the same</strong>.\n For example, you could assign a numeric index property to each of the \nobjects you’re sorting, reflecting their initial order in the array. \nThen in your comparison function, add a final condition for when all \nothers are equal, that sorts by the value of those indices. Since they \nreflect the original order and are all unique, they’ll effectively \nmaintain the order whenever no other sort occurs.\n</p>\n<h2>Sorted!</h2>\n<p>\nThe fundamental thing to remember is that <strong>the sort comparison function is nothing special or unusual</strong>,\n it’s just another function doing stuff and then returning. You can load\n external data, create elements for test-rendering, or perform any \nnumber of complex operations. As long as the function returns correctly —\n less than zero, greater than zero, or zero — then there are no specific\n limitations on what you can do to get there!&nbsp;</p>","tags":"javascript,array,sort","isStarred":"false","note":"","dateCreated":"Thu Mar 12 2015 16:12:42 GMT+0530 (India Standard Time)","dateModified":"Thu Mar 12 2015 16:12:42 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"5WNGuHwgReQe3oOw"}
{"id":"5qiIOV2KY8pRYG27","category":"css","categoryId":"29","title":"Using CSS mix-blend-mode for Better Product Photos","codes":[{"code":"<div id=\"suit\">\n<section>\n\t<h1>The Modern Pinstripe</h1>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 838\" id=\"suit-overlay\">\n<path d=\"M988.2,603.8c-1-0.4-0.3-0.4-0.3-1.5c-8-2.1-12.6-9.7-15.3-17.1\nc0.5,0.4,1,0.8,1.5,1.2c1.9-13.8-5.7-19.1-16.2-21c-3.6-0.6-6.4,2.4-10,0.3c-15.3-8.7-20.5-25.5-45.4-25.1c-7-5.4-6.6-7.9-20.1-7.7\nc0-0.1,0-0.2,0-0.3c1-0.2,2-0.4,2.9-0.6c-2.3-5.8-8.6-28.5-16.8-26.6c-2.3,1.5-4.5,3-6.8,4.4c-6-5.2-9.1-13.9-13.3-21\nc-3.1-4.1-6.3-8.3-9.4-12.4c-1.4-2.8-1.4-5.5-2.9-8c-6.8-11.2-22.4-27.9-33.9-34.2c-1.1,2.5-2.2,4.9-3.2,7.4\nc-8.9,4.2-9.9-6.1-13.3-9.4c-2.6-2.6-8.8-1.6-11.2-4.4c-5.3-6.2-6.5-16.9-10-24.8c-1.4-3.1-4-4.9-5.9-7.4c-1.7-2.3-1.4-4.4-2.1-6.5\nc-1.5-2-2.9-3.9-4.4-5.9c-4.3,0-5.5,1.6-9.1,2.7c0.1,3.2,0.8,8.1,2.7,9.7c1.1,3.9-2.9,9.5-3.8,12.7c-0.5,0.5-1,1-1.5,1.5\nc0.7,0,1.4,0,2.1,0c0,0.1,0,0.2,0,0.3c-3.9,1.2-9.2,4.4-12.4,3.2c-1.2-2.1,0.5-3-0.3-5.9c-0.6-1.7-1.2-3.3-1.8-5\nc0.1-6.1,0.2-12.2,0.3-18.3c-1.5-6.4-2.9-12.8-4.4-19.2c-2,0-3.9,0-5.9,0c-5.5-12.8-8.9-36.6,7.1-39.2c0.2-0.3,0.4-0.6,0.6-0.9\nc-12.1,0-14.9,4.2-23.3,6.2c-4.1,0.9-7.2,0.8-10.6,3c-2.9,3-5.9,6.1-8.8,9.1c-4.1,0.1-8.3,0.2-12.4,0.3c-5,1.2-8.3,4.1-12.1,6.5\nc-4-2.2-8,0.1-11.2-1.8c-6,9.1-9.9,1.7-20.1,3.8c-4.9,1.2-9.8,2.4-14.7,3.5c-5.2-1-12.1-7.3-18-9.4c-4.3-0.7-8.7-1.4-13-2.1\nc-3-1.5-3.7-6-7.4-7.4c-8.7-3.2-15.6,4.6-23.3,5.6c-6.4,0.9-25.2-13.2-28.6-16.8c-0.2,0-0.4,0-0.6,0c2.2-2.7,4.3-5.3,6.5-8\nc3.3-5.4,3.3-11.7,8.3-15.3c-0.1-0.7-0.2-1.4-0.3-2.1c-0.6,0.1-1.2,0.2-1.8,0.3c0.3-0.4,0.6-0.8,0.9-1.2\nc-6.9-9.7-15.6-18.2-23.9-26.6c-3.2-3.2-5.2-8-10.6-8.9c-0.2-0.3-0.4-0.6-0.6-0.9c0.5-0.1,1-0.2,1.5-0.3\nc-4.5-9.6-27-17.9-34.8-27.7c-4.3-5.4-8.6-15.1-15.9-17.1c-9-2.5-13.8,4.8-19.8,6.8c-0.1,8.3-3.5,13-4.7,19.8\nc0.9,5.9,1.8,11.8,2.7,17.7c-2.8,4.7-5.5,9.4-8.3,14.2c-0.4,1.6-0.8,3.1-1.2,4.7c-0.1,0.1-0.2,0.2-0.3,0.3c-3.8,3.5-9.8,4.4-13,8.6\nc-1.8,3.1-3.5,6.3-5.3,9.4c-3.6,2-7.3,3.9-10.9,5.9c-3.8,2.5-4.7,9.4-9.1,10.9c0.4,0.5,0.8,1,1.2,1.5c-1.6,2.1-3.1,4.1-4.7,6.2\nc-9.1,11.5-20.7,22.6-26.8,37.2c-0.6,1.5,0.2,5.9-1.2,8.3c-2.6,4.6-6.8,10.1-10.9,13.3c-1.3,0.9-2.6,1.8-3.8,2.7\nc-2.6,4.5-0.4,13,2.9,14.5c0.2,0.3,0.4,0.6,0.6,0.9c-0.5,0.5-1,1-1.5,1.5c6.2,17.4-8.4,39.1-12.4,52.2c-2.4,7.9-1,20.7-2.9,28.6\nc-1.2,0.5-1.3,0.2-2.7-0.6c-0.1,0.1-0.2,0.2-0.3,0.3c0.3,0.5,0.6,1,0.9,1.5c-3.3,1.9-6.7,3.7-10,5.6c-4.9,3.5-5.6,11.3-8.8,16.5\nc-3.6,5.8-8.4,9.2-11.2,16.5c-2.2,5.9-3.1,12.3-4.4,19.2c-0.4,3.1-0.8,6.3-1.2,9.4c-2.9,3.5-5.9,7.1-8.8,10.6\nc-3.8,6.4-7.7,12.8-11.5,19.2c-8.1,10.7-18.9,19.5-27.1,30.4c-3,4.3-6.1,8.7-9.1,13c-2.4,4-2.9,9.6-6.5,12.4\nc0.2-0.7,0.4-1.4,0.6-2.1c-0.3-0.2-0.6-0.4-0.9-0.6c-2.1,2.7-4.1,5.3-6.2,8c-0.4,1.8-0.8,3.5-1.2,5.3c-1.9,1.8-3.7,3.5-5.6,5.3\nc-2.2,4-4.3,8.1-6.5,12.1c-4.1,5.8-11.5,9.8-13.9,17.1c-0.6,1.1-0.3,0.6,0.3,1.8c-5.2-0.4-5.9,5.4-8.6,8.6c-2.4,2-4.7,3.9-7.1,5.9\nc-0.4,0.8-0.2,0.1,0.3,1.2c-1.2,0.6-2.4,1.2-3.5,1.8c0.5-0.6,1-1.2,1.5-1.8c-4.9,1.5-9.1,7.8-3.8,11.8c3.2,1.4,6.5,2.8,9.7,4.1\nc3.6,2.4,7.3,4.7,10.9,7.1c3.1,1.3,6.3,2.6,9.4,3.8c3.4,2.9,6.9,5.7,10.3,8.6c4,2.6,12.2,4.4,12.7,10.3c1.6,0.9,3.6,1.3,6.2,1.2\nc1.7-1.5,2.7-3.3,2.7-6.5c0.7-0.6,1.4-1.2,2.1-1.8c-0.2,0.5-0.4,1-0.6,1.5c11.8-3.7,20.3-22.5,27.4-31.9\nc5.7-5.1,11.4-10.2,17.1-15.3c5.3-7.6,10.6-15.1,15.9-22.7c4.7-6.3,10.8-11.5,15-18.3c5.3-9.4,10.6-18.9,15.9-28.3\nc1.4-1.8,3.7-2.7,5-4.7c9-13.4,13.9-33.6,26.5-43.4c0.2,13.1,2.9,23.4,5,33.9c0,2.2,0,4.3,0,6.5c1.9,2.8,3.7,5.5,5.6,8.3\nc0.8,4,1.6,8.1,2.4,12.1c2.8,5.5,5.5,11,8.3,16.5c2.1,7.1,4.1,14.2,6.2,21.2c3.3,5.9,6.7,11.8,10,17.7c0.5,3.7,1,7.5,1.5,11.2\nc3.4,10.4,15.1,16.1,15.9,28.9c6,0.1,12,0.2,18,0.3c21.7,4.2,43.5,8.5,65.2,12.7c9.3,1.7,17-2.6,23.9-3.8c2.7,0.2,5.3,0.4,8,0.6\nc11.3-1.9,22.6-3.7,33.9-5.6c15.8-3.5,35.6-5.9,47.8-13c1.1-0.8,0.7-1.1,0.9-2.1c4.3-1.1,10.7-0.5,15.9-1.5\nc9-1.7,28.7-5.1,33.9-10.3c5.4-5.4,1.5-14.2,2.7-22.1c3.3-23.4,0.4-49.6-4.4-70.2c-1.1-4.5-8.4-22.4-7.1-26.6\nc2.6-4.4,5.1-8.9,7.7-13.3c4.4-7.3,8.8-14.6,13.3-21.8c4.8-6,12.2-10.2,18.3-15c3.9-4.9,7.9-9.8,11.8-14.8c0.3,0,0.6,0,0.9,0\nc18.1,12.5,32.6,29.2,49.6,42.8c8.9,7.3,17.9,14.6,26.8,21.8c7.2,7.3,9.4,21.4,18,27.1c5.6,3.8,13.9,3.7,20.9,6.2\nc9,4.1,18.1,8.3,27.1,12.4c10.1,3.9,21.5,4.7,29.8,10c-5.1,11.2,2.3,20.4,5,28.6c1.7,5.1-0.3,8.6,3.2,11.5c1.3,0.3,2.5,0.3,3.5-0.3\nc2.4-1.2,4.5-5.6,5.3-8.3c2.1-2,4.1-3.9,6.2-5.9c4.6,6.6,6.5,2.9,13.6,6.2c3.1,2.4,6.3,4.7,9.4,7.1c0.1,2.1,0.2,4.1,0.3,6.2\nc1.3,3.4,4.1,5.1,5,9.1c1.4,0.6,17.8-12.3,19.8-14.8c0.9-1.5,1.8-3,2.7-4.4c2.7-1.3,5.3-2.6,8-3.8c5.3-3.3,10-8.8,13.6-13.9\nc4.6-7.5,9.2-15,13.9-22.4c2.1-6.2,4.1-12.4,6.2-18.6c0.1,0,0.2,0,0.3,0c2.1-2.4,7.3-1.8,10.3-3.2c0.9-0.8,1.8-1.6,2.7-2.4\nC996.6,609.4,993.1,607.2,988.2,603.8z M549.6,509.1c-5.2,6.8-9.7,14.1-17.7,18c-1.6-1.9-0.5-3.5-1.2-5.3\nc-3.3-8.9-10.3-20.5-19.5-23.6c-1.3-3.8,7.5-22.8,8.6-29.2c18.3-8.4,39-23.1,39.8-49.6c22.2,2.2,42.4,9.1,64,10.9\nc-1,2.9-1.2,4.6-0.9,8.6c-13.1,14.5-31.9,23.7-45.1,38.1c-4.9,6.5-9.8,13-14.7,19.5C558.4,500.6,554,504.8,549.6,509.1z M636,697.3\nc-1.3,0.9-2.9,1.1-4.4,2.1c-3.4,2.9-6.9,5.7-10.3,8.6c-5.8,3.1-14.1-3.1-20.1-1.8c-2.1,1.4-4.1,2.8-6.2,4.1\nc-5.3,1.4-8.6-3.4-12.1-4.4c-4.3-1.3-8.7-1.8-12.4-3c-3.1-5.3,10-17.7,12.7-21.5c4.4-7,8.8-14,13.3-21c3.3-4.1,6.7-8.3,10-12.4\nc3.4-6.6,6.9-13.2,10.3-19.8c2.7-4.5,6.2-8.3,9.1-12.4c0.7,0,1.4,0,2.1,0c1.3,2.2,0.6,5.4,1.5,8.6c1.1,1.9,2.2,3.7,3.2,5.6\nc-0.1,2.9-0.2,5.7-0.3,8.6c0.9,3.7,3,7.7,3.8,12.4C639,666,636.2,682.7,636,697.3z\"/>\n</svg>\n</section>\n\n<p id=\"coloroptions\">Available in: <span data-value=\"#00f\">Blue</span><span data-value=\"#fff\">Ivory</span><span data-value=\"#555\">Charcoal</span>\n<small style=\"display: block\">Chrome users require \"Experimental Web Features\" enabled in chrome://flags</small>\n</div>","codeLanguage":"html"},{"code":"#suit { \n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  background: #d0d1cc;\n  max-width: 800px;\n  margin: 0 auto;\n  margin-bottom: 2rem;\n}\n#suit section { \n  position: relative; \n  padding-top: 70%; \n  background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/4273/modern-pinstripe.jpg);\n  background-size: contain;\n}\n#suit h1 {\n  position: absolute; \n  top: 10px;\n  left: 10px;\n  font-size: 3rem; \n  margin-top: 0; \n  font-weight: 100;\n}\n#suit svg { \n  mix-blend-mode: multiply;\n  position: absolute; \n  width: 100%;\n  height: 100%;\n  top: 0;\n  display: none;\n}\n#suit p { \n  margin-left: 1rem;\n  padding-bottom: 1rem;\n}\n#suit button, #suit span {   \n  margin: .5rem; \n}\n#suit svg path {\n  fill: transparent;\n}\n@media all and (max-width: 600px) {\n  #suit h1 {\n    font-size: 2rem;\n  }\n}","codeLanguage":"css"},{"code":"function changecolor() {\n\tsuitpath.style.fill = this.value;\n}\n\nfunction suitstyles(element) {\n element.addEventListener('click', changecolor, false);\n}\nvar suit = document.querySelector(\"#suit-overlay\"),\nsuitpath = suit.getElementsByTagName(\"path\")[0],\ncoloroptions = document.querySelectorAll(\"#coloroptions span\"),\nsupportsBlend = CSS.supports(\"mix-blend-mode\", \"multiply\");\n\nif (supportsBlend == true) {\n\tsuit.style.display = \"block\";\n\tfor (var i=0;i<coloroptions.length;i++) {\n\t\tvar buttonconvert = document.createElement(\"button\");\n\t\tbuttonconvert.innerHTML = coloroptions[i].innerHTML;\n\t\tbuttonconvert.value = coloroptions[i].getAttribute(\"data-value\")\n\t\tcoloroptions[i].parentNode.replaceChild(buttonconvert, coloroptions[i]);\n\t}\n\tvar buttons = [].slice.call(document.getElementsByTagName(\"button\"));\nbuttons.forEach(suitstyles);\n}","codeLanguage":"javascript"}],"description":"<header id=\"suit-overlay\"><div>\t<section>\t\t<h1>The Modern Pinstripe</h1>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 838\">\t\t\t<path d=\"M988.2,603.8c-1-0.4-0.3-0.4-0.3-1.5c-8-2.1-12.6-9.7-15.3-17.1\t\t\tc0.5,0.4,1,0.8,1.5,1.2c1.9-13.8-5.7-19.1-16.2-21c-3.6-0.6-6.4,2.4-10,0.3c-15.3-8.7-20.5-25.5-45.4-25.1c-7-5.4-6.6-7.9-20.1-7.7\t\t\tc0-0.1,0-0.2,0-0.3c1-0.2,2-0.4,2.9-0.6c-2.3-5.8-8.6-28.5-16.8-26.6c-2.3,1.5-4.5,3-6.8,4.4c-6-5.2-9.1-13.9-13.3-21\t\t\tc-3.1-4.1-6.3-8.3-9.4-12.4c-1.4-2.8-1.4-5.5-2.9-8c-6.8-11.2-22.4-27.9-33.9-34.2c-1.1,2.5-2.2,4.9-3.2,7.4\t\t\tc-8.9,4.2-9.9-6.1-13.3-9.4c-2.6-2.6-8.8-1.6-11.2-4.4c-5.3-6.2-6.5-16.9-10-24.8c-1.4-3.1-4-4.9-5.9-7.4c-1.7-2.3-1.4-4.4-2.1-6.5\t\t\tc-1.5-2-2.9-3.9-4.4-5.9c-4.3,0-5.5,1.6-9.1,2.7c0.1,3.2,0.8,8.1,2.7,9.7c1.1,3.9-2.9,9.5-3.8,12.7c-0.5,0.5-1,1-1.5,1.5\t\t\tc0.7,0,1.4,0,2.1,0c0,0.1,0,0.2,0,0.3c-3.9,1.2-9.2,4.4-12.4,3.2c-1.2-2.1,0.5-3-0.3-5.9c-0.6-1.7-1.2-3.3-1.8-5\t\t\tc0.1-6.1,0.2-12.2,0.3-18.3c-1.5-6.4-2.9-12.8-4.4-19.2c-2,0-3.9,0-5.9,0c-5.5-12.8-8.9-36.6,7.1-39.2c0.2-0.3,0.4-0.6,0.6-0.9\t\t\tc-12.1,0-14.9,4.2-23.3,6.2c-4.1,0.9-7.2,0.8-10.6,3c-2.9,3-5.9,6.1-8.8,9.1c-4.1,0.1-8.3,0.2-12.4,0.3c-5,1.2-8.3,4.1-12.1,6.5\t\t\tc-4-2.2-8,0.1-11.2-1.8c-6,9.1-9.9,1.7-20.1,3.8c-4.9,1.2-9.8,2.4-14.7,3.5c-5.2-1-12.1-7.3-18-9.4c-4.3-0.7-8.7-1.4-13-2.1\t\t\tc-3-1.5-3.7-6-7.4-7.4c-8.7-3.2-15.6,4.6-23.3,5.6c-6.4,0.9-25.2-13.2-28.6-16.8c-0.2,0-0.4,0-0.6,0c2.2-2.7,4.3-5.3,6.5-8\t\t\tc3.3-5.4,3.3-11.7,8.3-15.3c-0.1-0.7-0.2-1.4-0.3-2.1c-0.6,0.1-1.2,0.2-1.8,0.3c0.3-0.4,0.6-0.8,0.9-1.2\t\t\tc-6.9-9.7-15.6-18.2-23.9-26.6c-3.2-3.2-5.2-8-10.6-8.9c-0.2-0.3-0.4-0.6-0.6-0.9c0.5-0.1,1-0.2,1.5-0.3\t\t\tc-4.5-9.6-27-17.9-34.8-27.7c-4.3-5.4-8.6-15.1-15.9-17.1c-9-2.5-13.8,4.8-19.8,6.8c-0.1,8.3-3.5,13-4.7,19.8\t\t\tc0.9,5.9,1.8,11.8,2.7,17.7c-2.8,4.7-5.5,9.4-8.3,14.2c-0.4,1.6-0.8,3.1-1.2,4.7c-0.1,0.1-0.2,0.2-0.3,0.3c-3.8,3.5-9.8,4.4-13,8.6\t\t\tc-1.8,3.1-3.5,6.3-5.3,9.4c-3.6,2-7.3,3.9-10.9,5.9c-3.8,2.5-4.7,9.4-9.1,10.9c0.4,0.5,0.8,1,1.2,1.5c-1.6,2.1-3.1,4.1-4.7,6.2\t\t\tc-9.1,11.5-20.7,22.6-26.8,37.2c-0.6,1.5,0.2,5.9-1.2,8.3c-2.6,4.6-6.8,10.1-10.9,13.3c-1.3,0.9-2.6,1.8-3.8,2.7\t\t\tc-2.6,4.5-0.4,13,2.9,14.5c0.2,0.3,0.4,0.6,0.6,0.9c-0.5,0.5-1,1-1.5,1.5c6.2,17.4-8.4,39.1-12.4,52.2c-2.4,7.9-1,20.7-2.9,28.6\t\t\tc-1.2,0.5-1.3,0.2-2.7-0.6c-0.1,0.1-0.2,0.2-0.3,0.3c0.3,0.5,0.6,1,0.9,1.5c-3.3,1.9-6.7,3.7-10,5.6c-4.9,3.5-5.6,11.3-8.8,16.5\t\t\tc-3.6,5.8-8.4,9.2-11.2,16.5c-2.2,5.9-3.1,12.3-4.4,19.2c-0.4,3.1-0.8,6.3-1.2,9.4c-2.9,3.5-5.9,7.1-8.8,10.6\t\t\tc-3.8,6.4-7.7,12.8-11.5,19.2c-8.1,10.7-18.9,19.5-27.1,30.4c-3,4.3-6.1,8.7-9.1,13c-2.4,4-2.9,9.6-6.5,12.4\t\t\tc0.2-0.7,0.4-1.4,0.6-2.1c-0.3-0.2-0.6-0.4-0.9-0.6c-2.1,2.7-4.1,5.3-6.2,8c-0.4,1.8-0.8,3.5-1.2,5.3c-1.9,1.8-3.7,3.5-5.6,5.3\t\t\tc-2.2,4-4.3,8.1-6.5,12.1c-4.1,5.8-11.5,9.8-13.9,17.1c-0.6,1.1-0.3,0.6,0.3,1.8c-5.2-0.4-5.9,5.4-8.6,8.6c-2.4,2-4.7,3.9-7.1,5.9\t\t\tc-0.4,0.8-0.2,0.1,0.3,1.2c-1.2,0.6-2.4,1.2-3.5,1.8c0.5-0.6,1-1.2,1.5-1.8c-4.9,1.5-9.1,7.8-3.8,11.8c3.2,1.4,6.5,2.8,9.7,4.1\t\t\tc3.6,2.4,7.3,4.7,10.9,7.1c3.1,1.3,6.3,2.6,9.4,3.8c3.4,2.9,6.9,5.7,10.3,8.6c4,2.6,12.2,4.4,12.7,10.3c1.6,0.9,3.6,1.3,6.2,1.2\t\t\tc1.7-1.5,2.7-3.3,2.7-6.5c0.7-0.6,1.4-1.2,2.1-1.8c-0.2,0.5-0.4,1-0.6,1.5c11.8-3.7,20.3-22.5,27.4-31.9\t\t\tc5.7-5.1,11.4-10.2,17.1-15.3c5.3-7.6,10.6-15.1,15.9-22.7c4.7-6.3,10.8-11.5,15-18.3c5.3-9.4,10.6-18.9,15.9-28.3\t\t\tc1.4-1.8,3.7-2.7,5-4.7c9-13.4,13.9-33.6,26.5-43.4c0.2,13.1,2.9,23.4,5,33.9c0,2.2,0,4.3,0,6.5c1.9,2.8,3.7,5.5,5.6,8.3\t\t\tc0.8,4,1.6,8.1,2.4,12.1c2.8,5.5,5.5,11,8.3,16.5c2.1,7.1,4.1,14.2,6.2,21.2c3.3,5.9,6.7,11.8,10,17.7c0.5,3.7,1,7.5,1.5,11.2\t\t\tc3.4,10.4,15.1,16.1,15.9,28.9c6,0.1,12,0.2,18,0.3c21.7,4.2,43.5,8.5,65.2,12.7c9.3,1.7,17-2.6,23.9-3.8c2.7,0.2,5.3,0.4,8,0.6\t\t\tc11.3-1.9,22.6-3.7,33.9-5.6c15.8-3.5,35.6-5.9,47.8-13c1.1-0.8,0.7-1.1,0.9-2.1c4.3-1.1,10.7-0.5,15.9-1.5\t\t\tc9-1.7,28.7-5.1,33.9-10.3c5.4-5.4,1.5-14.2,2.7-22.1c3.3-23.4,0.4-49.6-4.4-70.2c-1.1-4.5-8.4-22.4-7.1-26.6\t\t\tc2.6-4.4,5.1-8.9,7.7-13.3c4.4-7.3,8.8-14.6,13.3-21.8c4.8-6,12.2-10.2,18.3-15c3.9-4.9,7.9-9.8,11.8-14.8c0.3,0,0.6,0,0.9,0\t\t\tc18.1,12.5,32.6,29.2,49.6,42.8c8.9,7.3,17.9,14.6,26.8,21.8c7.2,7.3,9.4,21.4,18,27.1c5.6,3.8,13.9,3.7,20.9,6.2\t\t\tc9,4.1,18.1,8.3,27.1,12.4c10.1,3.9,21.5,4.7,29.8,10c-5.1,11.2,2.3,20.4,5,28.6c1.7,5.1-0.3,8.6,3.2,11.5c1.3,0.3,2.5,0.3,3.5-0.3\t\t\tc2.4-1.2,4.5-5.6,5.3-8.3c2.1-2,4.1-3.9,6.2-5.9c4.6,6.6,6.5,2.9,13.6,6.2c3.1,2.4,6.3,4.7,9.4,7.1c0.1,2.1,0.2,4.1,0.3,6.2\t\t\tc1.3,3.4,4.1,5.1,5,9.1c1.4,0.6,17.8-12.3,19.8-14.8c0.9-1.5,1.8-3,2.7-4.4c2.7-1.3,5.3-2.6,8-3.8c5.3-3.3,10-8.8,13.6-13.9\t\t\tc4.6-7.5,9.2-15,13.9-22.4c2.1-6.2,4.1-12.4,6.2-18.6c0.1,0,0.2,0,0.3,0c2.1-2.4,7.3-1.8,10.3-3.2c0.9-0.8,1.8-1.6,2.7-2.4\t\t\tC996.6,609.4,993.1,607.2,988.2,603.8z M549.6,509.1c-5.2,6.8-9.7,14.1-17.7,18c-1.6-1.9-0.5-3.5-1.2-5.3\t\t\tc-3.3-8.9-10.3-20.5-19.5-23.6c-1.3-3.8,7.5-22.8,8.6-29.2c18.3-8.4,39-23.1,39.8-49.6c22.2,2.2,42.4,9.1,64,10.9\t\t\tc-1,2.9-1.2,4.6-0.9,8.6c-13.1,14.5-31.9,23.7-45.1,38.1c-4.9,6.5-9.8,13-14.7,19.5C558.4,500.6,554,504.8,549.6,509.1z M636,697.3\t\t\tc-1.3,0.9-2.9,1.1-4.4,2.1c-3.4,2.9-6.9,5.7-10.3,8.6c-5.8,3.1-14.1-3.1-20.1-1.8c-2.1,1.4-4.1,2.8-6.2,4.1\t\t\tc-5.3,1.4-8.6-3.4-12.1-4.4c-4.3-1.3-8.7-1.8-12.4-3c-3.1-5.3,10-17.7,12.7-21.5c4.4-7,8.8-14,13.3-21c3.3-4.1,6.7-8.3,10-12.4\t\t\tc3.4-6.6,6.9-13.2,10.3-19.8c2.7-4.5,6.2-8.3,9.1-12.4c0.7,0,1.4,0,2.1,0c1.3,2.2,0.6,5.4,1.5,8.6c1.1,1.9,2.2,3.7,3.2,5.6\t\t\tc-0.1,2.9-0.2,5.7-0.3,8.6c0.9,3.7,3,7.7,3.8,12.4C639,666,636.2,682.7,636,697.3z\"></path>\n</svg>\t</section>\t<p>Available in: <button value=\"#00f\">Blue</button><button value=\"#fff\">Ivory</button><button value=\"#555\">Charcoal</button>\t\t<small>Chrome users require \"Experimental Web Features\" enabled in <kdb>chrome://flags</kdb></small>\t</p>\n</div>\n</header>\t<div>\t\t<h1><a href=\"/blog/974/Using-CSS-mix-blend-mode-for-Better-Product-Photos\" rel=\"bookmark\">Using CSS mix-blend-mode for Better Product Photos</a></h1>\n<span><a href=\"/blog/css\">css</a> / <a href=\"/blog/css/blend-modes\">blend modes</a></span><div>\t\t\t<a rel=\"author\" href=\"https://plus.google.com/+DudleyStorey/\">Dudley Storey</a>\t\t</div>\n<div>\t\t\t\t\t</div>\n<p><span>Estimated </span>reading time: 4 min<span>ute</span><span>s</span></p>\n</div>\n<div><div itemprop=\"articleBody\"><div><p>Visualizing products with multiple options is always challenging: customers expect to view every variation of their purchase, but making those options available usually involves a lot of <a href=\"/blog/tools/photoshop\" rel=\"tag\">PhotoShop</a> work, multiple images, and custom JavaScript.\t\t\t</p>\n<p>Freshly supported in Chrome (under Flags: see the bottom of this article for guidance), along with the majority of other browsers, <code>mix-blend-mode</code> is the equivalent of <code>background-blend-mode</code> for arbitrary HTML elements: it controls how a layer affects the appearance of elements underneath it, using the principles of Adobe’s Blend modes. I’ll share much more information about <code>mix-blend-mode</code> in future articles, but I thought a practical demonstration using <a href=\"/blog/937/Creating-Progressively-Enhanced-UI-Elements-with-JavaScript\">progressive enhancement principles</a> would be a good place to start.\n<script>\nfunction changecolor() {\nsuitpath.style.fill = this.value;\n}\nfunction suitstyles(element) {\nelement.addEventListener('click', changecolor, false);\n}\nvar suit = document.querySelector(\"#suit-overlay\"),\nsuitpath = suit.getElementsByTagName(\"path\")[0],\ncoloroptions = document.querySelectorAll(\"#coloroptions span\");\nsuit.style.display = \"block\";\nfor (var i = 0; i < coloroptions.length; i++) {\nvar buttonconvert = document.createElement(\"button\");\nbuttonconvert.innerHTML = coloroptions[i].innerHTML;\nbuttonconvert.value = coloroptions[i].getAttribute(\"data-value\").coloroptions[i].parentNode.replaceChild(buttonconvert, coloroptions[i]);\n}\nvar buttons = [].slice.call(document.querySelectorAll(\"#suit-overlay button\"));\nbuttons.forEach(suitstyles);\n</script><!----></p>\n</div>\n<p>Let’s use a fashion photograph as an example. The pinstripe suit shown might have three color options: ivory (the default), blue and charcoal.&nbsp; The basic markup would look something like this:\t\t</p>\n<pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>suit<span>\"</span></span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;</span>section</span><span>&gt;</span></span></code></pre>\n<pre><code>      <span><span><span>&lt;</span>h1</span><span>&gt;</span></span>The Modern Pinstripe<span><span><span>&lt;/</span>h1</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;/</span>section</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>coloroptions<span>\"</span></span><span>&gt;</span></span>Available in: </code></pre>\n<pre><code><span><span><span>&lt;</span>span</span> <span>data-value</span><span><span>=</span><span>\"</span>#00f<span>\"</span></span><span>&gt;</span></span>Blue<span><span><span>&lt;/</span>span</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;</span>span</span> <span>data-value</span><span><span>=</span><span>\"</span>#fff<span>\"</span></span><span>&gt;</span></span>Ivory<span><span><span>&lt;/</span>span</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;</span>span</span> <span>data-value</span><span><span>=</span><span>\"</span>#333<span>\"</span></span><span>&gt;</span></span>Charcoal<span><span><span>&lt;/</span>span</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;/</span>div</span><span>&gt;</span></span></code></pre>\n<p>We’ll come to the <code><span><span><span>&lt;</span>span</span><span>&gt;</span></span></code> elements and <code>data attributes</code> in a moment. For right now, it’s worthwhile to note that a good rule of thumb for progressive enhancement is that the DOM will validate both <em>before and after </em>we apply any JavaScript.\t\t\t</p>\n<p>I’m placing the image in a <code><span><span><span>&lt;</span>section</span><span>&gt;</span></span></code> background for slightly easier layering and scaling, although it could readily be a real image:\t\t\t</p>\n<div>\t\t\t<pre><code><span>#suit </span><span>{</span> </code></pre>\n<pre><code><span>position</span><span>:</span> relative<span>;</span></code></pre>\n<pre><code><span>padding-top</span><span>:</span> 70%<span>;</span> </code></pre>\n<pre><code><span>background-image</span><span>:</span> <span>url(modern-pinstripe.jpg)</span><span>;</span></code></pre>\n<pre><code><span>background-size</span><span>:</span> contain<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n</div>\n<p><code><span>background-size</span><span>:</span> contain</code> ensures that the background image always fills the available space without being stretched; <code>padding-top</code> is used to make sure that the <code><span><span><span>&lt;</span>section</span><span>&gt;</span></span></code> is the correct aspect ratio to contain the image and the SVG we’re about to add.\t\t</p>\n<h2>Painting By Numbers</h2>\n<p>The first step to making the color overlay is the same process that we would use to retouch the photograph: create a selection. I used the magnetic lasso in PhotoShop and touched up the result using Quick Mask, but there are many possible methods.\t\t\t</p>\n<p>Once the selection is complete, I saved it as a path in PhotoShop and copied it into Illustrator as a Compound Path, using an Artboard with the same dimensions as the original image.&nbsp; Exporting the result as SVG will give me a result that looks something like this:\t\t\t</p>\n<figure>\t\t\t<img src=\"/assets/svg/suit-path.svg\" alt=\"SVG shape of the suit overlay\" pagespeed_url_hash=\"1240593676\" onload=\"pagespeed.CriticalImages.checkImageForCriticality(this);\">\t\t\t<figcaption>SVG overlay</figcaption>\t\t</figure>\t\t<p>The SVG code is placed directly inside the <code><span><span><span>&lt;</span>section</span><span>&gt;</span></span></code>:\t\t</p>\n<pre><code><span><span><span>&lt;</span>section</span><span>&gt;</span></span></code></pre>\n<pre><code>      <span><span><span>&lt;</span>h1</span><span>&gt;</span></span>The Modern Pinstripe<span><span><span>&lt;/</span>h1</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;</span>svg</span> <span>xmlns</span><span><span>=</span><span>\"</span>http://www.w3.org/2000/svg<span>\"</span></span> <span>viewBox</span><span><span>=</span><span>\"</span>0 0 1200 838<span>\"</span></span> <span>id</span><span><span>=</span><span>\"</span>suit-overlay<span>\"</span></span><span>&gt;</span></span></code></pre>\n<pre><code>&lt;path d=\"M988.2,603.8c-1-0.4-0.3-0.4-0…. /&gt;</code></pre>\n<pre><code><span><span><span>&lt;/</span>svg</span><span>&gt;</span></span></code></pre>\n<pre><code><span><span><span>&lt;/</span>section</span><span>&gt;</span></span></code></pre>\n<p>…and then styled using CSS so that the <a href=\"/blog/744/Make-SVG-Responsive\">SVG is responsive</a>, but does <em>not</em> display by default:\t\t\t</p>\n<div>\t\t\t<pre><code><span>#suit svg </span><span>{</span> </code></pre>\n<pre><code>      <span>position</span><span>:</span> absolute<span>;</span> </code></pre>\n<pre><code>      <span>width</span><span>:</span> 100%<span>;</span></code></pre>\n<pre><code><span>height</span><span>:</span> 100%<span>;</span></code></pre>\n<pre><code>      <span>top</span><span>:</span> 0<span>;</span></code></pre>\n<pre><code><span>display</span><span>:</span> none<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n<pre><code><span>#suit svg path </span><span>{</span></code></pre>\n<pre><code>      <span>fill</span><span>:</span> transparent<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n</div>\n<p>This creates our initial conditions: a product image with a description of available colors.\t\t</p>\n<h2>Mixing It Up</h2>\n<p>The SVG overlay matches the area of the suit in the product image, but to recolor the image successfully, we must make the SVG a <em>blending layer: </em>\t\t\t</p>\n<div>\t\t\t<pre><code><span>#suit svg </span><span>{</span> </code></pre>\n<pre><code>      <span>mix-blend-mode</span><span>:</span> multiply<span>;</span>\t\t\t<span>}</span></code></pre>\n</div>\n<p>The image won’t change, as the SVG is still invisible. Let’s change that with some JavaScript at the end of the document:\t\t\t</p>\n<div>\t\t\t<pre><code><span>function changecolor() </span><span>{</span></code></pre>\n<pre><code>      suitpath.style.fill = this.value<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n<pre><code><span>function suitstyles(element) </span><span>{</span></code></pre>\n<pre><code> element.addEventListener(<span>'click'</span>, changecolor, false)<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n<pre><code>var suit = document.querySelector(<span>\"#suit-overlay\"</span>),</code></pre>\n<pre><code>suitpath = suit.getElementsByTagName(<span>\"path\"</span>)[0],</code></pre>\n<pre><code>coloroptions = document.querySelectorAll(<span>\"#coloroptions span\"</span>)<span>;</span></code></pre>\n<pre><code>supportsBlend = CSS.supports(<span>\"mix-blend-mode\"</span>, <span>\"multiply\"</span>)<span>;</span></code></pre>\n<pre><code><span>if (supportsBlend == true) </span><span>{</span></code></pre>\n<pre><code>      suit.style.display = <span>\"block\"</span><span>;</span></code></pre>\n<pre><code>      <span>for (var i=0;i&lt;coloroptions.length;i++) </span><span>{</span></code></pre>\n<pre><code>            var buttonconvert = document.createElement(<span>\"button\"</span>)<span>;</span></code></pre>\n<pre><code>            buttonconvert.innerHTML = coloroptions[i].innerHTML<span>;</span></code></pre>\n<pre><code>            buttonconvert.value = coloroptions[i].getAttribute(<span>\"data-value\"</span>)</code></pre>\n<pre><code>            coloroptions[i].parentNode.replaceChild(buttonconvert, coloroptions[i])<span>;</span></code></pre>\n<pre><code>      <span>}</span></code></pre>\n<pre><code>      var buttons = [].slice.call(document.getElementsByTagName(<span>\"button\"</span>))<span>;</span></code></pre>\n<pre><code>buttons.forEach(suitstyles)<span>;</span></code></pre>\n<pre><code><span>}</span></code></pre>\n</div>\n<p>A quick breakdown of the script, starting with the variables:\t\t\t</p>\n<ul>\n<li><code>suit</code> and <code>suitpath</code> reference the SVG elements on the page.\t\t\t\t</li>\n<li><code>coloroptions</code> collects together all the <code><span><span><span>&lt;</span>span</span><span>&gt;</span></span></code> elements in the product description paragraph.\t\t\t\t</li>\n<li><code>CSS.supports</code> is the JavaScript equivalent to the <a href=\"/blog/964/A-Browser-Native-Modernizr-Using-supports-in-CSS\">CSS <code>@supports</code> rule</a>: it detects if the browser supports <code>mix-blend-mode</code>. If it does, the script sets the SVG to display and converts each of the <code><span><span><span>&lt;</span>span</span><span>&gt;</span></span> tags</code> into <code><span><span><span>&lt;</span>button</span><span>&gt;</span></span> elements</code>, with the <code>data-value</code> attributes being converted into the value of each button. (If you wanted to be less conservative, as not all browsers support <code>@supports</code> yet, you could skip this condition and create another option for IE users, who do not yet have <code>mix-blend-mode</code>\t\t\t\t</li>\n<li>The new buttons are then collected together, converted into a true JavaScript array, and a <code>click</code> event applied to each, so that when the user clicks on a button the SVG path is color-flooded with the appropriate <a href=\"/blog/44/Color-in-CSS#hexadecimal\">hexadecimal color</a>.\t\t\t</li>\n</ul>\n<p>Using <code>mix-blend-mode</code> allows us to create easy customization of products: if a new color is made available, we just add a <code><span><span><span>&lt;</span>span</span><span>&gt;</span></span></code> with the appropriate <code>data-value</code> to the paragraph. To provide the ultimate in customization, we could provide an <a href=\"/blog/588/The-HTML5-Color-Input\">HTML5 color input</a>, allowing the customer to select any shade they want.\t\t\t\t</p>\n<aside>\t\t\t\t<p>As of this moment, Chrome keeps <code>mix-blend-mode</code> as an Experimental Feature under flags. You can enable the feature in four easy steps:\t\t\t\t\t</p>\n<ol>\n<li>Type <kbd>chrome://flags</kbd> into the URL bar in Chrome.\t\t\t\t\t\t</li>\n<li>Scroll down to find <kbd>Enable experimental Web Platform features</kbd>\t\t\t\t\t\t</li>\n<li>Click on <kbd>Enable</kbd> for the feature\t\t\t\t\t\t</li>\n<li>Restart the browser\t\t\t\t\t</li>\n</ol>\n</aside>\t\t\t<p>Photograph by &nbsp;<a href=\"//flickr.com/photos/dos-chin/\">Shinji Watanabe</a>, licensed under Creative Commons.\t\t\t</p>\n<aside><p>Learn more about the <a href=\"/blog/707/PhotoShop-In-The-Browser-Understanding-CSS-Blend-Modes\">principles of blend modes</a></p>\n</aside>\t\t<a href=\"//codepen.io/dudleystorey/pen/XJppvR\"><img src=\"/assets/svg/codepen.svg\" alt=\"\" pagespeed_url_hash=\"4164506627\" onload=\"pagespeed.CriticalImages.checkImageForCriticality(this);\">Explore the code for the fashion visualization on CodePen</a></div>\n</div>","tags":"css,Flexbox","isStarred":"true","note":"","dateCreated":"Fri Feb 20 2015 15:14:23 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424447692338},"mode":"add","comments":[],"images":[],"_id":"5qiIOV2KY8pRYG27"}
{"id":"0","category":"javascript","categoryId":"30","title":"JavaScript 101 — again","refSite":"https://medium.com/@christinatruong/javascript-101-again-6f5c3de74165","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<section name=\"866e\"><div><div><h4 name=\"subtitle\">Learning JavaScript for the fourth time</h4><p name=\"2867\"><br></p><p name=\"a6e0\">I suck at JavaScript. It’s my goddamn Achilles heel<strong>.</strong></p><p name=\"f206\">When a <a href=\"https://medium.com/@pearlchen\" data-href=\"https://medium.com/@pearlchen\">friend</a> asked me to co-lead and co-create an <a target=\"_blank\" href=\"http://learninglabs.org/intro-to-javascript-your-mentors/\" data-href=\"http://learninglabs.org/intro-to-javascript-your-mentors/\" rel=\"nofollow\">Intro to JavaScript Workshop</a> for <a target=\"_blank\" href=\"http://learninglabs.org/members/ladies-learning-code/\" data-href=\"http://learninglabs.org/members/ladies-learning-code/\" rel=\"nofollow\">Ladies Learning Code</a>\n a couple years ago, I said yes even though I was terrified. But in her \ngood natured way, she calmed my nerves and said “Don’t worry, it’s just \nan intro course.” You know what? It turned out just fine.</p><p name=\"940c\">One\n thing I enjoy about teaching is being prepared for the inevitable \n“why?” When you get used to doing something, it just becomes muscle \nmemory (brain memory?). When someone asks “Why do I have to put a \nsemi-colon here but not here?” you can’t just say “because.”</p><p name=\"7630\">But\n in true use-it-or-lose-it fashion, I’m constantly learning and \nforgetting, re-learning and forgetting, since I end up writing \nJavaScript very sporadically.</p><p name=\"31ac\">In\n an effort to drill terminology, definitions, syntax, basic principles \nand rules into my head, I made some notes for myself and I’ve decided to\n share it here. I’ve also put it up <a target=\"_blank\" href=\"https://github.com/christinatruong/javascript-101\" data-href=\"https://github.com/christinatruong/javascript-101\" rel=\"nofollow\">on Github</a> because apparently that’s where all the cool people are. Feel free to grab a copy or make a pull request.</p><p name=\"508e\">Hopefully, fourth time will be the charm for me! Preamble, done.</p></div></div></section><section name=\"ed4e\"><div><hr></div><div><div><h3 name=\"5026\">JavaScript Overview</h3><p name=\"a652\"><strong>Programming</strong>: In general, turns data into a sequence of 0s and 1s to communicate with the computer. In JavaScript, data is separated into <em>values.</em></p><p name=\"ff86\"><strong>Values</strong>: Every value has a type, which determines the role it plays. There are seven basic <em>types </em>listed below.</p><p name=\"3784\"><strong>Types</strong>:</p><ul><li name=\"baea\">Numbers — Integers &amp; decimals (e.g. 10, 10.001)</li><li name=\"d36f\">Strings — characters including spaces. <strong>Must </strong>be contained within quotes (e.g. “How are you today?”)</li><li name=\"7422\">Booleans — true or false (<em>keyword)</em></li><li name=\"a9d6\">Undefined — means “I don’t have a value”</li><li name=\"f9f8\">Null — means “I have a value of nothing” — note that this is similar to (but logically distinct from) <em>Undefined</em></li><li name=\"d477\">Objects — see below</li><li name=\"d246\">Functions — see below</li></ul><p name=\"57be\"><strong>Comments</strong>: Used to leave notes within the code but is not included as part of the instructions for the computer to execute.</p><pre name=\"55cb\">// single line comment</pre><pre name=\"3b59\">/* Comments that are<br>longer than one line. */</pre><p name=\"90c8\"><strong>REPL (read, eval, print, loop)</strong>:\n takes the code you give it and returns a result. A JavaScript REPL can \nbe accessed in the browser’s Developer tools. (ex. console tab in \nChrome’s dev tools)</p><p name=\"d617\"><strong>Expression</strong>: Instructions given to the computer, a fragment of code that <em>always produces a value. </em>Can be any JavaScript type. A value can also be an expression.</p><p name=\"a65e\">There are two types of expressions: those that simply have a value and those that assign a value to a <em>variable.</em></p><p name=\"7b91\">REPL Chrome console example:</p><pre name=\"11ac\">&gt; 1 + 1 //expression<br>&gt; 2 //value</pre><pre name=\"8d6b\">&gt; 2 //expression<br>&gt; 2 //value</pre><pre name=\"222b\">&gt; variableName = 1 + 1 //expression<br>&gt; 2 //value</pre><p name=\"e2f7\"><strong>Statements</strong>: Also instructions given to the computer but <em>does not always return a value. </em>Can consist of one or more expressions, keywords, or operators. Statements end with a semi-colon<em> </em>to indicate the end of the instruction.</p><p name=\"b2c1\">REPL Chrome console example:</p><pre name=\"70bd\">&gt; 1 + 1; //can be an expression or statement<br>&gt; 2 //value</pre><pre name=\"a0d6\">&gt; variableName = \"hello\"; //can be an expression or statement<br>&gt; \"hello\" //value</pre><pre name=\"93e8\">&gt; var variableName = \"hello\"; //statement only — doesn't return a value<br>&gt; undefined</pre><p name=\"a1c9\"><strong>Keyword</strong>: Special words reserved in JavaScript to denote specific behaviours. <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words\" data-href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words\" rel=\"nofollow\">MDN Keyword List</a></p><p name=\"06f3\"><strong>Block Statements</strong>:\n Used to group zero or more statements. Enclosed by a pair of curly \nbrackets { } to create the block. Single line statements must end in a \nsemi-colon but the block itself does not. Generally used with <em>control flow statements.</em></p><pre name=\"1b99\">var singleLineStatement = \"hello\"; //needs semi-colon</pre><pre name=\"2f82\">if (condition === \"something\"){<br>    var singleLineStatement = \"hello\"; //needs semi-colon<br>    var anotherStatement = \"hi\"; //needs semi-colon<br>} //does not need semi-colon</pre><h4 name=\"6b4a\"><strong>Variables</strong></h4><p name=\"ee8f\">Used as a container to hold a value and/or grab data to be used later, as needed. The <em>keyword </em><strong>var</strong> is used to <em>declare </em>the variable and bring it into existence. The actual variable name is created by you, the programmer.</p><p name=\"a2ba\">To get a variable to hold onto a value, it needs to be <em>assigned </em>by using the = <em>operator. </em>Values can be assigned to a variable using one or two statements.</p><pre name=\"e54b\">var greeting; // no value assigned yet<br>greeting = \"Hello!\"; //value assigned here</pre><pre name=\"1ce9\">//variable declared and value assigned in one line<br>var greeting = \"Hello!\"; </pre><h4 name=\"a058\"><strong>Functions</strong></h4><p name=\"7ad7\">Used\n to group code/instructions &amp; stores them into descriptive names. \nContains reusable chunks of code. Define the function first but it will \nnot run until you <em>call </em>the function. Functions can be used inside other functions.</p><p name=\"ed17\">JavaScript contains many <a target=\"_blank\" href=\"http://www.scribd.com/doc/19457597/Javascript-Methods\" data-href=\"http://www.scribd.com/doc/19457597/Javascript-Methods\" rel=\"nofollow\">built in functions</a> to make the code do various thing. Example: <strong>alert()</strong> creates a pop-up and <strong>prompt()</strong> create a pop-up that asks for user input.</p><p name=\"7a81\"><strong>Defining a function<br></strong>Create your own functions using the <em>keyword </em>function. Functions need to be <em>defined </em>to bring it into existence. The name of the function is created by you, the programmer. Choose a descriptive name.</p><p name=\"94fa\">Functions also have to be <em>called </em>in\n order for it to actually run and execute the instructions. Functions \nare called by using the function name, followed by parenthesis.</p><pre name=\"0097\">alert(); //calling the alert function</pre><p name=\"85cb\">There are two ways to define a function, as a <em>declaration</em> or as an <em>expression</em>. Both work similarly but the browser loads &amp; executes the code slightly different.</p><p name=\"3bb7\"><strong>Function declarations<br></strong>Generally, Javascript executes code from top to bottom but function declarations are loaded <em>before </em>any code can run. In this case, the function will execute even if it was called <em>before </em>the function was defined.</p><p name=\"ad4c\"><strong>Syntax</strong></p><pre name=\"1f98\">function nameOfFunction(){<br>    // code to be executed<br>}</pre><p name=\"ce41\"><strong>Example</strong></p><pre name=\"0f00\">myFunction(); // calling the function</pre><pre name=\"26cf\">//defining function<br>function myFunction() { <br>    alert(\"This is a function declaration!\"); <br>} </pre><p name=\"e2cf\"><strong>Function Expression<br></strong>Function expressions load only when the program reaches that line of code. In this case, if you call a function expression <em>before </em>it’s defined, it will return an error because the computer thinks the function is not defined yet.</p><p name=\"af5d\"><strong>Syntax</strong></p><pre name=\"8289\">var nameOfFunction = function(){<br>    // code to be executed<br>};</pre><p name=\"22e8\"><strong>Example</strong></p><pre name=\"801c\">myFunction(); // calling function</pre><pre name=\"a764\">//defining function<br>var myFunction = function() { <br>    alert(\"This is a function expression!\"); <br>};</pre><pre name=\"672b\">&gt; TypeError: undefined is not a function</pre><p name=\"769d\">When using a function expression, the function <em>must</em> be called <em>after </em>it’s been defined in order to execute the code. Here’s a helpful <a target=\"_blank\" href=\"http://stackoverflow.com/questions/1013385/what-is-the-difference-between-a-function-expression-vs-declaration-in-javascrip\" data-href=\"http://stackoverflow.com/questions/1013385/what-is-the-difference-between-a-function-expression-vs-declaration-in-javascrip\" rel=\"nofollow\">Stack Overflow discussion</a>.</p><p name=\"3c66\"><strong>Self-Executing / Invoking functions<br></strong>A\n self-invoking function means a function which invokes immediately after\n it has been defined. And that’s all I’m going to say. Read <a target=\"_blank\" href=\"http://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/\" data-href=\"http://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/\" rel=\"nofollow\">this post</a> for more info.</p><p name=\"b32f\"><strong>Syntax</strong></p><pre name=\"d5cc\">(function() {<br>    // code to be executed<br>}());</pre><pre name=\"f3d0\">// alternative syntax</pre><pre name=\"c3fa\">(function() {<br>    // code to be executed<br>})();</pre><h4 name=\"e803\"><strong>Functions and semicolons</strong></h4><p name=\"a6e4\"><strong>Function declarations </strong>are contained in a block denoted by the { } so it does not require a semicolon.</p><pre name=\"f29d\">function foo() {<br>    //do stuff here<br>}</pre><p name=\"b67f\"><strong>Function expressions </strong>require a semicolon because the function is assigned to the variable which makes it a statement. Statements require a semicolon.</p><pre name=\"2b9e\">var foo = function() {<br>    //do stuff here<br>};</pre><p name=\"d775\"><strong>Self invoking functions </strong>also requires a semicolon.</p><pre name=\"ce1e\">(function () {<br>    //do stuff here<br>})();</pre><p name=\"03db\">Another useful <a target=\"_blank\" href=\"http://stackoverflow.com/questions/1834642/best-practice-for-semicolon-after-every-function-in-javascript\" data-href=\"http://stackoverflow.com/questions/1834642/best-practice-for-semicolon-after-every-function-in-javascript\" rel=\"nofollow\">Stack Overflow discussion</a>.</p><h4 name=\"5b42\"><strong>Functions with Parameters/Arguments</strong></h4><p name=\"515a\">Functions can be more flexible and reusable with different options by <em>passing </em>a <strong>parameter </strong>into the function. Functions can be used with zero or more parameters.</p><pre name=\"f554\">function myFunction(){<br>    alert(\"No parameters!\");<br>}</pre><pre name=\"d356\">function anotherFunction(param1, param2){<br>    alert(\"The two parameters are: \" + param1 + \",\" + param2);<br>}</pre><p name=\"3e5a\">When a function is <em>called</em>, data that is passed are referred to as <strong>arguments. </strong>These arguments are then passed into the parameters of the function.</p><pre name=\"1805\">// calling a function with no parameters<br>myFunction();</pre><pre name=\"fee6\">/* calling the function and passing two different <br>sets of arguments into param1 and param2 */<br>anotherFunction(\"hello\", \"hi\");<br>anotherFunction(\"goodbye\", \"bye\");</pre><h4 name=\"98a5\"><strong>Functions and return</strong></h4><p name=\"dd82\"><strong>return</strong> is a <em>statement </em>that specifies the value to be returned by the function. If <strong>return</strong> is used with no<em> expression</em>, it immediately stops at the point where <strong>return</strong> is called and doesn’t executes any of the commands that come after.</p><p name=\"94cc\"><strong>return </strong>with no expression</p><pre name=\"bf95\">function myMessage(){<br>    alert(\"First message.\");<br>    return;<br>    alert(\"Second message will not log.\");<br>}<br>myMessage();</pre><p name=\"7027\">Will only alert “First message.”</p><p name=\"ad06\"><strong>return </strong>with an expression</p><pre name=\"fb1e\">function makePizza(toppings){<br>    return toppings;<br>}<br>var myPizza = makePizza(\"pepperoni &amp; mushrooms\");<br>alert(myPizza);</pre><p name=\"31cc\">The <strong>makePizza</strong> <em>function</em> has been assigned to the <em>variable</em> <strong>myPizza</strong>. The argument “pepperoni &amp; mushrooms” is passed into the <strong>toppings</strong> <em>parameter</em>. The alert will then show “pepperoni &amp; mushrooms”.</p><h4 name=\"bb30\"><strong>Objects</strong></h4><p name=\"9344\">Objects are similar to variables because it can be used to hold values BUT it can hold a <em>collection </em>of values instead of just one. An object is also a special kind of data, with <em>properties </em>and <em>methods.</em></p><p name=\"34b9\"><strong>Creating an object<br></strong>Just like <em>variables</em>, an <em>object </em>needs to be defined first before it can be used.</p><p name=\"ad4d\"><strong>Defining an empty object</strong></p><pre name=\"bd68\">var myObject = new Object();<br>var myObject = {};</pre><p name=\"8314\">Both examples above can be used to define an object, <strong>{ }</strong> is shorthand for <strong>new Object()</strong></p><p name=\"d4ae\"><strong>Adding values to the object<br></strong><em>Variables </em>are called <strong>properties </strong>when they’re associated with objects.<br><em>Functions </em>are called <strong>methods </strong>when they’re associated with objects.</p><p name=\"02ae\">When assigning a value to a <em>variable</em>, the <strong>=</strong> operator is used. When assigning a value to a <em>property</em>, use a colon instead. Just like variables, the property name can be created by the programmer.</p><p name=\"cccc\"><em>Methods</em> are also assigned as a value to the property. Each <em>property/value</em> pair, also referred to as a<em> key/value</em> pair, must be separated by a comma unless it’s the last item.</p><pre name=\"3da7\">var myObject = {};<br>myObject = {<br>    myProperty : \"value\",<br>    anotherProperty : \"another value\",<br>    myMethod : function(){ <br>        // code to be executed <br>    }// closes function<br>};</pre><p name=\"8c83\">It can also be defined and assigned values in one step.</p><pre name=\"359c\">var myObject = {<br>    myProperty : \"value\",<br>    anotherProperty : \"another value\",<br>    myMethod : function(){<br>        // code to be executed <br>    }// closes function<br>};</pre><p name=\"39d5\"><strong>Adding properties &amp; methods to an object<br></strong>There are many ways (of course) to add new properties and methods to an object after it’s been created:</p><pre name=\"225c\">//defining object with 2 properties<br>var myDinner = {<br>    appetizer: \"salad\",<br>    main: \"chicken\"<br>};</pre><p name=\"964f\"><strong>Adding Properties with Dot Notation<br></strong><em>Syntax</em>:<strong> </strong>objectName.propertyName</p><pre name=\"0350\">myDinner.side = \"rice\";<br>myDinner.dessert = \"ice cream\";<br>myDinner.dinnerTime = function(){<br>    //start eating<br>}</pre><p name=\"ea0c\"><strong>Adding Properties with Square Bracket Notation<br></strong><em>Syntax: </em>objectName[“propertyName”]</p><pre name=\"4337\">myDinner[\"side\"] = \"rice\";<br>myDinner[\"dessert\"] = \"ice cream\";<br>myDinner[\"dinnerTime\"] = function(){<br>    //start eating<br>}</pre><p name=\"bba6\"><a target=\"_blank\" href=\"http://stackoverflow.com/questions/1168807/how-can-i-add-a-key-value-pair-to-a-javascript-object-literal\" data-href=\"http://stackoverflow.com/questions/1168807/how-can-i-add-a-key-value-pair-to-a-javascript-object-literal\" rel=\"nofollow\">Another handy Stack Overflow discussion</a>.</p><p name=\"8966\"><strong>Retrieve an item from an object<br></strong>You can retrieve properties from an object using the same syntax as adding a property (dot notation or square bracket notation).</p><pre name=\"aa27\">myDinner.side; // will return \"rice\"<br>myDinner[\"dessert\"]; // will return \"ice cream\"</pre><p name=\"7f1b\"><strong>Executing a Method<br></strong>A method <em>is </em>a function, except that it’s associated to an object. Calling the method uses the same syntax as calling a function but use <em>dot notation </em>to attach it to a specific object.</p><pre name=\"0e74\">myDinner.dinnerTime(); // will run the dinnerTime function</pre><p name=\"1c58\"><strong>Variables &amp; Objects<br></strong>Variables can be treated like objects. That means, methods can be associated to a variable, since it is an object too.</p><pre name=\"8823\">var firstname = \"Christina\";</pre><pre name=\"958c\">// apply existing javascript property .length using dot notation<br>var numberOfLetters = firstname.length;<br>alert(numberOfLetters);</pre><p name=\"e95b\">A popular built-in javascript object/method combo is <em>console.log()</em>. Instead of using <em>alert()</em>, which can get annoying, <em>console.log(argument)</em> will log whatever argument you pass into the browser’s console. Very handy when debugging and testing.</p><h4 name=\"5062\"><strong>Arrays</strong></h4><p name=\"d67b\">Similar\n to objects because they both hold a collection of values. BUT, arrays \nhold its values in a numerical index rather than labels. Think of arrays\n as egg cartons. All the eggs are in one carton but each egg has its own\n slot.</p><p name=\"3c2c\">Arrays are declared using the <em>keyword </em><strong>var</strong> and <em>square brackets </em>are used to hold the values, separated by commas. It can hold any JavaScript value type.</p><pre name=\"2b51\">var eggCarton = [ ];<br>eggCarton = [\"chicken egg\", \"duck egg\", \"quail egg\", \"no egg\"];</pre><p name=\"a878\">Array indexes <strong>ALWAYS </strong>start at <strong>ZERO. </strong>STARTS AT ZERO. ALWAYS.<br>The first item in the array has an index of 0. Values in an array can also be assigned to the index number.</p><pre name=\"8787\">eggCarton[0] = \"chicken egg\";<br>eggCarton[1] = \"duck egg\";<br>eggCarton[2] = \"quail egg\";<br>eggCarton[3] = \"no egg\";</pre><p name=\"aebc\"><strong>Adding a new value<br></strong><em>push()</em> is a built-in method use to add an item, which goes to the end of the array.</p><pre name=\"3fe5\">eggCarton.push(\"goose egg\");</pre><p name=\"30e4\"><strong>Get items from an array<br></strong>The index number is also used to access the value from the array. In this example, the <em>second </em>item of the array will be logged into the browser console.</p><pre name=\"daf1\">console.log(eggCarton[1]);</pre><h4 name=\"dd24\"><strong>Control Flow</strong></h4><p name=\"30e2\">By\n default, statements are executed one after the other, in the order they\n are written. Control flow refers to techniques used to specify \nalternate courses for the program flow based on logical decisions. (e.g.\n if, for, while statements)</p><p name=\"dc3b\"><strong><em>if</em> conditional statements<br></strong>Used to make decisions with your code based on possible circumstances. Starts with the <em>keyword </em><strong>if</strong> followed by round brackets <strong>( )</strong> to hold a condition to test. The curly braces<strong> { }</strong> denote a <em>block statement </em>to group statements to be performed if that condition is true. If the condition is false, nothing happens.</p><pre name=\"8daa\">if (condition to check for) {<br>    //statements to be executed if condition is true<br>}<br>if (3 &gt; 1) {<br>    console.log(\"Three is bigger than 1.\");<br>}</pre><p name=\"fb93\"><strong><em>if / else </em>conditional statements<br></strong>The <strong><em>else</em></strong> <em>keyword </em>can be added as a fallback block of code that will run if the condition isn’t met. It’s optional.</p><pre name=\"f1e8\">if (5 &lt; 2){<br>    console.log(\"Condition is false. Will not run.\");<br>} else {<br>    console.log(\"This statement will run instead.\");<br>}</pre><p name=\"6f61\"><strong><em>if / else if / else</em> conditional statements<br></strong>Test multiple conditions by using <strong><em>else if</em></strong> before <strong><em>else</em></strong>. There is no limit to the amount of<strong><em> else if</em></strong><em> </em>statements that can be used.</p><pre name=\"851e\">var weather = \"sunny\";</pre><pre name=\"0aa2\">if (weather === \"snowy\") {<br>    console.log(\"Ugh.\");<br>} else if (weather === \"sunny\"){<br>    console.log(\"Yay! Let’s go to the beach.\");<br>} else if (weather === \"clear\"){<br>    console.log(\"I can live with that.\");<br>} else {<br>    console.log(\"I don’t know what the weather is.\")<br>}</pre><pre name=\"90da\">&gt; Yay! Let’s go the beach.</pre><p name=\"1741\"><strong>Complex conditionals<br></strong>Logical operators can be used to create complex conditional statements.</p><p name=\"61b8\"><strong><em>&amp;&amp;</em></strong> represents “and” <strong><em>||</em></strong> represents “or”<strong>&nbsp;<em>!</em></strong> represents “not”</p><pre name=\"6286\">var smallNumber = 1;<br>var bigNumber = 100;</pre><pre name=\"65a6\">if(smallNumber &lt; 10 <strong>&amp;&amp;</strong> bigNumber &gt; 50){<br>    console.log(\"Will log if both conditions are true.\");<br>} <br>if(smallNumber &gt; 10 <strong>||</strong> bigNumber &gt; 50) { <br>    console.log(\"Will log if at least one condition is true.\");<br>}<br>if(smallNumber <strong>!</strong>== 2){<br>    console.log(\"Will log because this condition is true.\");<br>}</pre><h4 name=\"729e\"><strong>Loops</strong></h4><p name=\"b07f\">Loops\n are used to execute repetitive code for a specified number of times or \nthrough a list of values. Loops will execute the same code continuously,\n using conditional statements to determine when to begin and stop.</p><p name=\"98b8\"><strong><em>while</em> loops<br></strong>Creates a loop that executes a statement(s) and repeats as long as the condition evaluates to true.</p><p name=\"0a46\"><strong>If the condition is never false, the <em>while loop</em> will keep going and crash the browser.</strong></p><pre name=\"60e4\">// declaring index variable<br>var i = 0;<br>while (i &lt; 3) {<br>    i++; // increments the value of i by 1 after each loop<br>    console.log(“The index is “ + i);<br>}</pre><p name=\"4e6a\">In each iteration, the loop increments <strong><em>i</em></strong> by 1.<br>- First pass: The index is 1<br>- Second pass: The index is 2<br>- Third pass: The index is 3</p><p name=\"3a89\"><strong>For Loops<br></strong>Can\n also be used to repeat a set of instructions. Creates a loop that \nconsists of three optional expressions, enclosed in parentheses and \nseparated by semicolons.</p><pre name=\"8975\">for (start; stop; increment) {<br>    // statements to run as long as condition is true<br>}</pre><pre name=\"26ca\">for (var i = 0; i &lt; 5; i++) {<br>    console.log(“The current count of the loop is “ + i);<br>}</pre><p name=\"e2bf\">The variable name can be anything but using <em>i </em>is\n common because it refers to an index. In this example, the index starts\n at 0, stops at 4 and adds 1 to the index until the condition is false.</p><p name=\"eb89\"><strong>Loops &amp; arrays<br></strong><em>for</em>\n loops can be used to iterate through all the items within an array. You\n can’t assume that you will always know how many items will be in the \narray so the&nbsp;<em>.length</em> method is used to grab the total number of items in the array.</p><p name=\"4437\">The index variable starts at 0 because array indexes are <strong>zero based </strong>meaning the first item has an index of 0, the second item is 1, etc.</p><pre name=\"7a63\">var myMeals = [\"breakfast\",\"second breakfast\",\"lunch\",\"dinner\"];</pre><pre name=\"4b89\">for(var i = 0; i &lt; myMeals.length; i++){<br>    console.log(\"It's \" + myMeals[i] + \" time.\");<br>}</pre><p name=\"29e6\">Logs:<br>It’s breakfast time.<br>It’s second breakfast time.<br>It’s lunch time.<br>It’s dinner time.</p></div></div></section>","tags":"javascript","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 20:02:59 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 20:02:59 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"6VD3NcjvdovkeUhY"}
{"id":"0","category":"javascript","categoryId":"30","title":"Join Multiple Arrays using Array.prototype.concat()","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2 name=\"Summary\">Summary</h2>\n\n<p>The <code><strong>concat()</strong></code> method returns a new array\n comprised of the array on which it is called joined with the array(s) \nand/or value(s) provided as arguments.</p>\n\n<h2 name=\"Syntax\">Syntax</h2>\n\n<pre><code>var <var>new_array</var> = <var>old_array</var>.concat(<var>value1</var>[, <var>value2</var>[, ...[, <var>valueN</var>]]])</code></pre>\n\n<h3 name=\"Parameters\">Parameters</h3>\n\n<dl>\n <dt><code>value<em>N</em></code></dt>\n <dd>Arrays and/or values to concatenate into a new array. See the description below for details.</dd>\n</dl>\n\n<h2 name=\"Description\">Description</h2>\n\n<p><code>concat</code> creates a new array consisting of the elements in\n the object on which it is called, followed in order by, for each \nargument, the elements of that argument (if the argument is an array) or\n the argument itself (if the argument is not an array).</p>\n\n<p><code>concat</code> does not alter <code>this</code> or any of the \narrays provided as arguments but instead returns a shallow copy that \ncontains copies of the same elements combined from the original arrays. \nElements of the original arrays are copied into the new array as \nfollows:</p>\n\n<ul>\n <li>Object references (and not the actual object): <code>concat</code> \ncopies object references into the new array. Both the original and new \narray refer to the same object. That is, if a referenced object is \nmodified, the changes are visible to both the new and original arrays.</li>\n <li>Strings and numbers (not <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" title=\"The String global object is a constructor for strings, or a sequence of characters.\"><code>String</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\" title=\"The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.\"><code>Number</code></a> objects): <code>concat</code> copies the values of strings and numbers into the new array.</li>\n</ul>\n\n<div>\n<p><strong>Note:</strong> Concatenating array(s)/value(s) will leave the\n originals untouched. Furthermore, any operation on the new array will \nhave no effect on the original arrays, and vice versa.</p>\n</div>\n\n<h2 name=\"Examples\">Examples</h2>\n\n<h3 name=\"Example:_Concatenating_two_arrays\">Example: Concatenating two arrays</h3>\n\n<p>The following code concatenates two arrays:</p>\n\n<pre data-number=\"\"><code><span>var</span> alpha <span>=</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span><span>,</span>\n    numeric <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>\n\n<span>var</span> alphaNumeric <span>=</span> alpha<span>.</span><span>concat<span>(</span></span>numeric<span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span>alphaNumeric<span>)</span><span>;</span><span spellcheck=\"true\"> // Result: ['a', 'b', 'c', 1, 2, 3]</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div></code></pre>\n\n<h3 name=\"Example:_Concatenating_three_arrays\">Example: Concatenating three arrays</h3>\n\n<p>The following code concatenates three arrays:</p>\n\n<pre data-number=\"\"><code><span>var</span> num1 <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>,</span>\n    num2 <span>=</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>]</span><span>,</span>\n    num3 <span>=</span> <span>[</span><span>7</span><span>,</span> <span>8</span><span>,</span> <span>9</span><span>]</span><span>;</span>\n\n<span>var</span> nums <span>=</span> num1<span>.</span><span>concat<span>(</span></span>num2<span>,</span> num3<span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span>nums<span>)</span><span>;</span><span spellcheck=\"true\"> // Result: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div></code></pre>\n\n<h3 name=\"Example:_Concatenating_values_to_an_array\">Example: Concatenating values to an array</h3>\n\n<p>The following code concatenates three values to an array:</p>\n\n<pre data-number=\"\"><code><span>var</span> alpha <span>=</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span><span>;</span>\n\n<span>var</span> alphaNumeric <span>=</span> alpha<span>.</span><span>concat<span>(</span></span><span>1</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span>alphaNumeric<span>)</span><span>;</span><span spellcheck=\"true\"> // Result: ['a', 'b', 'c', 1, 2, 3]</span></code></pre>","tags":"array","isStarred":"false","note":"","dateCreated":"Sat Mar 14 2015 20:48:50 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 14 2015 20:48:50 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"6u2SZQ0qYsTUR3Lv"}
{"id":"0","category":"javascript","categoryId":"30","title":"What (function (window, document, undefined) {})(window, document); really means ","refSite":"http://toddmotto.com/what-function-window-document-undefined-iife-really-means/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Interestingly enough I get asked about the IIFE (immediately-invoked \nfunction expression) a lot, which takes the following setup:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n  <span>// </span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>So why not write a post about it? ;-)</p>\n\n<p>First, this does a series of different things. From the top:</p>\n\n<h3>Scope</h3>\n\n<p>JavaScript has <code>function</code> scope, so first this creates some much needed \"private scope\". For example:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n  <span>var</span> <span>name</span> <span>=</span> <span>'Todd'</span><span>;</span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>);</span> <span>// name is not defined, it's in a different scope</span></code></pre></div>\n\n\n<p>Simple.</p>\n\n<h3>How it works</h3>\n\n<p>A normal function looks like this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>logMyName</span> <span>=</span> <span>function</span> <span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>);</span>\n<span>};</span>\n\n<span>logMyName</span><span>(</span><span>'Todd'</span><span>);</span></code></pre></div>\n\n\n<p>We get to <em>invoke</em> it by choice, and wherever we want/can scope providing.</p>\n\n<p>The reason \"IIFE\" was coined was because they're immediately-invoked \nfunction expressions. Which means they're immediately called at runtime -\n also we can't call them again they run just once like this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>logMyName</span> <span>=</span> <span>(</span><span>function</span> <span>(</span><span>name</span><span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>name</span><span>);</span> <span>// Todd</span>\n<span>})(</span><span>'Todd'</span><span>);</span></code></pre></div>\n\n\n<p>The secret sauce here is this, (which I've assigned to a variable in the previous example):</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>()</span> <span>{</span>\n  \n<span>})();</span></code></pre></div>\n\n\n<p>The extra pair of parentheses <em>is</em> necessary as this doesn't work:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>()</span> <span>{</span>\n  \n<span>}();</span></code></pre></div>\n\n\n<p>Though several tricks can be done to trick JavaScript into \"making it\n work\". These force the JavaScript parser to treat the code following \nthe <code>!</code> character as an expression:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>!</span><span>function</span> <span>()</span> <span>{</span>\n  \n<span>}();</span></code></pre></div>\n\n\n<p>There are also other variants:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>+</span><span>function</span> <span>()</span> <span>{</span>\n  \n<span>}();</span>\n<span>-</span><span>function</span> <span>()</span> <span>{</span>\n  \n<span>}();</span>\n<span>~</span><span>function</span> <span>()</span> <span>{</span>\n  \n<span>}();</span></code></pre></div>\n\n\n<p>But I wouldn't use them.</p>\n\n<h3>Arguments</h3>\n\n<p>Now we know how it works, we can pass in arguments to our IIFE:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>)</span> <span>{</span>\n  \n<span>})(</span><span>window</span><span>);</span></code></pre></div>\n\n\n<p>How does this work? Remember, the closing <code>(window);</code> is where the function is invoked, and we're passing in the <code>window</code> Object. This then gets passed into the function, which I've named <code>window</code> also. You could argue this is pointless as we should name it something different - but for now we'll use <code>window</code> as well.</p>\n\n<p>So what else can we do? Pass in all the things! Let's pass in the <code>document</code> Object:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>)</span> <span>{</span>\n  <span>// we refer to window and document normally</span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>Local variables are faster to resolve than the global variables, but \nthis is on a huge scale and you'll never notice the speed increase - but\n also worth considering if we're referencing our globals a lot!</p>\n\n<h3>What about <code>undefined</code>?</h3>\n\n<p>In ECMAScript 3, <code>undefined</code> is mutable. Which means it's value could be reassigned, something like <code>undefined = true;</code> for instance, oh my! Thankfully in ECMASCript 5 strict mode (<code>'use strict';</code>) the parser will throw an error telling you you're an idiot. Before this, we started protecting our IIFE's by doing this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>Which means if someone came along and did this, we'd be okay:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>undefined</span> <span>=</span> <span>true</span><span>;</span>\n<span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n  <span>// undefined is a local undefined variable</span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<h3>Minifying</h3>\n\n<p>Minifying your local variables is where the IIFE pattern's \nawesomeness really kicks in. Local variable names aren't really needed \nif they're passed in, so we can call them what we like.</p>\n\n<p>Changing this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>window</span><span>);</span> <span>// Object window</span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>To this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>a</span><span>,</span> <span>b</span><span>,</span> <span>c</span><span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>a</span><span>);</span> <span>// Object window</span>\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>Imagine it, all your references to libraries and <code>window</code> and <code>document</code>\n nicely minified. Of course you don't need to stop there, we can pass in\n jQuery too or whatever is available in the lexical scope:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>$</span><span>,</span> <span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n  <span>// use $ to refer to jQuery</span>\n  <span>// $(document).addClass('test');</span>\n<span>})(</span><span>jQuery</span><span>,</span> <span>window</span><span>,</span> <span>document</span><span>);</span>\n\n<span>(</span><span>function</span> <span>(</span><span>a</span><span>,</span> <span>b</span><span>,</span> <span>c</span><span>,</span> <span>d</span><span>)</span> <span>{</span>\n  <span>// becomes</span>\n  <span>// a(c).addClass('test');</span>\n<span>})(</span><span>jQuery</span><span>,</span> <span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>This also means you don't need to call <code>jQuery.noConflict();</code> or anything as <code>$</code> is assigned locally to the module. Learning how scopes and global/local variables work will help you even further.</p>\n\n<p>A good minifier will make sure to rename <code>undefined</code> to <code>c</code> (for example, and only if used) throughout your script too. Important to note, <em>the name undefined is irrelevant</em>. We just need to know that the referencing Object is undefined, as <code>undefined</code> has no special meaning - <code>undefined</code> is the value javascript gives to things that are declared but have no value.</p>\n\n<h3>Non-browser global environments</h3>\n\n<p>Due to things such as Node.js, the browser isn't always the global \nObject which can be a pain if you're trying to create IIFE's that work \nacross multiple environments. For this reason, I tend to stick with this\n as a base:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>root</span><span>)</span> <span>{</span>\n\n<span>})(</span><span>this</span><span>);</span></code></pre></div>\n\n\n<p>In a browser, the global environment <code>this</code> refers to the <code>window</code> Object, so we don't need to pass in <code>window</code> at all, we could always shorten it to <code>this</code>.</p>\n\n<p>I prefer the name <code>root</code> as it can refer to non-browser environments as well as the root of the browser.</p>\n\n<p>If you're interested in a universal solution (which I use all the \ntime nowadays when creating open source project modules) is the UMD \nwrapper:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>(</span><span>root</span><span>,</span> <span>factory</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>typeof</span> <span>define</span> <span>===</span> <span>'function'</span> <span>&amp;&amp;</span> <span>define</span><span>.</span><span>amd</span><span>)</span> <span>{</span>\n    <span>define</span><span>(</span><span>factory</span><span>);</span>\n  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>typeof</span> <span>exports</span> <span>===</span> <span>'object'</span><span>)</span> <span>{</span>\n    <span>module</span><span>.</span><span>exports</span> <span>=</span> <span>factory</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>root</span><span>.</span><span>MYMODULE</span> <span>=</span> <span>factory</span><span>();</span>\n  <span>}</span>\n<span>})(</span><span>this</span><span>,</span> <span>function</span> <span>()</span> <span>{</span>\n  <span>// </span>\n<span>});</span></code></pre></div>\n\n\n<p>This is some sexy stuff. The function is being invoked with another \nfunction passed into it. We can then assign it to the relevant \nenvironment inside. In the browser, <code>root.MYMODULE = factory();</code> is our IIFE module, elsewhere (such as Node.js) it'll use <code>module.exports</code> or requireJS if <code>typeof define === 'function' &amp;&amp; define.amd</code> resolves true.</p>\n\n<p>But this stuff is another story, but I insist you check out the <a href=\"https://github.com/umdjs/umd\">UMD repo</a>.</p>","tags":"javascript,Function","isStarred":"false","note":"","dateCreated":"Mon Mar 02 2015 11:15:17 GMT+0530 (India Standard Time)","dateModified":"Mon Mar 02 2015 11:15:17 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"6wLCwzq2Rk0QMftc"}
{"id":"A3vKwdfR7ALCzOiE","category":"javascript","categoryId":"30","title":"Web Components and concepts, ShadowDOM, imports, templates, custom elements ","refSite":"http://toddmotto.com/web-components-concepts-shadow-dom-imports-templates-custom-elements/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Web Components, the future of the web, inspired from attending <a href=\"https://twitter.com/toddmotto/status/482624009553465344\">Google I/O</a>\n I decided to pick up Web Components and actually build something. Since\n learning the basics around a year ago, it's changed and advanced a lot!\n Thought I'd write a post on it and share <a href=\"http://github.com/toddmotto/fluidvids-polymer\">my first web component</a> yesterday (built with Polymer).</p>\n\n<p>Before I get into Polymer, we'll look at Web Components in this post,\n what it means for the web and how it completely changes things and our \noutlook on building for the web platform from today.</p>\n\n<p>Gone are the days of actually creating HTML structures and \"pages\" \n(what're those?). The web is becoming \"all about components\", and those \ncomponents are completely up to us thanks to Web Components.</p>\n\n<p>We aren't really at a stage where we can use Web Components to it's \nfullest, browser support is still ongoing implementations and IE are <a href=\"http://status.modern.ie/\">in consideration</a>\n of the entire spec (blows a single fanfare). But it's coming together, \ngive it a few years and we'll get there. Or do we have to wait that \nlong?...</p>\n\n<p>Google are innovating in this area like no tomorrow with <a href=\"http://www.polymer-project.org/\">Polymer.js</a>,\n a polyfill and platform (that provides additional features such as \ndata-binding, event callbacks and much more) for those missing pieces in\n modern browsers that don't fully support Web Components.</p>\n\n<h3>Building blocks of Web Components</h3>\n\n<p>Before we get over excited about this stuff though, let's actually understand what the <a href=\"http://www.w3.org/TR/components-intro\">Web Components spec</a>\n really means. First thing's first, Web Components are a collection of \nbuilding blocks, not a single thing. Let's look at each block to see \nwhat's up.</p>\n\n<p>This will be a very high level view, otherwise this post could end up being three days worth of reading!</p>\n\n<h4>Templates</h4>\n\n<p>Templates are where we define reusable code, we even get an element for it with <code>&lt;template&gt;</code>.\n The first time you use it, don't panic - it's invisible in the visible \ninterface output, until you view source you won't know anything is even \nthere. It's merely a declarative element to create a new template for...\n anything you like.</p>\n\n<p>An example of a <code>&lt;template&gt;</code> to populate a profile section for a user:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;template</span> <span>id=</span><span>\"profileTemplate\"</span><span>&gt;</span>\n  <span>&lt;div</span> <span>class=</span><span>\"profile\"</span><span>&gt;</span>\n    <span>&lt;img</span> <span>src=</span><span>\"\"</span> <span>class=</span><span>\"profile__img\"</span><span>&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__name\"</span><span>&gt;&lt;/div&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__social\"</span><span>&gt;&lt;/div&gt;</span>\n  <span>&lt;/div&gt;</span>\n<span>&lt;/template&gt;</span></code></pre></div>\n\n\n<p>Sprinkle some JavaScript to populate it, and append it to the <code>&lt;body&gt;</code>:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>template</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'#profileTemplate'</span><span>);</span>\n<span>template</span><span>.</span><span>querySelector</span><span>(</span><span>'.profile__img'</span><span>).</span><span>src</span> <span>=</span> <span>'toddmotto.jpg'</span><span>;</span>\n<span>template</span><span>.</span><span>querySelector</span><span>(</span><span>'.profile__name'</span><span>).</span><span>textContent</span> <span>=</span> <span>'Todd Motto'</span><span>;</span>\n<span>template</span><span>.</span><span>querySelector</span><span>(</span><span>'.profile__social'</span><span>).</span><span>textContent</span> <span>=</span> <span>'Follow me on Twitter'</span><span>;</span>\n<span>document</span><span>.</span><span>body</span><span>.</span><span>appendChild</span><span>(</span><span>template</span><span>);</span></code></pre></div>\n\n\n<p>You'll notice that this is just JavaScript, no new APIs or anything confusing. Nice! For me, a <code>&lt;template&gt;</code> is useless without it's good buddy <em>Custom Elements</em>. We need this to do something useful with the tech, things are all global and disgusting as of now.</p>\n\n<h4>Custom Elements</h4>\n\n<p>Custom Elements allow us to define (you guessed it), our own element.\n This can be anything, but before you go crazy, your elements must have a\n dash, presumably to avoid any potential naming clashes with future HTML\n implementations - I think that's a good idea as well.</p>\n\n<p>So, with our custom element, how do we do it? Simple really, we get the <code>&lt;element&gt;</code> element, so meta. Well, we <em>had</em> the <code>&lt;element&gt;</code> element. Read on, as <code>&lt;element&gt;</code> was recently deprecated and thus needs a JavaScript implementation, but this is the older way:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;element&gt;</span>\n  <span>&lt;template</span> <span>id=</span><span>\"profileTemplate\"</span><span>&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile\"</span><span>&gt;</span>\n      <span>&lt;img</span> <span>src=</span><span>\"\"</span> <span>class=</span><span>\"profile__img\"</span><span>&gt;</span>\n      <span>&lt;div</span> <span>class=</span><span>\"profile__name\"</span><span>&gt;&lt;/div&gt;</span>\n      <span>&lt;div</span> <span>class=</span><span>\"profile__social\"</span><span>&gt;&lt;/div&gt;</span>\n    <span>&lt;/div&gt;</span>\n  <span>&lt;/template&gt;</span>\n<span>&lt;/element&gt;</span></code></pre></div>\n\n\n<p>This example is still deprecated but worth showing. We would've given <code>&lt;element&gt;</code> a <code>name=\"\"</code> attribute to define the custom element:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;element</span> <span>name=</span><span>\"user-profile\"</span><span>&gt;</span>\n  <span>&lt;template</span> <span>id=</span><span>\"profileTemplate\"</span><span>&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile\"</span><span>&gt;</span>\n      <span>&lt;img</span> <span>src=</span><span>\"\"</span> <span>class=</span><span>\"profile__img\"</span><span>&gt;</span>\n      <span>&lt;div</span> <span>class=</span><span>\"profile__name\"</span><span>&gt;&lt;/div&gt;</span>\n      <span>&lt;div</span> <span>class=</span><span>\"profile__social\"</span><span>&gt;&lt;/div&gt;</span>\n    <span>&lt;/div&gt;</span>\n  <span>&lt;/template&gt;</span>\n<span>&lt;/element&gt;</span>\n\n// usage\n<span>&lt;user-profile&gt;&lt;/user-profile&gt;</span></code></pre></div>\n\n\n<h5>So what's replacing <code>&lt;element&gt;</code>?</h5>\n\n<p>Use of <code>&lt;element&gt;</code> was <a href=\"http://lists.w3.org/Archives/Public/public-webapps/2013JulSep/0287.html\">deprecated</a>\n towards the end of 2013, which means we simply use the JavaScript API \ninstead, which I think offers more flexibility and less bloat on the \nmarkup:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;template</span> <span>id=</span><span>\"profileTemplate\"</span><span>&gt;</span>\n  <span>&lt;div</span> <span>class=</span><span>\"profile\"</span><span>&gt;</span>\n    <span>&lt;img</span> <span>src=</span><span>\"\"</span> <span>class=</span><span>\"profile__img\"</span><span>&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__name\"</span><span>&gt;&lt;/div&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__social\"</span><span>&gt;&lt;/div&gt;</span>\n  <span>&lt;/div&gt;</span>\n<span>&lt;/template&gt;</span>\n<span>&lt;script&gt;</span>\n<span>var</span> <span>MyElementProto</span> <span>=</span> <span>Object</span><span>.</span><span>create</span><span>(</span><span>HTMLElement</span><span>.</span><span>prototype</span><span>);</span>\n<span>window</span><span>.</span><span>MyElement</span> <span>=</span> <span>document</span><span>.</span><span>registerElement</span><span>(</span><span>'user-profile'</span><span>,</span> <span>{</span>\n  <span>prototype</span><span>:</span> <span>MyElementProto</span>\n  <span>// other props</span>\n<span>});</span>\n<span>&lt;/script&gt;</span></code></pre></div>\n\n\n<p>New elements must inherit from the <code>HTMLElement.prototype</code>. More on the above setup and callbacks etc <a href=\"https://github.com/webcomponents/hello-world-element/blob/master/src/hello-world.html\">here</a>, cheers <a href=\"http://twitter.com/zenorocha\">Zeno</a>.</p>\n\n<h5>Extending and inheriting</h5>\n\n<p>What if we wanted to extend an existing element, such as an <code>&lt;h1&gt;</code>\n tag? There will be many cases of this, such as riding off an existing \nelement and creating a \"special\" version of it, rather than a totally \nnew element. We introduce the <code>{ extends: '' }</code> property to declare where what element we're extending. Using an extended element is simple, drop the <code>is=\"\"</code> attribute on an existing element and it'll inherit it's new extension. Pretty simple, I guess.</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;template&gt;</span>\n  // include random, funky things\n<span>&lt;/template&gt;</span>\n<span>&lt;script&gt;</span>\n<span>var</span> <span>MyElementProto</span> <span>=</span> <span>Object</span><span>.</span><span>create</span><span>(</span><span>HTMLElement</span><span>.</span><span>prototype</span><span>);</span>\n<span>window</span><span>.</span><span>MyElement</span> <span>=</span> <span>document</span><span>.</span><span>registerElement</span><span>(</span><span>'funky-heading'</span><span>,</span> <span>{</span>\n  <span>prototype</span><span>:</span> <span>MyElementProto</span><span>,</span>\n  <span>extends</span><span>:</span> <span>'h1'</span> <span>// extends declared here</span>\n<span>});</span>\n<span>&lt;/script&gt;</span>\n\n<span>&lt;h1</span> <span>is=</span><span>\"funky-heading\"</span><span>&gt;</span>\n  Page title\n<span>&lt;/h1&gt;</span></code></pre></div>\n\n\n<p>Using <code>extends=\"\"</code> as an attribute on <code>&lt;element&gt;</code> was the way to do it before it was deprecated.</p>\n\n<p>So what next? Enter the shadows...</p>\n\n<h4>ShadowDOM</h4>\n\n<p>ShadowDOM <em>is</em> as cool as it sounds, and provides a DOM \nencapsulation within DOM. Whaaat? Essentially, nested document \nfragments, that are shadow-y... In ShadowDOM, we're observing nested DOM\n trees/hierarchies. Typically in web documents, there is one DOM. Think \nabout DOM hosting DOM, which hosts more DOM. You'll see something like \nthis in Chrome inspector (note <code>#shadow-root</code>, which is completely encapsulated DOM):</p>\n\n<div><pre><code data-lang=\"html\">▾<span>&lt;user-profile&gt;</span>\n  ▾#shadow-root (user-agent)\n  <span>&lt;div</span> <span>class=</span><span>\"profile\"</span><span>&gt;</span>\n    <span>&lt;img</span> <span>src=</span><span>\"\"</span> <span>class=</span><span>\"profile__img\"</span><span>&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__name\"</span><span>&gt;&lt;/div&gt;</span>\n    <span>&lt;div</span> <span>class=</span><span>\"profile__social\"</span><span>&gt;&lt;/div&gt;</span>\n  <span>&lt;/div&gt;</span>\n <span>&lt;/user-profile&gt;</span></code></pre></div>\n\n\n<p>There are a few different concepts with Shadow DOM, for me, it's that there is no \"global\" Object, no <code>window</code>,\n I can create a new document root. The \"host\" of my this new document \nroot is either referred to as the root or host. We can create new \nShadowDOM by invoking <code>.createShadowRoot();</code> on an element.</p>\n\n<p>ShadowDOM already exists in the wild today though, as soon as you use <code>&lt;input type=range&gt;</code>\n in the browser, we get a nice input with a slider, guess what - that's \nShadowDOM! It's a nested structure that's hidden inside our DOM tree. \nNow we can create it ourselves, this opens up an entire plethora of \nopportunities.</p>\n\n<h5>Why is this <em>really</em> cool?</h5>\n\n<p>ShadowDOM gives us <em>true</em> encapsulation, with scoped components. CSS is <em>scoped</em> (wow, although we tried this with <code>&lt;style scoped&gt;</code>\n but Blink have since removed it from the core to make way for Web \nComponents). This means any CSS we write inside ShadowDOM only affects \nthe DOM of that particular ShadowDOM!</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;template&gt;</span>\n  <span>&lt;style&gt;</span>\n  <span>:host</span> <span>{</span>\n    <span>border</span><span>:</span> <span>1px</span> <span>solid</span> <span>red</span><span>;</span>\n  <span>}</span>\n  <span>&lt;/style&gt;</span>\n  // stuff\n<span>&lt;/template&gt;</span>\n<span>&lt;script&gt;</span>\n<span>var</span> <span>MyElementProto</span> <span>=</span> <span>Object</span><span>.</span><span>create</span><span>(</span><span>HTMLElement</span><span>.</span><span>prototype</span><span>);</span>\n<span>window</span><span>.</span><span>MyElement</span> <span>=</span> <span>document</span><span>.</span><span>registerElement</span><span>(</span><span>'funky-heading'</span><span>,</span> <span>{</span>\n  <span>prototype</span><span>:</span> <span>MyElementProto</span><span>,</span>\n  <span>extends</span><span>:</span> <span>'h1'</span>\n<span>});</span>\n<span>&lt;/script&gt;</span></code></pre></div>\n\n\n<p>This also means each document can also have a unique <code>id</code>, and we can avoid crazy naming conventions for scaling our apps/websites (a minor bonus).</p>\n\n<p>We can also put scripts in there too and talk to the current element:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;template&gt;</span>\n  <span>&lt;style&gt;</span>\n  <span>:host</span> <span>{</span>\n    <span>border</span><span>:</span> <span>1px</span> <span>solid</span> <span>red</span><span>;</span>\n  <span>}</span>\n  <span>&lt;/style&gt;</span>\n  // stuff\n<span>&lt;/template&gt;</span>\n<span>&lt;script&gt;</span>\n<span>(</span><span>function</span> <span>()</span> <span>{</span>\n  <span>// stuff with JS...</span>\n<span>})();</span>\n\n<span>var</span> <span>MyElementProto</span> <span>=</span> <span>Object</span><span>.</span><span>create</span><span>(</span><span>HTMLElement</span><span>.</span><span>prototype</span><span>);</span>\n<span>window</span><span>.</span><span>MyElement</span> <span>=</span> <span>document</span><span>.</span><span>registerElement</span><span>(</span><span>'funky-heading'</span><span>,</span> <span>{</span>\n  <span>prototype</span><span>:</span> <span>MyElementProto</span><span>,</span>\n  <span>extends</span><span>:</span> <span>'h1'</span>\n<span>});</span>\n<span>&lt;/script&gt;</span></code></pre></div>\n\n\n<p>JavaScript events that are fired, also are encapsulated to the ShadowDOM tree.</p>\n\n<h5>How can I see this ShadowDOM?</h5>\n\n<p>In true shadow style, you need to enable it via the <code>Show user agent ShadowDOM</code>\n checkbox inside Chrome Dev Tools. Upon inspecting element, you can see \nthe nested DOM trees. Chrome also allows you to edit the CSS, which is \neven more awesome.</p>\n\n<h4>HTML Imports</h4>\n\n<p>Importing dependencies into our language of choice comes in many shapes and sizes. For CSS, we have <code>@import</code>, for JavaScript in ES6 modules we have <code>import {Module} from './somewhere';</code>, and <em>finally</em>, HTML. We can import HTML components at the top of our document to define which ones we need to use in our app:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;link</span> <span>rel=</span><span>\"import\"</span> <span>href=</span><span>\"user-profile.html\"</span><span>&gt;</span>\n\n<span>&lt;!-- </span>\n<span>  &lt;user-profile&gt; now available, ooo yeah!</span>\n<span>--&gt;</span></code></pre></div>\n\n\n<p>This is massive! Encapsulated components all in one file. Out of the \nbox and working. Let's take Google Maps API for example, we need to \ninclude the Maps API v3, import the 'Hello world' code and then style a \nbasic map. Wouldn't it be great to just do this:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;link</span> <span>rel=</span><span>\"import\"</span> <span>href=</span><span>\"google-map.html\"</span><span>&gt;</span>\n\n<span>&lt;!-- boom! --&gt;</span>\n<span>&lt;google-map&gt;&lt;/google-map&gt;</span></code></pre></div>\n\n\n<p>All encapsulated, tested, I could just pass in values via attributes and job done:</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;google-map</span> <span>coords=</span><span>\"37.2350, 115.8111\"</span><span>&gt;&lt;/google-map&gt;</span></code></pre></div>\n\n\n<h4>Decorators</h4>\n\n<p>Decorators are part of Web Components, but actually have <em>no spec</em> (according to the <a href=\"http://www.w3.org/TR/components-intro/#decorator-section\">spec</a>).\n Apparently they might look something like this, with their intention to\n enhance or override the presentation of an existing element. So ignore \nthem for now, I guess <em>(see Addy's comment on Decorators, they might even disappear from Web Components entirely)</em>.</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;decorator</span> <span>id=</span><span>\"details-open\"</span><span>&gt;</span>\n  <span>&lt;template&gt;</span>\n    <span>&lt;a</span> <span>id=</span><span>\"summary\"</span><span>&gt;</span>\n      <span>&amp;blacktriangledown;</span>\n      <span>&lt;content</span> <span>select=</span><span>\"summary\"</span><span>&gt;&lt;/content&gt;</span>\n    <span>&lt;/a&gt;</span>\n    <span>&lt;content&gt;&lt;/content&gt;</span>\n  <span>&lt;/template&gt;</span>\n<span>&lt;/decorator&gt;</span></code></pre></div>\n\n\n<h3>Can I get started now? Enter Polymer.js</h3>\n\n<p>Yes. Web Components are going to be a little while before fully \nlanding and being the next generation of the web, but they're certainly \nmaking fast traction. We can get to grips with the technology and \nconcepts now and start building using a framework such as Polymer - \nwhich polyfills things for modern browsers to let us use Web Components \nnow.</p>\n\n<p>An example of using Polymer to define an element. Here, we simply swap out (<em>was</em>) <code>&lt;element&gt;</code> for <code>&lt;polymer-elememt&gt;</code> and that's it.</p>\n\n<div><pre><code data-lang=\"html\"><span>&lt;polymer-element</span> <span>name=</span><span>\"my-element\"</span><span>&gt;</span>\n  <span>&lt;template&gt;</span>\n    // take it away!\n  <span>&lt;/template&gt;</span>\n  <span>&lt;script&gt;</span>\n    <span>Polymer</span><span>(</span><span>'my-element'</span><span>,</span> <span>{});</span>\n  <span>&lt;/script&gt;</span>\n<span>&lt;/polymer-element&gt;</span>\n\n<span>&lt;my-element&gt;&lt;/my-element&gt;</span></code></pre></div>\n\n\n<p>Polymer has some really sweet features, such as data-binding (the \nAngular dev inside me loves this) and a tonne of simple events built in,\n from new instances of the element, to creation and injection callbacks \nthat make it really simple to creating new elements.</p>\n\n<h3>Takeaways</h3>\n\n<p>This post isn't meant to be a full tutorial - these components are \nvast and best explored individually, but I wanted to provide an eye \nopener on the rapidly approaching technology that is Web Components.</p>\n\n<p>For me, one of the biggest selling points of Web Components is to \nprevent the inclusion of a huge JavaScript file, a huge CSS file and a \ntonne of HTML to make our website or app. In such cases, we no doubt \ncome back to it a few months later and have forgotten what each thing \ndoes and it's painful to get back up to speed again. We don't forget \nwhat the <code>&lt;google-map&gt;</code> element does though, or the <code>&lt;fluid-vids&gt;</code> element, they're declarative and self-explanatory, we know exactly where their logic is, and where the styles are.</p>\n\n<p>The biggest win? Logic is <em>contained</em>. We've all struggled \nmanaging logic, markup and styles, and now the web has listened. \nEncapsulated behaviour and scoping, but a very powerful engine for \ncomponentising the web, anything from a navigation to google maps to an \nimage slider.</p>\n\n<p>Benefits of Web Components are very clear, and I'm interested to see \nwhere it takes us in the next few years. This post is by far from \nexhaustive, but I feel we should all take a dive into what the future of\n the web will bring us, we'll be there sooner than you think!</p>\n\n<p>Links to definitely keep an eye on (any others feel free to share below):</p>\n\n<ul>\n<li><a href=\"http://webcomponents.org/\">WebComponents.org</a></li>\n<li><a href=\"http://www.polymer-project.org/\">Polymer</a></li>\n<li><a href=\"http://customelements.io/\">customelements.io</a></li>\n<li><a href=\"http://html5rocks.com/\">HTML5 Rocks</a></li>\n<li>Eric Bidelman, Google I/O 2013 <a href=\"https://www.youtube.com/watch?v=fqULJBBEVQE\">Tectonic shift for the web</a></li>\n<li>Eric Bidelman, Google I/O 2014 <a href=\"https://www.youtube.com/watch?v=8OJ7ih8EE7s\">Polymer and Web Components</a></li></ul>","tags":"javascript,ShadowDOM,imports,templates","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 18:04:11 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 18:04:11 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"7PrseQVpzykHzgWB"}
{"id":"0","category":"node.js","categoryId":"31","title":"Node.js : Download file using HTTPS","codes":[{"code":"var https   = require('https');\nvar fs      = require('fs');\nvar options = {\n  hostname  : 'wordpress.org',\n  port      : 443,\n  path      : '/latest.zip',\n  method    : 'GET'\n};\n\nvar file = fs.createWriteStream(\"wp_latest.zip\");\n\nvar req = https.request(options, function(res) {\n  console.log(\"statusCode: \", res.statusCode);\n  console.log(\"headers: \", res.headers);\n  res.on('data', function(d) {\n\t  file.write(d);\n  });\n});\nreq.end();\n\nreq.on('error', function(e) {\n  console.error(e);\n});\n","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"node.js,Download","isStarred":"false","note":"","dateCreated":"Sat Feb 21 2015 17:52:13 GMT+0530 (India Standard Time)","dateModified":"Sat Feb 21 2015 17:52:13 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"7kiwNOkR7QKfvFip"}
{"id":"0","category":"javascript","categoryId":"30","title":"Remove last appeared comma in string using javascript","codes":[{"code":"// Regex Method 1\nstr.replace(/,(?=[^,]*$)/, '');\n\n// Regex Method 2 ( Simple One)\nstr.replace(/,+$/, '');\n\n// Non Regex Method\nvar str = \"test, text, 123, without last comma,\";\nvar index = str.lastIndexOf(\",\");\nstr = str.substring(0, index) + str.substring(index + 1);","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<p><br></p>","tags":"javascript,Regex","isStarred":"false","note":"","dateCreated":"Sat Jan 24 2015 15:18:32 GMT+0530 (India Standard Time)","dateModified":"Sat Jan 24 2015 15:18:32 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"8MTCouAN4knNJxNE"}
{"id":"0","category":"css","categoryId":"29","title":"Using The CSS :target Selector To Create JavaScript-less UI Effects","refSite":"http://blogs.adobe.com/dreamweaver/2015/01/using-the-css-target-selector-to-create-javascript-less-ui-effects.html#.VOyLzuHB27m","codes":[{"code":"<div class=\"container\">\n\t<nav>\n\t\t<ul>\n\t\t\t<li><a href=\"#section-1\">Section 1</a></li>\n\t\t\t<li><a href=\"#section-2\">Section 2</a></li>\n\t\t\t<li><a href=\"#section-3\">Section 3</a></li>\n\t\t\t<li><a href=\"#section-4\">Section 4</a></li>\n\t\t</ul>\n\t</nav>\n\t<section id=\"section-1\">\n\t\t<h1>Section 1</h1>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis sed laboriosam cum quisquam unde consequuntur tenetur similique maiores obcaecati. Dignissimos, suscipit non perferendis doloremque tenetur aliquid ipsa! Minima, unde, eligendi.\n\t\t</p>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Incidunt, architecto, culpa, delectus magnam asperiores molestias atque impedit veniam soluta perferendis maxime deserunt quibusdam sequi totam fuga doloremque non perspiciatis ab?\n\t\t</p>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Eaque error optio autem architecto nostrum? Nobis in ducimus dignissimos provident ratione vel impedit? Rerum odit beatae accusantium debitis nisi non hic.\n\t\t</p>\n\t</section>\n\t<section id=\"section-2\">\n\t\t<h1>Section 2</h1>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam, porro amet tenetur deserunt aliquid vitae reprehenderit nihil ea! Debitis, vel, minus adipisci labore pariatur sapiente similique illum alias dicta itaque.\n\t\t</p>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsum, fugiat, architecto, veritatis quam laboriosam consectetur eius rem dicta dolore aspernatur deserunt magnam excepturi eaque culpa accusantium harum recusandae quaerat vel!\n\t\t</p>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorum, iusto, at, aperiam tempora reprehenderit nesciunt repellendus amet ullam incidunt nemo praesentium consequatur blanditiis laborum. Modi reprehenderit et fugiat voluptatibus ab!\n\t\t</p>\n\t</section>\n\t<section id=\"section-3\">\n\t\t<h1>Section 3</h1>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. A, saepe, molestias, nisi voluptatum modi sit commodi pariatur recusandae aut veniam obcaecati quia quod laborum natus aspernatur atque repellendus porro ratione.\n\t\t</p>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Reprehenderit, nemo magnam vero ea eos porro laboriosam ad soluta nobis consectetur corporis est blanditiis at saepe officiis cupiditate assumenda eaque placeat!\n\t\t</p>\n\t</section>\n\t<section id=\"section-4\">\n\t\t<h1>Section 4</h1>\n\t\t<p>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Laboriosam sed illo dolorem. Voluptate, tenetur quaerat perferendis velit magni neque cupiditate a minima dicta pariatur eveniet mollitia earum similique libero repellendus!\n\t\t</p>\n\t</section>\n</div>\n","codeLanguage":"html"},{"code":"@import url(http://fonts.googleapis.com/css?family=Lato:300,400,700,900);\nbody {\n  background-color: #F5F5F5;\n  color: #555;\n  font-size: 1.1em;\n  font-family: 'Lato', sans-serif;\n}\nhr {\n\tmargin: 50px 0;\n}\n.container {\n    margin: 40px auto;\n    width: 75%;\n}\n.element {\n    padding:20px;\n} \na {\n\tcolor: #8CC152;\n}\nul {\n\tlist-style: none;\n\tpadding-left:0;\n}\nnav {\n\tbackground-color: #fff;\n\tcolor: white;\n  \n  padding: 1em;\n  \n  margin-bottom: .5em;\n}\nsection {\n\tpadding: 1em;\n\tborder: 1px solid #ddd;\n\tbackground-color: white;\n\tmargin-bottom: 1em;\n}\nsection:target {\n\t-webkit-animation: highlight .8s ease-out;\n\t\t\tanimation: highlight .8s ease-out;\n}\n@-webkit-keyframes highlight {\n\t0% { background-color: #FFFF66; }\n    100% { background-color: #FFFFFF; }\n}\n@keyframes highlight {\n\t0% { background-color: #FFFF66; }\n    100% { background-color: #FFFFFF; }\n}\n","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"","tags":"css,Animation","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 20:08:26 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 20:08:26 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"8z69CTNB9pLR421V"}
{"id":"bQQWiCF0jC3AC6Qt","category":"javascript","categoryId":"30","title":"Copy To Clipboard Cross Browser","codes":[{"code":"    <a href=\"#\" id=\"copy\" onclick=\"copyToClipboard(document.getElementById('pre').innerHTML)\">Copy to clipboard</a>\n    <pre id=\"pre\">\n    header{margin-bottom:30px}\n    header h1{font:italic 30px Georgia,serif;color:#999;text-align:center}\n    .box{width:100px;height:100px;background:red;border-radius:50px}\n    footer{margin:15px auto}\n    </pre>","codeLanguage":"html"},{"code":"    function copyToClipboard(s) {\n    if (window.clipboardData && clipboardData.setData) {\n    clipboardData.setData('text', s);\n    }\n    }","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"}],"description":"If you use any script for syntax highlighting, you’ll see most of them \nhas “copy to clipboard” feature. This is a fascinating thing done with \nJavascript. So I want to know more about it: <strong>how to implement copy to clipboard in Javascript</strong>.\n I did some searches on Google and found many articles which show \nvarious solutions. They’re so interesting and I just want to share a \nsmall roundup in this article.","tags":"javascript,Clipboard","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 14:54:41 GMT+0530 (India Standard Time)","dateModified":"Sat Feb 07 2015 14:54:41 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"9DPmL61J0cGjVrhu"}
{"id":"9FQIWYtXYF7Kt3YN","category":"","categoryId":"","title":"jQuery Custom Events","codes":[{"code":"// Example 1\n// HTML\n<div class=\"room\" id=\"kitchen\">\n\t<div class=\"lightbulb on\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"clapper\"></div>\n</div>\n\n<script type=\"application/javascript\">\n// Javascript\n$( \".lightbulb\" ).on( \"changeState\", function( e ) {\n\tvar light = $( this );\n\tif ( light.hasClass( \"on\" ) ) {\n\t\tlight.removeClass( \"on\" ).addClass( \"off\" );\n\t\t} else {\n\t\tlight.removeClass( \"off\" ).addClass( \"on\" );\n\t}\n});\n$( \".switch, .clapper\" ).click(function() {\n\t$( this ).parent().find( \".lightbulb\" ).trigger( \"changeState\" );\n});\n</script>","codeLanguage":"xml"},{"code":"// Example 2\n// HTML\n<div class=\"room\" id=\"kitchen\">\n\t<div class=\"lightbulb on\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"clapper\"></div>\n</div>\n\n<div class=\"room\" id=\"bedroom\">\n\t<div class=\"lightbulb on\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"switch\"></div>\n\t<div class=\"clapper\"></div>\n</div>\n\n<div id=\"master_switch\"></div>\n\n<script type=\"application/javascript\">\n// Javascript\n$( \".lightbulb\" ).on( \"changeState\", function( e ) {\n\tvar light = $( this );\n\tif ( light.hasClass( \"on\" ) ) {\n\t\tlight.trigger( \"turnOff\" );\n\t\t} else {\n\t\tlight.trigger( \"turnOn\" );\n\t}\n\t}).on( \"turnOn\", function( e ) {\n\t$( this ).removeClass( \"off\" ).addClass( \"on\" );\n\t}).on( \"turnOff\", function( e ) {\n\t$( this ).removeClass( \"on\" ).addClass( \"off\" );\n});\n$( \".switch, .clapper\" ).click(function() {\n\t$( this ).parent().find( \".lightbulb\" ).trigger( \"changeState\" );\n});\n$( \"#master_switch\" ).click(function() {\n\tif ( $( \".lightbulb.on\" ).length ) {\n\t\t$( \".lightbulb\" ).trigger( \"turnOff\" );\n\t\t} else {\n\t\t$( \".lightbulb\" ).trigger( \"turnOn\" );\n\t}\n});\n</script>","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"}],"description":"<p>Example 2 :</p><p>Let's make our example a little more interesting. We'll add another room to our house, along with a master switch, as shown here:</p><p>If there are any lights on in the house, we want the master switch to turn all the lights off; otherwise, we want it to turn all lights on. To accomplish this, we'll add two more custom events to the lightbulbs: <code>turnOn</code> and <code>turnOff</code>. We'll make use of them in the <code>changeState</code> custom event, and use some logic to decide which one the master switch should trigger:</p><p>Note how the behavior of the master switch is attached to the master switch; the behavior of a lightbulb belongs to the lightbulbs.</p><p></p><p>If you're accustomed to object-oriented programming, you may find it useful to think of custom events as methods of objects. Loosely speaking, the object to which the method belongs is created via the jQuery selector. Binding the <code>changeState</code> custom event to all <code>$( \".light\" )</code> elements is akin to having a class called <code>Light</code> with a method of <code>changeState</code>, and then instantiating new <code>Light</code> objects for each element with a classname of <code>light</code>.</p><p>Recap: .on() and .trigger()</p><p>In the world of custom events, there are two important jQuery methods: .on() and .trigger(). In the Events chapter, we saw how to use these methods for working with user events; for this chapter, it's important to remember two things:</p><p>.on() method takes an event type and an event handling function as arguments. Optionally, it can also receive event-related data as its second argument, pushing the event handling function to the third argument. Any data that is passed will be available to the event handling function in the data property of the event object. The event handling function always receives the event object as its first argument.</p><p><span>.trigger() method takes an event type as its argument. Optionally, it can also take an array of values. These values will be passed to the event handling function as arguments after the event object.</span><br></p><p>Here is an example of the usage of .on() and .trigger() that uses custom data in both cases:</p><pre>$( document ).on( \"myCustomEvent\", {\tfoo: \"bar\"\t}, function( event, arg1, arg2 ) {\tconsole.log( event.data.foo ); // \"bar\"\tconsole.log( arg1 ); // \"bim\"\tconsole.log( arg2 ); // \"baz\"});$( document ).trigger( \"myCustomEvent\", [ \"bim\", \"baz\" ] );</pre>","tags":"","isStarred":"false","note":"","dateCreated":"Sat Jan 31 2015 18:00:27 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422709829795},"mode":"add","comments":[],"images":[],"_id":"9FQIWYtXYF7Kt3YN"}
{"id":"0","category":"javascript","categoryId":"30","title":"Invoking JavaScript Functions With 'call' and 'apply'","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>A couple of issues ago, we talked about some of the implications of <a href=\"http://adripofjavascript.com/blog/drips/function-functions\">functions being first-class citizens</a> in JavaScript. Here is a further implication to consider: <strong>If functions are objects and objects can have methods, then functions can have methods.</strong></p>\n\n<p>In fact, JavaScript functions come with several methods built into <code>Function.prototype</code>. First let's take a look at <code>call</code>.</p>\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>add</span> <span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>{</span>\n    <span>return</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>\n<span>}</span>\n\n<span>// Outputs: 3</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>add</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>));</span>\n\n<span>// Outputs: 3</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>add</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>));</span>\n</code></pre></div>\n<p>Assuming that you're not using <a href=\"http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/\">strict mode</a>, these invocations of <code>add</code> are exactly equivalent. The first parameter given to <code>call</code> has a special purpose, but any subsequent parameters are treated the same as if <code>add</code> had been invoked normally.</p>\n\n<p>The first parameter that <code>call</code> expects, though, will be set to <code>add</code>'s internal <code>this</code> value. When a function is invoked ordinarily, the <code>this</code> value is set implicitly.</p>\n\n<p>If you're not in strict mode and the function isn't attached to an object, then it will inherit its <code>this</code> from the global object. If the function is attached to an object, its default <code>this</code> is the receiver of the method call.</p>\n\n<p>Let's look at how that works:</p>\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>palestrina</span> <span>=</span> <span>{</span>\n    <span>work</span><span>:</span> <span>\"Missa Papae Marcelli\"</span><span>,</span>\n    <span>describe</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n        <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span><span>work</span><span>);</span>\n    <span>}</span>\n<span>};</span>\n\n<span>// Outputs: \"Missa Papae Marcelli\",</span>\n<span>palestrina</span><span>.</span><span>describe</span><span>();</span>\n</code></pre></div>\n<p>But <code>call</code> gives us a way to \"borrow\" a method from one object to use for another.</p>\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>erasmus</span> <span>=</span> <span>{</span>\n    <span>work</span><span>:</span> <span>\"Freedom of the Will\"</span>\n<span>};</span>\n\n<span>// Outputs: \"Freedom of the Will\"</span>\n<span>palestrina</span><span>.</span><span>describe</span><span>.</span><span>call</span><span>(</span><span>erasmus</span><span>);</span>\n</code></pre></div>\n<p>You may be wondering how this is useful. But we've seen <a href=\"http://adripofjavascript.com/blog/drips/arbitrary-parameters-with-the-arguments-object\">this approach</a> before. Last time, we used it to invoke <code>Array</code> methods on a non-array (though array-like) object.</p>\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>myFunc</span> <span>()</span> <span>{</span>\n    <span>// Invoke `slice` with `arguments`</span>\n    <span>// as it's `this` value</span>\n    <span>var</span> <span>args</span> <span>=</span> <span>Array</span><span>.</span><span>prototype</span><span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span><span>arguments</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<p>It's use extends beyond the <code>arguments</code> object, though. For instance, you can invoke many array methods on strings:</p>\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>original</span> <span>=</span> <span>\"There is 1 number.\"</span><span>;</span>\n\n<span>var</span> <span>updated</span> <span>=</span> <span>Array</span><span>.</span><span>prototype</span><span>.</span><span>filter</span><span>.</span><span>call</span><span>(</span><span>original</span><span>,</span> <span>function</span><span>(</span><span>val</span><span>)</span> <span>{</span>\n    <span>return</span> <span>val</span><span>.</span><span>match</span><span>(</span><span>/1/</span><span>);</span>\n<span>});</span>\n\n<span>// Outputs: [\"1\"]</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>updated</span><span>);</span>\n\n<span>// Outputs: \"1\"</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>updated</span><span>.</span><span>join</span><span>(</span><span>''</span><span>));</span>\n</code></pre></div>\n<p>Of course, the return values of those methods will be arrays, so you may need to convert them back to strings with <code>join</code>.</p>\n\n<p>So far we've only talked about <code>call</code>. So what's the deal with <code>apply</code>? It turns out that <code>apply</code> works in almost exactly the same way as <code>call</code>. The difference is that instead of a series of arguments, <code>apply</code> takes an array of values to use in its invocation.</p>\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>add</span> <span>(</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>{</span>\n    <span>return</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>\n<span>}</span>\n\n<span>// Outputs: 3</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>add</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>));</span>\n\n<span>// Outputs: 3</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>add</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>]));</span>\n</code></pre></div>\n<p>In the example above, <code>call</code> and <code>apply</code> are used in exactly equivalent ways. As you can see, the only real difference is that <code>apply</code> takes an array. </p>\n\n<p>But that turns out to be a very important difference. Unlike a series\n of arguments, an array is very easy to manipulate in JavaScript. And \nthat opens up much larger possibilities for working with functions.</p>\n\n<p>In the next issue, we'll explore some of those possibilities.</p>","tags":"javascript,Call and Apply","isStarred":"false","note":"","dateCreated":"Wed Feb 11 2015 21:39:25 GMT+0530 (India Standard Time)","dateModified":"Wed Feb 11 2015 21:39:25 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"9LBALAX4KQuiDUoQ"}
{"id":"9LXjqf4fxd3CVbEE","category":"javascript","categoryId":"30","title":"Sort an Array of Dates with JavaScript","codes":[{"code":"// First let's create an array of JavaScript Date\n// objects.\n// More info about the Date class:\n// http://w3schools.com/js/js_obj_date.asp\n\nvar dates = [\nnew Date(2010, 4, 10, 10, 07, 16),\nnew Date(2010, 4, 8, 9, 16, 09),\nnew Date(2010, 3, 30, 0, 15, 49),\nnew Date(2010, 3, 8, 10, 08, 35)];\n \n// Now we will define our date comparison functions. These are callbacks\n// that we will be providing to the array sort method below.\nvar date_sort_asc = function (date1, date2) {\n// This is a comparison function that will result in dates being sorted in\n// ASCENDING order. As you can see, JavaScript's native comparison operators\n// can be used to compare dates. This was news to me.\nif (date1 > date2) return 1;\nif (date1 < date2) return -1;\nreturn 0;\n};\n \nvar date_sort_desc = function (date1, date2) {\n// This is a comparison function that will result in dates being sorted in\n// DESCENDING order.\nif (date1 > date2) return -1;\nif (date1 < date2) return 1;\nreturn 0;\n};\n \n// Finally, we are now able to call the sort method on our array of dates.\n// More info about array sorting: http://w3schools.com/jsref/jsref_sort.asp\n \n// First let's sort the array in ascending order.\ndates.sort(date_sort_asc);\n \n// Now let's output the results to the page to show that the dates are now\n// sorted in ascending order.\ndocument.write('<p>Dates sorted in ascending order (oldest to newest):</p>');\nfor (var i = 0; i < dates.length; i++) {\ndocument.write(i + ': ' + dates[i] + '<br>');\n}\n \n// Now let's sort the dates in descending order and output the results.\ndates.sort(date_sort_desc);\n \ndocument.write('<p>Dates sorted in descending order (newest to oldest):</p>');\nfor (var i = 0; i < dates.length; i++) {\ndocument.write(i + ': ' + dates[i] + '<br>');\n}\n \n// That's all there is to it!\n// From: http://onpub.com/index.php?s=7&a=109","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"","tags":"javascript,array,sort","isStarred":"false","note":"","dateCreated":"Fri Jan 30 2015 21:40:32 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422634318370},"mode":"add","comments":[],"images":[],"_id":"9LXjqf4fxd3CVbEE"}
{"id":"0","category":"svg","categoryId":"54","title":"SVG Circle Progress","codes":[{"code":"<h1>SVG Circle Progress</h1>\n<h2>Based off of CSS3 circle progress bars</h2>\n\n<div id=\"cont\" data-pct=\"100\">\n\t<svg id=\"svg\" width=\"200\" height=\"200\" viewPort=\"0 0 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t<circle r=\"90\" cx=\"100\" cy=\"100\" fill=\"transparent\" stroke-dasharray=\"565.48\" stroke-dashoffset=\"0\"></circle>\n\t\t<circle id=\"bar\" r=\"90\" cx=\"100\" cy=\"100\" fill=\"transparent\" stroke-dasharray=\"565.48\" stroke-dashoffset=\"0\"></circle>\n\t</svg>\n</div>\n<label for=\"percent\">Type a percent!</label>\n<input id=\"percent\" name=\"percent\">","codeLanguage":"html"},{"code":"#svg circle {\n\tstroke-dashoffset: 0;\n\ttransition: stroke-dashoffset 1s linear;\n\tstroke: #666;\n\tstroke-width: 1em;\n}\n#svg #bar {\n\tstroke: #FF9F1E;\n}\n#cont {\n\tdisplay: block;\n\theight: 200px;\n\twidth: 200px;\n\tmargin: 2em auto;\n\tbox-shadow: 0 0 1em black;\n\tborder-radius: 100%;\n\tposition: relative;\n}\n#cont:after {\n\tposition: absolute;\n\tdisplay: block;\n\theight: 160px;\n\twidth: 160px;\n\tleft: 50%;\n\ttop: 50%;\n\tbox-shadow: inset 0 0 1em black;\n\tcontent: attr(data-pct)\"%\";\n\tmargin-top: -80px;\n\tmargin-left: -80px;\n\tborder-radius: 100%;\n\tline-height: 160px;\n\tfont-size: 2em;\n\ttext-shadow: 0 0 0.5em black;\n}\n\ninput {\n\tcolor: #000;\n}","codeLanguage":"css"},{"code":"/*\nThe stroke-dasharray value needs changing as the radius changes.\n\nNote that 565.48 = 2 * PI * 90 so when you change the radius you need to change the stroke-dasharray attribute to be 2 * PI * r where r is the new radius.\n\n*/\n\n$('#percent').on('change', function(){\n\tvar val = parseInt($(this).val());\n\tvar $circle = $('#svg #bar');\n\t\n\tif (isNaN(val)) {\n\t\tval = 100; \n\t}\n\telse{\n\t\tvar r = $circle.attr('r');\n\t\tvar c = Math.PI*(r*2); // Math.PI = 3.141592653589793\n\t\t\n\t\tif (val < 0) { val = 0;}\n\t\tif (val > 100) { val = 100;}\n\t\t\n\t\tvar pct = ((100-val)/100)*c;\n\t\t\n\t\t$circle.css({ strokeDashoffset: pct}); // stroke-dasharray value = 2 * PI * r ( where r is the new radius)\n\t\t\n\t\t$('#cont').attr('data-pct',val);\n\t}\n});","codeLanguage":"javascript"}],"description":"","tags":"SVG,Progress,Circular Progress","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 13:01:26 GMT+0530 (India Standard Time)","dateModified":"Sat Feb 07 2015 13:01:26 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"9ccxtkyuGF8KCf2Q"}
{"id":"9fqot0itEs9eLsK7","category":"css","categoryId":"29","title":"Create Beautiful Hexagon Shapes With Pure CSS3","refSite":"http://www.queness.com/post/13901/create-beautiful-hexagon-shapes-with-pure-css3","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2>Introduction</h2>\n<p>In this tutorial, we are going to make hexagon shapes that support \nHTML content and also background image with just CSS3. CSS3 has been an \namazing revision in creating more advanced styling. Don't believe me? \nCheck this <a href=\"http://favbulous.com/post/1045/16-graphics-coded-purely-with-css\">awesome graphic coded purely with CSS</a>.</p>\n<div>\n<a href=\"http://www.queness.com/resources/html/css3-hexagon/index.html\">Demo </a><a href=\"http://www.queness.com/resources/archives/css3-hexagon.zip\">Download</a>\n</div>\n<p>With CSS Transform, we can easily skew, rotate and other \nmanipulations on DOM element. We are going to use CSS3 rotate and \nmasking to achieve what we want. This tutorial will be slightly \ncomplicated in CSS part, and I have tried my best to explain it with \nillustrations. Alright, let's get started.</p>\n<h2>HTML</h2>\n<p>This hexagon can have two different styles. You can either put text \ncontent in it or just pure image. The HTML markup is quite similar and \nthey also share the same CSS.</p>\n<p>Referring to the HTML markup below, there are two div called <code>.corner-1</code> and <code>corner-2</code>, we will rotate these two divs to 60 degree to create the shape we want.</p>\n<div><div><pre><ol><li><span>&lt;div</span> <span>class</span><span>=</span><span>\"hex hex-3\"</span><span>&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;div</span> <span>class</span><span>=</span><span>\"inner\"</span><span>&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;h4&gt;</span>CONTACT US<span>&lt;/h4&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;hr</span> <span>/&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;p&gt;</span>We Open Everyday<span>&lt;/p&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/div&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;a</span> <span>href</span><span>=</span><span>\"#\"</span><span>&gt;&lt;/a&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;div</span> <span>class</span><span>=</span><span>\"corner-1\"</span><span>&gt;&lt;/div&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;div</span> <span>class</span><span>=</span><span>\"corner-2\"</span><span>&gt;&lt;/div&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li><span>&lt;/div&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;</li><li></li><li><span>&lt;div</span> <span>class</span><span>=</span><span>\"hex\"</span> <span>style</span><span>=</span><span>\"background-image: url(images/2.jpg);\"</span><span>&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;a</span> <span>href</span><span>=</span><span>\"#\"</span><span>&gt;&lt;/a&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;div</span> <span>class</span><span>=</span><span>\"corner-1\"</span><span>&gt;&lt;/div&gt;</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;div</span> <span>class</span><span>=</span><span>\"corner-2\"</span><span>&gt;&lt;/div&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li><span>&lt;/div&gt;</span></li></ol></pre></div></div>\n<h2>CSS</h2>\n<p>Alright, it will be a little bit complicated in CSS section. A \nhexagon has six edges and each angle is 60 degree. We are going to build\n a hexagon with 3 rectangles. Referring to the picture below, in step 1 \nto 3, we are placing 2 rectangles on top of the main one and rotate them\n 60 degree. That's how a hexagon is made.</p>\n<p><img src=\"http://www.queness.com/resources/uploaded/hexagon.jpg\" alt=\"\" data-src=\"../database/uploads/images/article_images/hexagon_28_3_2015.jpg\"></p>\n<p>For the background image, there is more work to make it display \ncorrectly. Because we have rotated both corners, the background image is\n rotated as well. Therefore, to rectify this, we will be using <code>:before</code> to duplicate its content, rotate it back, make it a square, and mask it with <code>overflow:hidden</code>.</p>\n<p>Here I have another illustration to let you see it a little bit more clearly.</p>\n<p><img src=\"http://www.queness.com/resources/uploaded/hexagon2.jpg\" alt=\"\" data-src=\"../database/uploads/images/article_images/hexagon2_28_3_2015.jpg\"></p>\n<div><div><pre><ol><li><span>.hex</span> <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span><span>150px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>height:</span><span>86px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>background-color:</span> <span>#ccc</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>background-repeat:</span> <span>no-repeat</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>background-position:</span> <span>50%</span> <span>50%</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>background-size:</span> <span>auto</span> <span>173px</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>position:</span> <span>relative</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>float:</span><span>left</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>margin:</span><span>25px</span> <span>5px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>text-align:</span><span>center</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>zoom:</span><span>1</span>;</li><li><span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex.hex</span><span>-</span>gap <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>margin-left:</span> <span>86px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> a <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>display:</span><span>block</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span> <span>100%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>height:</span><span>100%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>text-indent:</span><span>-9999em</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>position:</span><span>absolute</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>top:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>left:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>1<span>,</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>2 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>position:</span> <span>absolute</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>top:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>left:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span><span>100%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>height:</span><span>100%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>background:</span> <span>inherit</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>z-index:</span><span>-2</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>overflow:</span><span>hidden</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>backface-visibility:</span> <span>hidden</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>1 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>z-index:</span><span>-1</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>transform:</span> <span>rotate</span>(<span>60deg</span>);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>2 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>transform:</span> <span>rotate</span>(<span>-60deg</span>);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>1<span>:</span>before<span>,</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>2<span>:</span>before <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span> <span>173px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>height:</span>&nbsp;&nbsp;&nbsp;&nbsp;<span>173px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>content:</span> '';</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>position:</span> <span>absolute</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>background:</span> <span>inherit</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>top:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>left:</span> <span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>z-index:</span> <span>1</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>background:</span> <span>inherit</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>background-repeat:</span><span>no-repeat</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>backface-visibility:</span> <span>hidden</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>1<span>:</span>before <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>transform:</span> <span>rotate</span>(<span>-60deg</span>) <span>translate</span>(<span>-87px</span>, <span>0px</span>);&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;  <span>transform-origin:</span> <span>0</span> <span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.corner</span><span>-</span>2<span>:</span>before <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>transform:</span> <span>rotate</span>(<span>60deg</span>) <span>translate</span>(<span>-48px</span>, <span>-11px</span>);&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>bottom:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li></li><li></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>/* Custom styles*/</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> <span>.inner</span> <span>{</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>color:</span><span>#eee</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> h4 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>font-family:</span> '<span>Josefin</span> <span>Sans</span>', <span>sans-serif</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>margin:</span><span>0</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> hr <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>border:</span><span>0</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>border-top:</span><span>1px</span> <span>solid</span> <span>#eee</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span><span>60%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>margin:</span><span>15px</span> <span>auto</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex</span> p <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>font-size:</span><span>16px</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>font-family:</span> '<span>Kotta</span> <span>One</span>', <span>serif</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>width:</span><span>80%</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>margin:</span><span>0</span> <span>auto</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex.hex</span><span>-</span>1 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>background:</span> <span>#74cddb</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex.hex</span><span>-</span>2 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>background:</span> <span>#f5c53c</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>.hex.hex</span><span>-</span>3 <span>{</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>background:</span> <span>#80b971</span>;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span></li></ol></pre></div></div>\n<h2>Conclusion</h2>\n<p>This hexagon shape tutorial is pretty straight forward. It took me a \nwhile to figure it out and along the process of experiementing, I did \npick up a few tricks such as CSS transform and masking. I hope you enjoy\n this, if you have any questions, drop us a comment. If you liked this, \nplease share it via social media. Thanks :)</p>","tags":"css,CSS Shapes,Hexagon","isStarred":"false","articleImages":["http://www.queness.com/resources/uploaded/hexagon.jpg","http://www.queness.com/resources/uploaded/hexagon2.jpg"],"note":"","dateCreated":"Sat Mar 28 2015 19:51:52 GMT+0530 (India Standard Time)","dateModified":{"$$date":1427552523110},"mode":"add","comments":[],"images":[],"_id":"9fqot0itEs9eLsK7"}
{"id":"0","category":"css","categoryId":"29","title":"Animated Header with scroll","refSite":"http://simbyone.com/animated-header-with-scroll/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p><span>T</span>oday I will teach you how to create an&nbsp;<strong>animated header</strong>&nbsp;with\n scroll to a section of the page each time you click one of the links in\n the header. To make things a bit more interesting I also added a text \nheading to each section.<br>\n&nbsp;<br>\nImages used in this tutorial are from&nbsp;<a title=\"Aurimas\" href=\"https://www.flickr.com/photos/needoptic/\" target=\"_blank\" rel=\"nofollow\">Aurimas</a>&nbsp;on Flickr. He has many nice photos and you should go ahead and check them out.<br>\n&nbsp;<br>\nThe scrolling technique will feel more at home in one page websites but \nthe animated header will go great with most of the websites that have a \nheader. To be honest I don’t think there are many websites that don’t \nhave a header nowadays.<br>\n&nbsp;</p>\n<div><strong>This tutorial</strong> will only work on browsers that supports the most recent CSS3 features and this tutorial is not ready for production.</div>\n<p>&nbsp;<br>\n</p><p><br>\n&nbsp;</p>\n<h1>HTML</h1>\n<p>&nbsp;<br>\nLet’s start out by creating a “wrapper” what will hold the whole page.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"wrapper\"</span><span>&gt;&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe header which is the main feature of this tutorial will have two main\n elements besides “header-inner” which is used to center things out. The\n “header-inner-logo” will be used to hold both the icon element and the \ntext element. The navigation links are located inside \n“header-inner-nav”. You will see that I added “data-button” attribute to\n each link, this attribute will help us see which link will scroll to \nwhich section.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header-inner\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header-inner-logo\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header-inner-logo-icon\"</span><span>&gt;&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe150;\"</span><span>&gt;&lt;/span&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header-inner-logo-text\"</span><span>&gt;&lt;span&gt;</span><span>Awesome</span><span>&lt;/span&gt;</span><span>Company</span><span>&lt;/div&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"header-inner-nav\"</span><span>&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"1\"</span><span>&gt;</span><span>Home</span><span>&lt;/p&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"2\"</span><span>&gt;</span><span>Projects</span><span>&lt;/p&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"3\"</span><span>&gt;</span><span>About Us</span><span>&lt;/p&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"4\"</span><span>&gt;</span><span>Portfolio</span><span>&lt;/p&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"5\"</span><span>&gt;</span><span>Why Us</span><span>&lt;/p&gt;</span></li><li><span>&lt;p</span><span> </span><span>data-button</span><span>=</span><span>\"6\"</span><span>&gt;</span><span>Contact</span><span>&lt;/p&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe sections are named “tab” and inside each tab I added an image and \n“tab-headline” element which also has a paragraph inside of it. You will\n see that all tabs have a “data-section” attribute. That is because we \nwill use the value inside this attribute to point the header links to \nthe right section.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"1\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/1.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>Home</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"2\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/2.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>Projects</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"3\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/3.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>About Us</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"4\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/4.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>Portfolio</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"5\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/5.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>Why Us</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab\"</span><span> </span><span>data-section</span><span>=</span><span>\"6\"</span><span>&gt;</span></li><li><span>&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/6.jpg\"</span><span> </span><span>/&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"tab-headline\"</span><span>&gt;&lt;p&gt;</span><span>Contact</span><span>&lt;/p&gt;&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;</p>\n<h1>CSS</h1>\n<p>&nbsp;<br>\nI will start by saying that #wrapper has nothing special just floats to the left.<br>\n&nbsp;</p>\n<pre><ol><li><span>#wrapper {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nThe header will need to have it’s position fixed so it can stay at the \ntop of the screen while we scroll. The initial header doesn’t have any \nbackground color, this will be set later with javascript.<br>\n&nbsp;</p>\n<pre><ol><li><span>#header{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tposition</span><span>:</span><span> </span><span>fixed</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\tz</span><span>-</span><span>index</span><span>:</span><span> </span><span>1</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>40</span><span>,</span><span>43</span><span>,</span><span>52</span><span>,</span><span>1</span><span>);</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nThe inner header element will have to be centered and I will do that by setting his position to auto both left and right.<br>\n&nbsp;</p>\n<pre><ol><li><span>#header-inner {</span></li><li><span>\twidth</span><span>:</span><span> </span><span>950px</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>60px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>right</span><span>:</span><span> </span><span>auto</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>auto</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nThe left side of the header will be occupied by the logo which has two \nelements: the icon of the logo itself and the text. I have created two \nelements instead of one because I wanted to give each element different \nproperties.<br>\n&nbsp;</p>\n<pre><ol><li><span>#header-inner-logo {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>60px</span><span>;</span></li><li><span>}</span></li><li><span>#header-inner-logo-icon {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>60px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>40px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>}</span></li><li><span>#header-inner-logo-text {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>60px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li><li><span>#header-inner-logo-text span {</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nIn the right we have the navigation which doesn’t have links but \nparagraphs since this will be one page only. The paragraphs have a fast \nfade in effect when it’s in hover state.<br>\n&nbsp;</p>\n<pre><ol><li><span>#header-inner-nav {</span></li><li><span>\t</span><span>float</span><span>:</span><span> right</span><span>;</span></li><li><span>}</span></li><li><span>#header-inner-nav p {</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>15px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> inherit</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>decoration</span><span>:</span><span> none</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>400</span><span>;</span></li><li><span>\tpadding</span><span>-</span><span>left</span><span>:</span><span> </span><span>15px</span><span>;</span></li><li><span>\tdisplay</span><span>:</span><span> block</span><span>;</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>15px</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.2s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.2s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.2s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.2s</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>35px</span><span>;</span></li><li><span>\tpadding</span><span>-</span><span>right</span><span>:</span><span> </span><span>15px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>bottom</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>12px</span><span>;</span></li><li><span>}</span></li><li><span>#header-inner-nav p:hover {</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> hsla</span><span>(</span><span>225</span><span>,</span><span>13</span><span>%,</span><span>18</span><span>%,</span><span>1</span><span>);</span></li><li><span>\tcursor</span><span>:</span><span>pointer</span><span>;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nI wanted the sections to be the same size as the browser’s window both \nin width and in height. For now I’m just going to set it’s width to 100%\n because we will set the height later using javascript. You will also \nnotice that the overflow property for the .tab class is set to hidden \nthat’s because the images will be bigger than the .tab and this will \nallow for some scaling overhead.<br>\n&nbsp;</p>\n<pre><ol><li><span>.</span><span>tab </span><span>{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tposition</span><span>:</span><span> relative</span><span>;</span></li><li><span>\toverflow</span><span>:</span><span> hidden</span><span>;</span></li><li><span>}</span></li><li><span>.</span><span>tab img </span><span>{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nYou probably wonder why I have used the ‘.tab-headline’ elements and \nthen putting a paragraph inside and not getting rid of ‘.tab-headline’ \nall together and just using the paragraph instead. The reason I did this\n is because I will later need the exact width of the element so I can \ncenter it in the middle of each section. Using a paragraph would not \ngave me an accurate width measurement because the paragraph will also \nhave to support the border which will get in the way of our \nmeasurements. For now we will center it approximately&nbsp;by setting the \nleft and the top position to 50%. The last thing I will mention is that \nwe need to set the position of ‘.tab-headline’ to absolute so we can \nposition it freely inside of ‘.tab’.<br>\n&nbsp;</p>\n<pre><ol><li><span>.</span><span>tab</span><span>-</span><span>headline </span><span>{</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>50</span><span>%;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>50</span><span>%;</span></li><li><span>}</span></li><li><span>.</span><span>tab</span><span>-</span><span>headline p </span><span>{</span></li><li><span>\tborder</span><span>:</span><span> </span><span>4px</span><span> solid rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tpadding</span><span>-</span><span>left</span><span>:</span><span> </span><span>30px</span><span>;</span></li><li><span>\tpadding</span><span>-</span><span>right</span><span>:</span><span> </span><span>30px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>300</span><span>;</span></li><li><span>\tmargin</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>.</span><span>tab</span><span>-</span><span>headline p</span><span>:</span><span>hover </span><span>{</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>239</span><span>,</span><span>74</span><span>,</span><span>74</span><span>,</span><span>1</span><span>);</span></li><li><span>\tborder</span><span>-</span><span>top</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>239</span><span>,</span><span>74</span><span>,</span><span>74</span><span>,</span><span>1</span><span>);</span></li><li><span>\tborder</span><span>-</span><span>right</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>239</span><span>,</span><span>74</span><span>,</span><span>74</span><span>,</span><span>1</span><span>);</span></li><li><span>\tborder</span><span>-</span><span>bottom</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>239</span><span>,</span><span>74</span><span>,</span><span>74</span><span>,</span><span>1</span><span>);</span></li><li><span>\tborder</span><span>-</span><span>left</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>239</span><span>,</span><span>74</span><span>,</span><span>74</span><span>,</span><span>1</span><span>);</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;</p>\n<h1>JavaScript</h1>\n<p>&nbsp;<br>\nAs with most of my tutorials I am going to set two variables just in \ncase we need to change the values later. The speed variable will be used\n throughout&nbsp;the code to set the speed for various animations. The header\n variable on the other hand will be used to show in which state the \nheader is.<br>\n&nbsp;</p>\n<pre><ol><li><span>var</span><span> speed </span><span>=</span><span> </span><span>500</span><span>;</span></li><li><span>var</span><span> header </span><span>=</span><span> </span><span>0</span><span>;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe header animation will work like this: when a scroll is detected it \nwill check if you are at the top of the document, if the header variable\n is set to 0 this means the header its in the initial position and we \nwill have to change both the variable and the header to the other \nposition. The first state of the header element is with the top margin \nset to 0 and with the background color set to white and 50% opacity, \nplease keep in mind that the first position is when you scroll down and \nnot when you are at the top of the document. The second position is when\n you are back at the top of the document and this will set the top \nmargin to 20px and the background color is set to transparent this \nbasically means no background color will be used.<br>\n&nbsp;</p>\n<pre><ol><li><span>$</span><span>(</span><span>window</span><span>).</span><span>scroll</span><span>(</span><span>function</span><span>(){</span></li><li><span>    </span><span>if</span><span>(</span><span>$</span><span>(</span><span>document</span><span>).</span><span>scrollTop</span><span>()</span><span> </span><span>&gt;</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></li><li><span>&nbsp;</span></li><li><span>\t</span><span>if</span><span>(</span><span>header </span><span>==</span><span> </span><span>0</span><span>)</span><span> </span><span>{</span></li><li><span>&nbsp;</span></li><li><span>           header </span><span>=</span><span> </span><span>1</span><span>;</span></li><li><span>            $</span><span>(</span><span>'#header-inner'</span><span>).</span><span>stop</span><span>().</span><span>animate</span><span>({</span><span> marginTop</span><span>:</span><span>'0px'</span><span> </span><span>},</span><span> speed</span><span>);</span></li><li><span>\t    $</span><span>(</span><span>'#header'</span><span>).</span><span>stop</span><span>().</span><span>animate</span><span>({</span><span>backgroundColor</span><span>:</span><span>'rgba(255,255,255,0.5)'</span><span>},</span><span> speed</span><span>);</span></li><li><span>&nbsp;</span></li><li><span>        </span><span>}</span></li><li><span>&nbsp;</span></li><li><span>    </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span></li><li><span>&nbsp;</span></li><li><span>\t</span><span>if</span><span>(</span><span>header </span><span>==</span><span> </span><span>1</span><span>)</span><span> </span><span>{</span></li><li><span>&nbsp;</span></li><li><span>           header </span><span>=</span><span> </span><span>0</span><span>;</span></li><li><span>            $</span><span>(</span><span>'#header-inner'</span><span>).</span><span>stop</span><span>().</span><span>animate</span><span>({</span><span> marginTop</span><span>:</span><span>'20px'</span><span> </span><span>},</span><span>speed</span><span>);</span></li><li><span>\t    $</span><span>(</span><span>'#header'</span><span>).</span><span>stop</span><span>().</span><span>animate</span><span>({</span><span>backgroundColor</span><span>:</span><span>'transparent'</span><span>},</span><span> speed</span><span>);</span></li><li><span>&nbsp;</span></li><li><span>        </span><span>}</span><span>  </span></li><li><span>    </span><span>}</span></li><li><span>});</span></li></ol></pre>\n<p>&nbsp;<br>\nThe following step is to make the windows scroll to a particular section\n each time you click on a specific link in the header. We will do this \nby checking for clicks on elements that have the attribute ‘data-button’\n attached to them. When a click its detected we will do an animated \nscroll by scrolling to that specific section that has the ‘data-section’\n attribute value equal to the value of data-button’ from the button that\n we clicked.<br>\n&nbsp;</p>\n<pre><ol><li><span>$</span><span>(</span><span>'*[data-button]'</span><span>).</span><span>click</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span></li><li><span>    $</span><span>(</span><span>'html, body'</span><span>).</span><span>animate</span><span>({</span></li><li><span>        scrollTop</span><span>:</span><span> $</span><span>(</span><span>'*[data-section=\"'</span><span>+</span><span>$</span><span>(</span><span>this</span><span>).</span><span>attr</span><span>(</span><span>'data-button'</span><span>)+</span><span>'\"]'</span><span>).</span><span>offset</span><span>().</span><span>top</span></li><li><span>    </span><span>},</span><span> speed</span><span>);</span></li><li><span>})</span></li></ol></pre>\n<p>&nbsp;<br>\nThe way we will resize the tabs is by setting them equal to the height \nof the window. To center the .tab-headline element we will have to loop \ntrough each headline because each element will have a different width. \nWe will center it horizontally&nbsp;by getting the width of the element, \ndividing it in half and then putting minus in front of this value that \nwe are getting. The vertical centering its done by taking&nbsp;the height of \nthe element, dividing it by 2 and also putting minus in front the the \nvalue.<br>\n&nbsp;<br>\nAll of this that I have mentioned above will sit inside a function. The \nreason we are doing this is because we will use this code twice: the \nfirst time is when we load the page and the second time is when re \nresize the window.<br>\n&nbsp;</p>\n<pre><ol><li><span>function</span><span> resize</span><span>(){</span></li><li><span>&nbsp;</span></li><li><span>        $</span><span>(</span><span>'.tab'</span><span>).</span><span>height</span><span>(</span><span>window</span><span>.</span><span>innerHeight</span><span>);</span></li><li><span>&nbsp;</span></li><li><span>\t$</span><span>(</span><span>'.tab-headline'</span><span>).</span><span>each</span><span>(</span><span>function</span><span>(</span><span>index</span><span>,</span><span> element</span><span>)</span><span> </span><span>{</span></li><li><span>&nbsp;</span></li><li><span>\t$</span><span>(</span><span>this</span><span>).</span><span>css</span><span>(</span><span>'margin-left'</span><span>,-</span><span>$</span><span>(</span><span>this</span><span>).</span><span>width</span><span>()/</span><span>2</span><span>);</span></li><li><span>\t$</span><span>(</span><span>this</span><span>).</span><span>css</span><span>(</span><span>'margin-top'</span><span>,-</span><span>$</span><span>(</span><span>this</span><span>).</span><span>height</span><span>()/</span><span>2</span><span>);</span><span>\t</span></li><li><span>&nbsp;</span></li><li><span>\t</span><span>});</span><span>\t</span></li><li><span>&nbsp;</span></li><li><span>\t</span><span>}</span></li><li><span>&nbsp;</span></li><li><span>$</span><span>(</span><span> window </span><span>).</span><span>resize</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span></li><li><span>resize</span><span>();</span></li><li><span>});</span></li><li><span>&nbsp;</span></li><li><span>resize</span><span>();</span></li></ol></pre>","tags":"css,javascript,Animation","isStarred":"false","note":"","dateCreated":"Thu Mar 19 2015 15:21:58 GMT+0530 (India Standard Time)","dateModified":"Thu Mar 19 2015 15:21:58 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"9uk6NyLbPudhSgiF"}
{"id":"A3vKwdfR7ALCzOiE","category":"javascript","categoryId":"30","title":"Mastering the Module Pattern ","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>I'm a massive fan of JavaScript's Module Pattern and I'd like to \nshare some use cases and differences in the pattern, and why they're \nimportant. The Module Pattern is what we'd call a \"design pattern\", and \nit's extremely useful for a vast amount of reasons. My main attraction \nto the Module Pattern (and it's variant, the Revealing Module Pattern) \nare because it makes scoping a breeze, and doesn't overcomplicate \nJavaScript design.</p>\n\n\n<p>It also keeps things very simple and easy to read and use, uses \nObjects in a very nice way, and doesn't bloat your code with repetitive <code>this</code> and <code>prototype</code>\n declarations. I thought I'd share some insight as to the awesome parts \nof the Module, and how you can master it and it's variants and features.</p>\n\n\n<h3>Creating a Module</h3>\n\n\n<p>To understand what a Module can give you, you'll need to understand what the following <code>function</code> concept does:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>(</span><span>function</span> <span>()</span> <span>{</span>\n  <span>// code</span>\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>It declares a function, which then calls itself immediately. These are also known as <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression\">Immediately-Invoked-Function-Expressions</a>'s, in which the <code>function</code>\n creates new scope and creates \"privacy\". JavaScript doesn't have \nprivacy, but creating new scope emulates this when we wrap all our \nfunction logic inside them. The idea then is to return only the parts we\n need, leaving the other code out of the <code>global scope</code>.</p>\n\n\n<p>After creating new <code>scope</code>, we need to namespace our code so that we can access any methods we return. Let's create a namespace for our anonymous Module.</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n  <span>// code</span>\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>We then have <code>Module</code> declared in the global scope, which means we can call it wherever we like, and even pass it into another Module.</p>\n\n\n<h3>Private methods</h3>\n\n\n<p>You'll see and hear a lot about <code>private</code> methods in JavaScript, but it doesn't <em>strictly</em> have them, but we <em>can</em> create it.</p>\n\n\n<p>What <em>are</em> private methods you might be asking? Private \nmethods are anything you don't want users/devs/hackers to be able to \nsee/call outside the scope they're in. We might be making server calls \nand posting sensitive data, we <em>don't</em> want to expose those \nfunctions publically, they could post anything back then and take \nadvantage of our code. So we can create closure and be more sensible (as\n best as we can with JavaScript) at protecting our code. It's not <em>all</em>\n about protection however, there are also naming conflicts. I bet when \nyou first started out writing jQuery/JavaScript, that you dumped all \nyour code in one file and it was just <code>function, function, function</code>.\n Little did you know these were all global, and you probably suffered \nthe consequence at some point. If so, you'll learn why, and what to do \nto change it.</p>\n\n\n<p>So let's use our newly created <code>Module</code> scope to make our \nmethods inaccessible outside of that scope. For beginners to the Module \nPattern, this example will help understand how a private method would be\n defined:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n  \n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// do something</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>The above example declares our function <code>privateMethod</code>, \nwhich is locally declared inside the new scope. If we were to attempt \ncalling it anywhere outside of our module, we'll get an error thrown and\n our JavaScript program will break! We don't want anyone to be able to \ncall our methods, especially ones that might manipulate data and go back\n and forth to a server.</p>\n\n\n<h3>Understanding \"return\"</h3>\n\n\n<p>Typical Modules will use <code>return</code> and return an <code>Object</code> to the Module, to which the methods bound to the <code>Object</code> will be accessible from the Module's namespace.</p>\n\n\n<p>A real light example of returning an <code>Object</code> with a <code>function</code> as a property:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n  \n  <span>return</span> <span>{</span>\n    <span>publicMethod</span><span>:</span> <span>function</span> <span>()</span> <span>{</span>\n      <span>// code</span>\n    <span>}</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>As we're returning an <code>Object Literal</code>, we can call them exactly like Object Literals:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>Module</span><span>.</span><span>publicMethod</span><span>();</span></code></pre>\n</div>\n\n\n\n<p>For those who haven't used the Object Literal syntax before, a standard Object Literal could look something like this:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>myObjLiteral</span> <span>=</span> <span>{</span>\n  <span>defaults</span><span>:</span> <span>{</span> <span>name</span><span>:</span> <span>'Todd'</span> <span>},</span>\n  <span>someMethod</span><span>:</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span><span>defaults</span><span>);</span>\n  <span>}</span>\n<span>};</span>\n\n<span>// console.log: Object { name: 'Todd' }</span>\n<span>myObjLiteral</span><span>.</span><span>someMethod</span><span>();</span></code></pre>\n</div>\n\n\n\n<p>But the issue with Object Literals is we can abuse the pattern and \nbolt \"private\" methods onto it, which as they're part of the Object, \nwill be accessible too. This is where the Module comes in to save us, by\n allowing us to define all our private stuff locally and only return \n\"the good parts\".</p>\n\n\n<p>Let's look at a more Object Literal syntax, and a perfectly good Module Pattern and the <code>return</code>\n keyword's role. Usually a Module will return an Object, but how that \nObject is defined and constructed is totally up to you. Depending on the\n project and the role/setup of the code, I may use one of a few \nsyntaxes.</p>\n\n\n<h4>Anonymous Object Literal return</h4>\n\n\n<p>One of the easiest patterns is the same as we've declared above, the \nObject has no name declared locally, we just return an Object and that's\n it:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>publicMethodOne</span><span>:</span> <span>function</span> <span>()</span> <span>{</span>\n      <span>// I can call `privateMethod()` you know...</span>\n    <span>},</span>\n    <span>publicMethodtwo</span><span>:</span> <span>function</span> <span>()</span> <span>{</span>\n\n    <span>},</span>\n    <span>publicMethodThree</span><span>:</span> <span>function</span> <span>()</span> <span>{</span>\n\n    <span>}</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<h3>Locally scoped Object Literal</h3>\n\n\n<p>Local scope means a variable/function declared inside a scope. On the <a href=\"http://conditionizr.com/\">Conditionizr</a>\n project, we use a locally scoped namespace as the file is over 100 \nlines, so it's good to be able to see what are the public and private \nmethods without checking the <code>return</code> statement. In this sense, it's <em>much</em> easier to see what <em>is</em> public, because they'll have a locally scoped namespace attached:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>// locally scoped Object</span>\n  <span>var</span> <span>myObject</span> <span>=</span> <span>{};</span>\n\n  <span>// declared with `var`, must be \"private\"</span>\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{};</span>\n\n  <span>myObject</span><span>.</span><span>someMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// take it away Mr. Public Method</span>\n  <span>};</span>\n  \n  <span>return</span> <span>myObject</span><span>;</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>You'll then see on the last line inside the Module that <code>myObject</code> is returned. Our global <code>Module</code> doesn't care that the locally scoped <code>Object</code> has a name, we'll only get the actualy Object sent back, not the name. It offers for better code management.</p>\n\n\n<h3>Stacked locally scoped Object Literal</h3>\n\n\n<p>This is pretty much identical as the previous example, but uses the \"traditional\" single Object Literal notation:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{};</span>\n\n  <span>var</span> <span>myObject</span> <span>=</span> <span>{</span>\n    <span>someMethod</span><span>:</span>  <span>function</span> <span>()</span> <span>{</span>\n\n    <span>},</span>\n    <span>anotherMethod</span><span>:</span>  <span>function</span> <span>()</span> <span>{</span>\n      \n    <span>}</span>\n  <span>};</span>\n  \n  <span>return</span> <span>myObject</span><span>;</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>I prefer the second approach we looked at, the <em>Locally scoped Object Literal</em>. Because here, we have to declare <em>other</em> functions before we use them (you should do this, using <code>function myFunction () {}</code> hoists your functions and can cause issues when used incorrectly). Using <code>var myFunction = function () {};</code>\n syntax lets us not worry about this, as we'll declare them all before \nwe use them, this also makes debugging easier as the JavaScript \ninterpreter will render our code in the order we declare, rather than \nhoisting <code>function</code> declarations. I also don't like this \napproach so much, because the \"stacking\" method can often get verbose \nlooking, and there is no obvious locally scoped <code>Object namespace</code> for me to bolt public methods onto.</p>\n\n\n<h3>Revealing Module Pattern</h3>\n\n\n<p>We've looked at the Module, and there's a really neat variant which \nis deemed the \"revealing\" pattern, in which we reveal public pointers to\n methods inside the Module's scope. This again, can create a really nice\n code management system in which you can clearly see and define which \nmethods are shipped <em>back</em> to the Module:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// private</span>\n  <span>};</span>\n\n  <span>var</span> <span>someMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// public</span>\n  <span>};</span>\n\n  <span>var</span> <span>anotherMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// public</span>\n  <span>};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>someMethod</span><span>:</span> <span>someMethod</span><span>,</span>\n    <span>anotherMethod</span><span>:</span> <span>anotherMethod</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>I really like the above syntax, as it's very declarative. For bigger \nJavaScript Modules this pattern helps out a lot more, using a standard \n\"Module Pattern\" can get out of control depending on the syntax you go \nfor and how you structure your code.</p>\n\n\n<h3>Accessing \"Private\" Methods</h3>\n\n\n<p>You might be thinking at some stage during this article, <em>\"So if I make some methods private, how can I call them?\"</em>. This is where JavaScript becomes even more awesome, and allows us to actually <em>invoke</em> private functions via our public methods. Observe:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>(</span><span>message</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>message</span><span>);</span>\n  <span>};</span>\n\n  <span>var</span> <span>publicMethod</span> <span>=</span> <span>function</span> <span>(</span><span>text</span><span>)</span> <span>{</span>\n    <span>privateMethod</span><span>(</span><span>text</span><span>);</span>\n  <span>};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>publicMethod</span><span>:</span> <span>publicMethod</span>\n  <span>};</span>\n\n<span>})();</span>\n\n<span>// Example of passing data into a private method</span>\n<span>// the private method will then `console.log()` 'Hello!'</span>\n<span>Module</span><span>.</span><span>publicMethod</span><span>(</span><span>'Hello!'</span><span>);</span></code></pre>\n</div>\n\n\n\n<p>You're not just limited to methods, though. You've access to Objects, Arrays, anything:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateArray</span> <span>=</span> <span>[];</span>\n\n  <span>var</span> <span>publicMethod</span> <span>=</span> <span>function</span> <span>(</span><span>somethingOfInterest</span><span>)</span> <span>{</span>\n    <span>privateArray</span><span>.</span><span>push</span><span>(</span><span>somethingOfInterest</span><span>);</span>\n  <span>};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>publicMethod</span><span>:</span> <span>publicMethod</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<h3>Augmenting Modules</h3>\n\n\n<p>So far we've created a nice Module, and returned an Object. But what \nif we wanted to extend our Module, and include another smaller Module, \nwhich extends our original Module?</p>\n\n\n<p>Let's assume the following code:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// private</span>\n  <span>};</span>\n\n  <span>var</span> <span>someMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// public</span>\n  <span>};</span>\n\n  <span>var</span> <span>anotherMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// public</span>\n  <span>};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>someMethod</span><span>:</span> <span>someMethod</span><span>,</span>\n    <span>anotherMethod</span><span>:</span> <span>anotherMethod</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>\n\n\n\n<p>Let's imagine it's part of our application, but by design we've \ndecided to not include something into the core of our application, so we\n could include it as a standalone Module, creating an extension.</p>\n\n\n<p>So far our Object for <code>Module</code> would look like:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>Object</span> <span>{</span><span>someMethod</span><span>:</span> <span>function</span><span>,</span> <span>anotherMethod</span><span>:</span> <span>function</span><span>}</span></code></pre>\n</div>\n\n\n\n<p>But what if I want to add our Module extension, so it ends up with <em>another</em> public method, maybe like this:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>Object</span> <span>{</span><span>someMethod</span><span>:</span> <span>function</span><span>,</span> <span>anotherMethod</span><span>:</span> <span>function</span><span>,</span> <span>extension</span><span>:</span> <span>function</span><span>}</span></code></pre>\n</div>\n\n\n\n<p>A third method is now available, but how do we manage it? Let's create an aptly named <code>ModuleTwo</code>, and pass in our <code>Module</code> namespace, which gives us access to our Object to extend:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>ModuleTwo</span> <span>=</span> <span>(</span><span>function</span> <span>(</span><span>Module</span><span>)</span> <span>{</span>\n    \n    <span>// access to `Module`</span>\n    \n<span>})(</span><span>Module</span><span>);</span></code></pre>\n</div>\n\n\n\n<p>We could then create <em>another</em> method inside this module, have\n all the benefits of private scoping/functionality and then return our \nextension method. My pseudo code could look like this:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>ModuleTwo</span> <span>=</span> <span>(</span><span>function</span> <span>(</span><span>Module</span><span>)</span> <span>{</span>\n    \n    <span>Module</span><span>.</span><span>extension</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n        <span>// another method!</span>\n    <span>};</span>\n    \n    <span>return</span> <span>Module</span><span>;</span>\n    \n<span>})(</span><span>Module</span> <span>||</span> <span>{});</span></code></pre>\n</div>\n\n\n\n<p><code>Module</code> gets passed into <code>ModuleTwo</code>, an extension method is added and then returned <em>again</em>. Our Object is getting thrown about, but that's the flexibility of JavaScript :D</p>\n\n\n<p>I can then see (through something like Chrome's Dev Tools) that my initial Module now has a third property:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>// Object {someMethod: function, anotherMethod: function, extension: function}</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>Module</span><span>);</span></code></pre>\n</div>\n\n\n\n<p>Another hint here, you'll notice I've passed in <code>Module || {}</code> into my second <code>ModuleTwo</code>, this is incase <code>Module</code> is <code>undefined</code> - we don't want to cause errors now do we ;). What this does is instantiate a <em>new</em> Object, and bind our <code>extension</code> method to it, and return it.</p>\n\n\n<h3>Private Naming Conventions</h3>\n\n\n<p>I personally love the Revealing Module Pattern, and as such, I have \nmany functions dotting around my code that visually are all declared the\n same, and look the same when I'm scanning around. I sometimes create a \nlocally scoped Object, but sometimes don't. When I don't, how can I \ndistinguish between private variables/methods? The <code>_</code> character! You've probably seen this dotted around the web, and now you know why we do it:</p>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>Module</span> <span>=</span> <span>(</span><span>function</span> <span>()</span> <span>{</span>\n\n  <span>var</span> <span>_privateMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>// private stuff</span>\n  <span>};</span>\n\n  <span>var</span> <span>publicMethod</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span>\n    <span>_privateMethod</span><span>();</span>\n  <span>};</span>\n  \n  <span>return</span> <span>{</span>\n    <span>publicMethod</span><span>:</span> <span>publicMethod</span>\n  <span>};</span>\n\n<span>})();</span></code></pre>\n</div>","tags":"javascript,Module Pattern,Pattern","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 17:40:12 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424694593407},"mode":"add","comments":[],"images":[],"_id":"A3vKwdfR7ALCzOiE","refSite":"http://toddmotto.com/mastering-the-module-pattern/"}
{"id":"0","category":"regex","categoryId":"52","title":"Regex String Methods: search(), match() and replace()","refSite":"http://jsmantras.com/blog/String-Methods-search-match-and-replace","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>String manipulation is one of the basic requirement of a programming \nlanguage. In JavaScript string manipulation goes in hand with regular \nexpressions. search, match and replace are methods of string object \nwhich use regular expressions as one of the parameter and perform string\n operations on the match. </p> \n\n\n<h3>search()</h3>\n<strong><i>string.search(regexp)</i></strong>\n<br>\n<p><code>search()</code> method executes a regular expression match over\n the sting and returns the index of the match in the string or -1 in \ncase of failure.</p>\n\n<p>If regexp is not an regular expression then an regular expression is created implicitly.</p>\n\n<p><code>search()</code> method has faster executes faster than a <code>match()</code> method. So whenever its needed only to know whether a pattern is present in a string, <code>search()</code> is prferred over <code>match()</code>. \n<code>search()</code> method is similar to regular expression <code>test()</code> method.</p>\n\n<pre><code><span>var</span> str <span>=</span> <span>'Apple and Orange went to a shop.'</span>\nconsole<span>.</span>log<span>(</span> str<span>.</span>search<span>(</span><span>'Orange'</span><span>)</span> <span>)</span><span>;</span> <span spellcheck=\"true\">// 10\n</span>console<span>.</span>log<span>(</span> str<span>.</span>search<span>(</span><span>/Orange/</span><span>)</span> <span>)</span><span>;</span> <span spellcheck=\"true\">// 10\n</span>console<span>.</span>log<span>(</span> str<span>.</span>search<span>(</span><span>/Orange/i</span><span>)</span> <span>)</span><span>;</span> <span spellcheck=\"true\">// 10</span></code>\n</pre>\n<br>\n<blockquote>\n<h4>Note:</h4>\n<ul>\n<li>Since search() method returns index of the match, it can be 0 in case of a successful match.</li>\n<li>Match for undefined or empty value is 0.</li>\n<li>regex flag 'g' if present, is ignored while matching.</li>\n</ul>\n<pre><code><span>'Apple'</span><span>.</span>search<span>(</span><span>'A'</span><span>)</span> <span spellcheck=\"true\">// 0\n</span>\n<span>'Apple'</span><span>.</span>search<span>(</span><span>)</span> <span spellcheck=\"true\">// 0\n</span><span>'Apple'</span><span>.</span>search<span>(</span>undefined<span>)</span> <span spellcheck=\"true\">// 0\n</span>\n<span>''</span><span>.</span>search<span>(</span><span>)</span> <span spellcheck=\"true\">// 0\n</span>\n<span>'Apple'</span><span>.</span>search<span>(</span><span>/p/g</span><span>)</span> <span spellcheck=\"true\">// 1\n</span>\n<span spellcheck=\"true\">//search over an undefined\n</span><span>var</span> y<span>;</span>\ny<span>.</span>search<span>(</span><span>)</span> <span spellcheck=\"true\">// 0\n</span>y<span>.</span>search<span>(</span><span>'k'</span><span>)</span> <span spellcheck=\"true\">// -1\n</span>y<span>.</span>search<span>(</span>undefined<span>)</span><span>;</span> <span spellcheck=\"true\">// 0</span></code>\n</pre>\n</blockquote>\n<br>\n\n<h3>match()</h3>\n\n<strong><i>string.match(regexp)</i></strong>\n<br>\n<p><code>match()</code> method is used to match a string against regular\n expression. If regexp is not an regular expression then an regular \nexpression is created implicitly.</p>\n\n<pre><code><span>'qwertyuytrqwer'</span><span>.</span>match<span>(</span><span>'qwer'</span><span>)</span><span>;</span>\ntest<span>.</span>match<span>(</span><span>'qwerty'</span><span>)</span><span>;</span> \n<span spellcheck=\"true\">// is equivalent to \n</span><span>'qwertyuytrqwer'</span><span>.</span>match<span>(</span><span>new</span> RegExp<span>(</span><span>'qwer'</span><span>)</span><span>)</span><span>;</span></code>\n</pre>\n\n<p>If the regular expression contains a 'g' flag then <code>match()</code> method will result array containing all the occurrences, otherwise it returns the same result as <code>regexp.exec(string)</code>.</p>\n\n<pre><code><span>var</span> str <span>=</span> <span>'qwertyuiqwert'</span><span>;</span>\n\nconsole<span>.</span>log<span>(</span> str<span>.</span>match<span>(</span><span>'qwer'</span><span>)</span> <span>)</span><span>;</span> \n<span spellcheck=\"true\">// [ 'qwer', index: 0, input: 'qwertyuiqwert' ]\n</span>console<span>.</span>log<span>(</span><span>(</span><span>/qwer/</span><span>)</span><span>.</span>exec<span>(</span>str<span>)</span><span>)</span><span>;</span> \n<span spellcheck=\"true\">// [ 'qwer', index: 0, input: 'qwertyuiqwert' ]\n</span>\nconsole<span>.</span>log<span>(</span> str<span>.</span>match<span>(</span><span>/qwer/g</span><span>)</span> <span>)</span><span>;</span> \n<span spellcheck=\"true\">// [ 'qwer', 'qwer' ]\n</span>\nconsole<span>.</span>log<span>(</span> str<span>.</span>match<span>(</span><span>'plmk'</span><span>)</span> <span>)</span><span>;</span> \n<span spellcheck=\"true\">// null</span></code>\n</pre>\n<br>\n\n<h3>replace()</h3>\n<strong><i>newstring = str.replace(regexp|substr, newSubStr|function);</i></strong>\n\n<p><code>replace()</code> returns a new string with some or all matches \nof a pattern replaced by a replacement string. The pattern can be a \nstring or a regular expression, and the replacement can be a string or a\n function to be called for each match. This method doesn't alter the \nstring object itself. It simply returns a new string.</p>\n\n<p>Following are some of the examples for string replace.</p>\n\n<pre><code><span>var</span> str <span>=</span> <span>'Red pages and red book'</span><span>;</span>\n\n<span spellcheck=\"true\">// replace with a regExp object\n</span><span>var</span> re <span>=</span> <span>/red/gi</span><span>;</span> \n<span spellcheck=\"true\">// This is equvalent to var re = new RegExp(/red/gi); \n</span><span>var</span> newStr1 <span>=</span> str<span>.</span>replace<span>(</span>re<span>,</span> <span>'Yellow'</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newStr1<span>)</span><span>;</span> <span spellcheck=\"true\">// Yellow pages and Yellow book\n</span>\n<span spellcheck=\"true\">// replace with regExp directly in the method call.\n</span><span>var</span> newStr1 <span>=</span> str<span>.</span>replace<span>(</span><span>/red/gi</span><span>,</span> <span>'Yellow'</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newStr1<span>)</span><span>;</span> <span spellcheck=\"true\">// Yellow pages and Yellow book\n</span>\n<span spellcheck=\"true\">// replace with strings\n</span><span>var</span> newStr2 <span>=</span> str<span>.</span>replace<span>(</span><span>'red'</span><span>,</span> <span>'Yellow'</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newStr2<span>)</span><span>;</span> <span spellcheck=\"true\">// Red pages and Yellow book</span></code>\n</pre>\n\n<h5>Special Replacement Patterns:</h5>\n\n<p>The replacement string can include the following special replacement patterns:</p>\n\n<br>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody> \n<tr>\n<td>$$</td>\n<td>Inserts a \"$\". This pattern is useful to output currency.</td>\n</tr>\n<tr>\n<td>$&amp;</td>\n<td>Inserts the matched substring. Its useful for concatinating a particular match.</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>Inserts the portion of the string that precedes the matched substring.</td>\n</tr>\n<tr>\n<td>$'</td>\n<td>Inserts the portion of the string that follows the matched substring.</td>\n</tr>\n<tr>\n<td>$n or $nn </td>\n<td>Where n or nn are decimal digits, inserts the nth parenthesized \nsubmatch string, provided the first argument was a RegExp object.</td>\n</tr>\n</tbody>\n</table>\n<br>\n\n<h5>Specifying a function as a parameter</h5>\n\n<p>Following are some of the examples for special replacement patterns:</p>\n\n<pre><code><span>var</span> re <span>=</span> <span>/(\\w+)\\s(\\w+)/</span><span>;</span>\n<span>var</span> str <span>=</span> <span>\"John Smith\"</span><span>;</span>\n\n<span>var</span> newstr1 <span>=</span> str<span>.</span>replace<span>(</span><span>/(John)/</span><span>,</span> <span>\"$$\"</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newstr1<span>)</span><span>;</span> <span spellcheck=\"true\">// $ Smith\n</span>\n<span>var</span> newstr2 <span>=</span> str<span>.</span>replace<span>(</span><span>/(John)/</span><span>,</span> <span>\"Name: $&amp;\"</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newstr2<span>)</span><span>;</span> <span spellcheck=\"true\">// Name: John Smith\n</span>\n<span>var</span> newstr3 <span>=</span> str<span>.</span>replace<span>(</span><span>/(Smith)/</span><span>,</span> <span>'$`'</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newstr3<span>)</span><span>;</span> <span spellcheck=\"true\">//John John\n</span>\n<span>var</span> newstr3 <span>=</span> str<span>.</span>replace<span>(</span><span>/(John)/</span><span>,</span> <span>\"$'\"</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newstr3<span>)</span><span>;</span> <span spellcheck=\"true\">// Smith Smith\n</span>\n<span>var</span> newstr1 <span>=</span> str<span>.</span>replace<span>(</span>re<span>,</span> <span>\"$2, $1\"</span><span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newstr1<span>)</span><span>;</span> <span spellcheck=\"true\">// Smith, John</span></code>\n</pre>\n\n<p>A function can be specified as the second parameter in replace method.</p>\n\n<p>The arguments to the function are as follows:</p>\n<br>\n<table>\n<thead>\n<tr>\n<th>Possible name</th>\n<th>Supplied value</th>\n\n</tr>\n</thead>\n<tbody> \n<tr>\n<td>match</td>\n<td>The matched substring. (Corresponds to $&amp; above.)</td>\n\n</tr>\n<tr>\n<td>p1, p2, ... </td>\n<td> The nth parenthesized submatch string, provided the first argument \nto replace was a RegExp object. (Corresponds to $1, $2, etc. above.) For\n example, if /(\\a+)(\\b+)/, was given, p1 is the match for \\a+, and p2 \nfor \\b+.</td>\n\n</tr>\n<tr>\n<td>offset</td>\n<td>The offset of the matched substring within the total string being \nexamined. (For example, if the total string was \"abcd\", and the matched \nsubstring was \"bc\", then this argument will be 1.)</td>\n</tr>\n<tr>\n<td>string</td>\n<td>The total string being examined.</td>\n</tr>\n</tbody>\n</table>\n<br>\n\n<p>Following is the sequence in which replace action will take place.</p>\n<ul>\n<li>a match in the supplied string will be detected.</li>\n\n<li>replacer function will be called and the return value from the function is used as the replacing string.</li>\n\n<li> above steps are repeated if the replace action is global over the supplied string. </li>\n</ul>\n\n<pre><code><span spellcheck=\"true\">// An example to show the replace action with a replacer function.\n</span>\n<span>function</span> replacer<span>(</span>match<span>,</span> p1<span>,</span> p2<span>,</span> p3<span>,</span> offset<span>,</span> string<span>)</span><span>{</span><span spellcheck=\"true\">\n// p1 is nondigits, p2 digits, and p3 non-alphanumerics\n</span><span>return</span> <span>[</span>p1<span>,</span> p2<span>,</span> p3<span>]</span><span>.</span>join<span>(</span><span>' - '</span><span>)</span><span>;</span>\n<span>}</span><span>;</span>\nnewString <span>=</span> <span>\"abc12345#$*%\"</span><span>.</span>replace<span>(</span><span>/([^\\d]*)(\\d*)([^\\w]*)/</span><span>,</span> replacer<span>)</span><span>;</span>\nconsole<span>.</span>log<span>(</span>newString<span>)</span><span>;</span><span spellcheck=\"true\"> // abc - 12345 - #$*%</span></code>\n</pre>\n<br>\n<blockquote>\n<h3>Note:</h3>\n<p> The above-mentioned special replacement patterns cannot be used while doing replacing with replacer function</p></blockquote>","tags":"Regex","isStarred":"false","note":"","dateCreated":"Fri Mar 13 2015 18:57:43 GMT+0530 (India Standard Time)","dateModified":"Fri Mar 13 2015 18:57:43 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"AwbRxUznhxiORgs2"}
{"id":"0","category":"javascript","categoryId":"30","title":"Array.prototype.sort()","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2>Summary</h2>\n<p>The <code><strong>sort()</strong></code> method sorts the elements of an array <em>in place</em> and returns the array. The sort is not necessarily <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">stable</a>. The default sort order is according to string Unicode code points.</p>\n<h2 name=\"Syntax\">Syntax</h2>\n<pre><code><var>arr</var>.sort([<var>compareFunction</var>])</code></pre>\n<h3 name=\"Parameters\">Parameters</h3>\n<dl>\n <dt>\n  <code>compareFunction</code></dt>\n <dd>\n  Optional. Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode\">Unicode</a> code point value, according to the string conversion of each element.</dd>\n</dl>\n<h2 name=\"Description\">Description</h2>\n<p>If <code>compareFunction</code> is not supplied, elements are sorted \nby converting them to strings and comparing strings in Unicode code \npoint order. For example,&nbsp;\"Cherry\" comes before \"banana\". In a numeric \nsort, 9 comes before 80, but because numbers are converted to strings, \n\"80\" comes before \"9\" in Unicode order.</p>\n<pre data-number=\"\"><code><span>var</span> fruit <span>=</span> <span>[</span><span>'apples'</span><span>,</span> <span>'bananas'</span><span>,</span> <span>'Cherries'</span><span>]</span><span>;</span>\nfruit<span>.</span><span>sort<span>(</span></span><span>)</span><span>;</span><span spellcheck=\"true\"> // ['Cherries', 'apples', 'bananas'];\n</span>\n<span>var</span> scores <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>10</span><span>,</span> <span>21</span><span>]</span><span>;</span> \nscores<span>.</span><span>sort<span>(</span></span><span>)</span><span>;</span><span spellcheck=\"true\"> // [1, 10, 2, 21]\n</span>\n<span>var</span> things <span>=</span> <span>[</span><span>'word'</span><span>,</span> <span>'Word'</span><span>,</span> <span>'1 Word'</span><span>,</span> <span>'2 Words'</span><span>]</span><span>;</span>\nthings<span>.</span><span>sort<span>(</span></span><span>)</span><span>;</span><span spellcheck=\"true\"> // ['1 Word', '2 Words', 'Word', 'word']\n</span><span spellcheck=\"true\">// In Unicode, numbers come before upper case letters,\n</span><span spellcheck=\"true\">// which come before lower case letters.</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div></code></pre>\n<p>If <code>compareFunction</code> is supplied, the array elements are sorted according to the return value of the compare function. If <code>a</code> and <code>b</code> are two elements being compared, then:</p>\n<ul>\n <li>If <code>compareFunction(a, b)</code> is less than 0, sort <code>a</code> to a lower index than <code>b</code>, i.e. <code>a</code> comes first.</li>\n <li>If <code>compareFunction(a, b)</code> returns 0, leave <code>a</code> and <code>b</code>\n unchanged with respect to each other, but sorted with respect to all \ndifferent elements. Note: the ECMAscript standard does not guarantee \nthis behaviour, and thus not all browsers (e.g. Mozilla versions dating \nback to at least 2003) respect this.</li>\n <li>If <code>compareFunction(a, b)</code> is greater than 0, sort <code>b</code> to a lower index than <code>a</code>.</li>\n <li><code>compareFunction(a, b)</code> must always return the same \nvalue when given a specific pair of elements a and b as its two \narguments. If inconsistent results are returned then the sort order is \nundefined</li>\n</ul>\n<p>So, the compare function has the following form:</p>\n<pre data-number=\"\"><code><span>function</span> <span>compare<span>(</span></span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>a is less than b by some ordering criterion<span>)</span> <span>{</span>\n    <span>return</span> <span>-</span><span>1</span><span>;</span>\n  <span>}</span>\n  <span>if</span> <span>(</span>a is greater than b by the ordering criterion<span>)</span> <span>{</span>\n    <span>return</span> <span>1</span><span>;</span>\n  <span>}</span>\n <span spellcheck=\"true\"> // a must be equal to b\n</span>  <span>return</span> <span>0</span><span>;</span>\n<span>}</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div></code></pre>\n<p>To compare numbers instead of strings, the compare function can simply subtract <code>b</code> from <code>a</code>. The following function will sort the array ascending:</p>\n<pre data-number=\"\"><code><span>function</span> <span>compareNumbers<span>(</span></span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>return</span> a <span>-</span> b<span>;</span>\n<span>}</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div></code></pre>\n<p>The <code>sort</code> method can be conveniently used with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\" title=\"The function keyword can be used to define a function inside an expression.\">function expressions</a> (and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\">closures</a>):</p>\n<pre data-number=\"\"><code><span>var</span> numbers <span>=</span> <span>[</span><span>4</span><span>,</span> <span>2</span><span>,</span> <span>5</span><span>,</span> <span>1</span><span>,</span> <span>3</span><span>]</span><span>;</span>\nnumbers<span>.</span><span>sort<span>(</span></span><span>function</span><span>(</span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>return</span> a <span>-</span> b<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span>print<span>(</span></span>numbers<span>)</span><span>;</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div></code></pre>\n<p>Objects can be sorted given the value of one of their properties.</p>\n<pre data-number=\"\"><code><span>var</span> items <span>=</span> <span>[</span>\n  <span>{</span> name<span>:</span> <span>'Edward'</span><span>,</span> value<span>:</span> <span>21</span> <span>}</span><span>,</span>\n  <span>{</span> name<span>:</span> <span>'Sharpe'</span><span>,</span> value<span>:</span> <span>37</span> <span>}</span><span>,</span>\n  <span>{</span> name<span>:</span> <span>'And'</span><span>,</span> value<span>:</span> <span>45</span> <span>}</span><span>,</span>\n  <span>{</span> name<span>:</span> <span>'The'</span><span>,</span> value<span>:</span> <span>-</span><span>12</span> <span>}</span><span>,</span>\n  <span>{</span> name<span>:</span> <span>'Magnetic'</span> <span>}</span><span>,</span>\n  <span>{</span> name<span>:</span> <span>'Zeros'</span><span>,</span> value<span>:</span> <span>37</span> <span>}</span>\n<span>]</span><span>;</span>\nitems<span>.</span><span>sort<span>(</span></span><span>function</span> <span>(</span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>a<span>.</span>name <span>&gt;</span> b<span>.</span>name<span>)</span> <span>{</span>\n    <span>return</span> <span>1</span><span>;</span>\n  <span>}</span>\n  <span>if</span> <span>(</span>a<span>.</span>name <span>&lt;</span> b<span>.</span>name<span>)</span> <span>{</span>\n    <span>return</span> <span>-</span><span>1</span><span>;</span>\n  <span>}</span>\n <span spellcheck=\"true\"> // a must be equal to b\n</span>  <span>return</span> <span>0</span><span>;</span>\n<span>}</span><span>)</span><span>;</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div><div data-start=\"11\"></div><div data-start=\"12\"></div><div data-start=\"13\"></div><div data-start=\"14\"></div><div data-start=\"15\"></div><div data-start=\"16\"></div><div data-start=\"17\"></div><div data-start=\"18\"></div></code></pre>\n<h2>Examples</h2>\n<h3 name=\"Example:_Creating.2C_displaying.2C_and_sorting_an_array\">Example: Creating, displaying, and sorting an array</h3>\n<p>The following example creates four arrays and displays the original \narray, then the sorted arrays. The numeric arrays are sorted without, \nthen with, a compare function.</p>\n<pre data-number=\"\"><code><span>var</span> stringArray <span>=</span> <span>[</span><span>'Blue'</span><span>,</span> <span>'Humpback'</span><span>,</span> <span>'Beluga'</span><span>]</span><span>;</span>\n<span>var</span> numericStringArray <span>=</span> <span>[</span><span>'80'</span><span>,</span> <span>'9'</span><span>,</span> <span>'700'</span><span>]</span><span>;</span>\n<span>var</span> numberArray <span>=</span> <span>[</span><span>40</span><span>,</span> <span>1</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>]</span><span>;</span>\n<span>var</span> mixedNumericArray <span>=</span> <span>[</span><span>'80'</span><span>,</span> <span>'9'</span><span>,</span> <span>'700'</span><span>,</span> <span>40</span><span>,</span> <span>1</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>]</span><span>;</span>\n\n<span>function</span> <span>compareNumbers<span>(</span></span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>return</span> a <span>-</span> b<span>;</span>\n<span>}</span>\n<span spellcheck=\"true\">\n// again, assumes a print function is defined\n</span>console<span>.</span><span>log<span>(</span></span><span>'stringArray:'</span><span>,</span> stringArray<span>.</span><span>join<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted:'</span><span>,</span> stringArray<span>.</span><span>sort<span>(</span></span><span>)</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span><span>'numberArray:'</span><span>,</span> numberArray<span>.</span><span>join<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted without a compare function:'</span><span>,</span> numberArray<span>.</span><span>sort<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted with compareNumbers:'</span><span>,</span> numberArray<span>.</span><span>sort<span>(</span></span>compareNumbers<span>)</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span><span>'numericStringArray:'</span><span>,</span> numericStringArray<span>.</span><span>join<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted without a compare function:'</span><span>,</span> numericStringArray<span>.</span><span>sort<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted with compareNumbers:'</span><span>,</span> numericStringArray<span>.</span><span>sort<span>(</span></span>compareNumbers<span>)</span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span><span>'mixedNumericArray:'</span><span>,</span> mixedNumericArray<span>.</span><span>join<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted without a compare function:'</span><span>,</span> mixedNumericArray<span>.</span><span>sort<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'Sorted with compareNumbers:'</span><span>,</span> mixedNumericArray<span>.</span><span>sort<span>(</span></span>compareNumbers<span>)</span><span>)</span><span>;</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div><div data-start=\"11\"></div><div data-start=\"12\"></div><div data-start=\"13\"></div><div data-start=\"14\"></div><div data-start=\"15\"></div><div data-start=\"16\"></div><div data-start=\"17\"></div><div data-start=\"18\"></div><div data-start=\"19\"></div><div data-start=\"20\"></div><div data-start=\"21\"></div><div data-start=\"22\"></div><div data-start=\"23\"></div><div data-start=\"24\"></div></code></pre>\n<p>This example produces the following output. As the output shows, when\n a compare function is used, numbers sort correctly whether they are \nnumbers or numeric strings.</p>\n<pre data-number=\"\"><code>stringArray: Blue,Humpback,Beluga\nSorted: Beluga,Blue,Humpback\n\nnumberArray: 40,1,5,200\nSorted without a compare function: 1,200,40,5\nSorted with compareNumbers: 1,5,40,200\n\nnumericStringArray: 80,9,700\nSorted without a compare function: 700,80,9\nSorted with compareNumbers: 9,80,700\n\nmixedNumericArray: 80,9,700,40,1,5,200\nSorted without a compare function: 1,200,40,5,700,80,9\nSorted with compareNumbers: 1,5,9,40,80,200,700<div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div><div data-start=\"11\"></div><div data-start=\"12\"></div><div data-start=\"13\"></div><div data-start=\"14\"></div></code></pre>\n<h3 name=\"Example:_Sorting_non-ASCII_characters\">Example: Sorting non-ASCII characters</h3>\n<p>For sorting strings with non-ASCII characters, i.e. strings with \naccented characters (e, é, è, a, ä, etc.), strings from languages other \nthan English: use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" title=\"The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\"><code>String.localeCompare</code></a>. This function can compare those characters so they appear in the right order.</p>\n<pre data-number=\"\"><code><span>var</span> items <span>=</span> <span>[</span><span>'réservé'</span><span>,</span> <span>'premier'</span><span>,</span> <span>'cliché'</span><span>,</span> <span>'communiqué'</span><span>,</span> <span>'café'</span><span>,</span> <span>'adieu'</span><span>]</span><span>;</span>\nitems<span>.</span><span>sort<span>(</span></span><span>function</span> <span>(</span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>return</span> a<span>.</span><span>localeCompare<span>(</span></span>b<span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// items is ['adieu', 'café', 'cliché', 'communiqué', 'premier', 'réservé']</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div></code></pre>\n<h3 name=\"Example:_Sorting_maps\">Example: Sorting maps</h3>\n<p>The <code>compareFunction</code> can be invoked multiple times per element within the array. Depending on the <code>compareFunction</code>'s nature, this may yield a high overhead. The more work a <code>compareFunction</code>\n does and the more elements there are to sort, the wiser it may be to \nconsider using a map for sorting. The idea is to walk the array once to \nextract the actual values used for sorting into a temporary array, sort \nthe temporary array and then walk the temporary array to bring the \noriginal array into the right order.</p>\n<pre data-number=\"\"><code><span spellcheck=\"true\">// the array to be sorted\n</span><span>var</span> list <span>=</span> <span>[</span><span>'Delta'</span><span>,</span> <span>'alpha'</span><span>,</span> <span>'CHARLIE'</span><span>,</span> <span>'bravo'</span><span>]</span><span>;</span>\n<span spellcheck=\"true\">\n// temporary holder of position and sort-value\n</span><span>var</span> map <span>=</span> list<span>.</span><span>map<span>(</span></span><span>function</span><span>(</span>e<span>,</span> i<span>)</span> <span>{</span>\n  <span>return</span> <span>{</span> index<span>:</span> i<span>,</span> value<span>:</span> e<span>.</span><span>toLowerCase<span>(</span></span><span>)</span> <span>}</span><span>;</span>\n<span>}</span><span>)</span>\n<span spellcheck=\"true\">\n// sorting the map containing the reduced values\n</span>map<span>.</span><span>sort<span>(</span></span><span>function</span><span>(</span>a<span>,</span> b<span>)</span> <span>{</span>\n  <span>return</span> <span>+</span><span>(</span>a<span>.</span>value <span>&gt;</span> b<span>.</span>value<span>)</span> <span>||</span> <span>+</span><span>(</span>a<span>.</span>value <span>===</span> b<span>.</span>value<span>)</span> <span>-</span> <span>1</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// container for the resulting order\n</span><span>var</span> result <span>=</span> map<span>.</span><span>map<span>(</span></span><span>function</span><span>(</span>e<span>)</span><span>{</span>\n  <span>return</span> list<span>[</span>e<span>.</span>index<span>]</span><span>;</span>\n<span>}</span><span>)</span><span>;</span></code></pre>","tags":"array,sort","isStarred":"false","note":"","dateCreated":"Sat Mar 14 2015 20:54:17 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 14 2015 20:54:17 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"AzY71E025rwv70hk"}
{"id":"0","category":"javascript","categoryId":"30","title":"Array.prototype.splice()","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2 name=\"Summary\">Summary</h2>\n<p>The <code><strong>splice()</strong></code> method changes the content of an array by removing existing elements and/or adding new elements.</p>\n\n<h2 name=\"Syntax\">Syntax</h2>\n<pre><code><var>array</var>.splice(<var>start</var>, <var>deleteCount</var>[, <var>item1</var>[, <var>item2</var>[, ...]]])\n</code></pre>\n\n<h3 name=\"Parameters\">Parameters</h3>\n<dl>\n <dt><code>start</code></dt>\n <dd>Index at which to start changing the array. If greater than the \nlength of the array, actual starting index will be set to the length of \nthe array. If negative, will begin that many elements from the end.</dd>\n <dt><code>deleteCount</code></dt>\n <dd>An integer indicating the number of old array elements to remove. If <code>deleteCount</code> is 0, no elements are removed. In this case, you should specify at least one new element. If <code>deleteCount</code> is greater than the number of elements left in the array starting at <code>start</code>, then all of the elements through the end of the array will be deleted.</dd>\n <dt><code>item<em>N</em></code></dt>\n <dd>The element to add to the array. If you don't specify any elements, <code>splice()</code> will only remove elements from the array.</dd>\n</dl>\n\n<h3 name=\"Returns\">Returns</h3>\n<p>An array containing the deleted elements. If only one element is \nremoved, an array of one element is returned. If no elements are \nremoved, an empty array is returned.</p>\n\n<h2 name=\"Description\">Description</h2>\n<p>If you specify a different number of elements to insert than the \nnumber you're removing, the array will have a different length at the \nend of the call.</p>\n\n<h2>Examples</h2>\n\n<h3 name=\"Example:_Using_splice\">Example: Using <code>splice()</code></h3>\n<p>The following script illustrate the use of <code>splice()</code>:</p>\n<pre data-number=\"\"><code><span>var</span> myFish <span>=</span> <span>[</span><span>'angel'</span><span>,</span> <span>'clown'</span><span>,</span> <span>'mandarin'</span><span>,</span> <span>'surgeon'</span><span>]</span><span>;</span>\n<span spellcheck=\"true\">\n// removes 0 elements from index 2, and inserts 'drum'\n</span><span>var</span> removed <span>=</span> myFish<span>.</span><span>splice<span>(</span></span><span>2</span><span>,</span> <span>0</span><span>,</span> <span>'drum'</span><span>)</span><span>;</span><span spellcheck=\"true\">\n// myFish is ['angel', 'clown', 'drum', 'mandarin', 'surgeon']\n</span><span spellcheck=\"true\">// removed is [], no elements removed\n</span><span spellcheck=\"true\">\n// removes 1 element from index 3\n</span>removed <span>=</span> myFish<span>.</span><span>splice<span>(</span></span><span>3</span><span>,</span> <span>1</span><span>)</span><span>;</span><span spellcheck=\"true\">\n// myFish is ['angel', 'clown', 'drum', 'surgeon']\n</span><span spellcheck=\"true\">// removed is ['mandarin']\n</span><span spellcheck=\"true\">\n// removes 1 element from index 2, and inserts 'trumpet'\n</span>removed <span>=</span> myFish<span>.</span><span>splice<span>(</span></span><span>2</span><span>,</span> <span>1</span><span>,</span> <span>'trumpet'</span><span>)</span><span>;</span><span spellcheck=\"true\">\n// myFish is ['angel', 'clown', 'trumpet', 'surgeon']\n</span><span spellcheck=\"true\">// removed is ['drum']\n</span><span spellcheck=\"true\">\n// removes 2 elements from index 0, and inserts 'parrot', 'anemone' and 'blue'\n</span>removed <span>=</span> myFish<span>.</span><span>splice<span>(</span></span><span>0</span><span>,</span> <span>2</span><span>,</span> <span>'parrot'</span><span>,</span> <span>'anemone'</span><span>,</span> <span>'blue'</span><span>)</span><span>;</span><span spellcheck=\"true\">\n// myFish is ['parrot', 'anemone', 'blue', 'trumpet', 'surgeon']\n</span><span spellcheck=\"true\">// removed is ['angel', 'clown']\n</span><span spellcheck=\"true\">\n// removes 2 elements from index 3\n</span>removed <span>=</span> myFish<span>.</span><span>splice<span>(</span></span><span>3</span><span>,</span> Number<span>.</span>MAX_VALUE<span>)</span><span>;</span><span spellcheck=\"true\">\n// myFish is ['parrot', 'anemone', 'blue']\n</span><span spellcheck=\"true\">// removed is ['trumpet', 'surgeon']</span></code></pre>","tags":"array","isStarred":"false","note":"","dateCreated":"Sat Mar 14 2015 20:51:00 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 14 2015 20:51:00 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"BWRo9GzQPlOh6Xag"}
{"id":"0","category":"javascript","categoryId":"30","title":"Array .pop() Method","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2 name=\"Summary\">Summary</h2>\n<p>The <code><strong>pop()</strong></code> method removes the <strong>last</strong> element from an array and returns that element.</p>\n<h2 name=\"Syntax\">Syntax</h2>\n<pre><code><var>arr</var>.pop()</code></pre>\n<h2 name=\"Description\">Description</h2>\n<p>The <code>pop</code> method removes the last element from an array and returns that value to the caller.</p>\n<p><code>pop</code> is intentionally generic; this method can be <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" title=\"The call() method calls a function with a given this value and arguments provided individually.\">called</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" title=\"The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).\">applied</a> to objects resembling arrays. Objects which do not contain a <code>length</code>\n property reflecting the last in a series of consecutive, zero-based \nnumerical properties may not behave in any meaningful manner.</p>\n<p>If you call <code>pop()</code> on an empty array, it returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"The global undefined value property represents the value undefined. It is one of JavaScript's primitive types.\"><code>undefined</code></a> value.</p>\n<h2 name=\"Examples\">Examples</h2>\n<h3 name=\"Example:_Removing_the_last_element_of_an_array\">Example: Removing the last element of an array</h3>\n<p>The following code creates the <code>myFish</code> array containing four elements, then removes its last element.</p>\n<pre data-number=\"\"><code><span>var</span> myFish <span>=</span> <span>[</span><span>'angel'</span><span>,</span> <span>'clown'</span><span>,</span> <span>'mandarin'</span><span>,</span> <span>'sturgeon'</span><span>]</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span>myFish<span>)</span><span>;</span><span spellcheck=\"true\"> // ['angel', 'clown', 'mandarin', 'sturgeon']\n</span>\n<span>var</span> popped <span>=</span> myFish<span>.</span><span>pop<span>(</span></span><span>)</span><span>;</span>\n\nconsole<span>.</span><span>log<span>(</span></span>myFish<span>)</span><span>;</span><span spellcheck=\"true\"> // ['angel', 'clown', 'mandarin' ] \n</span>\nconsole<span>.</span><span>log<span>(</span></span>popped<span>)</span><span>;</span><span spellcheck=\"true\"> // 'sturgeon'</span></code></pre>","tags":"array","isStarred":"false","note":"","dateCreated":"Sat Mar 14 2015 20:47:11 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 14 2015 20:47:11 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"BfpMgreREgCWEEaX"}
{"id":"BunxOVhbFIaNlfLU","category":"bootstrap","categoryId":"51","title":"Stacked Bootstrap Modal Example","codes":[{"code":" <h2>Stacked Bootstrap Modal Example.</h2>\n <a data-toggle=\"modal\" href=\"#myModal\" class=\"btn btn-primary\">Launch modal</a>\n\n<div class=\"modal fade\" id=\"myModal\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                \t<h4 class=\"modal-title\">Modal 1</h4>\n\n            </div>\n            <div class=\"container\"></div>\n            <div class=\"modal-body\">Content for the dialog / modal goes here.\n                <br>\n                <br>\n                <br>\n                <p>more content</p>\n                <br>\n                <br>\n                <br>\t<a data-toggle=\"modal\" href=\"#myModal2\" class=\"btn btn-primary\">Launch modal</a>\n\n            </div>\n            <div class=\"modal-footer\">\t<a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n\t<a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"modal fade rotate\" id=\"myModal2\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                \t<h4 class=\"modal-title\">Modal 2</h4>\n\n            </div>\n            <div class=\"container\"></div>\n            <div class=\"modal-body\">Content for the dialog / modal goes here.\n                <br>\n                <br>\n                <p>come content</p>\n                <br>\n                <br>\n                <br>\t<a data-toggle=\"modal\" href=\"#myModal3\" class=\"btn btn-primary\">Launch modal</a>\n\n            </div>\n            <div class=\"modal-footer\">\t<a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n\t<a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"modal fade\" id=\"myModal3\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                \t<h4 class=\"modal-title\">Modal 3</h4>\n\n            </div>\n            <div class=\"container\"></div>\n            <div class=\"modal-body\">Content for the dialog / modal goes here.\n                <br>\n                <br>\n                <br>\n                <br>\n                <br>\t<a data-toggle=\"modal\" href=\"#myModal4\" class=\"btn btn-primary\">Launch modal</a>\n\n            </div>\n            <div class=\"modal-footer\">\t<a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n\t<a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"modal fade\" id=\"myModal4\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                \t<h4 class=\"modal-title\">Modal 4</h4>\n\n            </div>\n            <div class=\"container\"></div>\n            <div class=\"modal-body\">Content for the dialog / modal goes here.</div>\n            <div class=\"modal-footer\">\t<a href=\"#\" data-dismiss=\"modal\" class=\"btn\">Close</a>\n\t<a href=\"#\" class=\"btn btn-primary\">Save changes</a>\n\n            </div>\n        </div>\n    </div>\n</div>","codeLanguage":"html"},{"code":"// Method 1\n$(document).ready(function () {\n    $('#openBtn').click(function () {\n        $('#myModal').modal({\n            show: true\n        })\n    });\n\n    $('.modal').on('show.bs.modal', function (event) {\n        var idx = $('.modal:visible').length;\n        $(this).css('z-index', 1040 + (10 * idx));\n    });\n    $('.modal').on('shown.bs.modal', function (event) {\n        var idx = ($('.modal:visible').length) - 1; // raise backdrop after animation.\n        $('.modal-backdrop').not('.stacked').css('z-index', 1039 + (10 * idx));\n        $('.modal-backdrop').not('.stacked').addClass('stacked');\n    });\n});\n\n// Method 2\n$(document).ready(function () {\n    $('#openBtn').click(function () {\n        $('#myModal').modal()\n\t});\n\t\n    $('.modal')\n\t.on({\n\t\t'show.bs.modal': function() {\n\t\t\tvar idx = $('.modal:visible').length;\n\t\t\t$(this).css('z-index', 1040 + (10 * idx));\n\t\t},\n\t\t'shown.bs.modal': function() {\n\t\t\tvar idx = ($('.modal:visible').length) - 1; // raise backdrop after animation.\n\t\t\t$('.modal-backdrop').not('.stacked')\n\t\t\t.css('z-index', 1039 + (10 * idx))\n\t\t\t.addClass('stacked');\n\t\t},\n\t\t'hidden.bs.modal': function() {\n\t\t\tif ($('.modal:visible').length > 0) {\n\t\t\t\t// restore the modal-open class to the body element, so that scrolling works\n\t\t\t\t// properly after de-stacking a modal.\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t$(document.body).addClass('modal-open');\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t}\n\t});\n});","codeLanguage":"javascript"},{"code":"/* crazy batman newspaper spinny thing */\n .rotate {\n    will-change: transform;\n    transform:rotate(180deg);\n    transition:transform 0.5s;\n}\n.rotate.in {\n    will-change: transform;\n    transform:rotate(1800deg);\n    transition:transform 1.5s;\n}","codeLanguage":"css"}],"description":"<strong>Stacked Bootstrap Modal Example</strong>","tags":"bootstrap,stacked modals","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 16:12:51 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423306018893},"mode":"add","comments":[],"images":["stacked-bootstrap-modal_7_2_2015.png"],"_id":"BunxOVhbFIaNlfLU"}
{"id":"0","category":"jquery","categoryId":"50","title":"jQuery : Load mutiple scripts using $.getScript ","codes":[{"code":"/* enhance $.getSctipt to handle mutiple scripts */\nvar getScript = jQuery.getScript;\njQuery.getScript = function( resources, callback ) {\n \n    var // reference declaration &amp; localization\n    length = resources.length,\n    handler = function() { counter++; },\n    deferreds = [],\n    counter = 0,\n    idx = 0;\n \n    for ( ; idx < length; idx++ ) {\n        deferreds.push(\n            getScript( resources[ idx ], handler )\n        );\n    }\n \n    jQuery.when.apply( null, deferreds ).then(function() {\n        callback &amp;&amp; callback();\n    });\n};\n \n$.getScript(['script1.js','script2.js','script3.js'], function() {\n    //do something after all scripts have loaded\n});\n \n//or seperate into an array to include\n \nvar scripts = ['script1.js','script2.js','script3.js'];\n$.getScript(scripts, function(data, textStatus) {\n    //do something after all scripts have loaded\n});","codeLanguage":"javascript"},{"code":"// Method 2\n//=====================\n\n// Load a bunch of scripts and make sure the DOM is ready.\n$.when(\n$.getScript( \"./script.cfm?id=1\" ),\n$.getScript( \"./script.cfm?id=2\" ),\n$.getScript( \"./script.cfm?id=3\" ),\n$.getScript( \"./script.cfm?id=4\" ),\n$.getScript( \"./script.cfm?id=5\" ),\n$.getScript( \"./script.cfm?id=6\" ),\n$.getScript( \"./script.cfm?id=7\" ),\n$.getScript( \"./script.cfm?id=8\" ),\n$.getScript( \"./script.cfm?id=9\" ),\n$.getScript( \"./script.cfm?id=10\" ),\n// DOM ready deferred.\n//\n// NOTE: This returns a Deferred object, NOT a promise.\n$.Deferred(function( deferred ){\n\t// In addition to the script loading, we also\n\t// want to make sure that the DOM is ready to\n\t// be interacted with. As such, resolve a\n\t// deferred object using the $() function to\n\t// denote that the DOM is ready.\n\t$( deferred.resolve );\n})\n).done(function( /* Deferred Results */ ){\n\t// The DOM is ready to be interacted with AND all\n\t// of the scripts have loaded. Let's test to see\n\t// that the scripts have loaded.\n\tfor (var i = 1 ; i <= 10 ; i++){\n\t\t// Test to see if the contents of the downloaded\n\t\t// script have been applied to the global name\n\t\t// space (window).\n\t\tconsole.log((\"Script \" + i + \":\"));\n\t}\n}); ","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"}],"description":"<p>This is very useful for <strong>loading mutiple scripts with a callback function</strong> containing code that you want to run only when all of the scripts have been loaded. To load mutiple scripts you need to enhance the AJAX $.getScript() function to handle mutiple scripts then simply add them to an array for the first parameter and the callback function as the second parameter.</p><h3>Single jQuery Get Script</h3><pre><code>$.getScript('script1.js', function(data, textStatus) {    //do something after script has loaded});</code></pre>","tags":"jQuery,javascript","isStarred":"true","note":"","dateCreated":"Sat Jan 31 2015 16:59:20 GMT+0530 (India Standard Time)","dateModified":"Sat Jan 31 2015 16:59:20 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"CPquTGxiJU9pQYAl"}
{"id":"0","category":"javascript","categoryId":"30","title":"Cross Browser Calculation of X & Y Position","refSite":"http://callmenick.com/2014/12/22/cross-browser-calculation-x-y-position/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><p>This snippet gives us a cross browser solution to calculating the x and y position of a user’s mouse relative to the document.</p>\n              </div>\n      <div>\n        <p><img src=\"http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/get-position-featured-image.png\" alt=\"get-position-featured-image\" height=\"280\" width=\"690\" data-src=\"../database/uploads/images/article_images/get-position-featured-image_25_3_2015.png\"></p>\n<h2>The X-Y Position Function</h2>\n<p>Getting the <code>x</code> and <code>y</code> coordinates of a user’s\n mouse relative to the document can seem tricky. Different browsers have\n different properties at their disposal to calculate mouse position. \nHere’s a cross browser solution for finding the <code>x</code> and <code>y</code> coordinates.</p>\n<pre><code data-language=\"javascript\"><span>function</span> <span>getPosition<span>(</span></span>e<span>)</span> <span>{</span>\n  <span>var</span> posx <span>=</span> <span>0</span><span>;</span>\n  <span>var</span> posy <span>=</span> <span>0</span><span>;</span>\n\n  <span>if</span> <span>(</span><span>!</span>e<span>)</span> <span>var</span> e <span>=</span> window<span>.</span>event<span>;</span>\n  \n  <span>if</span> <span>(</span>e<span>.</span>pageX <span>||</span> e<span>.</span>pageY<span>)</span> <span>{</span>\n    posx <span>=</span> e<span>.</span>pageX<span>;</span>\n    posy <span>=</span> e<span>.</span>pageY<span>;</span>\n  <span>}</span>\n  <span>else</span> <span>if</span> <span>(</span>e<span>.</span>clientX <span>||</span> e<span>.</span>clientY<span>)</span> <span>{</span>\n    posx <span>=</span> e<span>.</span>clientX <span>+</span> document<span>.</span>body<span>.</span>scrollLeft\n      <span>+</span> document<span>.</span>documentElement<span>.</span>scrollLeft<span>;</span>\n    posy <span>=</span> e<span>.</span>clientY <span>+</span> document<span>.</span>body<span>.</span>scrollTop\n      <span>+</span> document<span>.</span>documentElement<span>.</span>scrollTop<span>;</span>\n  <span>}</span>\n\n  <span>return</span> <span>{</span>\n    x<span>:</span> posx<span>,</span>\n    y<span>:</span> posy\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<h2>Usage</h2>\n<p>Using the function is easy now. We just need to pass in the event \nhandler when we’re calling our function. If we wanted to get the <code>x</code> and <code>y</code> coordinates of where a user has clicked on the document, we’d do it like this:</p>\n<pre><code data-language=\"javascript\">document<span>.</span><span>addEventListener<span>(</span></span> <span>\"click\"</span><span>,</span> <span>function</span><span>(</span>e<span>)</span> <span>{</span>\n  <span>var</span> x <span>=</span> <span>getPosition<span>(</span></span>e<span>)</span><span>.</span>x<span>;</span>\n  <span>var</span> y <span>=</span> <span>getPosition<span>(</span></span>e<span>)</span><span>.</span>y<span>;</span>\n  console<span>.</span><span>log<span>(</span></span><span>\"x pos: \"</span><span>+</span> x <span>+</span>\" <span spellcheck=\"true\">// y pos:\"+ y);\n</span><span>}</span><span>)</span><span>;</span>\n</code></pre>\n<h2>Wrap Up</h2>\n<p>This cross-browser solution is very handy, and many different events can be passed in that will allow us to get the <code>x</code> and <code>y</code>\n position on the fly. I hope you find this snippet useful! If you have \nit in action or if you have and questions, comments, or feedback, write \nin the comment box below.</p>\n<h2>Resources</h2>\n<ul>\n<li>Quirks mode: <a href=\"http://www.quirksmode.org/js/events_properties.html\">http://www.quirksmode.org/js/events_properties.html</a></li>\n</ul></div>","tags":"javascript,Mouse Position","isStarred":"false","articleImages":["http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/get-position-featured-image.png"],"note":"","dateCreated":"Wed Mar 25 2015 19:06:08 GMT+0530 (India Standard Time)","dateModified":"Wed Mar 25 2015 19:06:08 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"CcNEDWe2MUzB4ATX"}
{"id":"Cs7DUqLTD2KHefEG","category":"css","categoryId":"29","title":"Flexbox : A Complete Guide to Flexbox","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>&nbsp;updated on:        <time datetime=\"2015-01-9\">January 9, 2015</time></p>\n<p><time datetime=\"2015-01-9\">URL :&nbsp;http://css-tricks.com/snippets/css/a-guide-to-flexbox/</time></p>\n\t\t\t<h3>Background</h3>\n<div>\n<p>The <code>Flexbox Layout</code> (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word \"flex\").</p>\n<p>The main idea behind the flex layout is to give the container the ability to alter its items' width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>\n<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). </p>\n<p><strong>Note:</strong> Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the <a href=\"http://css-tricks.com/snippets/css/complete-guide-grid/\">Grid</a> layout is intended for larger scale layouts.\n</p></div>\n\n<h3>Basics &amp; Terminology</h3>\n<div><p>Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as \"flex container\") whereas the others are meant to be set on the children (said \"flex items\").</p>\n<p>If regular layout is based on both block and inline flow directions, the flex layout is based on \"flex-flow directions\". Please have a look at this figure from the specification, explaining the main idea behind the flex layout.</p>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2011/08/flexbox.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/flexbox_17_3_2015.png\"></p>\n<p>Basically, items will be laid out following either the <code>main axis</code> (from <code>main-start</code> to <code>main-end</code>) or the cross axis (from <code>cross-start</code> to <code>cross-end</code>).</p>\n<ul>\n<li><strong>main axis</strong> - The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the <code>flex-direction</code> property (see below).</li>\n<li><strong>main-start | main-end</strong> - The flex items are placed within the container starting from main-start and going to main-end.</li>\n<li><strong>main size</strong> - A flex item's width or height, whichever is in the main dimension, is the item's main size. The flex item's main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.</li>\n<li><strong>cross axis</strong> - The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.</li>\n<li><strong>cross-start | cross-end</strong> - Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.</li>\n<li><strong>cross size</strong> - The width or height of a flex item, whichever is in the cross dimension, is the item's cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.</li>\n</ul>\n</div>\n<div><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/flex-container.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/flex-container_17_3_2015.svg\"><h2>Properties for the Parent<br>(flex container)</h2>\n<div><h4>display</h4>\n<p>This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.</p>\n<pre rel=\"CSS\"><code><span><span>.container</span> </span><span>{</span>  <span>display</span><span>:</span> flex<span>;</span> <span spellcheck=\"true\">/* or inline-flex */</span><span>}</span></code></pre>\n<p>Note that CSS columns have no effect on a flex container.</p>\n</div>\n<div><h4>flex-direction</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/flex-direction1_17_3_2015.svg\"><br>This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.</p>\n<pre rel=\"CSS\"><code><span><span>.container</span> </span><span>{</span>  <span>flex-direction</span><span>:</span> row | row-reverse | column | column-reverse<span>;</span><span>}</span></code></pre>\n<ul>\n<li><code>row</code> (default): left to right in <code>ltr</code>; right to left in <code>rtl</code></li>\n<li><code>row-reverse</code>: right to left in <code>ltr</code>; left to right in <code>rtl</code></li>\n<li><code>column</code>: same as <code>row</code> but top to bottom</li>\n<li><code>column-reverse</code>: same as <code>row-reverse</code> but bottom to top</li>\n</ul>\n</div>\n<div><h4>flex-wrap</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/flex-wrap_17_3_2015.svg\"><br>By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. Direction also plays a role here, determining the direction new lines are stacked in.</p>\n<pre rel=\"CSS\"><code><span><span>.container</span></span><span>{</span>  <span>flex-wrap</span><span>:</span> nowrap | wrap | wrap-reverse<span>;</span><span>}</span></code></pre>\n<ul>\n<li><code>nowrap</code> (default): single-line / left to right in <code>ltr</code>; right to left in <code>rtl</code></li>\n<li><code>wrap</code>: multi-line / left to right in <code>ltr</code>; right to left in <code>rtl</code></li>\n<li><code>wrap-reverse</code>: multi-line / right to left in <code>ltr</code>; left to right in <code>rtl</code></li>\n</ul>\n</div>\n<div><h4>flex-flow (Applies to: parent flex container element)</h4>\n<p>This is a shorthand <code>flex-direction</code> and <code>flex-wrap</code> properties, which together define the flex container's main and cross axes. Default is <code>row nowrap</code>.</p>\n<pre rel=\"CSS\"><code><span>flex-flow</span><span>:</span> &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;</code></pre>\n</div>\n<div><h4>justify-content</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2013/04/justify-content.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/justify-content_17_3_2015.svg\"><br>This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>\n<pre rel=\"CSS\"><code><span><span>.container</span> </span><span>{</span>  <span>justify-content</span><span>:</span> flex-start | flex-end | center | space-between | space-around<span>;</span><span>}</span></code></pre>\n<ul>\n<li><code>flex-start</code> (default): items are packed toward the start line</li>\n<li><code>flex-end</code>: items are packed toward to end line</li>\n<li><code>center</code>: items are centered along the line</li>\n<li><code>space-between</code>: items are evenly distributed in the line; first item is on the start line, last item on the end line</li>\n<li><code>space-around</code>: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has it's own spacing that applies.</li>\n</ul>\n</div>\n<div><h4>align-items</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/align-items.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/align-items_17_3_2015.svg\"><br>This defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the <code>justify-content</code> version for the cross-axis (perpendicular to the main-axis).</p>\n<pre rel=\"CSS\"><code><span><span>.container</span> </span><span>{</span>  <span>align-items</span><span>:</span> flex-start | flex-end | center | baseline | stretch<span>;</span><span>}</span></code></pre>\n<ul>\n<li><code>flex-start</code>: cross-start margin edge of the items is placed on the cross-start line</li>\n<li><code>flex-end</code>: cross-end margin edge of the items is placed on the cross-end line</li>\n<li><code>center</code>: items are centered in the cross-axis</li>\n<li><code>baseline</code>: items are aligned such as their baselines align</li>\n<li><code>stretch</code> (default): stretch to fill the container (still respect min-width/max-width)</li>\n</ul>\n</div>\n<div><h4>align-content</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2013/04/align-content.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/align-content_17_3_2015.svg\"><br>This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how <code>justify-content</code> aligns individual items within the main-axis. </p>\n<p><strong>Note:</strong> this property has no effect when there is only one line of flex items.</p>\n<pre rel=\"CSS\"><code><span><span>.container</span> </span><span>{</span>  <span>align-content</span><span>:</span> flex-start | flex-end | center | space-between | space-around | stretch<span>;</span><span>}</span></code></pre>\n<ul>\n<li><code>flex-start</code>: lines packed to the start of the container</li>\n<li><code>flex-end</code>: lines packed to the end of the container</li>\n<li><code>center</code>: lines packed to the center of the container</li>\n<li><code>space-between</code>: lines evenly distributed; the first line is at the start of the container while the last one is at the end</li>\n<li><code>space-around</code>: lines evenly distributed with equal space around each line</li>\n<li><code>stretch</code> (default): lines stretch to take up the remaining space</li>\n</ul>\n</div>\n</div>\n<div><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/flex-items.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/flex-items_17_3_2015.svg\"><h2>Properties for the Children<br>(flex items)</h2>\n<div><h4>order</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2013/04/order-2.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/order-2_17_3_2015.svg\"><br>By default, flex items are laid out in the source order. However, the <code>order</code> property controls the order in which they appear in the flex container.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>order</span><span>:</span> &lt;integer&gt;<span>;</span><span>}</span></code></pre>\n</div>\n<div><h4>flex-grow</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/flex-grow.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/flex-grow_17_3_2015.svg\"><br>This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. </p>\n<p>If all items have <code>flex-grow</code> set to 1, every child will set to an equal size inside the container. If you were to give one of the children a value of 2, that child would take up twice as much space as the others.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>flex-grow</span><span>:</span> &lt;number&gt;<span>;</span> <span spellcheck=\"true\">/* default 0 */</span><span>}</span></code></pre>\n<p>Negative numbers are invalid.</p>\n</div>\n<div><h4>flex-shrink</h4>\n<p>This defines the ability for a flex item to shrink if necessary.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>flex-shrink</span><span>:</span> &lt;number&gt;<span>;</span> <span spellcheck=\"true\">/* default 1 */</span><span>}</span></code></pre>\n<p>Negative numbers are invalid.</p>\n</div>\n<div><h4>flex-basis</h4>\n<p>This defines the default size of an element before the remaining space is distributed. The <code>main-size</code> value makes it match the <code>width</code> or <code>height</code>, depending on which is relevant based on the <code>flex-direction</code>.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>flex-basis</span><span>:</span> &lt;length&gt; | auto<span>;</span> <span spellcheck=\"true\">/* default auto */</span><span>}</span></code></pre>\n<p>If set to <code>0</code>, the extra space around content isn't factored in. If set to <code>auto</code>, the extra space is distributed based on it's flex-grow value. <a href=\"http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg\">See this graphic.</a></p>\n</div>\n<div><h4>flex</h4>\n<p>This is the shorthand for <code>flex-grow,</code> <code>flex-shrink</code> and <code>flex-basis</code> combined. The second and third parameters (<code>flex-shrink</code> and <code>flex-basis</code>) are optional. Default is <code>0 1 auto</code>.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>flex</span><span>:</span> none | [ &lt;<span>'flex-grow'</span>&gt; &lt;<span>'flex-shrink'</span>&gt;? || &lt;<span>'flex-basis'</span>&gt; ]<span>}</span></code></pre>\n<p><strong>It is recommended that you use this shorthand property</strong> rather than set the individual properties. The short hand sets the other values intelligently.</p>\n</div>\n<div><h4>align-self</h4>\n<p><img src=\"http://cdn.css-tricks.com/wp-content/uploads/2014/05/align-self.svg\" alt=\"\" data-src=\"../database/uploads/images/article_images/align-self_17_3_2015.svg\"><br>This allows the default alignment (or the one specified by <code>align-items</code>) to be overridden for individual flex items.</p>\n<p>Please see the <code>align-items</code> explanation to understand the available values.</p>\n<pre rel=\"CSS\"><code><span><span>.item</span> </span><span>{</span>  <span>align-self</span><span>:</span> auto | flex-start | flex-end | center | baseline | stretch<span>;</span><span>}</span></code></pre>\n</div>\n<p>Note that <code>float</code>, <code>clear</code> and <code>vertical-align</code> have no effect on a flex item.</p>\n</div>","tags":"Flexbox","isStarred":"false","note":"","dateCreated":"Tue Feb 10 2015 17:23:21 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426609474702},"mode":"add","comments":[],"images":[],"_id":"Cs7DUqLTD2KHefEG","refSite":""}
{"id":"EqrrHCIwoHIVsyKN","category":"jquery","categoryId":"50","title":"jQuery : Exploring Deferred and Promise methods","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div dir=\"ltr\"><div><p><span>The\n jQuery Deferred object was introduced as a part of the 1.5 release of \nthe framework. The deferred object in jQuery is based upon the the \nconcept of <a href=\"http://wiki.commonjs.org/wiki/Promises/A\" target=\"_blank\">Promises</a>. In order to understand all about deferred objects, it would wise to try to understand what a Promise is all about.&nbsp;</span></p></div><div><span>Many\n times in our daily lives, we cannot rely on the outcomes of certain \nactions. However, we may still need to make decisions about the future \ndepending upon an anticipated outcome. All we know for sure is that we \nare gonna get an outcome. Lets just say that <em>we wrap the term ‘outcome’ in fancy looking gift wrapper and call it a ‘Promise’</em>.</span></div><div><span><br> </span></div><div><span>So, what is a ‘<strong><em>Promise</em></strong>‘? Well, its nothing more than an object returned by a method based upon which you can determine a future course of action.&nbsp;</span><span>Lets take a real world analogy.&nbsp;</span></div><div><blockquote><p><span>You decide to take up a job interview for company X – (This is a function that you intend to perform).&nbsp;</span><span>The interview has an outcome. You either get the job or you don’t.&nbsp;</span><span>But\n you need to have a plan no matter what the outcome of the interview is.\n And you need to plan that now. You cannot plan it in the future after \nthe interview. For example, you may need to book a travel ticket, ,or \nmay have to book a place for a party if the interview goes through. If \nit does not go through, then you may have to buy up some books and apply\n to company Y.</span></p></blockquote></div><div><span>If we were to write this plan programmatically, we would end up writing something like this.</span></div><pre title=\"\">candidate.attendInterview().then(\nsuccessFunction(){\n //Book tickets.\n //Order a crate of beer for a party!\n },\nfailureFunction(){\n //Buy some more books to brush up\n //Apply to company Y\n}\n);\n</pre><div><span>Now\n what is interesting about this is that even though you don’t know the \nexact outcome of the attendInterview function, you are able to chain a \nmethod to the ‘supposed’ outcome and specify the functions that should \nbe invoked upon completion of the ‘attendInterview’ function. This is \npossible because the attendInterview function would return a ‘Promise’ \nobject. An interesting aspect of this pattern is the concept of promise \nresolution. Promise resolution is said to happen when the task that \nreturns the promise completes in reality. So, when you return a Promise \nobject from the attendInterview function, the Promise is said to be \nunresolved. Only when the result of the operation is available, i.e. \nwhen the actual outcome of the interview is obtained after a period of \ntime, the promise object is said to be resolved. Upon resolution, based \nupon the result of the resolution, either the successFunction or the \nfailureFunction will be invoked.</span></div><div><span><br> </span></div><div><span><em>The concept of promises is important due to three main reasons</em>&nbsp;</span></div><blockquote><ul><li><span>It helps you to decouple the logic of future handlers from the actual task invocation.&nbsp;</span></li></ul><ul><li><span>You can add any number of future handlers.&nbsp;</span></li></ul><ul><li><span>If you add a handler to an already resolved Promise, the appropriate(success of failure) function would fire immediately.</span></li></ul></blockquote><p><span>The\n advantages of using a promise become much more clear when used in the \ncontext of ajax requests. That’s because the result of an ajax request \nis available at a future point of time, and the amount of time required \nfor the completion of an ajax request cannot be determined beforehand.</span></p><div><span><br> </span></div><div><span>jQuery introduced the <strong>Deferred object</strong>\n in the 1.5 version of the library to handle this scenario. The Deferred\n object is actually an implementation of the Promise interface. It \nprovides all the features of a Promise, and in addition, it also allows \nyou to create new deferred objects and attach future handlers to them \nand resolve them programmatically.</span></div><div><span><br> </span></div><div><span>Let’s understand the jQuery deferred object in terms of an ajax request.</span></div><div><span><br> </span></div><div><span>In\n versions of jQuery prior to 1.5 , in order to attach a success or a \nfailure handler to an ajax request, one would have declare a success \ncallback function when defining the ajax call. Although much more \nconvenient than the under the covers <em><strong>xmlhttprequest handling,</strong></em>\n this scheme had one drawback. A function that would be invoked in the \nfuture (success or failure) had to be defined as a part of the ajax \nfunction. Moreover, one could not attach multiple success or failure \nhandlers to the ajax call.&nbsp;</span><br> <span><br> </span></div><div><span><em>Here is how one would request using a version of jQuery prior to 1.5</em></span></div><div><pre title=\"\">$.ajax({\n  url: \"test.html\",\n  success: function(){\n    alert(\"ajax request succesful\");\n  },\n  failure: function(){\n    alert(\"ajax request failed\");\n  }\n});</pre><p><span>As shown in the code above, it can be seen that you are bound to specify the success function while making the ajax request. <em>Moreover there is only one available callback for success and failure each.</em></span></p><div><span><br> </span></div><div><span>As\n of jQuery 1.5, the introduction of the Deferred changed the game \ndrastically. And its a progressive change to be honest, because it not \nonly adds more effectiveness to the ajax functionality, but it also adds\n more functionality to the framework as a whole. We shall see how.</span></div><div><span><br> </span></div><div><span><em>Let us now invoke the same ajax call that we saw earlier using a version of jQuery &gt; 1.5.</em></span></div><pre title=\"\">var myRequest = $.ajax({  url: \"test.html\" })\n .done(function(data){\n  alert('ajax request was successful');\n  })\n .fail(function(data){\n  alert('ajax request failed');\n });&lt;/pre&gt;\n//After a few more lines of code\nmyRequest.done(function(data){\n$('div.myclass').html('Ajax Response ' + data);\n});\n</pre><div><span>As you see, this is far better than the previous method of invocation of the ajax request. <em>The\n done and fail functions are used to register callbacks on the object \nreturned by the ajax call. The ajax call returns a Deferred object which\n implements the Promise interface.</em> Since its a promise, you can attach handlers to it so that when the request completes, the future handlers would be invoked.</span></div><div><span><br> </span></div><div><span>Not only that, as you see in the example, we were also able to <em>attach a new success handler (the argument to the done function) at a later point of time</em>.\n If, until reaching that line, the ajax request has not been completed, \nin that case the function will be queued and will be invoked at a later \npoint of time. If the request is already complete, then the function \nwill fire immediately in case of success. In a similar way, you can add \nmultiple functions as a to the failure queue as well.</span></div><div><span><br> </span></div><div><p><span>This\n approach gives you a lot of flexibility in writing code and also makes \nthe code more legible. The Deferred object has a number of other \nfunctions. One of them that is pretty interesting is the <strong><em>when() function</em></strong>.\n This function has a lot of appeal because it allows you to group \ntogether deferred objects and then set up future handlers after all the \nobjects have been resolved or rejected.&nbsp;</span><span><em>This opens up the door to create interfaces that depend upon input from a number of sources but need to be rendered together.&nbsp;</em></span></p><blockquote><p><span>For\n example, a certain div contains information based upon a user choice. \nAnd the user selection leads to the firing of 2 different ajax requests.\n If your data is of the nature that the information would make sense \nonly if the data from both the requests are shown together, then using \nthe when function becomes a perfect candidate for such scenarios.</span></p></blockquote></div></div><div><span>In\n the below example, you can issue a request to two different url’s and \nonly after the data from both the url’s is retrieved, the future \nfunction that is specified as the argument to ‘done’ will be invoked.</span></div><div></div><pre title=\"\">$.when($.ajax(\"mypage1.html\"), $.ajax(\"mypage2.html\")).done(function(a1,  a2){\n     $('div.page1details').html(a1[0]);\n     $('div.page1details').html(a2[0]);\n  });\n</pre><div><span>Observe that there are 2 function calls inside the when function. You can have as many functions as you may like. <em><strong>The only criteria is that the object returned from the function call should be either a Promise or a Deferred.</strong></em>\n If it is a promise, then well and fine, If it is a Deferred, the \npromise() function is invoked and the Promise object is retrieved from \nthe deferred object. A parent Deferred object is created and this parent\n object keeps track of all the deferred objects of the functions defined\n inside the when function. Once all the functions declared inside the \nwhen function resolved, the done function will be invoked. However if \nany of the functions declared in the when function fails, the failure \ncallbacks are invoked without waiting for the resolution or rejection of\n the remaining functions.</span></div><div><span><br> </span></div><div><span>You can easily use the <strong>done</strong> and the <strong>fail</strong>\n functions to register future callbacks for a deferred object. Another \nway you can do the same would be to make use of the then function. If \nyou make use of the<strong><em> when – then function combination</em></strong>, it becomes much more easier to read the code, grammatically, because it appears to form some kind of a sentence.<em>Lets see an example of using the when-then pair, and this time we shall also see how one can register multiple callbacks</em></span></div><pre title=\"\">$(function(){&lt;/pre&gt;\nfunction fun1(data1, data2){\nconsole.log(\"fun1 : \" + data1[0].query + \" \" +\ndata1[0].results.length);\nconsole.log(\"fun1 : \" + data2[0].query + \" \" +\ndata2[0].results.length);\n}\n\nfunction fun2(data1, data2){\nconsole.log(\"fun1 : \" + data1[0].query + \" \" +\ndata1[0].results.length);\nconsole.log(\"fun1 : \" + data2[0].query + \" \" +\ndata2[0].results.length); }\n\nfunction fun3(data){\nconsole.log(\"fun3 called upon faliure\");\n}\n\nfunction fun4(data){\nconsole.log(\"fun4 called upon faliure\");\n}\n\nvar successFunctions = [fun1, fun2];\nvar failureFunctions = [fun3, fun4];\n\n$.when(\n$.ajax(\"http://search.twitter.com/search.json\", {\ndata: {\nq: 'jquery'\n},\ndataType: 'jsonp'\n})\n,\n$.ajax(\"http://search.twitter.com/search.json\", {\ndata: {\nq: 'blogger'\n},\ndataType: 'jsonp'\n})\n).then(successFunctions,failureFunctions);\n\n});\n</pre><div><span>In\n the above example, I created 4 functions. 2 of them will be invoked \nupon success and 2 will be invoked upon failure. As you can see, instead\n of passing a single function as a parameter to the then(), I passed in \nan array of functions for the success as well as the failure \ncallbacks.Another point to be noted here is that since we have 2 ajax \nrequests in the when() function, the success and failure methods can \naccept 2 arguments. Each argument will contain the <strong>jqXhr </strong>object\n that was returned by the corresponding ajax call.So, the above example \ndemonstrates how to use multiple callbacks, and and also how to use the \ndata that is obtained from a json ajax request.&nbsp;</span></div><div><span><br> </span></div><div><span>You may also note that since the ajax functions are making an <strong><em>JSONP request</em></strong>, I have referenced the <strong><em>JSON object</em></strong>\n in the success callbacks using data1[0] and data2[0] respectively. The \ndata1 and data2 objects are actually arrays of the form [JSONObject, \n\"success\",jqXHR].In case the request was an ordinary ajax request \ninstead of a jsonp request, you would instead have to make use of the \njqXHR object and retrieve the responseText as usual.&nbsp;</span></div><div><span><br> </span></div><div><p><span>Until now we have seen examples where the deferred object was the object that was returned by the ajax call. <em>Although used extensively with ajax, the deferred object can be used in other places as well.</em>&nbsp;</span></p><blockquote><p><span>An\n example of that would be running future callbacks after a set of \nanimations have finished executing. You can group together the \nanimations in a when() function and then using a deferred object, you \ncan easily invoke future callbacks using the then() function.&nbsp;</span></p></blockquote></div></div><div><span>The\n catch here is that animations do not return deferred objects. They \nalways return a simple jQuery object. This is where the Deferred \nconstructor comes to the rescue. <em>The deferred constructor can be \nused to create a new deferred object and then you can wrap your custom \ncode inside the deferred object and return the wrapper instead of the \njQuery object.</em>&nbsp;</span></div><div><span><br> </span></div><div><span>Lets see an example for the same.<em>In\n the following code, we are going to issue an ajax request, and resize a\n div. After both these tasks are complete, we are going to display the \ncontent retrieved via ajax in the div.</em></span></div><pre title=\"\">$(function(){&lt;/pre&gt;\nfunction successFunction(data){\nconsole.log(\"successfunction\");\n$('div.animateMe').html('Results : ' + data[0].results.length);\n}\n\nfunction animateDiv(){\n//As per the documentation, the argument that is passed\n//to the constructor is the newly created deferred object\nvar dfd = $.Deferred(function(dfd){\n$('div.animateMe').animate({height:'200px'},2000,dfd.resolve);\n});\n\nreturn dfd;\n}\n\nfunction failureFunction(){\nconsole.log(\"failureFunction\");\n}\n\n$.when(\n$.ajax(\"http://search.twitter.com/search.json\", {\ndata: {\nq: 'jquery'\n},\ndataType: 'jsonp'\n}),animateDiv()\n).then(successFunction,failureFunction);\n});\n</pre><div><span>You can also see a jsfiddle here&nbsp;</span><a href=\"http://jsfiddle.net/ryan_s/6kRAa/\" target=\"_blank\"><span>http://jsfiddle.net/ryan_s/6kRAa/</span></a></div><div><span><br> </span></div><div><span>This\n example is pretty simple because it does nothing but wait for the ajax \nrequest as well as the animation to complete before resolving the \nDeferred object. The main point of interest of this example is the \ncreation of a Deferred object within the animateDiv function. Within \nthis function, we first create a new Deferred object. The constructor of\n the Deferred object takes a function as a parameter which is invoked \njust before the constructor is about to return. This function is passed \nthe newly created Deferred object as an argument. Within, this function,\n we did an animate and upon animation completion, we indicated that the \nframework resolve the diferred object by passing the resolve function of\n the diferred object as an argument. In the next line, we simply return \nthe newly created Deferred object.</span></div><div><span><br> </span></div><div><span>In the above example, you might have noticed that we made use of a ‘<strong>resolve</strong>‘\n function. This function allows you to explicitly resolve a deferred \nobject. While the ability to resolve a deferred object programmatically \nis desirable for non ajax requests, the same cannot be said for ajax \nrequests. That’s because an ajax request is said to be resolved only \nwhen a response is received from the server. So the resolution of an \najax request takes place internally in the ajax function and should not \nbe available to the programmer directly.&nbsp;</span></div><div><span><br> </span></div><div><span>For\n non ajax requests, as in the example above, the programmer can resolve \nthe deferred object based upon the specific requirement. Since it is the\n deferred object that has the resolve method and a number of other \nadditional methods, the ajax request actually returns a Promise. This \nlets you invoke only the methods of the promise interface on the \nresultant object thereby preventing an explicit invocation of a \nprogrammatic resolve before the ajax request actually completes.&nbsp;</span></div><div><span><br> </span></div><div><span>When you are creating an non ajax deferred object, there is another method – <strong>reject</strong>,\n which indicates a failure and invokes the functions of the failure \nqueue. Without any doubt, the deferred object has small but useful api.&nbsp;</span></div><div><span><br> </span></div><div><strong><span>Summing It Up</span></strong></div><blockquote><ul><li><span>The\n deferred object in jQuery is an implementation of the Promise \nspecification.This means that you can a promise where-ever a Deferred \ncan be used.&nbsp;</span></li></ul><ul><li><span>Future handlers can be added to promise objects.&nbsp;</span></li></ul><ul><li><span>The\n future handlers are invoked upon the resolution(success) or the \nrejection(failure) of the invoked function.You can attach multiple \nfuture handlers to any deferred object.&nbsp;</span></li></ul><ul><li><span>The future handlers can receive parameters, which represent the information that was used to resolve the deferred object.&nbsp;</span></li></ul><ul><li><span>Non ajax objects can be wrapped in a deferred object by making use of the Deferred constructor.&nbsp;</span></li></ul><ul><li><span>The jQuery.when method can be used to group together a number of deferred objects and to attach future handlers to them.&nbsp;</span></li></ul><ul><li><span>Success handlers using the when function are invoked once all the deferred objects are resolved.&nbsp;</span></li></ul><ul><li><span>Failure\n handlers using the when function are invoked if any of the deferred \nobject fails irrespective of the status of the remaining deferred \nobjects.</span></li></ul></blockquote><p><span>I\n hope this article has been helpful in helping you gain an understanding\n of the concept of Promise and Deferred objects. There are a couple of \nlinks below that have good explanations of the same. I suggest that you \ntake a look at them too if you still only have a vague idea of things.&nbsp;</span><span>Also, there might be a thing or two, that I might have misunderstood! Make sure you point them out!&nbsp;</span></p>","tags":"javascript,jQuery,Deferred and Promise,Promise & Deferred","isStarred":"false","note":"","dateCreated":"Thu Feb 12 2015 19:56:07 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424186515773},"mode":"add","comments":[],"images":[],"_id":"EqrrHCIwoHIVsyKN"}
{"id":"GGES3MzeyvNWFGim","category":"jquery","categoryId":"50","title":"jQuery Custom Event","codes":[{"code":"\n\n// Create a custom event in jQuery, which runs similarly like hook in WordPress\n\n$( '#box' ).click( function()\n{\n  \n  // Add custom event to this element\n  $( this ).trigger( 'custom_event' );\n  \n} );\n\n// Define a custom callback (handler) for custom event\n$( document ).on( 'custom_event', '#box', function() {\n  $( this ).fadeOut( 'slow' );\n} );\n\n// Define another callback\n$( document ).on( 'custom_event', '#box', function() {\n  $( 'body' ).append( '<p>This is added by 2nd callback</p>' );\n} );\n","codeLanguage":"javascript"},{"code":"<div id=\"box\">Click me</div>","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>The most important feature that makes WordPress powerful and easy to customize is <a href=\"http://codex.wordpress.org/Plugin_API/Hooks\">hook system</a>. Developers can create as many hooks as he want, at various places that let users run extra code without modifying the original one. In Javascript (I mean pure Javascript), there’s nothing like that, but in jQuery there is. It has a different name – <strong>custom event</strong>. In this post, I’m gonna to show you how to implement custom event in jQuery to make it runs similarly like hook in WordPress.</p>\n\n<p><span id=\"more-1219\"></span></p>\n\n<p>The fundamental of jQuery custom event is function <a href=\"http://api.jquery.com/trigger/\"><code>trigger</code></a>:</p>\n\n<blockquote>\n\n<p>  Execute all handlers and behaviors attached to the matched elements for the given event type.</p>\n\n</blockquote>\n\n<p>It acts similarly like <a href=\"http://look4wp.com/do_action\"><code>do_action</code></a> in WordPress!</p>\n\n<p>The main keywords here are: <strong>handler</strong> and <strong>event</strong>, which in WordPress mean <strong>callback function</strong> and <strong>action name</strong>. The cool thing is event can be not only default Javascript event (click, focus, hover, etc.) but can be <em>anything</em>!</p>\n\n<h2>1. Add custom event in jQuery</h2>\n\n<p>So, to add a custom event in jQuery, simply do this:</p>\n\n<pre><code>$( '#element' ).trigger( 'custom_event_name' );</code></pre>\n\n<p>Similar thing in WordPress:</p>\n\n<pre><code>do_action( 'custom_hook' );</code></pre>\n\n<p>You can add this line anywhere in your code, where you want the custom event fired. Users need to “hook” into this event to run their custom code (step 2).</p>\n\n<h2>2. Add callback to custom event</h2>\n\n<p>There’re various functions in jQuery that helps us add callback (handler) to a custom event: <code>bind</code>, <code>delegate</code>, <code>on</code> (since jQuery 1.7). And because <code>bind</code> and <code>delegate</code> <a href=\"http://www.elijahmanor.com/2012/02/differences-between-jquery-bind-vs-live.html\">call <code>on</code> in its core</a>, we’re going to use <code>on</code> here.</p>\n\n<p>To add a handler to a custom event, we can do like this:</p>\n\n<pre><code>$( document ).on( 'custom_event_name', '#element', function(){\n    // Our custom code\n} );</code></pre>\n\n<p>Or if you prefer a function name instead of anonymous callback:</p>\n\n<pre><code>// Define callback functionfunction my_callback(){    \n// Our custom code\n}\n// Add event handler\n$( document ).on( 'custom_event_name', '#element', my_callback );</code></pre>\n\n<p>This looks exactly like a normal event handler that we often use for common events like <code>click</code>, <code>hover</code>, etc. The difference is only it will be fired when custom event is called (step 1).</p>\n\n<p>In WordPress, the similar thing is:</p>\n\n<pre><code>function my_callback(){\n// Our custom code\n}\nadd_action( 'custom_hook', 'my_callback' );</code></pre>\n\n<p>Putting everything together, we have a “hook system” in jQuery that works like in WordPress. This is an example I made in Codepen for demonstration (I add 2 callbacks for a custom event):</p>\n\n<div><iframe id=\"cp_embed_GiIce\" src=\"//codepen.io/rilwis/embed/GiIce?height=300&amp;type=result&amp;href=GiIce&amp;user=rilwis&amp;slug-hash=GiIce&amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" class=\"cp_embed_iframe undefined\" style=\"width: 100%; overflow: hidden;\"></iframe></div>\n\n<p><script async=\"\" src=\"http://codepen.io/assets/embed/ei.js\"></script></p>\n\n<p>Although jQuery custom event is cool, but it has 2 limitations compared with hook system in WordPress:</p>\n\n<ul>\n\n<li>We can’t define <strong>priority</strong> in jQuery, e.g. we can’t make the callback functions run in predefined order (in the example above, the 2nd callback runs at the same time as 1st one)</li>\n\n<li>WordPress has <strong>filters</strong>, while jQuery doesn’t. We can’t modify one value with multiple callback functions</li>\n\n</ul>\n\n<p>Anyway I believe that with jQuery custom event, we have a very strong tool that can help us do incredible things just like we’re doing with WordPress.</p>","tags":"custom event,jQuery","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 15:02:03 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423738375244},"mode":"add","comments":[],"images":[],"_id":"GGES3MzeyvNWFGim"}
{"id":"0","category":"css","categoryId":"29","title":"An Introduction to the BEM Methodology","refSite":"http://webdesign.tutsplus.com/articles/an-introduction-to-the-bem-methodology--cms-19403","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Let’s face it, we all want to make our code easier to read. Doing so \nhelps us work more quickly and efficiently, and when others work with us\n we can maintain clarity and coherent semantics. These days there seem \nto be so many standards and terms in the CSS world: <a sl-processed=\"1\" href=\"http://oocss.org/\" target=\"_self\">OOCSS</a>, <a sl-processed=\"1\" href=\"http://webdesign.tutsplus.com/articles/quick-tip-fix-your-messy-css-with-smacss--webdesign-18489\" target=\"_self\">SMACSS</a>, BEM and more! These are all approaches for improving CSS structure, and today we are going to cover BEM.</p>\n<p>BEM stands for <i>Block Element Modifier.&nbsp;</i>It suggests a \nstructured way of naming your classes, based on properties of the \nelement in question. If you’ve ever seen a class name like <code>header__form—email</code>\n that’s BEM in action. When using the BEM methodology, keep note that we\n will be using only class names (not IDs). Class names allow you to \nrepeat the BEM name if necessary, and create a more consistent coding \nstructure (both on in the HTML and CSS/Sass files). Now let’s break it \ndown.</p>\n<h2>Block</h2>\n<p>The <i>block</i> is the container or context where the element finds \nitself. Think of this as the bigger structural chunks of your code. You \nmight have a header, footer, sidebar and main content area; each of \nwhich would be considered a block. Take a look at the image below:</p><figure><img alt=\"\" src=\"https://cms-assets.tutsplus.com/uploads/users/51/posts/19403/image/bem-blocks.jpg\" data-src=\"database/uploads/images/article_images/bem-blocks_17_3_2015.jpg\"></figure>\n<p>The block element forms the root of the class and will always go \nfirst. Just know that once you’ve defined your block, you will be ready \nto start naming your elements.</p>\n<h2>Element</h2>\n<p>The element is the <i>piece</i> of a block. The block is the whole \nand the elements are the pieces. Each element is written after the block\n connected by two underscores.</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div></td><td><div><div><code>.block__element</code></div></div></td></tr></tbody></table></div></div>\n<p>I know this looks a little strange but once you start using it you’ll\n wonder how you ever wrote CSS without it! The double underscore allows \nyou to quickly and visually navigate and manipulate your code.</p>\n<p>Here are some examples of how the element methodology works:</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td><div><div><code>.header__logo {} </code></div><div><code>.header__tagline {} </code></div><div><code>.header__searchbar {}</code></div><div><code>.header__navigation {}</code></div></div></td></tr></tbody></table></div></div>\n<p>As you can see, there is room for creativity and making this \nmethodology your own. “Navigation” could be changed to “nav”, “tagline” \ncould be changed to “tag” or “tagLine”. The point is to keep the names \nsimple, clear, and precise. Don’t over think it, and because your \nstylesheets and html will stay DRY (don’t repeat yourself). It shouldn’t\n be a problem to update the class names when you find a better semantic \nthat works for you (just try to stick with it!). Elements will make the \ncore of your class names, helping you in understanding how to structure \nyour stylesheets and how to manage your layout.</p>\n<h2>Modifiers</h2>\n<p>Now it gets fun (if you weren’t having fun already!) When you name a \nclass, the intention is to help make that element repeatable so you \ndon’t have to write new classes in other areas of the site if the \nelements styles are the same. When you need to modify the style of a \nspecific element, you can use a modifier (of course!) To do this, you \nadd a double hyphen <code>--</code> after the element (or block). Here is a short example</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div></td><td><div><div><code>.block--modifier {}</code></div><div><code>.block__element--modifier {}</code></div></div></td></tr></tbody></table></div></div>\n<p>Be careful with these! Remember you want to keep everything simple \nand not have to repeat yourself or create extra classes unless \nabsolutely necessary. Let’s talk about it with code using the header of \nthe site as our block:</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div></td><td><div><div><code>.header__navigation {}</code></div><div><code>.header__navigation--secondary {}</code></div></div></td></tr></tbody></table></div></div>\n<p>If you are using a secondary navigation, the chances are that the \nlayout and spacing is the same, but the secondary navigation is a \ndifferent color. You can either duplicate the original styles, or even \nbetter, use a preprocessor. &nbsp;With Sass, you'd <code>@extend</code> the main element (so that the secondary element inherits all the properties) and change the appropriate styles.</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div></td><td><div><div><code>.header__navigation { </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>: </code><code>#008cba</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>padding</code><code>: </code><code>1</code><code>rem </code><code>0</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>margin</code><code>: </code><code>2</code><code>rem </code><code>0</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>text-transform</code><code>: </code><code>uppercase</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>} </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div><code>.header__navigation--secondary { </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>@extend .header__navigation;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>: </code><code>#dfe0e0</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div></div></td></tr></tbody></table></div></div>\n<p>You might be thinking to yourself “but the class name is so long!” \nThe way I see it: BEM class names are specific, clear, easy to read \ninside html, and clearly communicate what they're for.</p>\n<p>What I also like about BEM class names is that you only have to use \none class name for each html tag. Take a look at how it might work for \nlabels. Standard selectors:</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div></td><td><div><div><code>.label .label-</code><code>default</code> <code>{} </code></div><div><code>.label .label-alert {}</code></div></div></td></tr></tbody></table></div></div>\n<p>vs. BEM selectors:</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div></td><td><div><div><code>.label {}</code></div><div><code>.label--alert {}</code></div></div></td></tr></tbody></table></div></div>\n<p>Languages like Sass (Scss specifically) allow us to quickly have \nelements share the same stylings with small exceptions. The example \nbelow prevents us duplicating styles, rather we just change what is \nneeded. What I like so much about the BEM methodology is that I don’t \nhave to combine ambiguous classes like “<code>panel panel-default col-md-3</code>”. If you use a framework like <a sl-processed=\"1\" href=\"http://foundation.zurb.com/\">Foundation</a> you can begin to leverage mixins. But for a simple example, let’s style those lables we just defined.</p>\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div></td><td><div><div><code>.label { </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>: </code><code>#eee</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-radius: </code><code>505</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>color</code><code>: </code><code>#333</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>font-size</code><code>: </code><code>1</code><code>rem; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>} </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div><code>.label--alert { </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>@extend .label; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>: </code><code>#da4531</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>color</code><code>: </code><code>#fff</code><code>; </code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div></div></td></tr></tbody></table></div></div>\n<h2>Conclusion</h2>\n<p>Well there you have it, BEM in a nutshell. As you can see, there is \nso much more to explore. BEM is an ever-evolving system that allows you \nto bring clarity to your code and help you better define and set \nhierarchy to your front-end development.&nbsp;</p><p>From my personal \nexperience, it has helped me tremendously in building prototypes more \nefficiently, and transition to production level code even quicker!&nbsp;</p>","tags":"css,BEM Methodology","isStarred":"false","articleImages":["https://cms-assets.tutsplus.com/uploads/users/51/posts/19403/image/bem-blocks.jpg"],"note":"","dateCreated":"Tue Mar 17 2015 21:34:40 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 17 2015 21:34:40 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"GPOeZoHty1GQytcZ"}
{"id":"0","category":"javascript","categoryId":"30","title":"Javascript Best Practices Part 2","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><h3>Avoid Heavy Nesting</h3>\n\t\t\t\t\t<p>Code gets unreadable after a certain level of nesting.</p>\n\t\t\t\t\t<p>A really bad idea is to nest loops inside loops as that also means taking care of several iterator variables (i,j,k,l,m...).</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code><span><span><span><span>function</span></span></span><span> <span><span>renderProfiles</span></span><span><span>(o)</span></span>{</span></span>\n   <span><span>var</span></span> out = document.getElementById(<span><span>'profiles'</span></span>);\n   <span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>;i&lt;o.members.length;i++){\n      <span><span>var</span></span> ul = document.createElement(<span><span>'ul'</span></span>);\n      <span><span>var</span></span> li = document.createElement(<span><span>'li'</span></span>);\n      li.appendChild(document.createTextNode(o.members[i].name));\n      <span><span>var</span></span> nestedul = document.createElement(<span><span>'ul'</span></span>);\n      <span><span>for</span></span>(<span><span>var</span></span> j=<span><span>0</span></span>;j&lt;o.members[i].data.length;j++){\n         <span><span>var</span></span> datali = document.createElement(<span><span>'li'</span></span>);\n         datali.appendChild(\n            document.createTextNode(\n               o.members[i].data[j].label + <span><span>' '</span></span> + \n               o.members[i].data[j].value\n            )\n         );\n         nestedul.appendChild(detali);\n      }\n      li.appendChild(nestedul);\n   }\n   out.appendChild(ul);\n}</code></pre>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>You can avoid heavy nesting and loops inside loops with specialized tool methods.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<pre><code><span><span><span><span>function</span></span></span><span> <span><span>renderProfiles</span></span><span><span>(o)</span></span>{</span></span>\n   <span><span>var</span></span> out = document.getElementById(<span><span>'profiles'</span></span>);\n   <span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>;i&lt;o.members.length;i++){\n      <span><span>var</span></span> ul = document.createElement(<span><span>'ul'</span></span>);\n      <span><span>var</span></span> li = document.createElement(<span><span>'li'</span></span>);\n      li.appendChild(document.createTextNode(data.members[i].name));\n      li.appendChild(addMemberData(o.members[i]));\n   }\n   out.appendChild(ul);\n}\n<span><span><span><span>function</span></span></span><span> <span><span>addMemberData</span></span><span><span>(member)</span></span>{</span></span>\n   <span><span>var</span></span> ul = document.createElement(<span><span>'ul'</span></span>);\n   <span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>;i&lt;member.data.length;i++){\n      <span><span>var</span></span> li = document.createElement(<span><span>'li'</span></span>);\n      li.appendChild(\n         document.createTextNode(\n            member.data[i].label + <span><span>' '</span></span> +\n            member.data[i].value\n         )\n      );\n   }\n   ul.appendChild(li);\n   <span><span>return</span></span> ul;\n}</code></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Think of bad editors and small screens.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Optimize Loops</h3>\n\t\t\t\t\t<p>Loops can get terribly slow in JavaScript.</p>\n\t\t\t\t\t<p>Most of the time it’s because you’re doing things in them that don’t make sense.</p>\n\t\t\t\t\t<p>Don’t make JavaScript read the length of an array at every \niteration of a for loop.  Store the length value in a different \nvariable.</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> names = [<span><span>'George'</span></span>, \n<span><span>'Ringo'</span></span>, \n<span><span>'Paul'</span></span>, \n<span><span>'John'</span></span>];\n<span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>;i&lt;names.length;i++){\n   doSomethingWith(names[i]);\n}</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<pre><code><span><span>var</span></span> names = [<span><span>'George'</span></span>, \n<span><span>'Ringo'</span></span>, \n<span><span>'Paul'</span></span>, \n<span><span>'John'</span></span>];\n<span><span>for</span></span>(<span><span>var</span></span> i=<span><span>0</span></span>,j=names.length;i&lt;j;i++){\n   doSomethingWith(names[i]);\n}</code></pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Keep computation-heavy code outside of loops.  This includes regular expressions but first and foremost DOM manipulation.</p>\n\t\t\t\t\t<p>You can create the DOM nodes in the loop but avoid inserting them to the document.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Keep DOM Access to a Minimum</h3>\n\t\t\t\t\t<p>If you can avoid it, don’t access the DOM.</p>\n\t\t\t\t\t<p><em>Reason:</em>  It’s slow and there are all kinds of browser issues with constant access to and changes in the DOM.</p>\n\t\t\t\t\t<p><em>Solution:</em> Write or use a helper method that batch-converts a dataset to HTML.</p>\n\t\t\t\t\t<p>Seed the dataset with as much as you can and then call the method to render all out in one go.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Don’t Yield to Browser Whims</h3>\n\t\t\t\t\t<p>Instead of relying on flaky browser behavior and hoping it works across the board... </p>\n\t\t\t\t\t<p>Avoid hacking around and analyze the problem in detail instead.</p>\n\t\t\t\t\t<p>Most of the time you’ll find the extra functionality you need is because of bad planning of your interface.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Don’t Trust Any Data</h3>\n\t\t\t\t\t<p>Good code does not trust any data that comes in.</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Don’t believe the HTML document</em></p>\n\t\t\t\t\t\t\t<p>Any user can meddle with it for example in Firebug.</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Don’t trust that data reaches your function is of the right format.</em></p>\n\t\t\t\t\t\t\t<p>Test with <em>typeof</em> and then do something with it.</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Don’t expect elements in the DOM to be available.</em></p>\n\t\t\t\t\t\t\t<p>Test for them and that they indeed are what you expect them to be before altering them.</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Never ever use JavaScript to protect something.</em></p>\n\t\t\t\t\t\t\t<p>JavaScript is as easy to crack as it is to code :)</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Add Functionality with Javascript Not Content</h3>\n\t\t\t\t\t<p>If you find yourself creating lots and lots of HTML in JavaScript, you might be doing something wrong.</p>\n\t\t\t\t\t<p>It is not convenient to create using the DOM, it’s flasky to use <em>innerHTML</em> (IE’s Operation Aborted error), and it’s hard to keep track of the quality of the HTML you produce.</p>\n\t\t\t\t\t<p>If you really have a massive interface that should only be \navailable when JavaScript is turned on, load the interface as a static \nHTML document via Ajax.</p>\n\t\t\t\t\t<p>That way you keep maintenance in HTML and allow for customization.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Build on the Shoulders of Giants</h3>\n\t\t\t\t\t<p>Javascript is fun, but writing JavaScript for browsers is less so... start with a good library.</p>\n\t\t\t\t\t<p>JavaScript libraries are specifically built to make browsers behave and your code more predictable by plugging browser holes.</p>\n\t\t\t\t\t<p>Good libraries help you write code that works without keeping \nthe maintenance overhead of supporting current browsers and those to \ncome.</p>\n\t\t\t\t</div>\n\t\t\t\t<div><h3>Development Code is Not Live Code</h3>\n\t\t\t\t\t<p>Live code is written for machines.  Development code is written for humans.</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Collate, minify and optimize your code in a build process.</em></p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>Don’t optimize prematurely and punish your fellow developers and those who have to take over from them.</em></p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p><em>If we cut down on the time spent coding we have more time to perfect the conversion to machine code.</em></p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<p>If you're interested in learning more about web development, you should take a look at our <a href=\"http://wow.thinkful.com/courses/learn-web-development-online/?utm_source=tf_js_best_practices_guide_2&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides\">Frontend Web Development Course</a> or our <a href=\"http://wow.thinkful.com/courses/learn-angularjs-online/?utm_source=tf_js_best_practices_guide_2&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides\">AngularJS Course</a>.</p></div>","tags":"javascript,Practice","isStarred":"false","note":"","dateCreated":"Fri Feb 20 2015 12:28:32 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 20 2015 12:28:32 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"HQ2BnX1kIfb9jD5b"}
{"id":"0","category":"javascript","categoryId":"30","title":"Avoiding anonymous JavaScript functions ","refSite":"http://toddmotto.com/avoiding-anonymous-javascript-functions/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Anonymous functions, the art of the callback. I'm going to propose \nthat you never write a callback again using an anonymous function, and \nI'll sell you the idea now. Firstly, what is an anonymous function? \nSomething like this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>).</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>function</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n  <span>// we're inside the anon callback, btw...</span>\n  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n    <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n  <span>}</span>\n  <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n<span>},</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>Here's a few reasons why you should stop doing this... anonymous functions:</p>\n\n<ul>\n<li>Are more difficult to debug</li>\n<li>Cannot be reused</li>\n<li>Cannot be tested easily</li>\n<li>Do not describe the role of the function</li>\n<li>Make code lack structure</li>\n<li>Create messier/unclear code</li>\n<li>Documentation will suffer (things like jsDoc)</li>\n</ul>\n\n\n<p>Let's investigate. Based on our above code example, I can see a <code>click</code> event was bound and it executes a function which adds a <code>class</code>.\n But what for? So far (apart from an educated guess), I can only assume \nthat it toggles a tab or a menu. So why are we so reliant on using \nanonymous functions instead of helping ourselves write better code?</p>\n\n<p><em>\"But what does this code do?\"</em>. At this point, you remove \nyour headphones, peer over to your colleague who wrote the code and ask \nhim what the hell it adds a class to. He then gets agitated because \nyou've stopped his code flow and he's paused his Beyonce remix only to \ntell you the answer. This could have all been avoided if he'd written \nsome more classy code:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>toggleMenu</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n    <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n  <span>}</span>\n  <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n<span>}</span>\n<span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>).</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>Now, doesn't that look better? And hey, if we introduce another \nelement, we can bind the same function again without causing grief:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>).</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span>\n<span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.myclass2'</span><span>).</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>This also prevents those lazier developers to copy the entire \ncontents of the anonymous functions and pasting it again, only to avoid \nmoving it into a function and refactoring it for reuse.</p>\n\n<p><em>Abstraction.</em></p>\n\n<p>A beautiful word. Let's use it more and abstract our code into more \nreusable components and parts, to make our lives much easier. How about \nat this stage we also abstract our selector?</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>menu</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>);</span>\n<span>function</span> <span>toggleMenu</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n    <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n  <span>}</span>\n  <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n<span>}</span>\n<span>menu</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span> <span>// oozing with awesomeness</span></code></pre></div>\n\n\n<p>I really encourage this setup, because we're abstracting into <em>three</em> different sections, the <code>selector</code>, <code>event</code> and <code>method</code>.\n I say death to the one-liner of jQuery-chaining rubbish that's \nlittering the web - just because you can doesn't mean you should. \nChaining methods creates more complex and often lesser quality code. \nChaining sidesteps a problem of abstracting your methods into reusable \nparts and littering functions with them.</p>\n\n<p>So let's revisit our above code, and highlight the <code>selector</code>, <code>event</code> and <code>method</code>:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// selector</span>\n<span>var</span> <span>menu</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>);</span>\n\n<span>// method</span>\n<span>function</span> <span>toggleMenu</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n    <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n  <span>}</span>\n  <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n<span>}</span>\n\n<span>// event</span>\n<span>menu</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>This opens up many benefits. Let's say that <code>menu</code> also took an <code>onchange</code> event, we could simply extend what we've written <em>so</em> easily:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// selector</span>\n<span>var</span> <span>menu</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>);</span>\n\n<span>// method</span>\n<span>function</span> <span>toggleMenu</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n    <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n  <span>}</span>\n  <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n<span>}</span>\n\n<span>// events</span>\n<span>menu</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span>\n<span>menu</span><span>.</span><span>addEventListener</span><span>(</span><span>'onchange'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>Based on this setup, you've probably guessed how I (on a very basic \nlevel) structure my JavaScript files that manipulate the DOM. Here's \nwhat a typical file might look like (with production ready in mind):</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// keep things outside the global scope plz</span>\n<span>(</span><span>function</span> <span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>undefined</span><span>)</span> <span>{</span>\n\n  <span>'use strict'</span><span>;</span>\n\n  <span>/**</span>\n<span>   * Selectors</span>\n<span>   */</span>\n  <span>var</span> <span>menu</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.menu'</span><span>);</span>\n  <span>var</span> <span>users</span> <span>=</span> <span>document</span><span>.</span><span>querySelectorAll</span><span>(</span><span>'.user'</span><span>);</span>\n  <span>var</span> <span>signout</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'.signout'</span><span>);</span>\n\n  <span>/**</span>\n<span>   * Methods</span>\n<span>   */</span>\n  <span>function</span> <span>toggleMenu</span> <span>(</span><span>event</span><span>)</span> <span>{</span>\n    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>classList</span><span>.</span><span>contains</span><span>(</span><span>'active'</span><span>))</span> <span>{</span>\n      <span>this</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'active'</span><span>);</span>\n    <span>}</span>\n    <span>event</span><span>.</span><span>preventDefault</span><span>();</span>\n  <span>}</span>\n  <span>function</span> <span>showUsers</span> <span>(</span><span>users</span><span>)</span> <span>{</span>\n    <span>for</span> <span>(</span><span>var</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>users</span><span>.</span><span>length</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>\n      <span>var</span> <span>self</span> <span>=</span> <span>users</span><span>[</span><span>i</span><span>];</span>\n      <span>self</span><span>.</span><span>classList</span><span>.</span><span>add</span><span>(</span><span>'visible'</span><span>);</span>\n    <span>}</span>\n  <span>}</span>\n  <span>function</span> <span>signout</span> <span>(</span><span>users</span><span>)</span> <span>{</span>\n    <span>var</span> <span>xhr</span> <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>();</span>\n    <span>// TODO: finish signout</span>\n  <span>}</span>\n\n  <span>/**</span>\n<span>   * Events/APIs/init</span>\n<span>   */</span>\n  <span>menu</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>,</span> <span>false</span><span>);</span>\n  <span>signout</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>signout</span><span>,</span> <span>false</span><span>);</span>\n  <span>showUsers</span><span>(</span><span>users</span><span>);</span>\n\n\n<span>})(</span><span>window</span><span>,</span> <span>document</span><span>);</span></code></pre></div>\n\n\n<p>This also has many other benefits, including caching your selectors, \nyour team knowing the exact format in which you're writing your code, \nand not littering the file with random scripts here, there, everywhere, \nand making future changes incredibly easy.</p>\n\n<p>You'll also notice I wrap all my code inside an IIFE, <code>(function () {...})();</code>, this keeps all your code outside of the global scope and helps reduce <a href=\"http://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope\">more headaches</a>.</p>\n\n<h3>Passing parameters</h3>\n\n<p>You may have noticed that I haven't passed in any parameters to any of the above code examples, this is because the was <code>addEventListener</code> was added to JavaScript was <em>nearly</em>\n done well, but missed a vital piece of functionality, so we need to \nlook closer and understand what's happening. You might think you can do \nthis:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>element</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>(</span><span>param1</span><span>,</span> <span>param2</span><span>),</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>...But this will invoke the function as soon as the JavaScript engine\n hits the function, which is bad news. So what we can do is use the <code>ECMAScript 5</code> addition <code>Function.prototype.bind</code> (modern browsers only) which sets up the values without invoking the function. This is similar to <code>.call()</code> and <code>.apply()</code> but doesn't invoke the function:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>element</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>toggleMenu</span><span>.</span><span>bind</span><span>(</span><span>null</span><span>,</span> <span>param1</span><span>,</span> <span>param2</span><span>),</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p>You can read more about <code>.bind()</code> <a href=\"http://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope\">here</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">here</a>.You can grab the <code>.bind()</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">polyfill here</a> so that all browsers can use <code>.bind()</code> (as it's current IE9+ and all modern browsers)</p>\n\n<p>If you don't want to polyfill and go \"oldschool\" then you'll need to wrap it inside a function:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>element</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>function</span> <span>()</span> <span>{</span>\n  <span>toggleMenu</span><span>(</span><span>param1</span><span>,</span> <span>param2</span><span>);</span>\n<span>},</span> <span>false</span><span>);</span></code></pre></div>\n\n\n<p><em>Doesn't this go against the article?</em> No. This is a \nworkaround for passing arguments into functions and has nothing to do \nwith the benefits listed in the intro paragraph. You could even add your\n <code>event.preventDefault()</code> logic inside the wrapper callback depending on what the function inside did to ensure your function doesn't <code>preventDefault()</code> when you don't need it to.</p>","tags":"javascript,Anonymous Functions","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 20:15:03 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 20:15:03 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"IIOa733B7tASTMco"}
{"id":"J3aPg1v68N7pAOWF","category":"node.js","categoryId":"31","title":"LocallyDB ","codes":[{"code":"// load locallydb\nvar locallydb = require('locallydb');\n\n// load the database (folder) in './mydb', will be created if doesn't exist \nvar db = new locallydb('./mydb');\n\n// load the collection (file) in './mydb/monsters', will be created if doesn't exist \nvar collection = db.collection('monsters');\n\n// Insert/add/push a list of elements\ncollection.insert([\n  {name: \"sphinx\", mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"riddles\",\"sitting\",\"being a wonder\"]},\n  {name: \"hydra\", mythology: \"greek\", eyes: 18, sex: \"m\", hobbies: [\"coiling\",\"terrorizing\",\"growing\"]},\n  {name: \"huldra\", mythology: \"norse\", eyes: 2, sex: \"f\", hobbies: [\"luring\",\"terrorizing\"]},\n  {name: \"cyclops\", mythology: \"greek\", eyes: 1, sex: \"m\", hobbies: [\"staring\",\"terrorizing\"]},\n  {name: \"fenrir\", mythology: \"norse\", eyes: 2, sex: \"m\", hobbies: [\"growing\",\"god-killing\"]},\n  {name: \"medusa\",  mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"coiling\",\"staring\"]}\n]);\n\n// Insert/add/push only one element\ncollection.insert({name: \"HamoIzm\", mythology: \"amazigh\", eyes: 2, sex: \"m\", hobbies: [\"riddles\",\"hunting\"]});\n\n// retrieve elements\ncollection.where({name: \"HamoIzm\"});\n=> [{name: \"HamoIzm\", mythology: \"amazigh\", eyes: 2, sex: \"m\", hobbies: [\"riddles\",\"hunting\"], cid:6}]\n\n// retrieve by cid (cid is not index in array, cid is related with addition)\ncollection.get(3);\n=> {name: \"cyclops\", mythology: \"greek\", eyes: 1, sex: \"m\", hobbies: [\"staring\",\"terrorizing\"], cid:3}\n\n// retrieve elements (monsters) with >= 2 eyes (an array)\ncollection.where(\"@eyes >= 2\");\n=> [\n  {name: \"sphinx\", mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"riddles\",\"sitting\",\"being a wonder\"], cid:0},\n  {name: \"hydra\", mythology: \"greek\", eyes: 18, sex: \"m\", hobbies: [\"coiling\",\"terrorizing\",\"growing\"], cid:1},\n  {name: \"huldra\", mythology: \"norse\", eyes: 2, sex: \"f\", hobbies: [\"luring\",\"terrorizing\"], cid:2},\n  {name: \"fenrir\", mythology: \"norse\", eyes: 2, sex: \"m\", hobbies: [\"growing\",\"god-killing\"], cid:4},\n  {name: \"medusa\",  mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"coiling\",\"staring\"], cid:5},\n  {name: \"HamoIzm\", mythology: \"amazigh\", eyes: 2, sex: \"m\", hobbies: [\"riddles\",\"hunting\"], cid:6}\n]\n\n// retrieve elements with (2 eyes and from the greek mythology) or from the amazing mythology\ncollection.where(\"(@eyes == 2 && @mythology == 'greek') || (@mythology == 'amazing')\");\n=> [\n  {name: \"sphinx\", mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"riddles\",\"sitting\",\"being a wonder\"], cid:0},\n  {name: \"medusa\",  mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"coiling\",\"staring\"], cid:5},\n  {name: \"HamoIzm\", mythology: \"amazing\", eyes: 2, sex: \"m\", hobbies: [\"riddles\",\"hunting\"], cid:6}\n]\n\n// retrieve elements creation date\ncollection.get(6).$created;\n\n// retrieve elements last edit date\ncollection.get(6).$updated;\n\n// List all elements in the collection\ncollection.items;\n\n// Update an element, it will add un-exsited key and replace existed ($created and cid can't be changed)\ncollection.update(5, {eyes: 3, food:\"waloo\"});\ncollection.get(5);\n=> {name: \"medusa\",  mythology: \"greek\", eyes: 3, food:\"waloo\", sex: \"f\", hobbies: [\"coiling\",\"staring\"], cid:5}\n\n// Replace the element with the same cid and $created\ncollection.replace(6, {car: \"Ferrari\"});\ncollection.get(6);\n=> {car: \"Ferrari\", cid:6}\n\n// Delete an item by cid\ncollection.remove(1);\n\n// Save all to files\ncollection.save();\n\n// Now the data in the collection is\n[\n  {name: \"sphinx\", mythology: \"greek\", eyes: 2, sex: \"f\", hobbies: [\"riddles\",\"sitting\",\"being a wonder\"]},\n  {name: \"huldra\", mythology: \"norse\", eyes: 2, sex: \"f\", hobbies: [\"luring\",\"terrorizing\"]},\n  {name: \"cyclops\", mythology: \"greek\", eyes: 1, sex: \"m\", hobbies: [\"staring\",\"terrorizing\"]},\n  {name: \"fenrir\", mythology: \"norse\", eyes: 2, sex: \"m\", hobbies: [\"growing\",\"god-killing\"]},\n  {name: \"medusa\",  mythology: \"greek\", eyes: 3, food:\"waloo\", sex: \"f\", hobbies: [\"coiling\",\"staring\"], cid:5},\n  {car: \"Ferrari\", cid:6}\n]","codeLanguage":"javascript"},{"code":"zxczcfsdfsfsf sdfff","codeLanguage":"html"},{"code":"","codeLanguage":"css"}],"description":"<p><a href=\"https://github.com/btwael/locallydb\">LocallyDB</a>&nbsp;is an embedded JavaScript NoSql database for Node.js and node-webkit. It's designed to store and retrieve data locally, easily and in stored folders and files. The concept of LocallyDB as an API is easy to understand and makes for better data storing in your desktop and web applications.</p><p>LocallyDB provides a very powerful data selection method with the same javascript comparison and logical operators your use to:&nbsp;<tt>&gt;</tt>,&nbsp;<tt>&lt;</tt>,&nbsp;<tt>==</tt>,&nbsp;<tt>&amp;&amp;</tt>,&nbsp;<tt>||</tt>...</p><p>LocallyDB is very lightweight and it only has one dependency,&nbsp;<a href=\"http://underscorejs.org/\">underscore</a></p><h2>Source Code</h2><p><a href=\"https://github.com/btwael/locallydb\">Github Repo</a></p><p>The project is hosted on GitHub with bugs and feature discussion on the&nbsp;<a href=\"https://github.com/btwael/locallydb/issues\">issues page</a>.</p><h2>Installation</h2><p>You can install&nbsp;<b>LocallyDB</b>&nbsp;via npm from your terminal (in your project folder) by typing:</p><pre>npm install locallydb</pre>","tags":"node.js,Database","isStarred":"true","note":"","dateCreated":"Mon Dec 08 2014 21:25:20 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422108458094},"mode":"add","comments":[],"images":["72e541d8-smush-namibia_sossusvlei_namib-desert_16_1_2015.jpg","06fce3507be994c5519f35015ba84118_16_1_2015.png","8d6ea024-smush-italy_venice_tranquil_cana-copy_16_1_2015.jpg"],"_id":"J3aPg1v68N7pAOWF"}
{"id":"0","category":"svg","categoryId":"54","title":"Creative Gooey Effects ","refSite":"http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>A set of examples that use a gooey SVG filter for creating a variety of different effects for all kinds of website components.</p><p>Today we are going to show how to use SVG Filters to apply a \ngooey-like effect to HTML elements. We’ll first cover some basics of the\n technique and then we’ll demonstrate several creative use cases for \ncommon website elements, like menus, apps, selections, paginations and \nmore.</p><div>Please note that this effect is experimental and is only supported by modern browsers.</div><p>Let’s first dive into SVG Filters and understand how to apply them.</p><h2>SVG Filters</h2><p>With <a href=\"http://www.w3.org/TR/SVG/filters.html\">SVG Filters</a> \nwe can modify a given source graphic with an operation (or more) and \ncreate an altered result. Every filter element in SVG contains a set of <em>filter primitives</em> that do some kind of graphical operation. The available SVG filter primitives are the following:</p><ul>\n<li>feBlend</li>\n<li>feColorMatrix</li>\n<li>feComponentTransfer</li>\n<li>feComposite</li>\n<li>feConvolveMatrix</li>\n<li>feDiffuseLighting</li>\n<li>feDisplacementMap</li>\n<li>feFlood</li>\n<li>feGaussianBlur</li>\n<li>feImage</li>\n<li>feMerge</li>\n<li>feMorphology</li>\n<li>feOffset</li>\n<li>feSpecularLighting</li>\n<li>feTile</li>\n<li>feTurbulence</li>\n<li>feDistantLight</li>\n<li>fePointLight</li>\n<li>feSpotLight</li>\n</ul><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/CreativeGooeyEffects_Filter.png\" alt=\"CreativeGooeyEffects_Filter\" height=\"400\" width=\"890\"></p><p>When applying a filter, we can use the result of the operation as an \ninput to another filter, creating an inifinite range of possibilities \nfor effects. That’s what makes filters really powerful. </p><p>A common example for a SVG filter is the blur effect with <strong>&lt;feGaussianBlur&gt;</strong>:</p><pre><code>\n<span>&lt;<span>svg</span> <span>xmlns</span>=<span>\"http://www.w3.org/2000/svg\"</span> <span>version</span>=<span>\"1.1\"</span> <span>width</span>=<span>\"600\"</span> <span>height</span>=<span>\"400\"</span>&gt;</span>\n\t<span>&lt;<span>defs</span>&gt;</span>\n\t\t<span>&lt;<span>filter</span> <span>id</span>=<span>\"blur\"</span> <span>x</span>=<span>\"0\"</span> <span>y</span>=<span>\"0\"</span>&gt;</span>\n\t\t\t<span>&lt;<span>feGaussianBlur</span> <span>in</span>=<span>\"SourceGraphic\"</span> <span>stdDeviation</span>=<span>\"5\"</span> /&gt;</span>\n\t\t<span>&lt;/<span>filter</span>&gt;</span>\n\t<span>&lt;/<span>defs</span>&gt;</span>\n\t<span>&lt;<span>rect</span> <span>x</span>=<span>\"50\"</span> <span>y</span>=<span>\"50\"</span> <span>width</span>=<span>\"500\"</span> <span>height</span>=<span>\"300\"</span> <span>fill</span>=<span>\"#8d81ac\"</span> <span>filter</span>=<span>\"url(#blur)\"</span> /&gt;</span>  \n<span>&lt;/<span>svg</span>&gt;</span></code></pre><p>The result looks as follows:</p><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/CreativeGooeyEffects_Blur.png\" alt=\"CreativeGooeyEffects_Blur\" height=\"381\" width=\"606\"></p><p>The <code>in</code> attribute defines the input for the given filter primitive. Here we can use one of the following keywords:</p><ul>\n<li>SourceGraphic</li>\n<li>SourceAlpha</li>\n<li>BackgroundImage</li>\n<li>BackgroundAlpha</li>\n<li>FillPaint</li>\n<li>StrokePaint</li>\n</ul><p>We can also use a string here which references a previous <code>result</code> attribute. The <code>result</code> attribute gives us the possibility to make the result of a filter operation available as input to another filter using <code>in</code>. For our Gooey examples we will be using this. </p><p>A more complex example that shows how multiple filter primitives can \nbe used in combination to achieve one desired effect is the drop shadow:</p><pre><code>\n<span>&lt;<span>svg</span> <span>xmlns</span>=<span>\"http://www.w3.org/2000/svg\"</span> <span>version</span>=<span>\"1.1\"</span> <span>width</span>=<span>\"600\"</span> <span>height</span>=<span>\"400\"</span>&gt;</span>\n  <span>&lt;<span>defs</span>&gt;</span>\n\t<span>&lt;<span>filter</span> <span>id</span>=<span>\"dropshadow\"</span> <span>x</span>=<span>\"0\"</span> <span>y</span>=<span>\"0\"</span> <span>width</span>=<span>\"200%\"</span> <span>height</span>=<span>\"200%\"</span>&gt;</span>\n\t\t<span>&lt;<span>feOffset</span> <span>result</span>=<span>\"offsetResult\"</span> <span>in</span>=<span>\"SourceAlpha\"</span> <span>dx</span>=<span>\"20\"</span> <span>dy</span>=<span>\"20\"</span> /&gt;</span>\n\t\t<span>&lt;<span>feGaussianBlur</span> <span>result</span>=<span>\"blurResult\"</span> <span>in</span>=<span>\"offsetResult\"</span> <span>stdDeviation</span>=<span>\"5\"</span> /&gt;</span>\n\t\t<span>&lt;<span>feBlend</span> <span>in</span>=<span>\"SourceGraphic\"</span> <span>in2</span>=<span>\"blurResult\"</span> <span>mode</span>=<span>\"normal\"</span> /&gt;</span>\n\t<span>&lt;/<span>filter</span>&gt;</span>\n  <span>&lt;/<span>defs</span>&gt;</span>\n  <span>&lt;<span>rect</span> <span>width</span>=<span>\"500\"</span> <span>height</span>=<span>\"300\"</span> <span>fill</span>=<span>\"#8d81ac\"</span> <span>filter</span>=<span>\"url(#dropshadow)\"</span> /&gt;</span>\n<span>&lt;/<span>svg</span>&gt;</span>\n</code></pre><p>The result looks as follows:</p><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/CreativeGooeyEffects_DropShadow.png\" alt=\"CreativeGooeyEffects_DropShadow\" height=\"448\" width=\"652\"></p><p>The concept here is that we first offset the element and then blur \nthat offset “copy”. With the blend primitive, we simply set the original\n element on top of the blurred result. Using <code>in=\"SourceAlpha\"</code>, which is the alpha channel of the source graphic, actually makes the blurred result black. If we’d, for example, use <code>in=\"SourceGraphic\"</code>, the “shadow” would have the color of the source element.</p><div><div><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/themes/codropstheme03/images/advertisement.jpg\"><div data-serve=\"CKYDK5V\"><iframe src=\"http://cdn.adfront.org/1279993/raw_396214feda5d2df786e36a023d96ad75.html\" scrolling=\"no\" frameborder=\"0\" height=\"90\" width=\"728\"></iframe>\n\n\n</div><div></div></div></div><h3>SVG Filters for HTML</h3><p>Applying SVG Filters to HTML elements is pretty straightforward. \nFirst, we define our filter somewhere in the HTML and then we can use it\n in our stylesheet as follows:</p><pre><code>\n<span>.filterClass</span> <span>{\n\t<span><span>-webkit-filter</span>:<span> <span>url</span>(<span>\"#goo\"</span>)</span></span>;\n\t<span><span>filter</span>:<span> <span>url</span>(<span>\"../index.html#goo\"</span>)</span></span>;\n<span>}</span></span></code></pre><p>The reason why we define the path differently for the non-webkit \nproperty is Firefox and the way it references the filter. Being a \nrelative path, if we’d only use #goo, it would refer to it’s stylesheet \ninstead of the HTML it is used in and there no filter will be found. \nUsing inline styles or referencing to it the way we do it, solves that \nproblem. We can also add filter effects with JavaScript:</p><pre><code>\n<span><span>function</span> <span>setFilter</span><span>(value)</span></span>{\n\t<span>$effectContainer</span>.css({\n\t\twebkitFilter: value,\n\t\tfilter: value,\n\t});\n}</code></pre><p>Where <em>value</em> would be something like ‘url(#goo)’.</p><p>Support for SVG Filters on HTML elements is currently <a href=\"http://caniuse.com/#feat=svg-html\">pretty good</a>.</p><p>The following are some great resources for learning more about and experimenting with SVG Filters:</p><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Applying_SVG_effects_to_HTML_content\">Applying SVG effects to HTML content</a></li>\n<li><a href=\"http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm\">Hands On: SVG Filter Effects</a></li>\n<li><a href=\"http://www.broken-links.com/2013/11/20/cross-browser-filters-css-svg/\">Cross-browser filters with CSS and SVG</a></li>\n<li><a href=\"https://docs.webplatform.org/wiki/svg/tutorials/smarter_svg_filters\">Smarter SVG filters</a></li>\n<li><a href=\"http://www.creativebloq.com/netmag/how-go-beyond-basics-svg-filters-71412280\">How to go beyond the basics with SVG filters</a></li>\n</ul><h2>Applying the Gooey Filter</h2><p>Let’s take a look at one of the demos to see how it works in practice:</p><p><a href=\"http://tympanus.net/Tutorials/CreativeGooeyEffects/menu.html\"><br>\n<img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/GooeyEffectMenu.gif\" alt=\"GooeyEffectMenu\" height=\"359\" width=\"640\"><br>\n</a></p><p>The markup for this example looks as follows:</p><pre><code>\n<span>&lt;<span>div</span> <span>class</span>=<span>\"menu\"</span>&gt;</span>\n\t<span>&lt;<span>div</span> <span>class</span>=<span>\"menu-wrapper\"</span>&gt;</span>\n\t\t<span>&lt;<span>ul</span> <span>class</span>=<span>\"menu-items\"</span>&gt;</span>\n\t\t\t<span>&lt;<span>li</span> <span>class</span>=<span>\"menu-item\"</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>button</span> <span>class</span>=<span>\"menu-item-button\"</span>&gt;</span>\n\t\t\t\t\t<span>&lt;<span>i</span> <span>class</span>=<span>\"menu-item-icon icon icon-reply\"</span>&gt;</span><span>&lt;/<span>i</span>&gt;</span>\n\t\t\t\t<span>&lt;/<span>button</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>div</span> <span>class</span>=<span>\"menu-item-bounce\"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span>\n\t\t\t<span>&lt;/<span>li</span>&gt;</span>\n\t\t\t<span>&lt;<span>li</span> <span>class</span>=<span>\"menu-item\"</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>button</span> <span>class</span>=<span>\"menu-item-button\"</span>&gt;</span>\n\t\t\t\t\t<span>&lt;<span>i</span> <span>class</span>=<span>\"menu-item-icon icon icon-box\"</span>&gt;</span><span>&lt;/<span>i</span>&gt;</span>\n\t\t\t\t<span>&lt;/<span>button</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>div</span> <span>class</span>=<span>\"menu-item-bounce\"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span>\n\t\t\t<span>&lt;/<span>li</span>&gt;</span>\n\t\t\t<span>&lt;<span>li</span> <span>class</span>=<span>\"menu-item\"</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>button</span> <span>class</span>=<span>\"menu-item-button\"</span>&gt;</span>\n\t\t\t\t\t<span>&lt;<span>i</span> <span>class</span>=<span>\"menu-item-icon icon icon-trash\"</span>&gt;</span><span>&lt;/<span>i</span>&gt;</span>\n\t\t\t\t<span>&lt;/<span>button</span>&gt;</span>\n\t\t\t\t<span>&lt;<span>div</span> <span>class</span>=<span>\"menu-item-bounce\"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span>\n\t\t\t<span>&lt;/<span>li</span>&gt;</span>\n\t\t<span>&lt;/<span>ul</span>&gt;</span>\n\t\t<span>&lt;<span>button</span> <span>class</span>=<span>\"menu-toggle-button\"</span>&gt;</span>\n\t\t\t<span>&lt;<span>i</span> <span>class</span>=<span>\"fa fa-plus menu-toggle-icon\"</span>&gt;</span><span>&lt;/<span>i</span>&gt;</span>\n\t\t<span>&lt;/<span>button</span>&gt;</span>\n\t<span>&lt;/<span>div</span>&gt;</span>\n<span>&lt;/<span>div</span>&gt;</span></code></pre><p>We also define the filter inside an SVG object which we will place in our HTML:</p><pre><code>\n<span>&lt;<span>svg</span> <span>xmlns</span>=<span>\"http://www.w3.org/2000/svg\"</span> <span>version</span>=<span>\"1.1\"</span>&gt;</span>\n  <span>&lt;<span>defs</span>&gt;</span>\n    <span>&lt;<span>filter</span> <span>id</span>=<span>\"goo\"</span>&gt;</span>\n      <span>&lt;<span>feGaussianBlur</span> <span>in</span>=<span>\"SourceGraphic\"</span> <span>stdDeviation</span>=<span>\"10\"</span> <span>result</span>=<span>\"blur\"</span> /&gt;</span>\n      <span>&lt;<span>feColorMatrix</span> <span>in</span>=<span>\"blur\"</span> <span>mode</span>=<span>\"matrix\"</span> <span>values</span>=<span>\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9\"</span> <span>result</span>=<span>\"goo\"</span> /&gt;</span>\n      <span>&lt;<span>feComposite</span> <span>in</span>=<span>\"SourceGraphic\"</span> <span>in2</span>=<span>\"goo\"</span> <span>operator</span>=<span>\"atop\"</span>/&gt;</span>\n    <span>&lt;/<span>filter</span>&gt;</span>\n  <span>&lt;/<span>defs</span>&gt;</span>\n<span>&lt;/<span>svg</span>&gt;</span></code></pre><p>Next, we use the <code>filter</code> CSS property like described before in order to apply the filter to the container of the elements we want to stick together:</p><pre><code>\n<span>.menu</span> <span>{\n\t<span>/* other styles */</span>\n\n\t<span><span>-webkit-filter</span>:<span> <span>url</span>(<span>\"#goo\"</span>)</span></span>;\n\t<span><span>filter</span>:<span> <span>url</span>(<span>\"../menu.html#goo\"</span>)</span></span>;\n<span>}</span></span>\n</code></pre><p>Now, let’s break down the filter. The first operation done by the filter is to blur the object, through the <code>feGaussianBlur</code> filter.</p><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/article-step1-blur.gif\" alt=\"article-step1-blur\" height=\"168\" width=\"286\"></p><p>The next operation is a <code>feColorMatrix</code> filter. It is used\n in this case to increase the contrast of the alpha channel, which, \ncombined with the blur, creates that blob effect:</p><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/article-step2-contrast.gif\" alt=\"article-step2-contrast\" height=\"168\" width=\"286\"></p><p>Learn more about how to apply a color matrix <a href=\"https://docs.webplatform.org/wiki/svg/elements/feColorMatrix\">here</a>.</p><p>Finally, to make the contents visible, we draw the original graphics \nof the object over the effect we just made, using it as a mask as well. \nTo achieve that, we use the <code>feComposite</code> filter with the <code>atop</code> operator:</p><p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/03/article-step3-content.gif\" alt=\"article-step3-content\" height=\"168\" width=\"286\"></p><p>And we’re done! Please be aware that this filter can be quite \nresource intensive, so you should refrain from applying it to large \nareas. </p><h2>Examples</h2><p>The following demos will show some creative ways of using Gooey effects on all kinds of components:</p><ul>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/index.html\">Chat Application</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/menu.html\">Menu</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/pagination.html\">Pagination</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/select.html\">Element Selection</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/send.html\">Loader</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/share.html\">Share Button</a></li>\n<li><a href=\"http://tympanus.net/Development/CreativeGooeyEffects/player.html\">Music Visualizer</a></li>\n</ul><p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</p><p>We hope you find these examples inspiring!</p>","tags":"SVG,css,gooey effects","isStarred":"false","note":"","dateCreated":"Wed Mar 11 2015 11:19:51 GMT+0530 (India Standard Time)","dateModified":"Wed Mar 11 2015 11:19:51 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"K3ZCvpuzC0f9M7Vr"}
{"id":"0","category":"javascript","categoryId":"30","title":"The Difference Between Call and Apply in Javascript","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div class=\"piece\">\n\t<p>One very common thing that trips me up when writing Javascript is knowing when to use <code>call</code> and when to use <code>apply</code>. If you're wondering what these methods are, or don't know how scope works in JavaScript, then it might make sense to read the <a href=\"http://hangar.runway7.net/javascript-guide-to-objects-functions-scope-prototpyes-closures\">Javascript Guide</a> first.</p>\n\t\n\t<p>Let's look at some ways we might want to use them:</p>\n\t<pre>\n\t\t<code class=\"javascript\">\n\t\t\tvar person1 = {name: 'Marvin', age: 42, size: '2xM'};\nvar person2 = {name: 'Zaphod', age: 42000000000, size: '1xS'};\n\nvar sayHello = function(){\n    alert('Hello, ' + this.name);\n};\n\nvar sayGoodbye = function(){\n    alert('Goodbye, ' + this.name);\n};\n\t\t\t</code>\n\t\t</pre>\n\t<p>Now if you've read the <a href=\"http://hangar.runway7.net/javascript-guide-to-objects-functions-scope-prototpyes-closures\">guide</a>, this example will look really familiar. You'd already know that writing the following code:</p>\n\t<pre><code>sayHello();\nsayGoodbye();</code></pre>\n\t<p>will give errors (if you're lucky), or just unexpected results (if you aren't). This is because both functions rely on their scope for the <code>this.name</code> data, and calling them without explicit scope will just run them in the scope of the current window. </p>\n\t\n\t<p>So how do we scope them? Try this:</p>\n\t<pre><code>sayHello.call(person1);\nsayGoodbye.call(person2);\n\nsayHello.apply(person1);\nsayGoodbye.apply(person2);</code></pre>\n\t<p>All four of these lines do exactly the same thing. The run <code>sayHello</code> or <code>sayGoodbye</code> in the scope of either <code>person1</code> or <code>person2</code>. </p>\n\t\n\t<p>Both <code>call</code> and <code>apply</code> perform very similar functions: they execute a function in the context, or scope, of the first argument that you pass to them. Also, they're both functions that can only be called on other functions. You're not going to able to run <code>person1.call()</code>, nor does it make any sense to do so. </p>\n\t\n\t<p>The difference is when you want to <em>seed</em> this call with a set of arguments. Say you want to make a <code>say()</code> method that's a little more dynamic:</p>\n\t\n\t<pre><code>var say = function(greeting){\n    alert(greeting + ', ' + this.name);\n};\n\nsay.call(person1, 'Hello');\nsay.call(person2, 'Goodbye');</code></pre>\n\t\n\t<p>So that's <code>call</code> for you. It runs the function in the context of the first argument, and subsequent arguments are passed in to the function to work with. So how does it work with more than one argument?</p>\n\t\n\t<pre><code>var update = function(name, age, size){\n    this.name = name;\n    this.age = age;\n    this.size = size;\n};\n\nupdate.call(person1, 'Slarty', 200, '1xM');</code></pre>\n\t\n\t<p>No big deal. They're simply passed to the function if it takes more than one parameter. </p>\n\t\n\t<p>The limitations of <code>call</code> quickly become apparent when you want to write code that doesn't (or shouldn't) know the number of arguments that the functions need… like a dispatcher.</p>\n\t\n\t<pre><code>var dispatch = function(person, method, args){\n    method.apply(person, args);\n};\n\ndispatch(person1, say, ['Hello']);\ndispatch(person2, update, ['Slarty', 200, '1xM']);</code></pre>\n\t\n\t<p>So that's where <code>apply</code> comes in - the second argument needs to be an array, which is unpacked into arguments that are passed to the called function.</p>\n\t\n\t<p>So that's the difference between <code>call</code> and <code>apply</code>. Both can be called on functions, which they run in the context of the first argument. In <code>call</code> the subsequent arguments are passed in to the function as they are, while <code>apply</code> expects the second argument to be an array that it unpacks as arguments for the called function. </p>\n\t\n</div>","tags":"javascript,Call and Apply","isStarred":"false","note":"","dateCreated":"Tue Feb 10 2015 18:13:11 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 10 2015 18:13:11 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"KNpmLd2TpzDlI3lo"}
{"id":"0","category":"jquery","categoryId":"50","title":"IIFE - Immediately Invoked Function Expression","refSite":"http://gregfranko.com/jquery-best-practices/#/7","codes":[{"code":"// IIFE - Immediately Invoked Function Expression\n  (function($, window, document) {\n\n    // The $ is now locally scoped \n\n   // Listen for the jQuery ready event on the document\n   $(function() {\n\n     // The DOM is ready!\n\n   });\n\n   // The rest of the code goes here!\n\n  }(window.jQuery, window, document));\n  // The global jQuery object is passed as a parameter","codeLanguage":"javascript"},{"code":"// IIFE - Immediately Invoked Function Expression\n  (function(yourcode) {\n\n    // The global jQuery object is passed as a parameter\n  \tyourcode(window.jQuery, window, document);\n\n  }(function($, window, document) {\n\n    // The $ is now locally scoped \n\n   // Listen for the jQuery ready event on the document\n   $(function() {\n\n     // The DOM is ready!\n\n   });\n\n   // The rest of the code goes here!\n\n  }\n  }));","codeLanguage":"javascript"},{"code":"var listItems = $(\"#longlist li\");\n  listItems.on({\n\n    \"mouseenter\": function() {\n\n      $(this).text(\"Click me!\");\n\n    },\n\n    \"click\": function() {\n\n      $(this).text(\"Why did you click me?!\");\n\n    }\n\n  });","codeLanguage":"javascript"}],"description":"","tags":"jQuery,Function","isStarred":"false","note":"","dateCreated":"Fri Feb 27 2015 12:31:16 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 27 2015 12:31:16 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"KvkUmNURGmN5QcQ5"}
{"id":"0","category":"scss","categoryId":"57","title":"Modular CSS naming conventions","refSite":"http://thesassway.com/advanced/modular-css-naming-conventions","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>The more you write your own stylesheets, the more you begin to value using good\nnames in your code. Naming is by far one the most difficult and debated activities\nof a developer. To many, naming is an art form.</p>\n\n<p>Rather than making up my own names I sometimes consult a\npattern library like Dan Cederholm's <a target=\"_blank\" href=\"http://pea.rs/\">Pears</a> or a front-end framework like\n<a target=\"_blank\" href=\"http://getbootstrap.com/\">Bootstrap</a> to find a good name for a concept.</p>\n\n<p>Naming conventions can help us here as well. They provide an orderly structure\nfor our names. Naming conventions for classes are the major part of what a\nmethodology like <a target=\"_blank\" href=\"http://smacss.com/\">SMACSS</a>, <a target=\"_blank\" href=\"http://bem.info/\">BEM</a>, or\n<a target=\"_blank\" href=\"https://github.com/stubbornella/oocss\">OOCSS</a> provides.</p>\n\n<p>In this article I'd like to talk about a couple of my own naming conventions.\nThese are mostly based on SMACSS and BEM, but have my own twist.</p>\n\n<h2>Learning to think in Objects</h2>\n\n<p>Modular CSS is all about learning to think about your CSS in terms of objects.\nYou could call these objects <em>modules</em> (like SMACSS does), but I prefer to call\nthem <em>objects</em> in Sass because we often use the term <em>module</em> to refer to <a href=\"http://thesassway.com/intermediate/a-standard-module-definition-for-sass\">a\nlibrary of mixins and\nfunctions</a>.</p>\n\n<p>Objects are small little chunks of functionality. You can think of them as\ninterface elements like headers, footers, buttons, and content areas.</p>\n\n<p>I like to define my objects using only class selectors. ID and tag selectors can\ncomplicate things because <a target=\"_blank\" href=\"http://coding.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\">CSS specificity</a>\n<a target=\"_blank\" href=\"http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class/\">is a pain</a>.\nSo I avoid using ID or tag selectors in my stylesheets.</p>\n\n<p>Here's an example of a button object in Sass:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span><span>#eee</span><span>,</span> <span>#ccc</span><span>);</span>\n  <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#999</span><span>;</span>\n  <span>border-top</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#aaa</span><span>;</span>\n  <span>border-bottom</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#888</span><span>;</span>\n  <span>@include</span><span> border-radius</span><span>(</span><span>3</span><span>px</span><span>);</span>\n  <span>@include</span><span> box-shadow</span><span>(</span><span>white</span> <span>0</span> <span>1</span><span>px</span> <span>0</span> <span>inset</span><span>,</span> <span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.1</span><span>)</span> <span>0</span> <span>1</span><span>px</span> <span>0</span> <span>0</span><span>);</span>\n  <span>color</span><span>:</span> <span>#333</span><span>;</span>\n  <span>cursor</span><span>:</span> <span>pointer</span><span>;</span>\n  <span>padding</span><span>:</span> <span>4</span><span>px</span> <span>10</span><span>px</span> <span>5</span><span>px</span><span>;</span>\n\n  <span>&amp;</span><span>:hover</span> <span>{</span>\n    <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span><span>#fff</span><span>,</span> <span>#ddd</span><span>);</span>\n    <span>color</span><span>:</span> <span>#111</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>The Sass <a href=\"http://thesassway.com/intermediate/referencing-parent-selectors-using-ampersand\">ampersand operator</a>\nmakes it easy to define different states for an object. In this case I defined a\nhover state for the button above.</p>\n\n<h2>Parent-Child relationships</h2>\n\n<p>Adopting a naming convention for parent-child relationships between objects can\nreally help clean up your CSS. I talked about this in my earlier article on <a href=\"http://thesassway.com/intermediate/avoid-nested-selectors-for-more-modular-css\">the\nadvantages of avoiding nesting</a>\nin Sass.</p>\n\n<p>To continue the example from my earlier article:</p>\n\n<div>\n<pre><span>.post</span> <span>{</span>\n  <span>margin</span><span>:</span> <span>2</span><span>em</span><span>;</span>\n\n  <span>.title</span> <span>{</span>\n    <span>font-size</span><span>:</span> <span>2</span><span>em</span><span>;</span>\n    <span>font-weight</span><span>:</span> <span>normal</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Would be better written as:</p>\n\n<div>\n<pre><span>// Posts</span>\n<span>.post</span> <span>{</span>\n  <span>margin</span><span>:</span> <span>2</span><span>em</span> <span>0</span><span>;</span>\n<span>}</span>\n<span>.post-title</span> <span>{</span>\n  <span>font-size</span><span>:</span> <span>2</span><span>em</span><span>;</span>\n  <span>font-weight</span><span>:</span> <span>normal</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>The chief advantage of this approach is avoiding errors that may occur with\nsimilarly named objects. In the first example, if a title object was declared in\nanother context it could conflict with the post title. Not so in the second\nexample. Because the child object is prefixed with the parent object's name it\nis less likely that an accidental conflict will occur. Win and win.</p>\n\n<p>This example uses what I like to call the <em>Parent-Child Pattern</em> for declaring\nthis relationship. To use it simply prefix the name of the of the child object\nwith the name of the parent object. I like to separate with a single dash.</p>\n\n<p>There is one other pattern that can be used for declaring a parent-child\nrelationship. It's especially handy for a set of objects and their container. I\ncall it the <em>Plural Parent Pattern</em>. Here it is in action for marking up a group\nof tabs:</p>\n\n<div>\n<pre><span>.tabs</span> <span>{</span>\n  <span>border-bottom</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>silver</span><span>;</span>\n  <span>text-align</span><span>:</span> <span>center</span><span>;</span>\n<span>}</span>\n\n<span>.tab</span> <span>{</span>\n  <span>background</span><span>:</span> <span>#e5e5e5</span><span>;</span>\n  <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>silver</span><span>;</span>\n  <span>@include</span><span> border-top-radius</span><span>(</span><span>3</span><span>px</span><span>);</span>\n  <span>color</span><span>:</span> <span>#666</span><span>;</span>\n  <span>display</span><span>:</span> <span>inline</span><span>-</span><span>block</span><span>;</span>\n  <span>padding</span><span>:</span> <span>7</span><span>px</span> <span>18</span><span>px</span> <span>7</span><span>px</span><span>;</span>\n  <span>text-decoration</span><span>:</span> <span>none</span><span>;</span>\n  <span>position</span><span>:</span> <span>relative</span><span>;</span>\n  <span>top</span><span>:</span> <span>1</span><span>px</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>To use the <em>Plural Parent Patern</em>, simply pluralize the name of the parent object (the\ncontainer).</p>\n\n<h2>Subclassing objects</h2>\n\n<p>Most object-oriented systems have another concept for declaring that an object is\na kind of another object. It's called subclassing. It's useful for inheriting the\nproperties of another object while adding additional behavior. It can be used to\nbetter model objects in the real world. For example, a Prius is a kind of car.\nIt inherits the generic properties of a car (a stearing wheel, four tires,\nan engine, etc) and makes a few modifications (hybrid technology).</p>\n\n<p>We can use the same concept in CSS. Let's extend our button example to provide\nfor dropdown buttons:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span><span>#eee</span><span>,</span> <span>#ddd</span><span>);</span>\n  <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#999</span><span>;</span>\n  <span>@include</span><span> border-radius</span><span>(</span><span>5</span><span>px</span><span>);</span>\n  <span>color</span><span>:</span> <span>#666</span><span>;</span>\n  <span>cursor</span><span>:</span> <span>pointer</span><span>;</span>\n  <span>padding</span><span>:</span> <span>4</span><span>px</span> <span>10</span><span>px</span> <span>5</span><span>px</span><span>;</span>\n\n  <span>&amp;</span><span>:hover</span> <span>{</span>\n    <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span><span>#fff</span><span>,</span> <span>#eee</span><span>);</span>\n    <span>color</span><span>:</span> <span>#111</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>.dropdown-button</span> <span>{</span>\n  <span>&amp;</span><span>::</span><span>after</span> <span>{</span> <span>content</span><span>:</span> <span>\" \\25BE\"</span><span>;</span> <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Here, we've added a subclass for dropdown buttons. To use it, apply both classes\nto a button element:</p>\n\n<div>\n<pre><span>&lt;button</span> <span>class=</span><span>\"button dropdown-button\"</span><span>&gt;</span>\n  Dropdown\n<span>&lt;/button&gt;</span>\n</pre>\n</div>\n\n\n<p>If you prefer to only use one class in your markup, you can use the Sass\n<code>@extend</code> directive, as shown in the example below:</p>\n\n<div>\n<pre><span>.dropdown-button</span> <span>{</span>\n  <span>@extend</span> <span>.button</span><span>;</span>\n  <span>&amp;</span><span>::after</span> <span>{</span> <span>content</span><span>:</span> <span>\" \\25BE\"</span><span>;</span> <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>The naming convention I like to use for sub-classes is to preceed the name of\nthe object with the type of object. In this case, <code>dropdown-button</code>.</p>\n\n<h2>Using modifiers</h2>\n\n<p>The fourth type of class that I use is called a <em>modifier</em>. A modifier can be\nused to indicate that the object is in a certain state or to make small\nmodifications on existing behavior.</p>\n\n<p>For state, I like to use the SMACSS naming convention of prefixing state\nclasses with <code>is-</code>. A common example of a state class is to indicate that\nsomething is selected.</p>\n\n<p>Review the example below, to continue our tabs example from earlier:</p>\n\n<div>\n<pre><span>.tab</span> <span>{</span>\n  <span>background</span><span>:</span> <span>#e5e5e5</span><span>;</span>\n  <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>silver</span><span>;</span>\n  <span>@include</span><span> border-top-radius</span><span>(</span><span>3</span><span>px</span><span>);</span>\n  <span>color</span><span>:</span> <span>#666</span><span>;</span>\n  <span>display</span><span>:</span> <span>inline</span><span>-</span><span>block</span><span>;</span>\n  <span>padding</span><span>:</span> <span>7</span><span>px</span> <span>18</span><span>px</span> <span>7</span><span>px</span><span>;</span>\n  <span>text-decoration</span><span>:</span> <span>none</span><span>;</span>\n  <span>position</span><span>:</span> <span>relative</span><span>;</span>\n  <span>top</span><span>:</span> <span>1</span><span>px</span><span>;</span>\n\n  <span>&amp;</span><span>.is-selected</span> <span>{</span>\n    <span>background</span><span>:</span> <span>white</span><span>;</span>\n    <span>border-bottom-color</span><span>:</span> <span>white</span><span>;</span>\n    <span>color</span><span>:</span> <span>#333</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Notice how I'm using the Sass <a href=\"http://thesassway.com/intermediate/referencing-parent-selectors-using-ampersand\">ampersand operator</a>\nagain. In this case I'm using it to tightly associate the <code>is-selected</code> modifier\nwith the <code>tab</code> object. This is important because I don't want the rules declared\nhere to have ramifications on other objects. This tends to be true for most\nstate modifiers, so I'd recommend trying to always declare them inside of the\noriginal class definition with the ampersand operator (like we've done in the\nexample above).</p>\n\n<p>The second way that a modifier can be used is to make small changes to existing\nbehavior.</p>\n\n<p>Here's an example using modifers to allow for different size\ntextboxes:</p>\n\n<div>\n<pre><span>.textbox</span> <span>{</span>\n  <span>font</span><span>:</span> <span>13</span><span>px</span> <span>sans-serif</span><span>;</span>\n  <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#ccc</span><span>;</span>\n  <span>border-top</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#999</span><span>;</span>\n  <span>border-radius</span><span>:</span> <span>2</span><span>px</span><span>;</span>\n  <span>padding</span><span>:</span> <span>2</span><span>px</span> <span>4</span><span>px</span><span>;</span>\n\n  <span>&amp;</span><span>:focus</span> <span>{</span> <span>outline</span><span>:</span> <span>none</span><span>;</span> <span>border</span><span>:</span> <span>1</span><span>px</span> <span>solid</span> <span>#69e</span><span>;</span> <span>}</span>\n\n  <span>&amp;</span><span>.large</span> <span>{</span> <span>font-size</span><span>:</span> <span>18</span><span>px</span><span>;</span> <span>}</span>\n  <span>&amp;</span><span>.small</span> <span>{</span> <span>font-size</span><span>:</span> <span>11</span><span>px</span><span>;</span> <span>padding</span><span>:</span> <span>1</span><span>px</span> <span>2</span><span>px</span><span>;</span> <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Notice that by applying a <code>large</code> or <code>small</code> modifier to the textbox object we\ncan now change the size of the textbox. In this case, we also wanted to force\nthese modifiers to only apply to the <code>textbox</code> object so we used ampersand\noperator again.</p>\n\n<p>There are times when it makes perfect sense to make a modifer a global modifier.\nHere are a couple of examples:</p>\n\n<div>\n<pre><span>.clearfix</span> <span>{</span> <span>@include</span><span> clearfix</span><span>;</span> <span>}</span>\n\n<span>.is-hidden</span>    <span>{</span> <span>display</span><span>:</span>    <span>none</span> <span>!important</span><span>;</span> <span>}</span>\n<span>.is-invisible</span> <span>{</span> <span>visibility</span><span>:</span> <span>none</span> <span>!important</span><span>;</span> <span>}</span>\n\n<span>.block</span>        <span>{</span> <span>display</span><span>:</span> <span>block</span>        <span>!important</span><span>;</span> <span>}</span>\n<span>.inline</span>       <span>{</span> <span>display</span><span>:</span> <span>inline</span>       <span>!important</span><span>;</span> <span>}</span>\n<span>.inline-block</span> <span>{</span> <span>display</span><span>:</span> <span>inline</span><span>-</span><span>block</span> <span>!important</span><span>;</span> <span>}</span>\n\n<span>.left</span>  <span>{</span> <span>float</span><span>:</span> <span>left</span>  <span>!important</span><span>;</span> <span>}</span>\n<span>.right</span> <span>{</span> <span>float</span><span>:</span> <span>right</span> <span>!important</span><span>;</span> <span>}</span>\n\n<span>.text-left</span>   <span>{</span> <span>text-align</span><span>:</span> <span>left</span>   <span>!important</span><span>;</span> <span>}</span>\n<span>.text-center</span> <span>{</span> <span>text-align</span><span>:</span> <span>center</span> <span>!important</span><span>;</span> <span>}</span>\n<span>.text-right</span>  <span>{</span> <span>text-align</span><span>:</span> <span>right</span>  <span>!important</span><span>;</span> <span>}</span>\n\n<span>.mt0</span> <span>{</span> <span>margin-top</span><span>:</span>    <span>0</span>   <span>!important</span><span>;</span> <span>}</span>\n<span>.mt1</span> <span>{</span> <span>margin-top</span><span>:</span>    <span>1</span><span>em</span> <span>!important</span><span>;</span> <span>}</span>\n<span>.mb0</span> <span>{</span> <span>margin-bottom</span><span>:</span> <span>0</span>   <span>!important</span><span>;</span> <span>}</span>\n<span>.mb1</span> <span>{</span> <span>margin-bottom</span><span>:</span> <span>1</span><span>em</span> <span>!important</span><span>;</span> <span>}</span>\n</pre>\n</div>\n\n\n<p>Global modifers are generally best when they only change a single property.\nOften you will need to also use the <code>!important</code> flag to declare that they\nshould override other rules. Also you should be careful about overusing\nmodifiers like <code>.mt1</code> to adjust the top margin of an element. They are useful\nfor one-offs, but when used frequently for the same purpose they should probably\nbe rolled into an object definition or subclass.</p>\n\n<h2>Nouns and Adjectives</h2>\n\n<p>Now before all of this gets too confusing let me share something that may help\nthe English-minded folks among us.</p>\n\n<p><strong>Objects</strong> traditionally are nouns. They take the form of:</p>\n\n<div>\n<pre><span>.noun</span> <span>{}</span>            <span>// examples: .button, .menu, .textbox, .header</span>\n</pre>\n</div>\n\n\n<p><strong>Parent-Child</strong> relationships are also nouns:</p>\n\n<div>\n<pre><span>.noun</span> <span>{}</span>            <span>// parent: .post</span>\n<span>.noun-noun</span> <span>{}</span>       <span>// child:  .post-title</span>\n</pre>\n</div>\n\n\n<p><strong>Subclasses</strong> are often preceeded by a adjective describing the type of object:</p>\n\n<div>\n<pre><span>.adjective-noun</span> <span>{}</span>  <span>// example: .dropdown-button</span>\n</pre>\n</div>\n\n\n<p>And <strong>Modifiers</strong> are almost always adjectives (or are used descriptively):</p>\n\n<div>\n<pre><span>.is-state</span> <span>{}</span>        <span>// state: is-selected, is-hidden</span>\n<span>.adjective</span> <span>{}</span>       <span>// examples: .left, .right, .block, .inline</span>\n</pre>\n</div>\n\n\n<h2>A word on file structure</h2>\n\n<p>I've written about <a href=\"http://thesassway.com/beginner/how-to-structure-a-sass-project\">how to structure a Sass project</a>\nin the past. Let me show you how it applies within my own modular CSS\nmethodology. My <code>partials</code> directory is generally filled with files broken out\nby object. Here's an incomplete directory listing from a more recent project:</p>\n\n<pre>partials/\n|-- _alerts.scss\n|-- _buttons.scss\n|-- _checkboxes.scss\n|-- _choices.scss\n|-- _countdowns.scss\n|-- _footer.scss\n|-- _forms.scss\n|-- _icons.scss\n|-- _menus.scss\n|-- _messages.scss\n|-- _modifiers.scss\n|-- _panes.scss\n|-- _ratings.scss\n|-- _results.scss\n|-- _selectboxes.scss\n|-- _tableviews.scss\n|-- _textboxes.scss\n|-- _throbbers.scss\n`-- _typography.scss\n</pre>\n\n<p>I like to pluralize my file names because each partial contains the object\ndefintition along with any of the associated child objects, subclasses, and\nmodifiers.</p>\n\n<h2>Conclusion</h2>\n\n<p>So there you have it: a simple set of naming conventions for more modular CSS.\nAgain, for my own method I've borrowed a lot from <a target=\"_blank\" href=\"http://smacss.com/\">SMACSS</a>,\n<a target=\"_blank\" href=\"http://bem.info/\">BEM</a>, and <a target=\"_blank\" href=\"https://github.com/stubbornella/oocss\">OOCSS</a>.\nIf you're not familiar with any of these approaches they are well worth reading\nup on. You don't have to do modular CSS the way I do. Some folks prefer to use\n<a target=\"_blank\" href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">different types of separators</a>\nto distiguish between different types of classes. But the core of the approach\noutlined here is common between the major methodologies.</p>","tags":"css,SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:05:59 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:05:59 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"LUPl5R2fLOhiTduN"}
{"id":"0","category":"scss","categoryId":"57","title":"Mixins for semi-transparent colors","refSite":"http://thesassway.com/intermediate/mixins-for-semi-transparent-colors","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>One of the things I love most about Sass is its ability to calculate colors based on other colors. I often use functions like <code>darken()</code>, <code>saturate()</code>, and <code>adjust-color()</code> to calculate highlight colors or shadows for things like buttons.</p>\n\n<p>Recently I've enjoyed using semi-transparent colors in my designs to \nbetter blend elements with their backgrounds. Sass makes it easy to \ncreate semi-transparent colors with the <code>rgba()</code> function:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>background</span><span>:</span> <span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.5</span><span>);</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>In CSS, <code>rgba()</code> takes four parameters. The first three \nare for red, green, and blue. The last is the alpha channel. Sass allows\n you to pass just two parameters. The first can be any color and the \nlast, like the CSS version, is the alpha channel. At compile time Sass \nwill translate the two parameter version into four.</p>\n\n<p>But <code>rgba()</code> colors come with a price. Earlier versions of\n Internet Explorer can't interpret them correctly. When browsers have \ntrouble interpreting an attribute/value pair they ignore it. This means \nthat any element with an <code>rgba()</code> background will be rendered\n as completely transparent. You can get around this by including another\n color attribute with a format older browsers understand:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>background</span><span>:</span> <span>#7f7f7f</span><span>;</span>\n  <span>background</span><span>:</span> <span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.5</span><span>);</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>If you have a color picker tool, you can grab the values of the mixed\n colors yourself and add the additional attribute/value pairs manually, \nbut this can be quite tedius. Why not use the the <code>mix()</code> function to mix the colors for you?</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>background</span><span>:</span> <span>mix</span><span>(</span><span>black</span><span>,</span> <span>white</span><span>,</span> <span>50</span><span>%</span><span>);</span>\n  <span>background</span><span>:</span> <span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.5</span><span>);</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>But we can do better than this! Invoking some deeper magic, we can \nwrite a mixin that extracts the alpha component of a color, convert it \nto a percentage and use <code>mix()</code> to convert an <code>rgba()</code> color and a background color into the appropriate attribute/value pairs:</p>\n\n<div>\n<pre><span>@mixin</span><span> alpha-background-color</span><span>(</span><span>$color</span><span>,</span> <span>$background</span><span>)</span> <span>{</span>\n  <span>$percent</span><span>:</span> <span>alpha</span><span>(</span><span>$color</span><span>)</span> <span>*</span> <span>100</span><span>%</span><span>;</span>\n  <span>$opaque</span><span>:</span> <span>opacify</span><span>(</span><span>$color</span><span>,</span> <span>1</span><span>);</span>\n  <span>$solid-color</span><span>:</span> <span>mix</span><span>(</span><span>$opaque</span><span>,</span> <span>$background</span><span>,</span> <span>$percent</span><span>);</span>\n  <span>background-color</span><span>:</span> <span>$solid-color</span><span>;</span>\n  <span>background-color</span><span>:</span> <span>$color</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Now we can write our code like this:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>@include</span><span> alpha-background-color</span><span>(</span><span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.5</span><span>)</span><span>,</span> <span>white</span><span>);</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Which greatly simplifies things. With just a bit more effort, you can use a little <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#interpolation_\">Sass interpolation</a> to make a generic mixin that you can use to set any color attribute:</p>\n\n<div>\n<pre><span>@mixin</span><span> alpha-attribute</span><span>(</span><span>$attribute</span><span>,</span> <span>$color</span><span>,</span> <span>$background</span><span>)</span> <span>{</span>\n  <span>$percent</span><span>:</span> <span>alpha</span><span>(</span><span>$color</span><span>)</span> <span>*</span> <span>100</span><span>%</span><span>;</span>\n  <span>$opaque</span><span>:</span> <span>opacify</span><span>(</span><span>$color</span><span>,</span> <span>1</span><span>);</span>\n  <span>$solid-color</span><span>:</span> <span>mix</span><span>(</span><span>$opaque</span><span>,</span> <span>$background</span><span>,</span> <span>$percent</span><span>);</span>\n  <span>#</span><span>{</span><span>$</span><span>attribute</span><span>}</span><span>:</span> <span>$</span><span>solid-color</span><span>;</span>\n  <span>#</span><span>{</span><span>$</span><span>attribute</span><span>}</span><span>:</span> <span>$</span><span>color</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>And finally, our updated code:</p>\n\n<div>\n<pre><span>.button</span> <span>{</span>\n  <span>@include</span><span> alpha-attribute</span><span>(</span><span>'</span><span>background-color'</span><span>,</span> <span>rgba</span><span>(</span><span>black</span><span>,</span> <span>0</span><span>.5</span><span>)</span><span>,</span> <span>white</span><span>);</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Handy! To see this in action on a couple of my own buttons, check out <a target=\"_blank\" href=\"http://codepen.io/jlong/pen/IEpvh\">this code pen</a>.</p>","tags":"css,SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:04:43 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:04:43 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"LVyUpHtNIokf3ghV"}
{"id":"0","category":"javascript","categoryId":"30","title":"Array Sorting","refSite":"http://blog.dreasgrech.com/2009/11/custom-sorting-arrays-in-javascript.html","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"To sort an array in JavaScript, we use the <span><i>array</i>.sort()</span> method.<br>\n<br>\nLet's take a look at the following code:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>var</span>&nbsp;<span>words</span>&nbsp;&nbsp;&nbsp;<span>=</span>&nbsp;<span>[</span><span>\"andreas\"</span><span>,</span>&nbsp;<span>\"john\"</span><span>,</span>&nbsp;<span>\"grech\"</span><span>,</span>&nbsp;<span>\"janica\"</span><span>,</span>&nbsp;<span>\"buhagiar\"</span><span>]</span><span>;</span>\n<span>var</span>&nbsp;<span>numbers</span>&nbsp;<span>=</span>&nbsp;<span>[</span><span>5</span><span>,</span>&nbsp;<span>2</span><span>,</span>&nbsp;<span>8</span><span>,</span>&nbsp;<span>666</span><span>,</span>&nbsp;<span>42</span><span>,</span>&nbsp;<span>13</span><span>]</span><span>;</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>words</span><span>.</span><span>sort</span><span>(</span><span>)</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>numbers</span><span>.</span><span>sort</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</span></pre>\n</div>\n</div>\n<br>\nThe results of the above are:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>[</span><span>\"andreas\"</span><span>,</span>&nbsp;<span>\"buhagiar\"</span><span>,</span>&nbsp;<span>\"grech\"</span><span>,</span>&nbsp;<span>\"janica\"</span><span>,</span>&nbsp;<span>\"john\"</span><span>]</span>\n\n<span>[</span><span>13</span><span>,</span>&nbsp;<span>2</span><span>,</span>&nbsp;<span>42</span><span>,</span>&nbsp;<span>5</span><span>,</span>&nbsp;<span>666</span><span>,</span>&nbsp;<span>8</span><span>]</span>\n</span></pre>\n</div>\n</div>\n<br>\nAs you can see, the strings are sorted correctly, but what happened to \nthe numbers?  13 is obviously greater than 2, so why is it before?<br>\n<br>\n<h4>Sorting lexicographically</h4>\nThe problem with the <span><i>array</i>.sort</span> function is that it sorts lexicographically, meaning it sorts 'alphabetically'; in dictionary order; and thus the <span>sort</span>\n function just assumes that the elements that need to be sorted are \nstrings. And if they aren't strings, it converts them to strings and \nthen compares them.<br>\n<br>\nFortunately, <span>sort</span> takes also a single parameter; a function that will be used to sort the array with.<br>\n<br>\nLet's take an example of how we can sort numbers:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>var</span>&nbsp;<span>numbers</span>&nbsp;<span>=</span>&nbsp;<span>[</span><span>5</span><span>,</span>&nbsp;<span>2</span><span>,</span>&nbsp;<span>8</span><span>,</span>&nbsp;<span>666</span><span>,</span>&nbsp;<span>42</span><span>,</span>&nbsp;<span>13</span><span>]</span><span>;</span>\n<span>var</span>&nbsp;<span>ascNumSort</span>&nbsp;<span>=</span>&nbsp;<span>function</span>&nbsp;<span>(</span><span>a</span><span>,</span>&nbsp;<span>b</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>a</span>&nbsp;<span>-</span>&nbsp;<span>b</span><span>;</span>\n<span>}</span><span>;</span>\n<span>var</span>&nbsp;<span>ns</span>&nbsp;<span>=</span>&nbsp;<span>numbers</span><span>.</span><span>sort</span><span>(</span><span>ascNumSort</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>ns</span><span>)</span><span>;</span>\n</span></pre>\n</div>\n</div>\n<br>\nNow we created a function called <span>ascNumSort</span> and passed it to the <span>sort</span> method, and as you can see the numbers are now correctly sorted in ascending order.<br>\n<br>\n<h4>What kind of function ?</h4>\nThe function that you pass as a parameter to the <span>sort</span> method needs to abide with the following rules:<br>\n<ol>\n<li>It must accept two formal arguments</li>\n\n<li>Return a 0 if the two elements are equal</li>\n\n<li>Return a positive number if the second parameter should come before the first parameter</li>\n\n<li>Return a negative number if the first parameter should come before the second parameter</li>\n\n</ol>\nWith these rules, we can now build our custom sorting functions.<br>\n<br>\nLet's say that we have an array of objects representing people and we \nwant to sort these people according to their height, in descending \norder:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>var</span>&nbsp;<span>people</span>&nbsp;<span>=</span>&nbsp;<span>[</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Andreas\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.4</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Janica\"</span><span>,</span>&nbsp;&nbsp;<span>height</span><span>:</span>&nbsp;<span>4.3</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Cameron\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.8</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Richard\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.4</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Ryan\"</span><span>,</span>&nbsp;&nbsp;&nbsp;&nbsp;<span>height</span><span>:</span>&nbsp;<span>4.5</span><span>}</span>\n<span>]</span><span>;</span>\n\n<span>var</span>&nbsp;<span>sortedPeople</span>&nbsp;<span>=</span>&nbsp;<span>people</span><span>.</span><span>sort</span><span>(</span><span>function</span>&nbsp;<span>(</span><span>p1</span><span>,</span>&nbsp;<span>p2</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>p2</span><span>.</span><span>height</span>&nbsp;<span>-</span>&nbsp;<span>p1</span><span>.</span><span>height</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>sortedPeople</span><span>)</span><span>;</span>\n<span>/*Result:\n[\n&nbsp;Object&nbsp;name=Cameron&nbsp;height=5.8,&nbsp;\n&nbsp;Object&nbsp;name=Andreas&nbsp;height=5.4,&nbsp;\n&nbsp;Object&nbsp;name=Richard&nbsp;height=5.4,&nbsp;\n&nbsp;Object&nbsp;name=Ryan&nbsp;&nbsp;&nbsp;&nbsp;height=4.5,&nbsp;\n&nbsp;Object&nbsp;name=Janica&nbsp;&nbsp;height=4.3\n]\n*/</span>\n</span></pre>\n</div>\n</div>\n<br>\n<h4>Sorting on multiple keys</h4>\nBy implementing what we did above, but \nin a more general way, we can come up with a function that will allow us\n to sort an array of objects, given a key (or multiple keys) [<i>taken from Douglas Crockford's The Good Parts]</i>:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>//Function&nbsp;by&nbsp;takes&nbsp;a&nbsp;member&nbsp;name&nbsp;string&nbsp;and&nbsp;an</span>\n<span>//optional&nbsp;minor&nbsp;comparison&nbsp;function&nbsp;and&nbsp;returns</span>\n<span>//a&nbsp;comparison&nbsp;function&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;sort&nbsp;an</span>\n<span>//array&nbsp;of&nbsp;objects&nbsp;that&nbsp;contain&nbsp;that&nbsp;member.&nbsp;&nbsp;The</span>\n<span>//minor&nbsp;comparison&nbsp;function&nbsp;is&nbsp;used&nbsp;to&nbsp;break&nbsp;ties</span>\n<span>//when&nbsp;the&nbsp;o[name]&nbsp;and&nbsp;p[name]&nbsp;are&nbsp;equal&nbsp;</span>\n\n<span>var</span>&nbsp;<span>by</span>&nbsp;<span>=</span>&nbsp;<span>function</span>&nbsp;<span>(</span><span>name</span><span>,</span>&nbsp;<span>minor</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>function</span>&nbsp;<span>(</span><span>o</span><span>,</span>&nbsp;<span>p</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;<span>a</span><span>,</span>&nbsp;<span>b</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;<span>(</span><span>typeof</span>&nbsp;<span>o</span>&nbsp;<span>===</span>&nbsp;<span>'object'</span>&nbsp;<span>&amp;&amp;</span>&nbsp;<span>typeof</span>&nbsp;<span>p</span>&nbsp;<span>===</span>&nbsp;<span>'object'</span>&nbsp;<span>&amp;&amp;</span>&nbsp;<span>o</span>&nbsp;<span>&amp;&amp;</span>&nbsp;<span>p</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>a</span>&nbsp;<span>=</span>&nbsp;<span>o</span><span>[</span><span>name</span><span>]</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>b</span>&nbsp;<span>=</span>&nbsp;<span>p</span><span>[</span><span>name</span><span>]</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;<span>(</span><span>a</span>&nbsp;<span>===</span>&nbsp;<span>b</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>typeof</span>&nbsp;<span>minor</span>&nbsp;<span>===</span>&nbsp;<span>'function'</span>&nbsp;<span>?</span>&nbsp;<span>minor</span><span>(</span><span>o</span><span>,</span>&nbsp;<span>p</span><span>)</span>&nbsp;<span>:</span>&nbsp;<span>o</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;<span>(</span><span>typeof</span>&nbsp;<span>a</span>&nbsp;<span>===</span>&nbsp;<span>typeof</span>&nbsp;<span>b</span><span>)</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>a</span>&nbsp;<span>&lt;</span>&nbsp;<span>b</span>&nbsp;<span>?</span>&nbsp;<span>-</span><span>1</span>&nbsp;<span>:</span>&nbsp;<span>1</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;<span>typeof</span>&nbsp;<span>a</span>&nbsp;<span>&lt;</span>&nbsp;<span>typeof</span>&nbsp;<span>b</span>&nbsp;<span>?</span>&nbsp;<span>-</span><span>1</span>&nbsp;<span>:</span>&nbsp;<span>1</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>&nbsp;<span>else</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>throw</span>&nbsp;<span>{</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>name</span><span>:</span>&nbsp;<span>'Error'</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>message</span><span>:</span>&nbsp;<span>'Expected&nbsp;an&nbsp;object&nbsp;when&nbsp;sorting&nbsp;by&nbsp;'</span>&nbsp;<span>+</span>&nbsp;<span>name</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span><span>;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>}</span>\n<span>}</span><span>;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n</span></pre>\n</div>\n</div>\n<br>\nNow let's take a look of an example of how we can use the above <span>by</span> function:<br>\n<br>\n<div><div>\n<pre name=\"code\"><span><span>var</span>&nbsp;<span>people</span>&nbsp;<span>=</span>&nbsp;<span>[</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Andreas\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.4</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Janica\"</span><span>,</span>&nbsp;&nbsp;<span>height</span><span>:</span>&nbsp;<span>4.3</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Tony\"</span><span>,</span>&nbsp;&nbsp;&nbsp;&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.8</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Richard\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.4</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Ryan\"</span><span>,</span>&nbsp;&nbsp;&nbsp;&nbsp;<span>height</span><span>:</span>&nbsp;<span>4.5</span><span>}</span><span>,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span>{</span><span>name</span><span>:</span>&nbsp;<span>\"Cameron\"</span><span>,</span>&nbsp;<span>height</span><span>:</span>&nbsp;<span>5.8</span><span>}</span>\n<span>]</span><span>;</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>people</span><span>.</span><span>sort</span><span>(</span><span>by</span><span>(</span><span>'height'</span><span>)</span><span>)</span><span>)</span><span>;</span>\n<span>/*Result:\n[\n&nbsp;Object&nbsp;name=Janica&nbsp;height=4.3,&nbsp;&nbsp;Object&nbsp;name=Ryan&nbsp;height=4.5,&nbsp;\n&nbsp;Object&nbsp;name=Andreas&nbsp;height=5.4,&nbsp;Object&nbsp;name=Richard&nbsp;height=5.4,&nbsp;\n&nbsp;Object&nbsp;name=Tony&nbsp;height=5.8,&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;name=Cameron&nbsp;height=5.8\n]\n*/</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>people</span><span>.</span><span>sort</span><span>(</span><span>by</span><span>(</span><span>'height'</span><span>,</span>&nbsp;<span>by</span><span>(</span><span>'name'</span><span>)</span><span>)</span><span>)</span><span>)</span><span>;</span>\n<span>/*Result:\n[\n&nbsp;Object&nbsp;name=Janica&nbsp;height=4.3,&nbsp;&nbsp;Object&nbsp;name=Ryan&nbsp;height=4.5,&nbsp;\n&nbsp;Object&nbsp;name=Andreas&nbsp;height=5.4,&nbsp;Object&nbsp;name=Richard&nbsp;height=5.4,&nbsp;\n&nbsp;Object&nbsp;name=Cameron&nbsp;height=5.8,&nbsp;Object&nbsp;name=Tony&nbsp;height=5.8\n]\n*/</span>\n</span></pre>\n</div>\n</div>","tags":"javascript,array,sort","isStarred":"false","note":"","dateCreated":"Thu Mar 12 2015 16:17:47 GMT+0530 (India Standard Time)","dateModified":"Thu Mar 12 2015 16:17:47 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"Lh6BpL2ui5wA0OlC"}
{"id":"LwXiCGf6ydaYIEfx","category":"javascript","categoryId":"30","title":"Sort Array Object with Multiple keys","refSite":"","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<pre><code>\n/*============================================\n\tExample 1 :\n\tSort Array Object with Multiple Keys\n==============================================*/\nvar tempObj = [\n{ id : \"achievement\", title : \"ACHIEVEMENT\", score : 8, desc : \"It is important to challenge yourself and work hard to improve.\" },\n{ id : \"belonging\", title : \"BELONGING\", score : 10, desc : \"It is important to be accepted by others and to feel included.\" },\n{ id : \"concernEnvironment\", title : \"CONCERN FOR THE ENVIRONMENT\", score : 10, desc : \"It is important to protect and preserve the environment.\" },\n{ id : \"concernOthers\", title : \"CONCERN FOR OTHERS\", score : 15, desc : \"The well-being of others is important.\" },\n{ id : \"creativity\", title : \"CREATIVITY\", score : 15, desc : \"It is important to have new ideas or to create new things.\" },\n{ id : \"financialProsperity\", title : \"FINANCIAL PROSPERITY \", score : 20, desc : \"It is important to be successful at making money or buying property.\" },\n{ id : \"healthActivity\", title : \"HEALTH AND ACTIVITY\", score : 21, desc : \"It is important to be healthy and physically active.\" },\n{ id : \"humility\", title : \"HUMILITY\", score : 23, desc : \"It is important to be humble and modest about your accomplishments.\" },\n{ id : \"independence\", title : \"INDEPENDENCE\", score : 25, desc : \"It is important to make your own decisions and do things your way.\" },\n{ id : \"familyGroupLoyalty\", title : \"INTERDEPENDENCE\", score : 8, desc : \"It is important to make your own decisions and do things your way.\" },\n{ id : \"privacy\", title : \"PRIVACY\", score : 9, desc : \"It is important to have time alone.\" },\n{ id : \"responsiblity\", title : \"RESPONSIBLITY\", score : 10, desc : \"It is important to be dependable and trustworthy.\" },\n{ id : \"scientificUnderstanding\", title : \"OBJECTIVE ANALYSIS\", score : 11, desc : \"It is important to use logical principles to understand and solve problems.\" },\n{ id : \"spirituality\", title : \"SPIRITUALITY\", score : 11, desc : \"It is important to have spiritual beliefs and to believe that you are part of something greater than yourself.\" },\n];\n\n// I want to sort above Array with Objects first by Score and Then by ID (which is text)\ntempObj.sort(function(a,b) {\n    return b.score - a.score || a.id.toLowerCase() > b.id.toLowerCase();\n});\n\nconsole.log(tempObj);\n</code></pre>\n\n<pre><code>\n/*============================================\n\tExample 2 :\n\tSort Array Object with Multiple Keys\n==============================================*/\n// &lt;div id=\"sort_result\">&lt;/div>\nvar arr = [\n    { id:1001, date:\"20-02-2014\", Name: 'Hiren' },\n    { id:1004, date:\"13-02-2014\", Name: 'Manoj' },\n    { id:1000, date:\"08-01-2014\", Name: 'Mohan' },\n    { id:1004, date:\"16-02-2014\", Name: 'Ramesh' },\n    { id:1006, date:\"22-02-2014\", Name: 'Suresh' },\n    { id:1003, date:\"28-02-2014\", Name: 'Santosh' },\n    { id:1000, date:\"28-01-2014\", Name: 'Deilip' },\n    { id:1004, date:\"28-01-2014\", Name: 'Jignesh' },\n    { id:1000, date:\"08-01-2014\", Name: 'Raja' },\n    { id:1006, date:\"08-01-2014\", Name: 'Lalit' }\n];\n\nvar sorted = arr.sort(function (a, b) {\n    return a.id - b.id || \n\ta.date.split('-').reverse().join('') - b.date.split('-').reverse().join('') || \n\ta.Name.toLowerCase() > b.Name.toLowerCase();\n});\n\nvar result = \"\";\n\nsorted.forEach(function (element) {\n    result += JSON.stringify(element);\n    console.log(JSON.stringify(element));\n});\n\n// Display Sorted Result in DIV\nvar resultDiv = document.getElementById('sort_result');\nresultDiv.innerHTML = result;\n</code></pre>","tags":"javascript,array,sort","isStarred":"false","note":"","dateCreated":"Thu Mar 12 2015 19:03:44 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426167707231},"mode":"add","comments":[],"images":[],"_id":"LwXiCGf6ydaYIEfx"}
{"id":"0","category":"css","categoryId":"29","title":"7 CSS Units You Might Not Know About","refSite":"http://webdesign.tutsplus.com/articles/7-css-units-you-might-not-know-about--cms-22573","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><p>It’s easy to get stuck working with \nthe CSS techniques we know well, but doing so puts us at a disadvantage \nwhen new problems surface.</p><p>As the web continues to grow, the \ndemand for new solutions will also continue to grow. Therefore, as web \ndesigners and front end developers, we have no choice but to know our \ntoolset, and know it well.</p><p>That means knowing even the specialty \ntools - the ones that aren’t used as often, but when they are needed, \nare exactly the right tool for the job.</p><p>Today, I'm going to \nintroduce you to some CSS tools you might not have known about before. \nThese tools are each units of measurement, like pixels or ems, but it’s \nquite possible that you’ve never heard of them! Let’s dive in.</p>\n\n<h2>rem</h2>\n\n<p>We’ll start with something that’s similar to something you are probably already familiar with. The <code>em</code> unit is defined as the current <code>font-size</code>. So, for instance, if you set a font size on the body element, the <code>em</code> value of any child element within the body will be equal to that font size.</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td><div><div><code>&lt;</code><code>body</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>div</code> <code>class</code><code>=</code><code>\"test\"</code><code>&gt;Test&lt;/</code><code>div</code><code>&gt;</code></div><div><code>&lt;/</code><code>body</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td><div><div><code>body {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>font-size</code><code>: </code><code>14px</code><code>;</code></div><div><code>}</code></div><div><code>div {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>font-size</code><code>: </code><code>1.2em</code><code>; // calculated at </code><code>14px</code> <code>* </code><code>1.2</code><code>, or </code><code>16.8px</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<p>Here, we’ve said that the div will have a <code>font-size</code> of <code>1.2em</code>. That’s 1.2 times whatever the font-size it has inherited, in this case 14px. The result is <code>16.8px</code>.</p><p>However,\n what happens when you cascade em-defined font sizes inside each other? \nIn the following snippet we apply exactly the same CSS as above. Each \ndiv inherits its font-size from its parent, giving us gradually \nincreasing font-sizes.</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div></td><td><div><div><code>&lt;</code><code>body</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>div</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>Test </code><code>&lt;!-- 14 * 1.2 = 16.8px --&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>div</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>Test </code><code>&lt;!-- 16.8 * 1.2 = 20.16px --&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>div</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>Test </code><code>&lt;!-- 20.16 * 1.2 = 24.192px --&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div><div><code>&lt;/</code><code>body</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div>\n\n<iframe src=\"https://codepen.io/tutsplus/embed/xbZQRQ/\" allowfullscreen=\"true\" scrolling=\"no\" frameborder=\"no\" height=\"350\" width=\"600\">\n</iframe>\n\n<p>While this may be desired in some cases, often you might want to \nsimply rely on a single metric to scale against. In this case, you \nshould use <code>rem</code>. The “r” in <code>rem</code> stands for “root”; this is equal to the font-size set at the root element; in most cases that being the <code>html</code> element.<br></p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td><div><div><code>html {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>font-size</code><code>: </code><code>14px</code><code>;</code></div><div><code>}</code></div><div><code>div {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>font-size</code><code>: </code><code>1.2</code><code>rem;</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<p>In all three of the nested divs in the previous example, the font would evaluate to <code>16.8px</code>.</p>\n\n<h3>Good for Grids</h3><p>Rems aren’t only useful for font sizing. For example, you could base an <a sl-processed=\"1\" href=\"https://webdesign.tutsplus.com/tutorials/a-simple-mixin-alternative-to-standard-css-grids--webdesign-16958\" target=\"_self\">entire grid system</a> or UI style library on the root HTML font-size using <code>rem</code>, and utilize scaling of <code>em</code> in specific places. This would give you more predictable font sizing and scaling.</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td><div><div><code>.container {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>70</code><code>rem; // </code><code>70</code> <code>* </code><code>14px</code> <code>= </code><code>980px</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<p>Conceptually, the idea behind a strategy like this is to allow your \ninterface to scale with the size of your content. However, it may not \nnecessarily make the most sense for every case.</p><h4>Can I use it?</h4><p><a sl-processed=\"1\" href=\"http://caniuse.com/#feat=rem\" target=\"_self\">Feature: rem (root em) units</a> on <span>caniuse.com</span><br></p>\n\n<h2>vh and vw</h2>\n\n<p>Responsive web design techniques rely heavily on percentage rules. \nHowever, CSS percentage isn’t always the best solution for every \nproblem. CSS width is relative to the nearest containing parent element.\n What if you wanted to use the width or height of the viewport instead \nof the width of the parent element? That’s exactly what the <code>vh</code> and <code>vw</code> units provide.&nbsp;</p><p>The <code>vh</code>&nbsp;element is equal to 1/100 of the height of the viewport. For example, if the browser’s height is&nbsp;<code>900px</code>, <code>1vh</code> would evaluate to 9px. Similarly, if the viewport width is <code>750px</code>, <code>1vw</code> would evaluate to <code>7.5px</code>.</p>\n\n<p>There are seemingly endless uses for these rules. For example, a very\n simple way of doing full-height or near full-height slides can be \nachieved with a single line of CSS:</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td><div><div><code>.slide {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>100</code><code>vh;</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<p>Imagine you wanted a headline that was set to fill the <em>width</em> of the screen. To accomplish this, you would set a font-size in <code>vw</code>. That size will scale with the browser’s width.</p>\n<iframe src=\"https://codepen.io/tutsplus/embed/gbPQga/\" allowfullscreen=\"true\" scrolling=\"no\" frameborder=\"no\" height=\"350\" width=\"600\">\n</iframe>\n<h4>Can I use it?</h4><p><a sl-processed=\"1\" href=\"http://caniuse.com/#feat=viewport-units\" target=\"_self\">Feature: Viewport units: vw, vh</a>&nbsp;on <span>caniuse.com</span></p><h2>vmin and vmax</h2>\n\n<p>While <code>vh</code> and <code>vm</code> are always related to the viewport height and width, respectively, <code>vmin</code>&nbsp;and <code>vmax</code> are related to the <em>maximum</em> or <em>minimum</em>\n of those widths and heights, depending on which is smaller and larger. \nFor example, if the browser was set to 1100px wide and the 700px tall, <code>1vmin</code> would be 7px and <code>1vmax</code> would be 11px. However, if the width was set to 800px and the height set to 1080px, <code>vmin</code> would be equal to 8px while <code>vmax</code> would be set to <code>10.8px</code>.</p>\n\n<p>So, when might you use these values?</p>\n\n<p>Imagine you need an element that is always visible on screen. Using a height and width set to a&nbsp;<code>vmin</code>\n value below 100 would enable this. For example, a square element that \nalways touches at least two sides of the screen might be defined like \nthis:</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td><div><div><code>.box {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>100</code><code>vmin;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>100</code><code>vmin;</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><figure><img alt=\"\" src=\"https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmin.png\" data-src=\"../database/uploads/images/article_images/vmin_1_4_2015.png\"></figure><p>If you needed a square box that always&nbsp;<em>covers</em> the visible viewport (touching all four sides of the screen at all times), use the same rules except with <code>vmax</code>.</p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td><div><div><code>.box {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>100</code><code>vmax;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>100</code><code>vmax;</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><figure><img alt=\"\" src=\"https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmax.png\" data-src=\"../database/uploads/images/article_images/vmax_1_4_2015.png\"></figure><p>Combinations of these rules provide a very flexible way of utilizing the size of your viewport in new and exciting ways.</p><h4>Can I use it?</h4><p><a sl-processed=\"1\" href=\"http://caniuse.com/#feat=viewport-units\" target=\"_self\">Feature: Viewport units: vmin, vmax</a>&nbsp;on <span>caniuse.com</span></p>\n\n<h2>ex and ch</h2>\n\n<p>The units <code>ex</code> and <code>ch</code>, similar to <code>em</code> and <code>rem</code>, rely on the current font and font size. However, unlike <code>em</code> and <code>rem</code>, these units also rely on the <code>font-family</code>, as they are determined based on font-specific measures.</p>\n\n<p>The <code>ch</code> unit, or the <em>character</em> unit is defined as being the “advanced measure” of the width of the zero character, <code>0</code>. Some very interesting discussion about what this means <a sl-processed=\"1\" href=\"http://meyerweb.com/eric/thoughts/2012/05/15/defining-ch/\">can be found on Eric Meyers's blog</a>, but the basic concept is that, given a monospace font, a box with a width of&nbsp;<code>N</code> character units, such as <code>width: 40ch;</code>,\n can always contain a string with 40 characters in that particular font.\n While conventional uses of this particular rule relate to laying out \nbraille, the possibilities for creativity here certainly extend beyond \nthese simple applications.</p>\n\n<p>The <code>ex</code> unit is defined as the “x-height of the current font OR one-half of one <code>em</code>”. The<code>x-height</code> of a given font is the height of the lower-case x of that font. Often times, this is about at the middle mark of the font.&nbsp;</p><figure><img alt=\"\" src=\"https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/x2.png\" data-src=\"../database/uploads/images/article_images/x2_1_4_2015.png\"><figcaption>x-height; the height of the lower case x (read more about&nbsp;<a sl-processed=\"1\" href=\"https://webdesign.tutsplus.com/articles/the-anatomy-of-web-typography--webdesign-10533\" target=\"_self\">The Anatomy of Web Typography</a>)</figcaption></figure><p>There are <em>many</em> uses for this kind of unit, most of them being for typographic micro-adjustments. For example, the <code>sup</code> element, which stands for <em>superscript</em>,\n can be pushed up in the line using position relative and a bottom value\n of 1ex. Similarly, you can pull a subscript element down. The browser \ndefaults for these utilize superscript- and subscript-specific <code>vertical-align</code> rules, but if you wanted more granular control, you could handle the type more explicitly like this:<br></p>\n\n<div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div></td><td><div><div><code>sup {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>: </code><code>relative</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>bottom</code><code>: </code><code>1</code><code>ex;</code></div><div><code>}</code></div><div><code>sub</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>: </code><code>relative</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>bottom</code><code>: </code><code>-1</code><code>ex;</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<h4>Can I Use it?</h4><p>The <code>ex</code> unit has <a sl-processed=\"1\" href=\"http://www.w3.org/TR/REC-CSS1/#length-units\" target=\"_self\">been around since CSS1</a>, though you won’t find such solid support for the <code>ch</code> unit. For specifics on support, check out <a sl-processed=\"1\" href=\"http://www.quirksmode.org/css/units-values/\" target=\"_self\">CSS units and values</a> on Eric Meyer’s blog.</p><h2>Conclusion</h2>\n\n<p>Keeping an eye on the continued development and expansion of CSS is \nincredibly important so that you know all of the tools in your toolset. \nPerhaps you will encounter a particular problem that requires an \nunexpected solution utilizing one of these more obscure measurement \nunits. Take time to read over <a sl-processed=\"1\" href=\"http://www.w3.org/TR/css3-values/\" target=\"_self\">new specifications</a>. Sign up for news updates from great resources like <a sl-processed=\"1\" href=\"http://css-weekly.com/\">cssweekly</a>. And don’t forget, <a sl-processed=\"1\" href=\"https://tutsplus.com/account/email_preference/edit\" target=\"_self\">sign up now</a> for weekly updates, courses, free tutorials and resources like this one from Web Design on Tuts+!</p><h3>Further Reading</h3><p>More CSS unit goodness.</p><ul>\n<li><a sl-processed=\"1\" href=\"https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321\" target=\"_self\">Taking the “Erm..” Out of Ems</a></li>\n<li><a sl-processed=\"1\" href=\"https://webdesign.tutsplus.com/articles/taking-ems-even-further--webdesign-12543\" target=\"_self\">Taking Ems Even Further</a></li>\n<li><a sl-processed=\"1\" href=\"http://caniuse.com/#feat=viewport-units\" target=\"_self\">Caniuse Viewport units</a></li></ul></div>","tags":"css,CSS Units","isStarred":"false","articleImages":["https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmin.png","https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmax.png","https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/x2.png"],"note":"","dateCreated":"Wed Apr 01 2015 21:36:28 GMT+0530 (India Standard Time)","dateModified":"Wed Apr 01 2015 21:36:28 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"MtGOfAZnFYaWlbzX"}
{"id":"0","category":"javascript","categoryId":"30","title":"Understanding Regular Expression matching with .test(), .match(), .exec(), .search() and .split() ","refSite":"http://toddmotto.com/understanding-regular-expression-matching-with-test-match-exec-search-and-split/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>RegularExpressions, often noted as RegEx or RegExp, are seen and used\n pretty much everywhere in JavaScript. I use them all the time and \nyou've probably seen them out in the wild too. When you first stumble(d)\n across a RegExp, you probably thought the person had fallen asleep on \ntheir keyboard and pushed to production, they look crazy at first, but \nthey are a must have in your developer toolkit.</p>\n\n<p>Here's an example of a RegExp that's intended to blow your mind if you've never seen one, if you've seen one, you may proceed:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>/^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/</span></code></pre></div>\n\n\n<p>This is infact a RegExp for matching the HTML5 email format (what the <code>input[type=email]</code>\n looks for in it's native validation). I'm going to cover the use cases \nfor testing RegExps in a few ways, each with a specific use case. This \nwill include the most popular JavaScript APIs; <code>.test()</code>, <code>.match()</code> and <code>.exec()</code>.</p>\n\n<h3>.test()</h3>\n\n<p>Using <code>.test()</code> is probably my favourite method of testing RegExps, it's a beautiful API, the fastest and the simplest to use. The <code>.test()</code> API runs a search for a match between a RegExp and a String.</p>\n\n<p><em>Notable features/tips:</em></p>\n\n<ol>\n<li>The <code>.test()</code> API returns a boolean (true/false) - \nreturns true if your test passes (if the pattern you're matching is \npresent) and false if it doesn't</li>\n<li>Using <code>.test()</code> returns <em>no data</em>, so don't expect any</li>\n</ol>\n\n\n<div><pre><code data-lang=\"javascript\"><span>if</span> <span>(</span><span>/^localhost/</span><span>.</span><span>test</span><span>(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>host</span><span>))</span> <span>{</span>\n  <span>// returns true if working locally</span>\n<span>}</span></code></pre></div>\n\n\n<h3>.match()</h3>\n\n<p>Using <code>.match()</code> is best when you require or are expecting data back in a test result, <code>.match()</code> returns an array with the matches, or simply <code>null</code> if there are none. The matches are retrieved from a string again. With <code>.match()</code>, you won't just be testing for the <em>presence</em>\n of data, you'll want to see if a data pattern exists, and return that \ndata. An example might be matching a credit card's four-digit pattern \nand returning those digits.</p>\n\n<p><em>Notable features/tips:</em></p>\n\n<ol>\n<li>Returns an array of matches</li>\n<li>Generally doesn't describe the <em>actual</em> data you want, uses capture groups</li>\n<li>Capture groups match your data, and return the data inside the group to you</li>\n<li>Think of it as a kind of validator</li>\n<li>Can look the same as <code>.test()</code> but reversed</li>\n</ol>\n\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>creditCardNumber</span> <span>=</span> <span>document</span><span>.</span><span>querySelector</span><span>(</span><span>'input'</span><span>).</span><span>value</span><span>;</span>\n\n<span>// returns the values in the input</span>\n<span>// inside an ARRAY *if* matched</span>\n<span>creditCardNumber</span><span>.</span><span>match</span><span>(</span><span>/\\b(4[0-9]{12}(?:[0-9]{3})?)\\b/</span><span>);</span></code></pre></div>\n\n\n<p>You can access items in the array instantly by specifying the index:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// notice the array index [1]</span>\n<span>creditCardNumber</span><span>.</span><span>match</span><span>(</span><span>/\\b(4[0-9]{12}(?:[0-9]{3})?)\\b/</span><span>)[</span><span>1</span><span>];</span></code></pre></div>\n\n\n<h3>.exec()</h3>\n\n<p>Exec is similar to <code>.match()</code>, although it actually \nreturns the part of the string you were looking to match. For instance, \nif I wanted to search a string for the word 'Todd', I could get it \nreturned if it matches.</p>\n\n<p><em>Notable features/tips:</em></p>\n\n<ol>\n<li>Returns the matching pattern, almost 'removing it from a string'</li>\n</ol>\n\n\n<div><pre><code data-lang=\"javascript\"><span>// returns 'Todd'</span>\n<span>/todd/i</span><span>.</span><span>exec</span><span>(</span><span>'Hello, my name is Todd Motto'</span><span>);</span></code></pre></div>\n\n\n<p>You'll notice I added in the <code>/i</code> at the end, this means it's not case sensitive.</p>\n\n<h3>.search()</h3>\n\n<p>Very similar to the <code>.exec()</code> method, but using <code>.search()</code> will tell you the index value of where the match was found.</p>\n\n<p><em>Notable features/tips:</em></p>\n\n<ol>\n<li>Returns the matching pattern's index value, how far into the string it occurred</li>\n</ol>\n\n\n<div><pre><code data-lang=\"javascript\"><span>// returns '18'</span>\n<span>var</span> <span>str</span> <span>=</span> <span>'Hello, my name is Todd Motto'</span><span>;</span>\n<span>str</span><span>.</span><span>search</span><span>(</span><span>/todd/i</span><span>);</span></code></pre></div>\n\n\n<h3>.split()</h3>\n\n<p>Split is absolutely perfect for neat little tricks when dealing with returned data, using <code>.split()</code> will cut your string into two (or more) pieces.</p>\n\n<p><em>Notable features/tips:</em></p>\n\n<ol>\n<li>Great for splitting chunks of data</li>\n<li>Returns a new array</li>\n</ol>\n\n\n<p>Here's an example of splitting a string by it's RegExp equivalent of whitespace:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// returns [\"Hello,\", \"my\", \"name\", \"is\", \"Todd\", \"Motto\"]</span>\n<span>'Hello, my name is Todd Motto'</span><span>.</span><span>split</span><span>(</span><span>/\\s/g</span><span>);</span></code></pre></div>\n\n\n<h3>Quirks</h3>\n\n<p>It's also interesting to note, that doing the following still produce the same result and pass the <em>if</em> statement check:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// .test()</span>\n<span>if</span> <span>(</span><span>/^localhost/</span><span>.</span><span>test</span><span>(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>host</span><span>))</span> <span>{</span>\n  <span>// true, let's me through</span>\n<span>}</span>\n\n<span>// .match()</span>\n<span>if</span> <span>(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>host</span><span>.</span><span>match</span><span>(</span><span>/^localhost/</span><span>))</span> <span>{</span>\n  <span>// returns data (so, true in the if statement)</span>\n  <span>// let's me through</span>\n<span>}</span>\n\n<span>// .search()</span>\n<span>if</span> <span>(</span><span>window</span><span>.</span><span>location</span><span>.</span><span>host</span><span>.</span><span>search</span><span>(</span><span>/^localhost/</span><span>))</span> <span>{</span>\n  <span>// returns data (so, true in the if statement)</span>\n  <span>// let's me through</span>\n<span>}</span>\n\n<span>// ... probs a few other variants too</span></code></pre></div>\n\n\n<p>You'll come across a few more tricks when using RegExps and \nJavaScript APIs, but the above should get you started and clarify the \nuse cases for each of them.</p>","tags":"javascript,Regex","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 19:12:49 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 19:12:49 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"N9go3phDfVdlvdbc"}
{"id":"0","category":"javascript","categoryId":"30","title":"Methods to determine if an Object has a given property","refSite":"http://toddmotto.com/methods-to-determine-if-an-object-has-a-given-property/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>There are multiple ways to detect whether an Object has a property. You'd think it'd be as easy as <code>myObject.hasOwnProperty('prop');</code>\n - but no, there are a few different ways with their own problems and \ngotchas. Let's look at the few ways to check property existence, \nconcepts that confuse JavaScript developers, prototype chain lookups and\n problems JavaScript might provide us.</p>\n\n<h3>Double bang !! property lookup</h3>\n\n<p>We've all seen it, probably in something such as Modernizr for simple feature detection, the infamous <code>!!</code>\n amongst our JS. Important note before we begin this one, it doesn't \nactually check if an Object has a property \"as such\", it checks the <em>value</em>\n of the Object property. Which means if the property value is false, or \nthe object property doesn't even exist, they give the same <code>falsy</code> result - which can be really bad if you use it without knowing what it does and it's limitations.</p>\n\n<h4>What does it mean?</h4>\n\n<p>The double-bang is a simple way to typecast something to <code>Boolean</code>. The <code>Boolean</code> will cast <code>true</code> for <em>truthy</em> values. Even things such as <code>undefined</code> and <code>null</code> (both falsy values, <code>!!null</code> is <code>false</code> when cast to <code>Boolean</code>). The <em>absolute key</em> here is that it casts <em>values</em>. I'll say it again, <em>values</em>! This is irrelevant to the shape and size of your Object. We convert truthy and falsy values to Boolean.</p>\n\n<h4>Examples</h4>\n\n<p>An empty <code>Array</code> is an example of a <em>truthy</em> value:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>a</span> <span>=</span> <span>[];</span> <span>// []</span></code></pre></div>\n\n\n<p>What if we want to convert it to a <code>Boolean</code> though? It's truthy, so we should expect <code>true</code>:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>a</span> <span>=</span> <span>!!</span><span>[];</span> <span>// true</span></code></pre></div>\n\n\n<p><code>null</code> is an example of a <em>falsy</em> value:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>a</span> <span>=</span> <span>null</span><span>;</span> <span>// null</span></code></pre></div>\n\n\n<p>And the expected output of <code>false</code>:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>a</span> <span>=</span> <span>!!</span><span>null</span><span>;</span> <span>// false</span></code></pre></div>\n\n\n<p>This means that we can use it when looking up our Objects!</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>cool</span><span>:</span> <span>false</span>\n<span>};</span>\n<span>!!</span><span>toddObject</span><span>.</span><span>name</span> <span>// true (correct result as it's a truthy value)</span></code></pre></div>\n\n\n<p>This method also looks up the Object's <code>prototype</code> chain \nto see if the property exists, which can cause unintended side effects \nif naming of properties is the same as a prototypes.</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// Object.prototype.toString</span>\n<span>!!</span><span>toddObject</span><span>.</span><span>toString</span> <span>// true</span>\n\n<span>// !!Array.prototype.forEach</span>\n<span>!!</span><span>[][</span><span>'forEach'</span><span>]</span> <span>// true</span></code></pre></div>\n\n\n<h4>Gotchas</h4>\n\n<p>Beware of using it for detecting your own Objects. We often create Objects and defaults such as this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>favouriteDrink</span><span>:</span> <span>null</span>\n<span>};</span></code></pre></div>\n\n\n<p>If we're using the double-bang to check if an Object property exists using this method, then it's definitely a silly idea:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>favouriteDrink</span><span>:</span> <span>null</span>\n<span>};</span>\n<span>if</span> <span>(</span><span>!!</span><span>toddObject</span><span>.</span><span>favouriteDrink</span><span>)</span> <span>{</span> <span>// false</span>\n  <span>// do something if it exists, I think...</span>\n<span>}</span></code></pre></div>\n\n\n<p>That would be naive! The above code (to the new developer or non-double-banger) might say <em>\"If toddObject.favouriteDrink exists, do something\"</em>. But no, because (I'll say it again...) this casts <em>values</em>, the value is <code>null</code>\n and falsy - even though the property exists. It's generally not a good \nidea in this case to use it for checking if a property exists incase it \nhas a falsy value to begin with.</p>\n\n<h3>hasOwnProperty</h3>\n\n<p>We went as far as getting a native method for this, but it's not 100% reliable for a few reasons. Let's examine it first.</p>\n\n<h4>What does it mean?</h4>\n\n<p>Using <code>myObject.hasOwnProperty('prop')</code> is a great way of accessing the Object's keys directly, which <em>does not</em> look into the Object's <code>prototype</code> - hooray, this is great for specific use cases. <code>hasOwnProperty</code> returns a Boolean for us on whether a property exists.</p>\n\n<h4>Examples</h4>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>favouriteDrink</span><span>:</span> <span>null</span>\n<span>};</span>\n<span>if</span> <span>(</span><span>toddObject</span><span>.</span><span>hasOwnProperty</span><span>(</span><span>'favouriteDrink'</span><span>))</span> <span>{</span> <span>// true</span>\n  <span>// do something if it exists, fo sho</span>\n<span>}</span></code></pre></div>\n\n\n<p>But don't be sold on this exact implementation... read below for best practice.</p>\n\n<h4>Gotchas</h4>\n\n<p>IE messes up the <code>hasOwnProperty</code> method completely as it's painful with <code>host</code> Objects (host objects don't have the hasOwnProperty method).</p>\n\n<p>JavaScript also decided not to protect the method's name, so we can infact do this:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>hasOwnProperty</span><span>:</span> <span>'hello...'</span>\n<span>};</span></code></pre></div>\n\n\n<p>This makes it hard to fully trust it. What we can do however is access the <code>Object.prototype</code> directly to guarantee any <code>hasOwnProperty</code> calls haven't been tampered with or overridden.</p>\n\n<p>Let's bulletproof the process:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>favouriteDrink</span><span>:</span> <span>null</span>\n<span>};</span>\n<span>if</span> <span>(</span><span>Object</span><span>.</span><span>prototype</span><span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span><span>toddObject</span><span>,</span> <span>'favouriteDrink'</span><span>))</span> <span>{</span> <span>// true</span>\n  <span>// do something if it exists, fo sho sho!</span>\n<span>}</span></code></pre></div>\n\n\n<p>The secret sauce here is <code>.call()</code> to change the context of <code>hasOwnProperty</code> (take that, IE) and ensure we've the exact <code>hasOwnProperty</code> we want from the <code>Object.prototype</code>.</p>\n\n<p>Obviously you'd want to wrap it inside a helper function or something to save writing out that <code>prototype</code> each time:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>function</span> <span>hasProp</span> <span>(</span><span>obj</span><span>,</span> <span>prop</span><span>)</span> <span>{</span>\n  <span>return</span> <span>Object</span><span>.</span><span>prototype</span><span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span><span>obj</span><span>,</span> <span>prop</span><span>);</span>\n<span>}</span>\n<span>if</span> <span>(</span><span>hasProp</span><span>(</span><span>toddObject</span><span>,</span> <span>'favouriteDrink'</span><span>))</span> <span>{}</span></code></pre></div>\n\n\n<h3>'prop' in myObject</h3>\n\n<p>The <code>in</code> operator isn't so widely used as the former methods, but is probably worth using after reading this. It also returns a <code>Boolean</code> much like <code>!!myObject</code>, but <em>does not</em> evaluate the <em>value</em>, it evaluates the <em>existence</em> of the property!. This means if a property has a value of <code>false</code>, we get a correct reading that the property does infact exist.</p>\n\n<div><pre><code data-lang=\"javascript\"><span>var</span> <span>toddObject</span> <span>=</span> <span>{</span>\n  <span>name</span><span>:</span> <span>'Todd'</span><span>,</span>\n  <span>favouriteDrink</span><span>:</span> <span>null</span><span>,</span>\n  <span>cool</span><span>:</span> <span>false</span>\n<span>};</span>\n<span>'cool'</span> <span>in</span> <span>toddObject</span><span>;</span> <span>// true</span></code></pre></div>\n\n\n<p>The <code>in</code> operator is probably your best friend for checking the existence of a property, it's also pretty concise.</p>\n\n<h4>Gotchas</h4>\n\n<p>The <code>in</code> operator also looks up the <code>prototype</code>, which <em>may</em> cause unintended side effects:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// inherits Object.prototype.toString</span>\n<span>'toString'</span> <span>in</span> <span>toddObject</span><span>;</span> <span>// true</span></code></pre></div>\n\n\n<p>But we should know these property names and not create conflicts, right ;)</p>\n\n<h3>typeof</h3>\n\n<p>We can use <code>typeof</code> as well.</p>\n\n<h4>What does it mean?</h4>\n\n<p>The standard <code>typeof</code> operator returns a <code>String</code> (<a href=\"http://toddmotto.com/understanding-javascript-types-and-reliable-type-checking\">not a very reliable one</a>), and we can evaluate it against something, such as <code>!== 'undefined'</code> - which indicates it exists.</p>\n\n<div><pre><code data-lang=\"javascript\"><span>if</span> <span>(</span><span>typeof</span> <span>toddObject</span><span>.</span><span>name</span> <span>!==</span> <span>'undefined'</span><span>)</span> <span>{</span>\n  <span>// do something</span>\n<span>}</span></code></pre></div>\n\n\n<p>It looks a little ugly, as well as being quite long to write out if we were to make multiple checks using this method. Also, <code>null</code> would fall under this check unless using <code>!= 'undefined'</code> (single <code>=</code>) as <code>null == undefined</code> anyway.</p>\n\n<h4>Gotchas</h4>\n\n<p>Only use it <a href=\"http://toddmotto.com/understanding-javascript-types-and-reliable-type-checking\">if you know what you're doing</a> as it's very unreliable for standard type checking.</p>\n\n<h3>Feature detection</h3>\n\n<p>I can't recall exactly what was said, but someone (I think) once told\n me that some  vendor once implemented a feature with a falsy value if \nit didn't exist (though I'm not even certain that's true, worth a \nmention though)... and as such the <code>in</code> operator is best for these such cases:</p>\n\n<div><pre><code data-lang=\"javascript\"><span>// just an example, not the one somebody mentioned...</span>\n<span>if</span> <span>(</span><span>'draggable'</span> <span>in</span> <span>document</span><span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>))</span> <span>{</span>\n  <span>// do something if prop exists</span>\n<span>}</span></code></pre></div>","tags":"javascript,Objects","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 18:06:01 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 18:06:01 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"NJeqI5pSAZhSia3p"}
{"id":"0","category":"node.js","categoryId":"31","title":"The strange world of Node.js design patterns","codes":[{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<div class=\"lead\">Beside the classical design patterns we all have studied and used with other languages and platforms, Node.js developers recurrently seem to implement some very specific patterns/techniques in their code, as a consequence of the language (Javascript) and the platform itself.</div>\n\n<div class=\"article-content\"><h2 id=\"a-world-apart\">A world apart</h2>\n<p>Of course, the design patterns from the <a href=\"http://en.wikipedia.org/wiki/Design_Patterns\">Gang of Four</a> are still the reference for writing <strong>sound architectures</strong>, but we all know that in Javascript it seems all the rules we learnt with other languages are broken. Design patterns make no exception, be prepared to rethink them in Javascript, or forge new ones. Traditional design patterns in Javascript may be implemented in different variations, while <strong>simple <em>coding tricks</em> might be considered <em>patterns</em> </strong> because broadly used, understood and effective. Also don't be surprised if some commonly recognized <a href=\"http://en.wikipedia.org/wiki/Anti-pattern\">anti-patterns</a> are actually widely used in Javascript/Node.js (for example, proper <a href=\"http://en.wikipedia.org/wiki/Information_hiding\">encapsulation</a> is most of the time overlooked, because of the complexity in obtaining it, leading often to an <a href=\"http://en.wikipedia.org/wiki/Object_orgy\">Object orgy</a>).</p>\n<h2 id=\"the-list\">The list</h2>\n<p>The one that follows is a <strong>short list of common design patterns used in Node.js applications</strong>, it does not want to show you again how a <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</a> or an <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">Observer</a> pattern are implemented in Javascript, but instead wants to go through some <strong>distinctive practices</strong> used in Node.js that can be <strong>generalized as design patterns</strong>.</p>\n<p>This list is just a result of what I have learnt by writing Node.js apps and by looking at other people's code, so it does not want to be complete nor exact. Any suggestion is greatly welcome.</p>\n<p>And I'm pretty sure you may have already seen or used some of these patterns without even knowing it...</p>\n<h3 id=\"directory-require-pseudo-plugins-\">Directory require (pseudo plugins)</h3>\n<p>This is definitely one of the most popular patterns. It consists in simply <strong>requiring all the modules from a directory</strong>, that's it. Although its simplicity it's one of the most popular (and handy) techniques. Npm is plenty of modules implementing this pattern: <a href=\"https://npmjs.org/package/require-all\">require-all</a>, <a href=\"https://npmjs.org/package/require-many\">require-many</a>, <a href=\"https://npmjs.org/package/require-tree\">require-tree</a>, <a href=\"https://npmjs.org/package/require-namespace\">require-namespace</a>, <a href=\"https://npmjs.org/package/require-dir\">require-dir</a>, <a href=\"https://npmjs.org/package/require-directory\">require-directory</a>, <a href=\"https://npmjs.org/package/require-fu\">require-fu</a> just to name a few.</p>\n<p>Depending on the way it is used, requiring a directory can be considered <strong>a simple utility function or a sort of plugin system</strong> where the dependencies are not hardcoded into the requiring module, but are injected from the directory contents.</p>\n<p><strong>Example: simple usage</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> requireDir = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'require-all'</span>);\n<span class=\"hljs-keyword\">var</span> routes = requireDir(<span class=\"hljs-string\">'./routes'</span>);\n\napp.get(<span class=\"hljs-string\">'/'</span>, routes.home);\napp.get(<span class=\"hljs-string\">'/register'</span>, routes.auth.register);\napp.get(<span class=\"hljs-string\">'/login'</span>, routes.auth.login);\napp.get(<span class=\"hljs-string\">'/logout'</span>, routes.auth.logout);\n</code></pre>\n<p><strong>Example: advanced usage (improve decoupling, extensibility)</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> requireFu = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'require-fu'</span>);\n\nrequireFu(__dirname + <span class=\"hljs-string\">'/routes'</span>)(app);\n</code></pre>\n<p>Where each module in <code>/routes</code>, is a function which  defines its own url route: </p>\n<pre><code class=\"lang-javascript\">module.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(app)</span> {</span>\n  app.get(<span class=\"hljs-string\">\"/about\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(req, res)</span> {</span>\n    <span class=\"hljs-comment\">// do things</span>\n  });\n}\n</code></pre>\n<p>In this second example, you can add a new route by simply creating a new file, with no need to modify the requiring module. This is definitely more powerful, and offers <strong>better decoupling</strong> between the requiring and the required modules.</p>\n<h3 id=\"the-app-object-home-brewed-dependency-injection-\">The App object (home brewed dependency injection)</h3>\n<p>This pattern is also very common in other platforms/languages, but the dynamic nature of Javascript makes this very effective (therefore popular) in Node.js. It consist of creating a <strong>single object that represent the backbone of an app</strong>. Usually this object is instantiated in the application  entry point, and is used as glue for the different application services. I would say this is very similar to a <a href=\"http://en.wikipedia.org/wiki/Facade_pattern\">Facade</a>, but in Node.js it is also widely used <strong>to implement a very rudimentary dependency injection container</strong>.</p>\n<p>A typical example of this pattern is when an application has an object called <code>App</code> (or with the same name of the application) where all the services are initialized and then attached to this big object.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> MyApp();\n\napp.db = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./db'</span>);\napp.log = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./logger'</span>)();\napp.express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)();\napp.i18n = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./i18n'</span>).initialize();\n\napp.models = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./models'</span>)(app);\n\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./routes'</span>)(app);\n</code></pre>\n<p>The <code>App object</code> can be then passed around to be used by other modules, in the form of function argument or <code>require</code>d.</p>\n<p>When most of the dependencies of an application are attached to this backbone object, <strong>modules using it will actually have those dependencies injected from the <em>outside</em> </strong>.</p>\n<p>Now, be aware that if you use the <em>App object</em> pattern without providing some kind of abstraction over the loaded dependencies, you can easily end up in having an <em>all-knowing</em> object, hard to maintain, and that actually corresponds to the <a href=\"http://en.wikipedia.org/wiki/God_object\">God object</a> anti-pattern. </p>\n<p>But fortunately there are some libraries that can help you with that, as for example <a href=\"https://github.com/flatiron/broadway\">Broadway</a>, an architectural framework which implements a quite neat version of this pattern, offering a good abstraction and more control over service lifecycle.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> broadway.App();\napp.use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./plugins/helloworld\"</span>));\napp.init(...);\napp.hello(<span class=\"hljs-string\">\"world\"</span>);\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// ./plugins/helloworld</span>\n\nexports.attach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(options)</span> {</span>\n  <span class=\"hljs-comment\">// \"this\" is our App object!</span>\n  <span class=\"hljs-keyword\">this</span>.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(world)</span> {</span>\n    console.log(<span class=\"hljs-string\">\"Hello \"</span>+ world + <span class=\"hljs-string\">\".\"</span>);\n  };\n};\n</code></pre>\n<h3 id=\"function-hooks-monkey-patching-meets-aop-\">Function hooks (monkey patching meets AOP)</h3>\n<p><em>Function hooks</em> is another design pattern typical of a dynamic language as Javascript, and as you may guess also very popular in Node.js. It consists in <strong>augmenting the behaviour of a function (or method) by intercepting its execution</strong>. Often by applying this technique the developer can intercept the call before its execution (<code>pre</code> hook) or after (<code>post</code> hook). The peculiarity is that in Node.js it's often used in combination with <a href=\"http://en.wikipedia.org/wiki/Monkey_patch\">monkey-patching</a> and that's what makes it very powerful but also dangerous.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> hooks = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'hooks'</span>), \n    Document = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./path/to/some/document/constructor'</span>);\n\n<span class=\"hljs-comment\">// Add hooks' methods: `hook`, `pre`, and `post`</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> hooks) {\n  Document[k] = hooks[k];\n}\n\nDocument.prototype.save = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> {</span>\n  <span class=\"hljs-comment\">// ...</span>\n};\n\n<span class=\"hljs-comment\">// Define a middleware function to be invoked after 'save'</span>\nDocument.post(<span class=\"hljs-string\">'save'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createJob</span> <span class=\"hljs-params\">(next)</span> {</span>\n  <span class=\"hljs-keyword\">this</span>.sendToBackgroundQueue();\n  next();\n});\n</code></pre>\n<p>If you ever used <a href=\"https://github.com/learnboost/mongoose\">Mongoose</a> then you must have seen this pattern in action for sure, otherwise npm offers you a <a href=\"https://npmjs.org/search?q=hooks\">plethora of modules</a> to choose from. But it doesn't stop here,  <strong>in the Node.js community Aspect Oriented Programming (AOP) is often synonym of <em>function hooks</em> </strong>, take a look again at <a href=\"https://npmjs.org/search?q=aop\">npm</a> to see what I mean. Can we really call this AOP? My answers is NO. AOP requires <em>cross-cutting concerns</em> applied to a <a href=\"http://en.wikipedia.org/wiki/Pointcut\">pointcut</a>, not some specific behavior manually attached to a single (or even a set) of functions. On the other hand <strong>an hypothetical Node.js AOP solution may easily exploit hooks</strong> to apply advice to a set of functions, based for example on a pointcut defined with a regular expression and by scanning all the modules/methods in search for a match. </p>\n<h3 id=\"pipelines-a-k-a-middleware-\">Pipelines (a.k.a. middleware)</h3>\n<p>This is the essence of Node.js, <em>Pipelines</em> are everywhere, under various forms, uses and purposes. Generically, a <em>Pipeline</em> is a series of processing units connected together, where <strong>the output of one unit is the input for the next one</strong>. In Node.js, this often means a <strong>series of functions</strong> in the form:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(<span class=\"hljs-comment\">/* input/output */</span>, next)</span> {</span>\n    next(<span class=\"hljs-comment\">/* err and/or output */</span>)\n}\n</code></pre>\n<p>You might know it as <strong>middleware</strong> and when you think middleware you say <a href=\"http://www.senchalabs.org/connect/\">Connect</a> or <a href=\"http://expressjs.com\">Express</a>, but the usage of this pattern goes well beyond that. <a href=\"https://github.com/bnoguchi/hooks-js/\">Hooks</a> for example, a popular <em>hooks</em> implementation (we talked about it previously) connects all the pre/post functions in a pipeline (middleware) to \"give you maximum flexibility\". </p>\n<p>Most of the time you will implement this pattern in some way  by using <a href=\"https://github.com/caolan/async#waterfall\">async.waterfall</a> or <a href=\"https://github.com/caolan/async#auto\">async.auto</a>, or using a <a href=\"https://github.com/kriskowal/q#sequences\">chain of promises</a> and maybe <strong>not just as flow control</strong>, but to make some part of you application extensible.</p>\n<p><strong>Example: Async</strong></p>\n<pre><code class=\"lang-javascript\">async.waterfall([\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(callback)</span>{</span>\n        callback(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'one'</span>, <span class=\"hljs-string\">'two'</span>);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg1, arg2, callback)</span>{</span>\n        callback(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'three'</span>);\n    }\n]};\n</code></pre>\n<p>Another Node.js popular component has the traits of a <em>Pipeline</em>. Of course I'm talking about the hero called <strong><a href=\"http://nodejs.org/api/stream.html\">streams</a></strong>, and what is a stream if it cannot be <a href=\"http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\">piped</a>? While <em>middleware</em> and in general function chains are a generic solution to control flow and extensibility, <strong> <em>streams</em> are better suited to process flowing data</strong> in the form of bytes or objects.</p>\n<p><strong>Example: streams</strong></p>\n<pre><code class=\"lang-javascript\">fs.createReadStream(<span class=\"hljs-string\">\"data.gz\"</span>)\n    .pipe(zlib.createGunzip())\n    .pipe(through(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(data)</span> {</span>\n        <span class=\"hljs-comment\">//... make the data awesome ...</span>\n        <span class=\"hljs-keyword\">this</span>.queue(data);\n    })\n    <span class=\"hljs-comment\">// Write to File</span>\n    .pipe(fs.createWriteStream(<span class=\"hljs-string\">\"out.txt\"</span>));\n</code></pre>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>We have seen how the nature of Node.js pushes the developers towards the use of some recurring patterns and techniques and we went through some of them, showing how they can <strong>effectively solve common problems, if used properly</strong>. We have seen also how different a pattern can look depending on the way it is implemented. Feel free to leave a feedback and to let me know of any other pattern I missed in this list.</p>\n</div>","tags":"node.js,javascript,Design Patterns","isStarred":"true","note":"","dateCreated":"Thu Jan 29 2015 20:18:46 GMT+0530 (India Standard Time)","dateModified":"Thu Jan 29 2015 20:18:46 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"Nb3aLf7oGDzBvfZM"}
{"id":"0","category":"css","categoryId":"29","title":"Creating a Collection of CSS3 Animated Pre-loaders","refSite":"http://webdesign.tutsplus.com/tutorials/creating-a-collection-of-css3-animated-pre-loaders--cms-21978","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><p>Pre-loaders are a common sight in \nmodern web design. As users we expect the web to be fast and fluid - we \ndon’t like waiting for things. Pre-loaders offer visual feedback in the \nevent of content being loaded, thereby managing expectations and \nreducing the chance of a user abandoning your website.</p><h2>CSS3 Essentials for Creating Pre-loaders<br>\n</h2><p>Before we dive into building our collection of CSS3 pre-loaders,\n first I’ll be discussing some of the attributes of CSS3 which are \nessential for creating these type of pre-loaders.<br></p><h3>Pseudo Elements <code>:before</code> <code>:after</code><br>\n</h3><p>Pseudo elements are <i>really</i> useful in helping creating \nCSS3 pre-loaders. Pseudo elements essentially create a fake element \nbefore or after the HTML element in question.<br></p><blockquote>“Pseudo is derived from the Greek word&nbsp;<i>pseudēs which means false.”&nbsp;</i>\n</blockquote><p>This is similar to creating an extra element that \ndoesn't really exist however pseudo elements can be styled using CSS. \nThese pseudo elements aren't a necessity for creating CSS3 pre-loaders \nbut they do come in handy and allow us to use minimal markup.&nbsp;</p><p>Pseudo\n elements can be styled exactly the same way as you would any other HTML\n element the only difference being that you must specify a <code>content</code>\n property. Without specifying this the pseudo element will not render. \nThe content property can contain any text which may be useful if your \npre-loader needs to contain words such as “Loading...” however if you \ndon’t need any text content then you can just leave the content property\n blank.</p><h3>CSS3 Animation<br>\n</h3><p>CSS pseudo elements are useful but not <i>essential</i> for \ncreating CSS3 pre-loaders, but the animation property is. Without this \nthe pre-loader would fail to animate and would just be a static visual -\n not very useful to indicate that the content is loading.<br></p><blockquote>“The\n main component of CSS animations is @keyframes, the CSS rule where \nanimation is created. Think of @keyframes as being stages along a \ntimeline. Inside@keyframes, you can define these stages, each having a \ndifferent style declaration.” -&nbsp;<a sl-processed=\"1\" href=\"http://webdesign.tutsplus.com/tutorials/a-beginners-introduction-to-css-animation--cms-21068\" target=\"_self\">A beginners introduction to CSS animation</a>\n</blockquote><p><b>Note</b>: before we jump into the demo's it might be \nworth noting that vendor prefixes are not included in the code snippets \nbelow. If you need the vendor prefixes then please see the codepen \nexamples.</p><h2>\n<span>1.</span>&nbsp;Audio Wave</h2><p>The idea behind this pre-loader is to create an animation similar to an audio wave.&nbsp;<br></p>\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/codepen_uhgly/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n<h3>HTML</h3><p>This is achieved by creating five spans, each one representing an audio bar.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td><div><div><code>&lt;</code><code>div</code> <code>id</code><code>=</code><code>\"preloader_1\"</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div><h3>CSS</h3><p>The\n effect is achieved by animating the height of each span from 5px to \n30px. The span also moves down on the Y axis by 15px to give the effect \nthat it is growing from the centre.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div></td><td><div><div><code>#preloader_</code><code>1</code><code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>relative</code><code>;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>1</code> <code>span{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>display</code><code>:</code><code>block</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>bottom</code><code>:</code><code>0px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>9px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>5px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>1</code> <code>1.5</code><code>s&nbsp; infinite ease-in-out;</code></div><div><code>}</code></div><div>&nbsp;</div><div><code>#preloader_</code><code>1</code> <code>span:nth-child(</code><code>2</code><code>){</code></div><div><code>left</code><code>:</code><code>11px</code><code>;</code></div><div><code>animation-delay: .</code><code>2</code><code>s;</code></div><div>&nbsp;</div><div><code>}</code></div><div><code>#preloader_</code><code>1</code> <code>span:nth-child(</code><code>3</code><code>){</code></div><div><code>left</code><code>:</code><code>22px</code><code>;</code></div><div><code>animation-delay: .</code><code>4</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>1</code> <code>span:nth-child(</code><code>4</code><code>){</code></div><div><code>left</code><code>:</code><code>33px</code><code>;</code></div><div><code>animation-delay: .</code><code>6</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>1</code> <code>span:nth-child(</code><code>5</code><code>){</code></div><div><code>left</code><code>:</code><code>44px</code><code>;</code></div><div><code>animation-delay: .</code><code>8</code><code>s;</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>1</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{</code><code>height</code><code>:</code><code>5px</code><code>;transform:translateY(</code><code>0px</code><code>);</code><code>background</code><code>:</code><code>#9b59b6</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>25%</code> <code>{</code><code>height</code><code>:</code><code>30px</code><code>;transform:translateY(</code><code>15px</code><code>);</code><code>background</code><code>:</code><code>#3498db</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{</code><code>height</code><code>:</code><code>5px</code><code>;transform:translateY(</code><code>0px</code><code>);</code><code>background</code><code>:</code><code>#9b59b6</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{</code><code>height</code><code>:</code><code>5px</code><code>;transform:translateY(</code><code>0px</code><code>);</code><code>background</code><code>:</code><code>#9b59b6</code><code>;}</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><p>By default the animation on each span happens at the same time. The <i>Mexican wave </i>effect is created by adding&nbsp;<code>animation-delay</code> &nbsp;to each span with an offset of 2 milliseconds. Each span is targeted using the&nbsp;<code>nth-child()</code> selector.&nbsp;</p><h2>\n<span>2.</span> Circular Square</h2><p>This pre-loader uses four squares which shift, rotate, change color and become circles.</p>\n\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/preloader/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n\n<h3>HTML</h3><p>It's created by using four spans. Each one is a circle/square and has its own animation applied to it.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td><div><div><code>&lt;</code><code>div</code> <code>id</code><code>=</code><code>\"preloader_2\"</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div><h3>CSS</h3><p>All four of them transform from a square into a circle by adjusting the border-radius &nbsp;from 0px (square) to 20px (circle).&nbsp;<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div><div>37</div><div>38</div><div>39</div><div>40</div><div>41</div><div>42</div><div>43</div><div>44</div><div>45</div><div>46</div><div>47</div><div>48</div><div>49</div><div>50</div><div>51</div><div>52</div><div>53</div><div>54</div><div>55</div><div>56</div><div>57</div><div>58</div></td><td><div><div><code>#preloader_</code><code>2</code><code>{</code></div><div><code>position</code><code>: </code><code>relative</code><code>;</code></div><div><code>left</code><code>: </code><code>50%</code><code>;</code></div><div><code>width</code><code>: </code><code>40px</code><code>;</code></div><div><code>height</code><code>: </code><code>40px</code><code>;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>2</code> <code>span{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>display</code><code>:</code><code>block</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>bottom</code><code>:</code><code>0px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>2</code> <code>span:nth-child(</code><code>1</code><code>){</code></div><div><code>animation: preloader_</code><code>2</code><code>_</code><code>1</code> <code>1.5</code><code>s infinite ease-in-out;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>2</code> <code>span:nth-child(</code><code>2</code><code>){</code></div><div><code>left</code><code>:</code><code>20px</code><code>;</code></div><div><code>animation: preloader_</code><code>2</code><code>_</code><code>2</code> <code>1.5</code><code>s infinite ease-in-out;</code></div><div>&nbsp;</div><div><code>}</code></div><div><code>#preloader_</code><code>2</code> <code>span:nth-child(</code><code>3</code><code>){</code></div><div><code>top</code><code>:</code><code>0px</code><code>;</code></div><div><code>animation: preloader_</code><code>2</code><code>_</code><code>3</code> <code>1.5</code><code>s infinite ease-in-out;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>2</code> <code>span:nth-child(</code><code>4</code><code>){</code></div><div><code>top</code><code>:</code><code>0px</code><code>;</code></div><div><code>left</code><code>:</code><code>20px</code><code>;</code></div><div><code>animation: preloader_</code><code>2</code><code>_</code><code>4</code> <code>1.5</code><code>s infinite ease-in-out;</code></div><div><code>}</code></div><div>&nbsp;</div><div><code>@-keyframes preloader_</code><code>2</code><code>_</code><code>1</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>)&nbsp; rotate(</code><code>0</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{-transform: translateX(</code><code>-20px</code><code>) translateY(</code><code>-10px</code><code>) rotate(</code><code>-180</code><code>deg); border-radius:</code><code>20px</code><code>;</code><code>background</code><code>:</code><code>#3498db</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>80%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>-360</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>-360</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>}</code></div><div><code>@-keyframes preloader_</code><code>2</code><code>_</code><code>2</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>)&nbsp; rotate(</code><code>0</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{-transform: translateX(</code><code>20px</code><code>) translateY(</code><code>-10px</code><code>) rotate(</code><code>180</code><code>deg);border-radius:</code><code>20px</code><code>;</code><code>background</code><code>:</code><code>#f1c40f</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>80%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>360</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>360</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>}</code></div><div><code>@-keyframes preloader_</code><code>2</code><code>_</code><code>3</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>)&nbsp; rotate(</code><code>0</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{-transform: translateX(</code><code>-20px</code><code>) translateY(</code><code>10px</code><code>) rotate(</code><code>-180</code><code>deg); border-radius:</code><code>20px</code><code>;</code><code>background</code><code>:</code><code>#2ecc71</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>80%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>-360</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>-360</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>}</code></div><div>&nbsp;</div><div>&nbsp;</div><div><code>@-keyframes preloader_</code><code>2</code><code>_</code><code>4</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>)&nbsp; rotate(</code><code>0</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{-transform: translateX(</code><code>20px</code><code>) translateY(</code><code>10px</code><code>) rotate(</code><code>180</code><code>deg); border-radius:</code><code>20px</code><code>;</code><code>background</code><code>:</code><code>#e74c3c</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>80%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>360</code><code>deg); border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{-transform: translateX(</code><code>0px</code><code>) translateY(</code><code>0px</code><code>) rotate(</code><code>360</code><code>deg);border-radius:</code><code>0px</code><code>;}</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><p>Each\n one also rotates and moves along the X &amp; Y axis in opposite \ndirection to its current position. The color of each span is also \nanimated from a uniform purple to its own independent color. This gives \nthe impression of the shapes merging from several circles into one \nsquare.</p><h2>\n<span>3.</span> Crossing Shapes</h2><p>The Crossing Shapes pre-loader is a single div that&nbsp;utilises the&nbsp;<code>:before&nbsp;</code>&nbsp;and&nbsp;<code>:after</code>&nbsp;&nbsp;pseudo elements that we talked about previously.&nbsp;<br></p>\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/codepen_CKxdB/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n\n<h3>HTML</h3><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div></td><td><div><div><code>&lt;</code><code>div</code> <code>id</code><code>=</code><code>\"preloader_3\"</code><code>&gt;&lt;/</code><code>div</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div><h3>CSS</h3><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div></td><td><div><div><code>#preloader_</code><code>3</code><code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>relative</code><code>;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>3:</code><code>before{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-radius:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>blue</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>content</code><code>:</code><code>''</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>3</code><code>_before </code><code>1.5</code><code>s infinite ease-in-out;</code></div><div><code>}</code></div><div>&nbsp;</div><div><code>#preloader_</code><code>3:</code><code>after{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-radius:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>blue</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>content</code><code>:</code><code>''</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#2ecc71</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>22px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>3</code><code>_after </code><code>1.5</code><code>s infinite ease-in-out;</code></div><div><code>}</code></div><div>&nbsp;</div><div><code>@keyframes preloader_</code><code>3</code><code>_before {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{transform: translateX(</code><code>0px</code><code>) rotate(</code><code>0</code><code>deg)}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{transform: translateX(</code><code>50px</code><code>) scale(</code><code>1.2</code><code>) rotate(</code><code>260</code><code>deg); </code><code>background</code><code>:</code><code>#2ecc71</code><code>;border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{transform: translateX(</code><code>0px</code><code>) rotate(</code><code>0</code><code>deg)}</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>3</code><code>_after {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{transform: translateX(</code><code>0px</code><code>)}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{transform: translateX(</code><code>-50px</code><code>) scale(</code><code>1.2</code><code>) rotate(</code><code>-260</code><code>deg);</code><code>background</code><code>:</code><code>#9b59b6</code><code>;border-radius:</code><code>0px</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{transform: translateX(</code><code>0px</code><code>)}</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><p>One animation is placed on <code>#preloader_3:before</code> and another on <code>#preloader_3:after</code>.\n Each animation changes into a different color at the opposite time. \nSimilarly to the previous pre-loader each pseudo element changes from a \ncircle to a square by animating the <code>border-radius</code> property.</p><h2>\n<span>4.</span> The Snake</h2><p>The snake is made up of a collection of spans each one being styled to form a circle.&nbsp;<br></p>\n\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/codepen_fsgkC/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n\n<h3>HTML</h3><p>Here's the markup, but you could always \ntry creating the snake pre-loader with three circles and rather than \nhaving several spans just use&nbsp;<code>#preloader_4</code>&nbsp;&nbsp;div with&nbsp;<code>:before</code>&nbsp;and&nbsp;<code>:after</code>.&nbsp;<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td><div><div><code>&lt;div id=\"preloader_4\"&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;span&gt;&lt;/span&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;span&gt;&lt;/span&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;span&gt;&lt;/span&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;span&gt;&lt;/span&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;span&gt;&lt;/span&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div><h3>CSS</h3><p>The\n animation is created by transforming the Y position of each animation \nby -10px and changing color from blue to yellow. To create the \nunderlying shadow effect a drop shadow is added to each span which \nchanges its vertical shadow size from 0px to 20px.&nbsp;<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div></td><td><div><div><code>#preloader_</code><code>4</code><code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>relative</code><code>;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>4</code> <code>span{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#3498db</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>opacity:</code><code>0.5</code><code>;</code></div><div><code>border-radius:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>-animation: preloader_</code><code>4</code> <code>1</code><code>s infinite ease-in-out;</code></div><div>&nbsp;</div><div><code>}</code></div><div><code>#preloader_</code><code>4</code> <code>span:nth-child(</code><code>2</code><code>){</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>2</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>4</code> <code>span:nth-child(</code><code>3</code><code>){</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>40px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>4</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>4</code> <code>span:nth-child(</code><code>4</code><code>){</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>60px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>6</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader_</code><code>4</code> <code>span:nth-child(</code><code>5</code><code>){</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>80px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>8</code><code>s;</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>4</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{opacity: </code><code>0.3</code><code>; transform:translateY(</code><code>0px</code><code>);&nbsp;&nbsp;&nbsp; box-shadow: </code><code>0px</code> <code>0px</code> <code>3px</code> <code>rgba(</code><code>0</code><code>, </code><code>0</code><code>, </code><code>0</code><code>, </code><code>0.1</code><code>);}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{opacity: </code><code>1</code><code>; transform: translateY(</code><code>-10px</code><code>); </code><code>background</code><code>:</code><code>#f1c40f</code><code>;&nbsp; box-shadow: </code><code>0px</code> <code>20px</code> <code>3px</code> <code>rgba(</code><code>0</code><code>, </code><code>0</code><code>, </code><code>0</code><code>, </code><code>0.05</code><code>);}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code>&nbsp; <code>{opacity: </code><code>0.3</code><code>; transform:translateY(</code><code>0px</code><code>); box-shadow: </code><code>0px</code> <code>0px</code> <code>3px</code> <code>rgba(</code><code>0</code><code>, </code><code>0</code><code>, </code><code>0</code><code>, </code><code>0.1</code><code>);}</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><p>Similarly to pre-loader 1, by adding&nbsp;<code>animation-delay</code> to each span and offsetting each span's delay by 2 milliseconds it creates the wave effect.</p><h2>\n<span>5.</span> Spinning Disc</h2><p>This is.. a spinny thing.</p>\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/codepen_piGbc/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n\n\n\n<h3>HTML</h3><p>Here we simply use a single div for the central circle and &nbsp;<code>:after</code>&nbsp;on that div to create the outer lines.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div></td><td><div><div><code>&lt;</code><code>div</code> <code>id</code><code>=</code><code>\"preloader5\"</code><code>&gt;&lt;/</code><code>div</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div><h3>CSS</h3><p>Adding a border to the top and bottom and giving it a&nbsp;<code>border-radius</code>&nbsp;of\n 50px creates the two outer lines. An animation is added to the main \ndiv, just to change the main div's color and create the rotation effect \nby adding&nbsp;<code>transform: rotate()</code>&nbsp;. The&nbsp;<code>:after</code>&nbsp;element animation is added to change the color of the outer border.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div></td><td><div><div><code>#preloader</code><code>5</code><code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>relative</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>30px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>30px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>#3498db</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-radius:</code><code>50px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>5</code> <code>1.5</code><code>s infinite linear;</code></div><div><code>}</code></div><div><code>#preloader</code><code>5:</code><code>after{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>50px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>50px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-top</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-bottom</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-left</code><code>:</code><code>10px</code> <code>solid</code> <code>transparent</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-right</code><code>:</code><code>10px</code> <code>solid</code> <code>transparent</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>border-radius:</code><code>50px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>content</code><code>:</code><code>''</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>top</code><code>:</code><code>-20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>left</code><code>:</code><code>-20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>5</code><code>_after </code><code>1.5</code><code>s infinite linear;</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>5</code> <code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{transform: rotate(</code><code>0</code><code>deg);}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{transform: rotate(</code><code>180</code><code>deg);</code><code>background</code><code>:</code><code>#2ecc71</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{transform: rotate(</code><code>360</code><code>deg);}</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>5</code><code>_after {</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{</code><code>border-top</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;</code><code>border-bottom</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{</code><code>border-top</code><code>:</code><code>10px</code> <code>solid</code> <code>#3498db</code><code>;</code><code>border-bottom</code><code>:</code><code>10px</code> <code>solid</code> <code>#3498db</code><code>;}</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{</code><code>border-top</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;</code><code>border-bottom</code><code>:</code><code>10px</code> <code>solid</code> <code>#9b59b6</code><code>;}</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div><h2>\n<span>6.</span> Glistening Window</h2><p>We've gone a bit Microsoft on this one..</p>\n\n<figure>\n<iframe src=\"http://tutsplus.github.io/CSS3-Preloaders/codepens/codepen_Diuzb/\" scrolling=\"no\" frameborder=\"0\" height=\"300\" width=\"600\"></iframe>\n</figure>\n\n\n\n\n<h3>HTML</h3><p>This pre-loader is created using a div and&nbsp;four spans to create each square.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td><div><div><code>&lt;</code><code>div</code> <code>id</code><code>=</code><code>\"preloader6\"</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;</code><code>span</code><code>&gt;&lt;/</code><code>span</code><code>&gt;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;/</code><code>div</code><code>&gt;</code></div></div></td></tr></tbody></table></div></div><div><div><div><div><span>CSS</span><br></div></div></div></div><p>These\n squares are then positioned in a grid-like order.&nbsp;Animation is added to\n the main div to rotate the whole pre-loader. Another animation is added\n to the spans which scales them from 100% to 50%. We then add&nbsp;<code>animation-delay</code>&nbsp; to each span to create the pulsing effect.<br></p><div><div><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div><div>07</div><div>08</div><div>09</div><div>10</div><div>11</div><div>12</div><div>13</div><div>14</div><div>15</div><div>16</div><div>17</div><div>18</div><div>19</div><div>20</div><div>21</div><div>22</div><div>23</div><div>24</div><div>25</div><div>26</div><div>27</div><div>28</div><div>29</div><div>30</div><div>31</div><div>32</div><div>33</div><div>34</div><div>35</div><div>36</div><div>37</div><div>38</div><div>39</div><div>40</div></td><td><div><div><code>#preloader</code><code>6</code><code>{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>relative</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>: </code><code>42px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>: </code><code>42px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>6</code> <code>5</code><code>s infinite linear;</code></div><div><code>}</code></div><div><code>#preloader</code><code>6</code> <code>span{</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>width</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>height</code><code>:</code><code>20px</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>position</code><code>:</code><code>absolute</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>background</code><code>:</code><code>red</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>display</code><code>:</code><code>block</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation: preloader_</code><code>6</code><code>_span </code><code>1</code><code>s infinite linear;</code></div><div><code>}</code></div><div><code>#preloader</code><code>6</code> <code>span:nth-child(</code><code>1</code><code>){</code></div><div><code>background</code><code>:</code><code>#2ecc71</code><code>;</code></div><div>&nbsp;</div><div><code>}</code></div><div><code>#preloader</code><code>6</code> <code>span:nth-child(</code><code>2</code><code>){</code></div><div><code>left</code><code>:</code><code>22px</code><code>;</code></div><div><code>background</code><code>:</code><code>#9b59b6</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>2</code><code>s;</code></div><div>&nbsp;</div><div><code>}</code></div><div><code>#preloader</code><code>6</code> <code>span:nth-child(</code><code>3</code><code>){</code></div><div><code>top</code><code>:</code><code>22px</code><code>;</code></div><div><code>background</code><code>:</code><code>#3498db</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>4</code><code>s;</code></div><div><code>}</code></div><div><code>#preloader</code><code>6</code> <code>span:nth-child(</code><code>4</code><code>){</code></div><div><code>top</code><code>:</code><code>22px</code><code>;</code></div><div><code>left</code><code>:</code><code>22px</code><code>;</code></div><div><code>background</code><code>:</code><code>#f1c40f</code><code>;</code></div><div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>animation-delay: .</code><code>6</code><code>s;</code></div><div><code>}</code></div><div><code>@keyframes preloader_</code><code>6</code><code>_span {</code></div><div><code>&nbsp;&nbsp;&nbsp;</code><code>0%</code> <code>{ transform:scale(</code><code>1</code><code>); }</code></div><div><code>&nbsp;&nbsp;&nbsp;</code><code>50%</code> <code>{ transform:scale(</code><code>0.5</code><code>); }</code></div><div><code>&nbsp;&nbsp;&nbsp;</code><code>100%</code> <code>{ transform:scale(</code><code>1</code><code>); }</code></div><div><code>}</code></div></div></td></tr></tbody></table></div></div>\n\n<h2>Conclusion</h2><p>The great advantage about using \nCSS3 pre-loaders over image pre-loaders is that they are scalable and \nretina ready. That means that no matter what device they are displayed \non they will always be crisp, clean and future proof (though bear in \nmind that not all legacy browsers support CSS3 animation).&nbsp;</p><p>By \nunderstanding a few important CSS3 properties and techniques you should \nnow be&nbsp;able to create your own CSS3 pre-loaders. They're fun to create \nand with a little bit of experimentation you can create some really cool\n animations to prevent&nbsp;users from leaving your website.</p><p>If you've&nbsp;created any cool pre-loaders recently&nbsp;then I'd love to see them! Feel free to leave your comments below.</p></div>","tags":"css,Animation","isStarred":"false","note":"","dateCreated":"Tue Mar 17 2015 21:28:06 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 17 2015 21:28:06 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"ONd16zh6q078RqpG"}
{"id":"0","category":"scss","categoryId":"57","title":"Using pure Sass functions to make reusable logic more useful","refSite":"http://thesassway.com/advanced/pure-sass-functions","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Sass gladly lets you add calculations and logic in a way that CSS would never abide. But does that mean you should go around adding and dividing just anywhere? Find out how you can use pure Sass functions to make reusable logic more useful and your working Sass file more readable.</p><h2>Sass adds Functions</h2><p>Sass has <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins\">mixins</a>, we all know that. And because they accept arguments I always thought of them as Sass's version of functions. Pretty sweet. But when <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_CHANGELOG.html#310\">Sass 3.1.0</a> came out it added a feature that blew that notion apart. Yeah, you guessed it … actual <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_CHANGELOG.html#sassbased_functions\">functions</a>. Instead of outputting lines of Sass the way mixins do, functions return a value. This makes them a super powerful behind-the-scenes player in a lot of my favorite Sass recipes. </p><h2>Mixins and Functions: Kissing Cousins</h2><p>Functions and mixins are very similar in nature. Because they can both accept variables, you might end up creating a mixin when what you really need is a function. In the following examples, we review the creation, usage and output of both a mixin and a function.</p><h3>Exhibit A: Mixin</h3><p>The following mixin can accept arguments and do calculations. The output of this mixin (in this case) is a CSS rule and will be unfurled where ever you <code>@include</code> it.</p><div><pre><span>@mixin</span><span> my-padding-mixin</span><span>(</span><span>$some-number</span><span>)</span> <span>{</span>  <span>padding</span><span>:</span> <span>$some-number</span><span>;</span><span>}</span></pre></div><p>Now we use the <code>@include</code> directive to insert our mixin's code.</p><div><pre><span>.my-module</span> <span>{</span>  <span>@include</span><span> my-padding-mixin</span><span>(</span><span>10</span><span>px</span><span>);</span><span>}</span></pre></div><p>And here is the output CSS code.</p><div><pre><span>.my-module</span> <span>{</span>  <span>padding</span><span>:</span> <span>10px</span><span>;</span><span>}</span></pre></div><h3>Exhibit B: Function</h3><p>A function is very similar to a mixin, however the output from a function is a single value. This can be any Sass <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#data_types\">data type</a>, including: numbers, strings, colors, booleans, or lists.</p><p>The following function can accept 2 arguements, <code>$some-number</code> and <code>$another-number</code>. The value returned are those two variables added together.</p><div><pre><span>@function</span> <span>my-calculation-function</span><span>(</span><span>$</span><span>some-number</span><span>,</span> <span>$</span><span>another-number</span><span>)</span><span>{</span>  <span>@return</span> <span>$</span><span>some-number</span> <span>+</span> <span>$</span><span>another-number</span><span>}</span></pre></div><p>This time around we replace the common value of the <code>padding</code> property with what a snippet of <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#sassscript\">SassScript</a> to call our function, pass it the arguments and include in our output CSS code.</p><div><pre><span>.my-module</span> <span>{</span>  <span>padding</span><span>:</span> <span>my-calculation-function</span><span>(</span><span>10</span><span>px</span><span>,</span> <span>5</span><span>px</span><span>);</span><span>}</span></pre></div><p>And here is the output CSS code.</p><div><pre><span>.my-module</span> <span>{</span>  <span>padding</span><span>:</span> <span>15px</span><span>;</span><span>}</span></pre></div><h3>Readable, DRY Sass</h3><p>As you can see, functions help you write more readable and DRY Sass by letting you move your reusable logic out of specific declarations and even out of your mixins. This can make all the difference in the world when you're working on something that's even a little bit complex.</p><h2>Using Functions</h2><p>I love how writing Sass lets me think like a programmer when I'm writing CSS. It's very satisfying to refactor and abstract the methods behind successful techniques to make them reusable and portable for the next project.</p><p><strong>Pro tip</strong>: Use functions when you need to calculate a value that may be reused somewhere else.</p><p>In Ethan Marcotte's lovely new book <a target=\"_blank\" href=\"http://www.abookapart.com/products/responsive-web-design\"><em>Responsive Web Design</em></a>, he stresses the formula for calculating the percent value for a width so you can achieve a fluid layout based on a reference design made using pixels.</p><pre>target / context = result</pre><p>So if you have a container that's 1000px wide, and a module that's designed to be 650px wide, that calculation becomes: </p><pre>650px / 1000px = 65% </pre><p>That's as clear a case for a function as I can imagine. It would be overkill to work that logic into each mixin for a site, and even worse to do those calculations in line. So in a recent project I just created a little function, like so:</p><div><pre><span>@function</span> <span>calc-percent</span><span>(</span><span>$</span><span>target</span><span>,</span> <span>$</span><span>container</span><span>)</span> <span>{</span>  <span>@return</span> <span>(</span><span>$</span><span>target</span> <span>/</span> <span>$</span><span>container</span><span>)</span> <span>*</span> <span>100</span><span>%</span><span>;</span><span>}</span></pre></div><p><strong>Pro tip</strong>: Create short-names for functions and mixins that you will be using often.</p><p>For example, for the above function, I created the short-name below. It simply collects the needed arguments, and passes it along to its sister with the longer name, and then returns the value.</p><div><pre><span>@function</span> <span>cp</span><span>(</span><span>$</span><span>target</span><span>,</span> <span>$</span><span>container</span><span>)</span> <span>{</span>  <span>@return</span> <span>calc-percent</span><span>(</span><span>$</span><span>target</span><span>,</span> <span>$</span><span>container</span><span>);</span><span>}</span></pre></div><p>With that in place, I can easily remove the mechanics of that process out of my view, and focus on writing my Sass using the values I already know.</p><div><pre><span>.my-module</span> <span>{</span>  <span>width</span><span>:</span> <span>calc-percent</span><span>(</span><span>650</span><span>px</span><span>,</span> <span>1000</span><span>px</span><span>);</span><span>}</span></pre></div><p>or     </p><div><pre><span>.my-module</span> <span>{</span>  <span>width</span><span>:</span> <span>cp</span><span>(</span><span>650</span><span>px</span><span>,</span> <span>1000</span><span>px</span><span>);</span><span>}</span></pre></div><p>Either of which simply output this CSS.</p><div><pre><span>.my-module</span> <span>{</span>  <span>width</span><span>:</span> <span>65</span><span>%</span><span>;</span><span>}</span></pre></div><p>This is a simple example, but I think it's a pretty useful one, especially if you'd rather have Sass do the math for you. Once you start pulling a few calculations into Sass functions, you'll start to see how they open up new ways to write lighter, cleaner Sass that's more readable.</p><h2>Homework: Dig Deeper by reading the source code</h2><p>Sass functions have become an indispensable tool for me in all my latest projects. I've heard from many others that is the case for them as well. If you dig into <a target=\"_blank\" href=\"http://compass-style.org/reference/blueprint/grid/\">the</a> <a target=\"_blank\" href=\"http://compass-style.org/reference/compass/layout/grid_background/\">source</a> <a target=\"_blank\" href=\"http://compass-style.org/reference/compass/typography/vertical_rhythm/\">code</a> of <a target=\"_blank\" href=\"http://www.abookapart.com/products/responsive-web-design\">Compass</a> you will see that a lot of real heavy lifting is done by some well-placed functions.</p>","tags":"SCSS,css","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 15:53:52 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 15:53:52 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"OTdZVu4JS8zQCKFm"}
{"id":"0","category":"css","categoryId":"29","title":"Media Queries for Standard Devices","codes":[{"code":"/* Smartphones (portrait and landscape) ----------- */\n@media only screen \nand (min-device-width : 320px) \nand (max-device-width : 480px) {\n/* Styles */\n}\n\n/* Smartphones (landscape) ----------- */\n@media only screen \nand (min-width : 321px) {\n/* Styles */\n}\n\n/* Smartphones (portrait) ----------- */\n@media only screen \nand (max-width : 320px) {\n/* Styles */\n}\n\n/* iPads (portrait and landscape) ----------- */\n@media only screen \nand (min-device-width : 768px) \nand (max-device-width : 1024px) {\n/* Styles */\n}\n\n/* iPads (landscape) ----------- */\n@media only screen \nand (min-device-width : 768px) \nand (max-device-width : 1024px) \nand (orientation : landscape) {\n/* Styles */\n}\n\n/* iPads (portrait) ----------- */\n@media only screen \nand (min-device-width : 768px) \nand (max-device-width : 1024px) \nand (orientation : portrait) {\n/* Styles */\n}\n\n/* Desktops and laptops ----------- */\n@media only screen \nand (min-width : 1224px) {\n/* Styles */\n}\n\n/* Large screens ----------- */\n@media only screen \nand (min-width : 1824px) {\n/* Styles */\n}\n\n/* iPhone 4 ----------- */\n@media\nonly screen and (-webkit-min-device-pixel-ratio : 1.5),\nonly screen and (min-device-pixel-ratio : 1.5) {\n/* Styles */\n}","codeLanguage":"css"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<p><br></p>","tags":"css,css3","isStarred":"false","note":"","dateCreated":"Thu Dec 18 2014 18:09:34 GMT+0530 (India Standard Time)","dateModified":"Thu Dec 18 2014 18:09:34 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"OUykusvn8Dc9joQX"}
{"id":"PCifveKURzuS7FU1","category":"patterns","categoryId":"58","title":"JavaScript Observer (Publish/Subscribe) Pattern","refSite":"","codes":[{"code":"// Another Example\n<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<title>JavaScript Patterns</title>\n\t\t<meta charset=\"utf-8\">\n\t</head>\n\t<body>\n\t\t<script>\n\t\t\t/* Title: Observer\n\t\t\t\tDescription: is a publish/subscribe pattern which allows a number of observer objects to see an event\n\t\t\t*/\n\t\t\tvar observer = {\n\t\t\t\taddSubscriber:function (callback) {\n\t\t\t\t\tthis.subscribers[this.subscribers.length] = callback;\n\t\t\t\t},\n\t\t\t\tremoveSubscriber:function (callback) {\n\t\t\t\t\tfor (var i = 0; i < this.subscribers.length; i++) {\n\t\t\t\t\t\tif (this.subscribers[i] === callback) {\n\t\t\t\t\t\t\tdelete(this.subscribers[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpublish:function (what) {\n\t\t\t\t\tfor (var i = 0; i < this.subscribers.length; i++) {\n\t\t\t\t\t\tif (typeof this.subscribers[i] === 'function') {\n\t\t\t\t\t\t\tthis.subscribers[i](what);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmake:function (o) { // turns an object into a publisher\n\t\t\t\t\tfor (var i in this) {\n\t\t\t\t\t\to[i] = this[i];\n\t\t\t\t\t\to.subscribers = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar blogger = {\n\t\t\t\twriteBlogPost:function () {\n\t\t\t\t\tvar content = 'Today is ' + new Date();\n\t\t\t\t\tthis.publish(content);\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar la_times = {\n\t\t\t\tnewIssue:function () {\n\t\t\t\t\tvar paper = 'Martians have landed on Earth!';\n\t\t\t\t\tthis.publish(paper);\n\t\t\t\t}\n\t\t\t};\n\t\t\tobserver.make(blogger);\n\t\t\tobserver.make(la_times);\n\t\t\tvar jack = {\n\t\t\t\tread:function (what) {\n\t\t\t\t\tconsole.log('I just read that ' + what)\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar jill = {\n\t\t\t\tgossip:function (what) {\n\t\t\t\t\tconsole.log('You didn\\'t hear it from me, but ' + what)\n\t\t\t\t}\n\t\t\t};\n\t\t\tblogger.addSubscriber(jack.read);\n\t\t\tblogger.addSubscriber(jill.gossip);\n\t\t\tblogger.writeBlogPost();\n\t\t\tblogger.removeSubscriber(jill.gossip);\n\t\t\tblogger.writeBlogPost();\n\t\t\tla_times.addSubscriber(jill.gossip);\n\t\t\tla_times.newIssue();\n\t\t\t// reference\n\t\t\t// http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\n\t\t\t// http://shop.oreilly.com/product/9780596806767.do?sortby=publicationDate\n\t\t</script>\n\t</body>\n</html>","codeLanguage":"html5"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div>\n\t\t<p>That’s the pattern that I love. It seems to be a core part of \nJavaScript. And it gives ability of quite many ways of implementing it \ndepending on requirements.</p>\n<h2>Definition</h2>\n<blockquote><p>The Observer Pattern defines a one-to-many dependency \nbetween objects so that when one object changes state, all of its \ndependents are notified and updated automatically.</p></blockquote>\n<p>Taking in account previous patterns this pattern adds one more principle:</p>\n<ul>\n<li>Strive for loosely coupled designs between objects that interact</li>\n</ul>\n<p>So the main idea is that we have one main object to which you \nsubscribe (Subject/Observable) and a lot of objects (Observers) that \nsubscribe and wait for events.</p>\n<p><a href=\"http://bumbu.me/wp-content/uploads/2013/09/Drawing1.png\"><img alt=\"Drawing1\" src=\"http://bumbu.me/wp-content/uploads/2013/09/Drawing1.png\" height=\"224\" width=\"170\"></a></p>\n<p>One very important thing to remember is that objects may receive \nmessages in random order, so you shouldn’t rely on the order in which \nyou added Observers.</p>\n<h2>Basic Observer Example</h2>\n<p>What will follow is not the simplest example. The simplest example would be the one that is not passing the message.</p>\n<pre><span>var</span><span> </span><span>Observable</span><span> </span><span>=</span><span> </span><span>{</span><span>\n    observers</span><span>:</span><span> </span><span>[]</span><span>\n  </span><span>,</span><span> addObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>observer</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>push</span><span>(</span><span>observer</span><span>)</span><span>\n    </span><span>}</span><span>\n  </span><span>,</span><span> removeObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>observer</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>var</span><span> index </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>indexOf</span><span>(</span><span>observer</span><span>)</span><span>\n\n      </span><span>if</span><span> </span><span>(~</span><span>index</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>splice</span><span>(</span><span>index</span><span>,</span><span> </span><span>1</span><span>)</span><span>\n      </span><span>}</span><span>\n    </span><span>}</span><span>\n  </span><span>,</span><span> notifyObservers</span><span>:</span><span> </span><span>function</span><span>(</span><span>message</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>for</span><span> </span><span>(</span><span>var</span><span> i </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>length </span><span>-</span><span> </span><span>1</span><span>;</span><span> i </span><span>&gt;=</span><span> </span><span>0</span><span>;</span><span> i</span><span>--)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>i</span><span>](</span><span>message</span><span>)</span><span>\n      </span><span>};</span><span>\n    </span><span>}</span><span>\n  </span><span>}</span><span>\n\n</span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"First observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>})</span><span>\n\n</span><span>var</span><span> observer </span><span>=</span><span> </span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"Second observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>}</span><span>\n\n</span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>observer</span><span>)</span><span>\n\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'test 1'</span><span>)</span><span>\n</span><span>// Second observer message:test 1</span><span>\n</span><span>// First observer message:test 1</span><span>\n\n</span><span>Observable</span><span>.</span><span>removeObserver</span><span>(</span><span>observer</span><span>)</span><span>\n\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'test 2'</span><span>)</span><span>\n</span><span>// First observer message:test 2</span></pre>\n<p>If you want to remove observers using some sort of ID instead of passing callback it can be done in following way:</p>\n<pre><span>var</span><span> </span><span>Observable</span><span> </span><span>=</span><span> </span><span>{</span><span>\n    observers</span><span>:</span><span> </span><span>[]</span><span>\n  </span><span>,</span><span> lastId</span><span>:</span><span> </span><span>-</span><span>1</span><span>\n  </span><span>,</span><span> addObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>observer</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>push</span><span>({</span><span>\n        callback</span><span>:</span><span> observer\n      </span><span>,</span><span> id</span><span>:</span><span> </span><span>++</span><span>this</span><span>.</span><span>lastId\n      </span><span>})</span><span>\n\n      </span><span>return</span><span> </span><span>this</span><span>.</span><span>lastId\n    </span><span>}</span><span>\n  </span><span>,</span><span> removeObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>id</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>for</span><span> </span><span>(</span><span>var</span><span> i </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>length </span><span>-</span><span> </span><span>1</span><span>;</span><span> i </span><span>&gt;=</span><span> </span><span>0</span><span>;</span><span> i</span><span>--)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>i</span><span>]</span><span>\n        </span><span>if</span><span> </span><span>(</span><span>this</span><span>.</span><span>observers</span><span>[</span><span>i</span><span>].</span><span>id </span><span>==</span><span> id</span><span>)</span><span> </span><span>{</span><span>\n          </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>splice</span><span>(</span><span>i</span><span>,</span><span> </span><span>1</span><span>)</span><span>\n          </span><span>return</span><span> </span><span>true</span><span>\n        </span><span>}</span><span>\n      </span><span>}</span><span>\n\n      </span><span>return</span><span> </span><span>false</span><span>\n    </span><span>}</span><span>\n  </span><span>,</span><span> notifyObservers</span><span>:</span><span> </span><span>function</span><span>(</span><span>message</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>for</span><span> </span><span>(</span><span>var</span><span> i </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>.</span><span>length </span><span>-</span><span> </span><span>1</span><span>;</span><span> i </span><span>&gt;=</span><span> </span><span>0</span><span>;</span><span> i</span><span>--)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>i</span><span>].</span><span>callback</span><span>(</span><span>message</span><span>)</span><span>\n      </span><span>};</span><span>\n    </span><span>}</span><span>\n  </span><span>}</span><span>\n\n</span><span>var</span><span> id_1 </span><span>=</span><span> </span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"First observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>})</span><span>\n\n</span><span>var</span><span> observer </span><span>=</span><span> </span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"Second observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>}</span><span>\n\n</span><span>var</span><span> id_2 </span><span>=</span><span> </span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>observer</span><span>)</span><span>\n\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'test 1'</span><span>)</span><span>\n</span><span>Observable</span><span>.</span><span>removeObserver</span><span>(</span><span>id_2</span><span>)</span><span>\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'test 2'</span><span>)</span></pre>\n<h2>Pull vs Push</h2>\n<p>There are two main strategies for observer pattern:</p>\n<ul>\n<li>Push behaviour – when an event happens Observable object will notify all Observers by sending all the new data to them</li>\n<li>Pull behaviour – when an event happens Observable object will notify\n all Observers and each Observer will pull the information it needs from\n the Observable</li>\n</ul>\n<p>Pull method is more preferable as in this case you’ll ask only for \ndata that you need. Otherwise at some point you Observable may send huge\n objects with a lot of attributes. In this example Observable will only \nnotify Observers that something changed and each Observer will take the \ndata it needs. Also in this example we hide observers array and private \nvalues in anonymous function closure.</p>\n<pre><span>var</span><span> </span><span>Observable</span><span> </span><span>=</span><span> </span><span>{}</span><span>\n\n</span><span>;(</span><span>function</span><span>(</span><span>O</span><span>){</span><span>\n  </span><span>var</span><span> observers </span><span>=</span><span> </span><span>[]</span><span>\n    </span><span>,</span><span> privateVar\n\n  O</span><span>.</span><span>addObserver </span><span>=</span><span> </span><span>function</span><span>(</span><span>observer</span><span>)</span><span> </span><span>{</span><span>\n    observers</span><span>.</span><span>push</span><span>(</span><span>observer</span><span>)</span><span>\n  </span><span>}</span><span>\n\n  O</span><span>.</span><span>removeObserver </span><span>=</span><span> </span><span>function</span><span>(</span><span>observer</span><span>)</span><span> </span><span>{</span><span>\n    </span><span>var</span><span> index </span><span>=</span><span> observers</span><span>.</span><span>indexOf</span><span>(</span><span>observer</span><span>)</span><span>\n\n    </span><span>if</span><span> </span><span>(~</span><span>index</span><span>)</span><span> </span><span>{</span><span>\n      observers</span><span>.</span><span>splice</span><span>(</span><span>index</span><span>,</span><span> </span><span>1</span><span>)</span><span>\n    </span><span>}</span><span>\n  </span><span>}</span><span>\n\n  O</span><span>.</span><span>notifyObservers </span><span>=</span><span> </span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    </span><span>for</span><span> </span><span>(</span><span>var</span><span> i </span><span>=</span><span> observers</span><span>.</span><span>length </span><span>-</span><span> </span><span>1</span><span>;</span><span> i </span><span>&gt;=</span><span> </span><span>0</span><span>;</span><span> i</span><span>--)</span><span> </span><span>{</span><span>\n      observers</span><span>[</span><span>i</span><span>].</span><span>update</span><span>()</span><span>\n    </span><span>};</span><span>\n  </span><span>}</span><span>\n\n  O</span><span>.</span><span>updatePrivate </span><span>=</span><span> </span><span>function</span><span>(</span><span>newValue</span><span>)</span><span> </span><span>{</span><span>\n    privateVar </span><span>=</span><span> newValue\n    </span><span>this</span><span>.</span><span>notifyObservers</span><span>()</span><span>\n  </span><span>}</span><span>\n\n  O</span><span>.</span><span>getPrivate </span><span>=</span><span> </span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    </span><span>return</span><span> privateVar\n  </span><span>}</span><span>\n</span><span>}(</span><span>Observable</span><span>))</span><span>\n\n</span><span>Observable</span><span>.</span><span>addObserver</span><span>({</span><span>\n  update</span><span>:</span><span> </span><span>function</span><span>(){</span><span>\n    </span><span>this</span><span>.</span><span>process</span><span>()</span><span>\n  </span><span>}</span><span>\n</span><span>,</span><span> process</span><span>:</span><span> </span><span>function</span><span>(){</span><span>\n    </span><span>var</span><span> value </span><span>=</span><span> </span><span>Observable</span><span>.</span><span>getPrivate</span><span>()</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>\"Private value is: \"</span><span> </span><span>+</span><span> value</span><span>)</span><span>\n  </span><span>}</span><span>\n</span><span>})</span><span>\n\n</span><span>Observable</span><span>.</span><span>updatePrivate</span><span>(</span><span>'test 1'</span><span>)</span><span>\n</span><span>// Private value is: test 1 </span><span>\n\n</span><span>Observable</span><span>.</span><span>updatePrivate</span><span>(</span><span>'test 2'</span><span>)</span><span>\n</span><span>// Private value is: test 2</span></pre>\n<h2>Observer with topics</h2>\n<p>In order not to create multiple observable objects it is much better \nto add topic functionality to Observer pattern. In simplest form it may \nlook like:</p>\n<pre><span>var</span><span> </span><span>Observable</span><span> </span><span>=</span><span> </span><span>{</span><span>\n    observers</span><span>:</span><span> </span><span>[]</span><span>\n  </span><span>,</span><span> addObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>topic</span><span>,</span><span> observer</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>]</span><span> </span><span>||</span><span> </span><span>(</span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>]</span><span> </span><span>=</span><span> </span><span>[])</span><span>\n\n      </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>].</span><span>push</span><span>(</span><span>observer</span><span>)</span><span>\n    </span><span>}</span><span>\n  </span><span>,</span><span> removeObserver</span><span>:</span><span> </span><span>function</span><span>(</span><span>topic</span><span>,</span><span> observer</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>if</span><span> </span><span>(!</span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>])</span><span>\n        </span><span>return</span><span>;</span><span>\n\n      </span><span>var</span><span> index </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>].</span><span>indexOf</span><span>(</span><span>observer</span><span>)</span><span>\n\n      </span><span>if</span><span> </span><span>(~</span><span>index</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>].</span><span>splice</span><span>(</span><span>index</span><span>,</span><span> </span><span>1</span><span>)</span><span>\n      </span><span>}</span><span>\n    </span><span>}</span><span>\n  </span><span>,</span><span> notifyObservers</span><span>:</span><span> </span><span>function</span><span>(</span><span>topic</span><span>,</span><span> message</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>if</span><span> </span><span>(!</span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>])</span><span>\n        </span><span>return</span><span>;</span><span>\n\n      </span><span>for</span><span> </span><span>(</span><span>var</span><span> i </span><span>=</span><span> </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>].</span><span>length </span><span>-</span><span> </span><span>1</span><span>;</span><span> i </span><span>&gt;=</span><span> </span><span>0</span><span>;</span><span> i</span><span>--)</span><span> </span><span>{</span><span>\n        </span><span>this</span><span>.</span><span>observers</span><span>[</span><span>topic</span><span>][</span><span>i</span><span>](</span><span>message</span><span>)</span><span>\n      </span><span>};</span><span>\n    </span><span>}</span><span>\n  </span><span>}</span><span>\n\n</span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>'cart'</span><span>,</span><span> </span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"First observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>})</span><span>\n\n</span><span>Observable</span><span>.</span><span>addObserver</span><span>(</span><span>'notificatons'</span><span>,</span><span> </span><span>function</span><span>(</span><span>message</span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"Second observer message:\"</span><span> </span><span>+</span><span> message</span><span>)</span><span>\n</span><span>})</span><span>\n\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'cart'</span><span>,</span><span> </span><span>'test 1'</span><span>)</span><span>\n</span><span>// First observer message:test 1 </span><span>\n\n</span><span>Observable</span><span>.</span><span>notifyObservers</span><span>(</span><span>'notificatons'</span><span>,</span><span> </span><span>'test 2'</span><span>)</span><span>\n</span><span>// Second observer message:test 2</span></pre>\n<p>More advanced versions may have features like:</p>\n<ul>\n<li>Subtopics (e.x. /<em>bar/green</em>&nbsp;or&nbsp;<em>bar.green</em>)</li>\n<li>Publishing to topic propagates to subtopics</li>\n<li>Publishing to all topics</li>\n<li>Giving a priority to subscribers</li>\n</ul>\n<h2>Observer Pattern using jQuery.Callback</h2>\n<p>jQuery has quite a nice feature like $.Callback. Besides of classical Observer functionality it also has a <a href=\"http://api.jquery.com/jQuery.Callbacks/\" target=\"_blank\">set of flags</a>:</p>\n<ul>\n<li><em>once:</em> Ensures the callback list can only be fired once (like a Deferred)</li>\n<li><em>memory:</em> Keeps track of previous values and will call any \ncallback added after the list has been fired right away with the latest \n“memorized” values (like a Deferred).</li>\n<li><em>unique:</em> Ensures a callback can only be added once (so there are no duplicates in the list).</li>\n<li><em>stopOnFalse:</em> Interrupts callings when a callback returns false.</li>\n</ul>\n<p>Using this options your can customise your Observer in quite \ninteresting ways. Lets see the most simple example using \njQuery.Callback:</p>\n<pre><span>var</span><span> callbacks </span><span>=</span><span> jQuery</span><span>.</span><span>Callbacks</span><span>()</span><span>\n  </span><span>,</span><span> </span><span>Topic</span><span> </span><span>=</span><span> </span><span>{</span><span>\n      publish</span><span>:</span><span> callbacks</span><span>.</span><span>fire</span><span>,</span><span>\n      subscribe</span><span>:</span><span> callbacks</span><span>.</span><span>add</span><span>,</span><span>\n      unsubscribe</span><span>:</span><span> callbacks</span><span>.</span><span>remove\n    </span><span>}</span><span>\n\n</span><span>function</span><span> fn1</span><span>(</span><span> value </span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span> </span><span>\"fn1: \"</span><span> </span><span>+</span><span> value </span><span>);</span><span>\n</span><span>}</span><span>\n\n</span><span>function</span><span> fn2</span><span>(</span><span> value </span><span>){</span><span>\n  console</span><span>.</span><span>log</span><span>(</span><span>\"fn2: \"</span><span> </span><span>+</span><span> value</span><span>);</span><span>\n</span><span>}</span><span>\n\n</span><span>Topic</span><span>.</span><span>subscribe</span><span>(</span><span>fn1</span><span>);</span><span>\n</span><span>Topic</span><span>.</span><span>subscribe</span><span>(</span><span>fn2</span><span>);</span><span>\n\n</span><span>Topic</span><span>.</span><span>publish</span><span>(</span><span>'hello world!'</span><span>);</span><span>\n</span><span>Topic</span><span>.</span><span>publish</span><span>(</span><span>'woo! mail!'</span><span>);</span></pre>\n<p>If you want to see a more advanced example with topic than take a look at <a href=\"https://github.com/shichuan/javascript-patterns/blob/master/jquery-patterns/pubsub-callback.html\" target=\"_blank\">this [1a]</a> example.</p>\n<h2>CoffeeScript example</h2>\n<p>This is a simple example without topics. Almost the same example (at \nleast the same amount of lines) can be found in CoffeeScript Cookbook \n[7].</p>\n<pre><span>class</span><span> </span><span>Observable</span><span>\n    constructor</span><span>:</span><span> </span><span>()</span><span> </span><span>-&gt;</span><span>\n        </span><span>@subscribers</span><span> </span><span>=</span><span> </span><span>[]</span><span>\n    subscribe</span><span>:</span><span> </span><span>(</span><span>callback</span><span>)</span><span> </span><span>-&gt;</span><span>\n        </span><span>@subscribers</span><span>.</span><span>push callback\n    unsubscribe</span><span>:</span><span> </span><span>(</span><span>callback</span><span>)</span><span> </span><span>-&gt;</span><span>\n        </span><span>@subscribers</span><span> </span><span>=</span><span> </span><span>@subscribers</span><span>.</span><span>filter </span><span>(</span><span>item</span><span>)</span><span> </span><span>-&gt;</span><span> item isnt callback\n    notify</span><span>:</span><span> </span><span>()</span><span> </span><span>-&gt;</span><span>\n        subscriber</span><span>()</span><span> </span><span>for</span><span> subscriber </span><span>in</span><span> </span><span>@subscribers</span><span>\n\n</span><span>class</span><span> </span><span>Observer1</span><span>\n    onUpdate</span><span>:</span><span> </span><span>()</span><span> </span><span>-&gt;</span><span>\n        console</span><span>.</span><span>log </span><span>\"1st got new message\"</span><span>\n\n</span><span>class</span><span> </span><span>Observer2</span><span>\n    onUpdate</span><span>:</span><span> </span><span>()</span><span> </span><span>-&gt;</span><span>\n        console</span><span>.</span><span>log </span><span>\"2nd updated\"</span><span>\n\nobservable </span><span>=</span><span> </span><span>new</span><span> </span><span>Observable</span><span>()</span><span>\nobserver1 </span><span>=</span><span> </span><span>new</span><span> </span><span>Observer1</span><span>()</span><span>\nobserver2 </span><span>=</span><span> </span><span>new</span><span> </span><span>Observer2</span><span>()</span><span>\n\nobservable</span><span>.</span><span>subscribe observer1</span><span>.</span><span>onUpdate\nobservable</span><span>.</span><span>subscribe observer2</span><span>.</span><span>onUpdate\nobservable</span><span>.</span><span>notify</span><span>()</span></pre>\n<h2>Sources</h2>\n<ol>\n<li>(github)&nbsp;<a href=\"https://github.com/shichuan/javascript-patterns/blob/master/design-patterns/observer.html\" target=\"_blank\">shichuan / javascript-patterns / design-patterns / observer.html</a>&nbsp;and <a href=\"http://shichuan.github.io/javascript-patterns/\" target=\"_blank\">jQuery examples</a></li>\n<li>(book)&nbsp;<a href=\"http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124\">Head First Design Patterns</a></li>\n<li>(book)&nbsp;<a href=\"http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#singletonpatternjavascript\" target=\"_blank\">Learning JavaScript Design Patterns</a></li>\n<li>(book)&nbsp;<a href=\"http://shop.oreilly.com/product/9780596806767.do\" target=\"_blank\">JavaScript Patterns: Build Better Applications with Coding and Design Patterns</a></li>\n<li>(book)&nbsp;<a href=\"http://shop.oreilly.com/product/0636920025832.do\" target=\"_blank\">Learning JavaScript Design Patterns: A JavaScript and jQuery Developer’s Guide</a></li>\n<li>(book)&nbsp;<a href=\"http://www.amazon.com/Pro-JavaScript-Design-Patterns-Object-Oriented/dp/159059908X\" target=\"_blank\">Pro JavaScript Design Patterns: The Essentials of Object-Oriented JavaScript Programming</a></li>\n<li>(book)&nbsp;<a href=\"http://coffeescriptcookbook.com/\" target=\"_blank\">CoffeeScript Cookbook</a></li>\n<li>(article)&nbsp;<a href=\"http://www.dofactory.com/javascript-observer-pattern.aspx\" target=\"_blank\">dofactory JavaScript Observer Pattern</a></li>\n</ol></div>","tags":"javascript,Pattern,Observer Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 16:24:07 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424775648597},"mode":"add","comments":[],"images":[],"_id":"PCifveKURzuS7FU1"}
{"id":"0","category":"handlebars","categoryId":"53","title":"sdsdsdsdsdsd","refSite":"","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"bootstrap","isStarred":"false","note":"","dateCreated":"Sat Mar 21 2015 20:34:36 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 21 2015 20:34:36 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"Q8p5aAstvWIedQdh"}
{"id":"QY6ug7xn1nsKqj2w","category":"patterns","categoryId":"58","title":"The Module Pattern","refSite":"https://carldanley.com/js-module-pattern/#file-module-pattern-example-2-js-L1","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>This pattern is used to mimic classes in conventional software engineering and focuses on public and private access to methods &amp; variables. The module pattern strives to improve the reduction of globally scoped variables, thus decreasing the chances of collision with other code throughout an application.</p><p>The module pattern is, by far, the most commonly used design pattern and widely accepted in a number of large projects such as <a href=\"http://jquery.com/\">jQuery</a>, <a href=\"http://dojotoolkit.org/\">Dojo</a>, <a href=\"http://www.sencha.com/products/extjs\">ExtJS</a> and <a href=\"http://yuilibrary.com/\">YUI</a>.</p><blockquote>\"I'm currently in the process of writing a large-scale JavaScript application based on this pattern, and I have to say, it's a delight.\" <br>- Brian Cray</blockquote><p>This article is part of a series called <a href=\"http://carldanley.com/javascript-design-patterns/\">JavaScript Design Patterns</a>.</p><h2>Advantages</h2><ul><li>Cleaner approach for developers</li><li>Supports private data</li><li>Less clutter in the global namespace</li><li>Localization of functions and variables through closures</li></ul><h2>Disadvantages</h2><ul><li>Private methods are unaccessible.<p>Some people say that this leads to the inability of unit testing but more often than not, if you're questioning the integrity of a function, it should probably be engineered in such a fashion that exposes the utility of that function publicly, thus making it testable. Given the adaptation of the module pattern by jQuery and their everyday use of QUnit to automate testing, this bullet point isn't really relevant but still listed for documentation purposes.</p></li><li>Private methods and functions lose extendability since they are unaccessible (see my comment in the previous bullet point).</li></ul><h2>Example</h2><div>        <div>          <div>    <div>      <table cellpadding=\"0\" cellspacing=\"0\">        <tbody><tr>          <td>            <pre><div>( <span>function</span>( <span>window</span>, <span>undefined</span> ) {</div><div>  </div><div>  <span>// normally variables &amp; functions start with a lowercase letter but with modules, that is not the case.</span></div><div>  <span>// The general tradition is to start them with a capital letter instead.</span></div><div>  <span>function</span> <span>MyModule</span>() {</div><div>    </div><div>    <span>// `this` refers to the instance of `MyModule` when created</span></div><div>    <span>this</span>.myMethod <span>=</span> <span>function</span> <span>myMethod</span>() {</div><div>      <span>alert</span>( <span><span>'</span>my method<span>'</span></span> );</div><div>    };</div><div>    </div><div>    <span>// note that we still use a function declaration even when using a function expression.</span></div><div>    <span>// for more information on why, check out: http://kangax.github.io/nfe/</span></div><div>    <span>this</span>.myOtherMethod <span>=</span> <span>function</span> <span>myOtherMethod</span>() {</div><div>      <span>alert</span>( <span><span>'</span>my other method<span>'</span></span> );</div><div>    };</div><div>    </div><div>  }</div><div>  </div><div>  <span>// expose access to the constructor</span></div><div>  <span>window</span>.MyModule <span>=</span> MyModule;</div><div>  </div><div>} )( <span>window</span> );</div><div>&nbsp;</div><div><span>// example usage</span></div><div><span>var</span> myModule <span>=</span> <span>new</span> <span>MyModule</span>();</div><div>myModule.myMethod(); <span>// alerts \"my method\"</span></div><div>myModule.myOtherMethod(); <span>// alerts \"my other method\"</span></div></pre>          </td>        </tr>      </tbody></table>    </div>          </div>        </div></div><p>Another example of the module pattern that exposes the module a little differently and makes use of a shared private cache. This method encourages more of an object creation approach where we can optimize performance by being efficient with shared storage.</p><div>        <div>          <div>    <div>      <table cellpadding=\"0\" cellspacing=\"0\">        <tbody><tr>          <td>            <pre><div><span>var</span> MyModule <span>=</span> ( <span>function</span>( <span>window</span>, <span>undefined</span> ) {</div><div>&nbsp;</div><div>  <span>// this object is used to store private variables and methods across multiple instantiations</span></div><div>  <span>var</span> privates <span>=</span> {};</div><div>  </div><div>  <span>function</span> <span>MyModule</span>() {</div><div>    </div><div>    <span>this</span>.myMethod <span>=</span> <span>function</span> <span>myMethod</span>() {</div><div>      <span>alert</span>( <span><span>'</span>my method<span>'</span></span> );</div><div>    };</div><div>&nbsp;</div><div>    <span>this</span>.myOtherMethod <span>=</span> <span>function</span> <span>myOtherMethod</span>() {</div><div>      <span>alert</span>( <span><span>'</span>my other method<span>'</span></span> );</div><div>    };</div><div>&nbsp;</div><div>  }</div><div>&nbsp;</div><div>  <span>return</span> MyModule;</div><div>  </div><div>} )( <span>window</span> );</div><div>&nbsp;</div><div><span>// example usage</span></div><div><span>var</span> myMod <span>=</span> <span>new</span> <span>MyModule</span>();</div><div>myMod.myMethod(); <span>// alerts \"my method\"</span></div><div>myMod.myOtherMethod(); <span>// alerts \"my other method\"</span></div></pre>          </td>        </tr>      </tbody></table>    </div>          </div>        </div></div><h2>Additional Resources</h2><p><a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\">http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html</a> <br><a href=\"http://macwright.org/2012/06/04/the-module-pattern.html\">http://macwright.org/2012/06/04/the-module-pattern.html</a> <br><a href=\"http://briancray.com/posts/javascript-module-pattern\">http://briancray.com/posts/javascript-module-pattern</a> <br><a href=\"http://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/\">http://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/</a> <br><a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\">http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript</a></p><h2>Other Common JS Patterns</h2><p><b>The Module Pattern</b> <br><a href=\"http://carldanley.com/js-revealing-module-pattern/\">The Revealing Module Pattern</a> <br><a href=\"http://carldanley.com/js-singleton-pattern/\">The Singleton Pattern</a> <br><a href=\"http://carldanley.com/js-observer-pattern/\">The Observer Pattern</a> <br><a href=\"http://carldanley.com/js-mediator-pattern/\">The Mediator Pattern</a> <br><a href=\"http://carldanley.com/js-prototype-pattern/\">The Prototype Pattern</a> <br><a href=\"http://carldanley.com/js-facade-pattern/\">The Facade Pattern</a> <br><a href=\"http://carldanley.com/js-factory-pattern/\">The Factory Pattern</a></p>","tags":"javascript,Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 12:34:45 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424761721902},"mode":"add","comments":[],"images":[],"_id":"QY6ug7xn1nsKqj2w"}
{"id":"0","category":"jquery","categoryId":"50","title":"jQuery Performance Rules","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div class=\"entry\">\n<p>Once upon a time, all we needed to worry about was reducing Bytes and Requests and playing around with load order to make things faster. Nowadays, we are increasingly impacting one more major component in performance &#8211; <strong>CPU utilization</strong>. Using jQuery and other frameworks that make selecting nodes and DOM manipulation easy can have adverse affects if you&#8217;re not careful and follow some simple practices for reducing the work the browser has to do.</p>\n<ol>\n<li><a href=\"#descend-from-id\">Always Descend From an #id</a></li>\n<li><a href=\"#use-tags-before-classes\">Use Tags Before Classes</a></li>\n<li><a href=\"#cache-jquery-objects\">Cache jQuery Objects</a></li>\n<li><a href=\"#harness-chaining\">Harness the Power of Chaining</a></li>\n<li><a href=\"#use-sub-queries\">Use Sub-queries</a></li>\n<li><a href=\"#limit-dom-manipulation\">Limit Direct DOM Manipulation</a></li>\n<li><a href=\"#leverage-event-delegation\">Leverage Event Delegation</a> (a.k.a. Bubbling)</li>\n<li><a href=\"#eliminate-query-waste\">Eliminate Query Waste</a></li>\n<li><a href=\"#defer-to-window-load\">Defer to $(window).load</a></li>\n<li><a href=\"#compress-your-js\">Compress Your JS</a></li>\n<li><a href=\"#learn-the-library\">Learn the Library</a></li>\n</ol>\n<p><span id=\"more-83\"></span></p>\n<h2 id=\"descend-from-id\">1. Always Descend From an #id</h2>\n<p>The fastest selector in jQuery is the ID selector (<code>$('#someid')</code>). This is because it maps directly to a native JavaScript method, <code>getElementById()</code>.</p>\n<h3>Selecting Single Elements</h3>\n<pre>&lt;div id=\"content\"&gt;\n\t&lt;form method=\"post\" action=\"/\"&gt;\n\t\t&lt;h2&gt;Traffic Light&lt;/h2&gt;\n\t\t&lt;ul id=\"traffic_light\"&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"on\" name=\"light\" value=\"red\" /&gt; Red&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"yellow\" /&gt; Yellow&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"green\" /&gt; Green&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t\t&lt;input class=\"button\" id=\"traffic_button\" type=\"submit\" value=\"Go\" /&gt;\n\t&lt;/form&gt;\n&lt;/div&gt;</pre>\n<p>Selecting the button like this is slower:</p>\n<pre>var traffic_button = $('#content .button');</pre>\n<p>Instead, select the button directly:</p>\n<pre>var traffic_button = $('#traffic_button');</pre>\n<h3>Selecting Multiple Elements</h3>\n<p>Once we start talking about selecting multiple elements, we are really  talking about DOM traversal and looping, something that is slow.  To minimize the performance hit, <strong>always descend from the closest parent ID</strong>:</p>\n<pre>var traffic_lights = $('#traffic_light input');</pre>\n<h2 id=\"use-tags-before-classes\">2. Use Tags Before Classes</h2>\n<p>The second fastest selector in jQuery is the Tag selector (<code>$('head')</code>). Again, this is because it maps to a native JavaScript method, <code>getElementsByTagName()</code></p>\n<p>.</p>\n<pre>&lt;div id=\"content\"&gt;\n\t&lt;form method=\"post\" action=\"/\"&gt;\n\t\t&lt;h2&gt;Traffic Light&lt;/h2&gt;\n\t\t&lt;ul id=\"traffic_light\"&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"on\" name=\"light\" value=\"red\" /&gt; Red&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"yellow\" /&gt; Yellow&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"green\" /&gt; Green&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t\t&lt;input class=\"button\" id=\"traffic_button\" type=\"submit\" value=\"Go\" /&gt;\n\t&lt;/form&gt;\n&lt;/div&gt;</pre>\n<p>Always prefix a class with a tag name (and remember to descend from an ID):</p>\n<pre>var active_light = $('#traffic_light input.on');</pre>\n<p><em>Note: The class selector is among the slowest selectors in jQuery; in IE it loops through the entire DOM. Avoid using it whenever possible.</em> Never prefix an ID with a tag name. For example, this is slow because it will loop through all <code>&lt;div&gt;</code> elements looking for the ‘content’ ID:</p>\n<pre>var content = $('div#content');</pre>\n<p>Along the same lines, it is redundant to descend from multiple IDs:</p>\n<pre>var traffic_light = $('#content #traffic_light');</pre>\n<h2 id=\"cache-jquery-objects\">3. Cache jQuery Objects</h2>\n<p>Get in the habit of saving your jQuery objects to a variable (much like our examples above).  For example, never (eeeehhhhver) do this:</p>\n<pre>$('#traffic_light input.on).bind('click', function(){...});\n$('#traffic_light input.on).css('border', '3px dashed yellow');\n$('#traffic_light input.on).css('background-color', 'orange');\n$('#traffic_light input.on).fadeIn('slow');</pre>\n<p>Instead, first save the object to a local variable, and continue your operations:</p>\n<pre>var $active_light = $('#traffic_light input.on');\n$active_light.bind('click', function(){...});\n$active_light.css('border', '3px dashed yellow');\n$active_light.css('background-color', 'orange');\n$active_light.fadeIn('slow');</pre>\n<p><em>Tip: Since we want to remember that our local variable is a jQuery wrapped set, we are using $ as a prefix.</em> Remember, <strong>never repeat a jQuery selection operation</strong> more than once in your application.</p>\n<h3>Bonus Tip &#8211; Storing jQuery results for later</h3>\n<p>If you intend to use the jQuery result object(s) in another part of your program, or should your function execute more than once, cache it in an object with a <a href=\"http://www.webdevelopersnotes.com/tutorials/javascript/global_local_variables_scope_javascript.php3\">global scope</a>.  By defining a global container with jQuery results, we can reference them from within other functions:</p>\n<pre>// Define an object in the global scope (i.e. the window object)\nwindow.$my =\n{\n\t// Initialize all the queries you want to use more than once\n\thead : $('head'),\n\ttraffic_light : $('#traffic_light'),\n\ttraffic_button : $('#traffic_button')\n};\n\nfunction do_something()\n{\n\t// Now you can reference the stored results and manipulate them\n\tvar script = document.createElement('script');\n\t$my.head.append(script);\n\n\t// When working inside functions, continue to save jQuery results\n\t// to your global container.\n\t$my.cool_results = $('#some_ul li');\n\t$my.other_results = $('#some_table td');\n\n\t// Use the global functions as you would a normal jQuery result\n\t$my.other_results.css('border-color', 'red');\n\t$my.traffic_light.css('border-color', 'green');\n}</pre>\n<h2 id=\"harness-chaining\">4. Harness the Power of Chaining</h2>\n<p>The previous example can also be accomplished like this:</p>\n<pre>var $active_light = $('#traffic_light input.on');$active_light.bind('click', function(){...})\n\t.css('border', '3px dashed yellow')\n\t.css('background-color', 'orange')\n\t.fadeIn('slow');</pre>\n<p>This allows us to write less code, making our JavaScript more lightweight.</p>\n<h2 id=\"use-sub-queries\">5. Use Sub-queries</h2>\n<p>jQuery allows us to run additional selector operations on a wrapped set. This reduces performance overhead on subsequent selections since we already grabbed and stored the  parent object in a local variable.</p>\n<pre>&lt;div id=\"content\"&gt;\n\t&lt;form method=\"post\" action=\"/\"&gt;\n\t\t&lt;h2&gt;Traffic Light&lt;/h2&gt;\n\t\t&lt;ul id=\"traffic_light\"&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"on\" name=\"light\" value=\"red\" /&gt; Red&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"yellow\" /&gt; Yellow&lt;/li&gt;\n\t\t\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"green\" /&gt; Green&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t\t&lt;input class=\"button\" id=\"traffic_button\" type=\"submit\" value=\"Go\" /&gt;\n\t&lt;/form&gt;\n&lt;/div&gt;</pre>\n<p>For example, we can leverage sub-queries to grab the active and inactive lights and cache them for later manipulation.</p>\n<pre>var $traffic_light = $('#traffic_light'),\n\t$active_light = $traffic_light.find('input.on'),\n\t$inactive_lights = $traffic_light.find('input.off');</pre>\n<p><em>Tip: You can declare multiple local variables by separating them with commas – save those bytes!</em></p>\n<h2 id=\"limit-dom-manipulation\">6. Limit Direct DOM <a href=\"http://docs.jquery.com/Manipulation\">Manipulation</a></h2>\n<p>The basic idea here is to create exactly what you need in memory, and <strong>then</strong> update the DOM. This is not a jQuery best practice, but a must for efficient JavaScript. <a href=\"http://www.tvidesign.co.uk/blog/improve-your-jquery-25-excellent-tips.aspx#tip6\">Direct DOM manipulation is slow</a>.  For example, if you need to dynamically create a list of elements, do not do this:</p>\n<pre>var top_100_list = [...], // assume this has 100 unique strings\n\t$mylist = $('#mylist'); // jQuery selects our &lt;ul&gt; element\n\nfor (var i=0, l=top_100_list.length; i&lt;l; i++)\n{\n\t$mylist.append('&lt;li&gt;' + top_100_list[i] + '&lt;/li&gt;');\n}</pre>\n<p>Instead, we want to create the entire set of elements in a string before inserting into the DOM:</p>\n<pre>var top_100_list = [...], // assume this has 100 unique strings\n\t$mylist = $('#mylist'), // jQuery selects our &lt;ul&gt; element\n\ttop_100_li = \"\"; // This will store our list items\n\nfor (var i=0, l=top_100_list.length; i&lt;l; i++)\n{\n\ttop_100_li += '&lt;li&gt;' + top_100_list[i] + '&lt;/li&gt;';\n}\n$mylist.html(top_100_li);</pre>\n<p>Even faster, we should <strong>always wrap many elements</strong> in a single parent node before insertion:</p>\n<pre>var top_100_list = [...], // assume this has 100 unique strings\n\t$mylist = $('#mylist'), // jQuery selects our &lt;ul&gt; element\n\ttop_100_ul = '&lt;ul id=\"#mylist\"&gt;'; // This will store our entire unordered list\n\nfor (var i=0, l=top_100_list.length; i&lt;l; i++)\n{\n\ttop_100_ul += '&lt;li&gt;' + top_100_list[i] + '&lt;/li&gt;';\n}\ntop_100_ul += '&lt;/ul&gt;'; // Close our unordered list\n\n$mylist.replaceWith(top_100_ul);</pre>\n<p>If you do the above and are still concerned about performance:</p>\n<ul>\n<li>Give jQuery’s <code>clone()</code> method a try. This creates a copy of the node tree, which you can manipulate “off-line” and then insert back in when you are ready.</li>\n<li>Use <a href=\"http://www.devguru.com/technologies/xmldom/quickref/obj_documentFragment.html\">DOM DocumentFragments</a>. As the <a href=\"http://ejohn.org/blog/dom-documentfragments/\">creator of jQuery points out</a>, they perform much better than direct DOM manipulation. The idea would be to create what you need (similar to what we did above with a string), and use the jQuery <a href=\"http://docs.jquery.com/Manipulation\">insert or replace methods</a>.</li>\n</ul>\n<h2 id=\"leverage-event-delegation\">7. Leverage Event Delegation (a.k.a. Bubbling)</h2>\n<p>Unless <a href=\"http://docs.jquery.com/Events/jQuery.Event#event.stopPropagation.28.29\">told otherwise</a>, every event (e.g. click, mouseover, etc.) in JavaScript “bubbles” up the DOM tree to parent elements. This is incredibly useful when we want many elements (nodes) to call the same function.  Instead of binding an event listener function to many nodes—very inefficient—you can <strong>bind it once</strong> to their parent, and have it figure out which node triggered the event.  For example, say we are developing a large form with many inputs, and want to toggle a class name when selected.  A binding like this is inefficient:</p>\n<pre>$('#myList li).bind('click', function(){\n\t$(this).addClass('clicked');\n\t// do stuff\n});</pre>\n<p>Instead, we should listen for the click event at the parent level:</p>\n<pre>$('#myList).bind('click', function(e){\n\tvar target = e.target, // e.target grabs the node that triggered the event.\n\t\t$target = $(target);  // wraps the node in a jQuery object\n\tif (target.nodeName === 'LI') {\n\t\t$target.addClass('clicked');\n\t\t// do stuff\n\t}\n});</pre>\n<p>The parent node acts as a dispatcher and can then do work based on what <a href=\"http://docs.jquery.com/Events/jQuery.Event#event.target\">target element</a> triggered the event.  If you find yourself binding one event listener to many elements, you are doing something wrong (and slow).</p>\n<h2 id=\"eliminate-query-waste\">8. Eliminate Query Waste</h2>\n<p>Although jQuery fails nicely if it does not find any matching elements, it still takes  time to look for them. If you have one global JavaScript for your entire site, it may be tempting to throw every one of your jQuery functions into <code>$(document).ready(function(){ // all my glorious code })</code>.  Don&#8217;t you dare.  Only run functions that are applicable to the page. The most efficient way to do this is to use inline initialization functions so your template has full control over when and where JavaScript executes.  For example, in your “article” page template, you would include the following code before the body close:</p>\n<pre>&lt;script type=\"text/javascript&gt;\nmylib.article.init();\n&lt;/script&gt;\n&lt;/body&gt;</pre>\n<p>If your page template includes any variety of modules that may or may not be on the page, or for visual reasons you need them to initialize sooner, you could place the initialization function immediately after the module.</p>\n<pre>&lt;ul id=\"traffic_light\"&gt;\n\t&lt;li&gt;&lt;input type=\"radio\" class=\"on\" name=\"light\" value=\"red\" /&gt; Red&lt;/li&gt;\n\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"yellow\" /&gt; Yellow&lt;/li&gt;\n\t&lt;li&gt;&lt;input type=\"radio\" class=\"off\" name=\"light\" value=\"green\" /&gt; Green&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script type=\"text/javascript&gt;\nmylib.traffic_light.init();\n&lt;/script&gt;</pre>\n<p>Your Global JS library would look something like this:</p>\n<pre>var mylib =\n{\n\tarticle_page :\n\t{\n\t\tinit : function()\n\t\t{\n\t\t\t// Article page specific jQuery functions.\n\t\t}\n\t},\n\ttraffic_light :\n\t{\n\t\tinit : function()\n\t\t{\n\t\t\t// Traffic light specific jQuery functions.\n\t\t}\n\t}\n}</pre>\n<h2 id=\"defer-to-window-load\">9. Defer to <code>$(window).load</code></h2>\n<p>There is a temptation among jQuery developers to hook everything into the <code>$(document).ready</code> pseudo event. After all, it is used in most examples you will find.  Although <code>$(document).ready</code> is incredibly useful, it occurs during page render while objects are still downloading. If you notice your page stalling while loading, all those <code>$(document).ready</code> functions could be the reason why.  You can reduce CPU utilization during the page load by binding your jQuery functions to the <code>$(window).load</code> event, which occurs after all objects called by the HTML (including <code>&lt;iframe&gt;</code> content) have downloaded.</p>\n<pre>$(window).load(function(){\n\t// jQuery functions to initialize after the page has loaded.\n});</pre>\n<p>Superfluous functionality such as drag and drop, binding visual effects and animations, pre-fetching hidden images, etc., are all good candidates for this technique.</p>\n<h2 id=\"compress-your-js\">10. Compress Your JS</h2>\n<p>Okay, this isn&#8217;t jQuery related, but I had to include it. There is a tendency to make JavaScript functions and variables overly descriptive, which is essential for developers but irrelevant to users.  No more excuses, it&#8217;s time to build JS compression into our workflows. Comment the heck out of your code, and run it through a compression tool before launching to production.  Use <a href=\"http://www.julienlecomte.net/yuicompressor/\">YUICompressor</a> to squeeze out wasteful bytes from your code. In our experience, it safely compresses JavaScript as small as it can possibly get without a CPU penalty (such as Base62 encoding with <a href=\"http://dean.edwards.name/packer/\">Packer</a>).  <em>Tip: For maximum compression in YUICompressor, always declare your variables (e.g. var my_long_variable_name;).</em></p>\n<h2 id=\"learn-the-library\">11. Learn the Library</h2>\n<p>Print out this <a href=\"http://acodingfool.typepad.com/blog/jquery-13-cheat-sheet.html\">jQuery 1.3 cheat sheet</a>, and make it a goal to eventually understand what each function does. If you find yourself repeating yourself repeating, there is probably an easier (and more efficient) way.  <a href=\"http://www.artzstudio.com/files/jquery-rules/jquery_1.3_cheatsheet_v1.pdf\"><img src=\"http://www.artzstudio.com/files/jquery-rules/jquery_13_cheatsheet_thumb.jpg\" alt=\"jquery cheat sheet\" width=\"336\" height=\"212\" /></a></p>\n</div>","tags":"javascript,jQuery,Performance","isStarred":"true","note":"","dateCreated":"Thu Feb 12 2015 11:27:10 GMT+0530 (India Standard Time)","dateModified":"Thu Feb 12 2015 11:27:10 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"R94YzmtEW7WA6cj1"}
{"id":"RPB66AgdWgjM1H2F","category":"patterns","categoryId":"58","title":"Pub/Sub JavaScript Object","refSite":"http://davidwalsh.name/pubsub-javascript","codes":[{"code":"<form name=\"checkbox-test\" action=\"/echo/html/\" method=\"post\">\n    <h1>Add Some Data</h1>\n    \n    <p>\n        <input type=\"text\" id=\"first\" />\n        <label for=\"first\">First Name</label>\n        \n    </p>\n    <p>\n        <input type=\"text\" id=\"last\" />\n        <label for=\"last\">Last Name</label>\n        \n    </p>\n    <p>\n        <input type=\"text\" id=\"team\" />\n        <label for=\"team\">Favorite Team</label>\n        \n    </p>\n    <p>\n        <button id=\"add\">Add</button>\n    </p>\n\n    <h1>Added Results</h1>\n\n    <div class=\"results-panel\">\n        <h2>Usernames</h2>\n        <div class=\"names\"></div>\n        <h2>Team Names</h2>\n        <div class=\"teams\"></div>\n        <h2>All Data</h2>\n        <div class=\"all\"></div>\n    </div>\n\n</form>","codeLanguage":"html"},{"code":"//------------------------------\n// pub sub plugin\n//------------------------------\n;(function(d){\n    var cache = {};\n\n    d.publish = function(/* String */topic, /* Array? */args){\n        try{\n            d.each(cache[topic], function(){\n                this.apply(d, args || []);\n            });\n        } catch (err) {\n            // handle this error\n            console.log(err);\n        }\n    };\n\n    d.subscribe = function(/* String */topic, /* Function */callback){\n        if(!cache[topic]){\n            cache[topic] = [];\n        }\n        cache[topic].push(callback);\n        return [topic, callback]; // Array\n    };\n\n    d.unsubscribe = function(/* Array */handle){\n        var t = handle[0];\n        cache[t] && d.each(cache[t], function(idx){\n            if(this == handle[1]){\n                cache[t].splice(idx, 1);\n            }\n        });\n    };\n\n})(jQuery);\n\n\n\n//------------------------------\n// page controller\n//------------------------------\n\n// Initialize the panels\nvar userPanel = new UpdatePanel('update/user', function(first, last){\n        $('.results-panel .names').append(first + ' ' + last + '<br />');   \n    }),\n    teamPanel = new UpdatePanel('update.team', function(team){\n        $('.results-panel .teams').append(team + '<br />');  \n    });\n    allPanel = new UpdatePanel('update.all', function(first, last, team){\n        $('.results-panel .all').append(first + ' ' + last + ', ' + team + '<br />');  \n    });\n\n\n// Bind to the click event\n$('#add').click(function(){\n\n    // Get the values from the form\n    var first = $('#first').val(),\n        last = $('#last').val(),\n        team = $('#team').val();\n\n    // Publish the new data\n    $.publish('update.user', [first,last]);\n    $.publish('update.team', [team]);\n    $.publish('update.all', [first,last,team]);\n    \n    return false;\n});\n\n\n// subscription method\nfunction UpdatePanel(event, htmlAction){\n    \n    var _subscribe = function(event){\n        $.subscribe(event, htmlAction);\n    }\n    \n    if (event !== undefined){\n        _subscribe(event);\n    }    \n}","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"}],"description":"<p>There are three keys to effective AJAX-driven websites: &nbsp;<a href=\"http://davidwalsh.name/event-delegate\">event delegation</a>, <a href=\"http://davidwalsh.name/mootools-history\">History management</a>,\n and effective app-wide communication with pub/sub. &nbsp;This blog \nemploys&nbsp;of all of these techniques, and I thought I'd share the simplest\n of them: &nbsp;a tiny pub/sub module I use on this site.</p>\n<p>If you've not used pub/sub before, the&nbsp;gist is that you publish to a \ntopic and anyone can subscribe, much like the way a radio works: a&nbsp;radio\n station broadcasts (publishes) and anyone can listen (subscribes). \n&nbsp;This is excellent for highly modular web applications; it's a license \nto&nbsp;globally communicate without attaching to any specific object.</p>\n\n<h2>The JavaScript</h2>\n\n<p>The module itself is super tiny&nbsp;but massively useful:</p>\n<pre prism=\"1\" class=\" language-js\"><span class=\"token keyword\">var</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> hOP <span class=\"token operator\">=</span> topics<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    subscribe<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Create the topic's object if not yet created\n</span>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hOP<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Add the listener to queue\n</span>      <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Provide handle back for removal of topic\n</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        remove<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">delete</span> topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    publish<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// If the topic doesn't exist, or there's no listeners in queue, just leave\n</span>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hOP<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">,</span> topic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Cycle through topics queue, fire!\n</span>      topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      \t\t<span class=\"token function\">item</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">!</span><span class=\"token operator\">=</span> undefined <span class=\"token operator\">?</span> info <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>Publishing to a topic:</p>\n<pre prism=\"1\" class=\" language-js\">events<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page/load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\turl<span class=\"token punctuation\">:</span> <span class=\"token string\">'/some/url/path'</span> <span class=\"token comment\" spellcheck=\"true\">// any argument\n</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>...and subscribing to said topic in order to be notified of events:</p>\n<pre prism=\"1\" class=\" language-js\"><span class=\"token keyword\">var</span> subscription <span class=\"token operator\">=</span> events<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/page/load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Do something now that the event has occurred\n</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ...sometime later where I no longer want subscription...\n</span>subscription<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>I use pub/sub religiously on this website and this object has done me\n a world of good. &nbsp;I have one topic that fires upon each AJAX page load,\n and several subscriptions fire during that event (ad re-rendering, \ncomment re-rendering, social button population, etc.). &nbsp;Evaluate your \napplication and see where you might be able to use pub/sub!</p>","tags":"javascript,Pattern,Observer Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 19:17:17 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424785964312},"mode":"add","comments":[],"images":[],"_id":"RPB66AgdWgjM1H2F"}
{"id":"0","category":"node.js","categoryId":"31","title":"Node.js Best Practices","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>We get asked about Node.js best practices, tips all the time - so \nthis post intends to clean things up, and summarizes the basics of how \nwe write Node.js at <a href=\"http://risingstack.com/\">RisingStack</a>.</p>\n\n<p>Some of these Node.js best practices fall under the category of <em>Coding style</em>, some deals with <em>Developer workflow</em>.</p>\n\n<h3>Coding style</h3>\n\n<h4>Callback convention</h4>\n\n<p>Modules should expose an error-first callback interface. </p>\n\n<p>It should be like this:</p>\n\n<pre><code>module<span>.</span>exports <span>=</span> <span>function</span> <span>(</span>dragonName<span>,</span> callback<span>)</span> <span>{</span>  \n <span spellcheck=\"true\"> // do some stuff here\n</span>  <span>var</span> dragon <span>=</span> <span>createDragon<span>(</span></span>dragonName<span>)</span><span>;</span>\n\n <span spellcheck=\"true\"> // note, that the first parameter is the error\n</span> <span spellcheck=\"true\"> // which is null here\n</span> <span spellcheck=\"true\"> // but if an error occurs, then a new Error\n</span> <span spellcheck=\"true\"> // should be passed here\n</span>  <span>return</span> <span>callback<span>(</span></span><span>null</span><span>,</span> dragon<span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n\n<h4>Always check for errors in callbacks</h4>\n\n<p>To better understand why this is a must, first start with an example that is <strong>broken</strong> in every possible way, then fix it.</p>\n\n<pre><code><span spellcheck=\"true\">// this example is **BROKEN**, we will fix it soon :)\n</span><span>var</span> fs <span>=</span> <span>require<span>(</span></span><span>'fs'</span><span>)</span><span>;</span>\n\n<span>function</span> <span>readJSON<span>(</span></span>filePath<span>,</span> callback<span>)</span> <span>{</span>  \n  fs<span>.</span><span>readFile<span>(</span></span>filePath<span>,</span> <span>function</span><span>(</span>err<span>,</span> data<span>)</span> <span>{</span>  \n    <span>callback<span>(</span></span>JSON<span>.</span><span>parse<span>(</span></span>data<span>)</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>readJSON<span>(</span></span><span>'./package.json'</span><span>,</span> <span>function</span> <span>(</span>err<span>,</span> pkg<span>)</span> <span>{</span> <span>.</span><span>.</span><span>.</span> <span>}</span>\n</code></pre>\n\n<p>The very first problem with this <code>readJSON</code> function, is that it never checks, if an <code>Error</code> happened during the execution. You should always check for them.</p>\n\n<p>The improved version:</p>\n\n<pre><code><span spellcheck=\"true\">// this example is **STILL BROKEN**, we are fixing it!\n</span><span>function</span> <span>readJSON<span>(</span></span>filePath<span>,</span> callback<span>)</span> <span>{</span>  \n  fs<span>.</span><span>readFile<span>(</span></span>filePath<span>,</span> <span>function</span><span>(</span>err<span>,</span> data<span>)</span> <span>{</span>\n   <span spellcheck=\"true\"> // here we check, if an error happened\n</span>    <span>if</span> <span>(</span>err<span>)</span> <span>{</span>\n     <span spellcheck=\"true\"> // yep, pass the error to the callback\n</span>     <span spellcheck=\"true\"> // remember: error-first callbacks\n</span>      <span>callback<span>(</span></span>err<span>)</span><span>;</span>\n    <span>}</span>\n\n   <span spellcheck=\"true\"> // no error, pass a null and the JSON\n</span>    <span>callback<span>(</span></span><span>null</span><span>,</span> JSON<span>.</span><span>parse<span>(</span></span>data<span>)</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n\n<h4>Return on callbacks</h4>\n\n<p>One of the problems that still exists in the above example, is that if an <code>Error</code> occurs, then the execution will not stop in the <code>if</code> statement, but will continue. This can lead to lots of unexpected things. As of a rule of thumb, always return on callbacks.</p>\n\n<pre><code><span spellcheck=\"true\">// this example is **STILL BROKEN**, we are fixing it!\n</span><span>function</span> <span>readJSON<span>(</span></span>filePath<span>,</span> callback<span>)</span> <span>{</span>  \n  fs<span>.</span><span>readFile<span>(</span></span>filePath<span>,</span> <span>function</span><span>(</span>err<span>,</span> data<span>)</span> <span>{</span>\n    <span>if</span> <span>(</span>err<span>)</span> <span>{</span>\n      <span>return</span> <span>callback<span>(</span></span>err<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>return</span> <span>callback<span>(</span></span><span>null</span><span>,</span> JSON<span>.</span><span>parse<span>(</span></span>data<span>)</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n\n<h4>Use try-catch in sync code only</h4>\n\n<p>Almost there! One more thing we have to take care of is the <code>JSON.parse</code>. <code>JSON.parse</code> can throw an exception, if it cannot parse the input string to a valid <code>JSON</code> format.</p>\n\n<p>As <code>JSON.parse</code> will happen synchronously, we can surround it with a <code>try-catch</code> block. <strong>Please note, that you can only do this with synchronous codeblocks, but it won't work for callbacks!</strong></p>\n\n<pre><code><span spellcheck=\"true\">// this example **WORKS**! :)\n</span><span>function</span> <span>readJSON<span>(</span></span>filePath<span>,</span> callback<span>)</span> <span>{</span>  \n  fs<span>.</span><span>readFile<span>(</span></span>filePath<span>,</span> <span>function</span><span>(</span>err<span>,</span> data<span>)</span> <span>{</span>\n    <span>var</span> parsedJson<span>;</span>\n\n   <span spellcheck=\"true\"> // Handle error\n</span>    <span>if</span> <span>(</span>err<span>)</span> <span>{</span>\n       <span>return</span> <span>callback<span>(</span></span>err<span>)</span><span>;</span>\n    <span>}</span>\n\n   <span spellcheck=\"true\"> // Parse JSON\n</span>    <span>try</span> <span>{</span>\n      parsedJson <span>=</span> JSON<span>.</span><span>parse<span>(</span></span>data<span>)</span><span>;</span>\n    <span>}</span> <span>catch</span> <span>(</span><span>exception</span><span>)</span> <span>{</span>\n      <span>return</span> <span>callback<span>(</span></span>exception<span>)</span><span>;</span>\n    <span>}</span>\n\n   <span spellcheck=\"true\"> // Everything is ok\n</span>    <span>return</span> <span>callback<span>(</span></span><span>null</span><span>,</span> parsedJson<span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre>\n\n<h4>Try to avoid <code>this</code> and <code>new</code></h4>\n\n<p>Binding to a specific context in Node is not a win, because Node \ninvolves passing around lots of callbacks, and heavy use of higher-level\n functions to manage control flow. Using a functional style will save \nyou a lot of trouble. <br>\nOf course, there are some cases, when prototypes can be more efficient, but if possible, try to avoid them.</p>\n\n<h4>Create small modules</h4>\n\n<p>Do it the unix-way:</p>\n\n<blockquote>\n  <p>Developers should build a program out of simple parts connected by \nwell defined interfaces, so problems are local, and parts of the program\n can be replaced in future versions to support new features.</p>\n</blockquote>\n\n<p>Do not build <em>Deathstars</em> - keep it simple, a module should do one thing, but that thing well.</p>\n\n<h4>Use good async patterns</h4>\n\n<p>Use <a href=\"https://github.com/caolan/async\">async</a>.</p>\n\n<h4>Error handling</h4>\n\n<p>Errors can be divided into two main parts: <strong>operational errors</strong> and <strong>programmer errors</strong>. </p>\n\n<h5>Operational errors</h5>\n\n<p>Operational errors can happen in well-written applications as well, \nbecause they are not bugs, but problems with the system / a remote \nservice, like:</p>\n\n<ul>\n<li>request timeout</li>\n<li>system is out of memory</li>\n<li>failed to connect to a remote service</li>\n</ul>\n\n<h5>Handling operational errors</h5>\n\n<p>Depending on the type of the operational error, you can do the followings:</p>\n\n<ul>\n<li>Try to solve the error - if a file is missing, you may need to create one first</li>\n<li>Retry the operation, when dealing with network communication</li>\n<li>Tell the client, that something is not ok - can be used, when handling user inputs</li>\n<li>Crash the process, when the error condition is unlikely to change on\n its own, like the application cannot read its configuration file</li>\n</ul>\n\n<p>Also, it is true for all the above: <strong>log everything</strong>.</p>\n\n<h5>Programmer errors</h5>\n\n<p>Programmer errors are bugs. This is the thing you can avoid, like:</p>\n\n<ul>\n<li>called an async function without a callback</li>\n<li>cannot read property of <code>undefined</code></li>\n</ul>\n\n<h5>Handling programmer errors</h5>\n\n<p>Crash immediately - as these errors are bugs, you won't know in which\n state your application is. A process control system should restart the \napplication when it happens, like: <a href=\"http://supervisord.org/\">supervisord</a> or <a href=\"http://mmonit.com/monit/\">monit</a>. </p>\n\n<h3>Workflow tips</h3>\n\n<h4>Start a new project with <code>npm init</code></h4>\n\n<p>The <code>init</code> command helps you create the application's <code>package.json</code> file. It sets some defaults, which can be later modified.</p>\n\n<p>Start writing your fancy new application should begin with:</p>\n\n<pre><code>mkdir my-awesome-new-project  \ncd my-awesome-new-project  \nnpm init  \n</code></pre>\n\n<h4>Specify a start and test script</h4>\n\n<p>In your <code>package.json</code> file you can set scripts under the <code>scripts</code> section. By default, <code>npm init</code> generates two, <code>start</code> and <code>test</code>. These can be run with <code>npm start</code> and <code>npm test</code>. </p>\n\n<p>Also, as a bonus point: you can define custom scripts here and can be invoked with <code>npm run-script &lt;SCRIPT_NAME&gt;</code>. </p>\n\n<p>Note, that NPM will set up <code>$PATH</code> to look in <code>node_modules/.bin</code> for executables. This helps avoid global installs of NPM modules.</p>\n\n<h4>Environment variables</h4>\n\n<p>Production/staging deployments should be done with environment variables. The most common way to do this is to set the <code>NODE_ENV</code> variable to either <code>production</code> or <code>staging</code>.</p>\n\n<p>Depending on your environment variable, you can load your configuration, with modules like <a href=\"https://github.com/flatiron/nconf\">nconf</a>.</p>\n\n<p>Of course, you can use other environment variables in your Node.js applications with <code>process.env</code>, which is an object that contains the user environment.</p>\n\n<h4>Do not reinvent the wheel</h4>\n\n<p>Always look for existing solutions first. NPM has a crazy amount of \npackages, there is a pretty good chance you will find the functionality \nthat you are looking for.</p>\n\n<h4>Use a style guide</h4>\n\n<p>It is much easier to understand a large codebase, when all the code \nis written in a consistent style. It should include indent rules, \nvariable naming conventions, best practices and lots of other things.</p>\n\n<p>For a real example, check out <a href=\"http://risingstack.com/\">RisingStack</a>'s <a href=\"https://github.com/RisingStack/node-style-guide\">Node.js style guide</a>.</p>\n\n<h3>Next up</h3>\n\n<p>I hope this post will help you succeed with Node.js, and saves you some headaches.</p>\n\n<p>This post will continue with another one dealing with operational tips and best practices.</p>\n\n<p>You can read about deployment tips here: <a href=\"http://blog.risingstack.com/continuous-deployment-of-node-js-applications/\">Continuous Deployment of Node.js Applications</a>.</p>\n\n<p><em>Update 1: just published <a href=\"http://blog.risingstack.com/node-js-security-tips/\">Node.js Security Tips</a>.</em></p>","tags":"node.js,Practice","isStarred":"false","note":"","dateCreated":"Fri Feb 20 2015 13:00:29 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 20 2015 13:00:29 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"RhwL4aHPP98yUb9Q"}
{"id":"0","category":"scss","categoryId":"57","title":"Choosing great variable names","refSite":"http://thesassway.com/beginner/variable-naming","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Variables in Sass are a powerful way to define values in one place that can be reused in\nmultiple places in your project. They allow you to make changes from a central point\nwithout needing to use find and replace across multiple files and directories.</p>\n\n<p>But choosing good names can be hard!</p>\n\n<p>If you're not careful, it's very easy for variable names to spiral out of control. Before\nyou know it the benefit is lost because variable names are hard to recall and end up\ncausing more frustration than benefit.</p>\n\n<p>However, by following some simple guidelines you can maintain control… and your sanity!</p>\n\n<h2>Use semantic variable names</h2>\n\n<p>Imagine for a moment that you client's primary brand color is red and you called that\nvariable <code>$red</code>. Six months go by and the marketing department decides to re-brand the company\nand the primary brand color is now blue.</p>\n\n<p>Changing the value of <code>$red</code> is easy enough, but the variable has no description of its\nintended purpose.</p>\n\n<p>Instead of describing what a variable looks like in the name, describe its function or\npurpose. In other words, try to choose semantic names for your variables.</p>\n\n<div>\n<pre><span>// Bad</span>\n<span>$red</span><span>:</span> <span>red</span><span>;</span>\n<span>$yellow</span><span>:</span> <span>yellow</span><span>;</span>\n\n<span>// Better</span>\n<span>$brand-color</span><span>:</span> <span>red</span><span>;</span>\n<span>$accent-color</span><span>:</span> <span>yellow</span><span>;</span>\n</pre>\n</div>\n\n\n<h2>Adopt useful conventions</h2>\n\n<p>It's important to come up with some good conventions for naming your variables so that they\nare easy to remember.</p>\n\n<p>For example, you can postfix color names with <code>-color</code>:</p>\n\n<div>\n<pre><span>// Base colors</span>\n<span>$base-color</span><span>:</span> <span>#333</span><span>;</span>\n<span>$brand-color</span><span>:</span> <span>red</span><span>;</span>\n<span>$brand-80-color</span><span>:</span> <span>rgba</span><span>(</span><span>$color-brand</span><span>,</span> <span>0</span><span>.8</span><span>);</span>\n<span>$accent-color</span><span>:</span> <span>yellow</span><span>;</span>\n</pre>\n</div>\n\n\n<p>Or, add a prefix like <code>header-</code> or <code>footer-</code> for specific sections:</p>\n\n<div>\n<pre><span>// Header</span>\n<span>$header-height</span><span>:</span> <span>100</span><span>px</span><span>;</span>\n<span>$header-background-color</span><span>:</span> <span>$color-brand</span><span>;</span>\n\n<span>// Footer</span>\n<span>$footer-height</span><span>:</span> <span>200</span><span>px</span><span>;</span>\n<span>$footer-background-color</span><span>:</span> <span>#aaa</span><span>;</span>\n</pre>\n</div>\n\n\n<h2>Keep a centralized config</h2>\n\n<p>I like to keep all my variables in a single file, called <code>_config.scss</code>, that I include in\nmy primary stylesheet using the <code>@import</code> directive. This way, every other file that gets\nincluded after my config file will have access to those variables.</p>\n\n<div>\n<pre><span>@import</span> <span>base</span><span>/</span><span>config</span><span>;</span>\n<span>@import</span> <span>base</span><span>/</span><span>typography</span><span>;</span>\n<span>@import</span> <span>base</span><span>/</span><span>utilities</span><span>;</span>\n\n<span>@import</span> <span>modules</span><span>/</span><span>button</span><span>;</span>\n</pre>\n</div>\n\n\n<h2>Conclusion</h2>\n\n<p>There are probably a lot of opinions on how to name things in Sass, but what's really important\nis that you find conventions that work for you and your team. Choosing good variable names will\nmake it much easier to maintain your project's stylesheets.</p>","tags":"SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:00:26 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:00:26 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"SX2F2AexI115BtNm"}
{"id":"TVygaWZVLD84bLC4","category":"css","categoryId":"29","title":"The Ultimate Flexbox Cheat Sheet","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<style>\n\tul.resources, ul.toc {\n    list-style-type: circle;\n}\nul.resources > li, ul.toc > li {\n    margin: 1em 0;\n}\n.flexcontainer {\n    background-color: #dce7f2;\n    border: 1px solid #2a4f73;\n    display: flex;\n    flex-direction: row;\n    max-height: 450px;\n    min-height: 300px;\n}\n.flexcontainer > div {\n    background-color: #e46119;\n    border: 1px solid #626262;\n    height: 100px;\n    margin: 3px;\n    width: 100px;\n}\n.flexcontainer.column {\n    flex-direction: column;\n}\n.flexcontainer.column.top {\n    align-items: flex-start;\n    height: 500px;\n    max-height: 500px;\n}\n.flexcontainer.row.top {\n    align-items: flex-start;\n}\n.flexcontainer.row.left {\n    justify-content: flex-start;\n}\n.flexcontainer.column.left {\n    align-items: flex-start;\n}\n.flexcontainer.row.right {\n    justify-content: flex-end;\n}\n.flexcontainer.column.right {\n    align-items: flex-end;\n}\n.flexcontainer.row.center, .flexcontainer.column.center {\n    align-items: center;\n    justify-content: center;\n}\n.flexcontainer.growshrink {\n    align-items: center;\n}\n.flexcontainer.growshrink .bigitem {\n    flex: 2 0 0px;\n}\n.flexcontainer.growshrink .smallitem {\n    flex: 1 0 0px;\n}\n.flexcontainer.wrap.row {\n    align-content: flex-end;\n    align-items: center;\n    flex-flow: row wrap;\n    justify-content: center;\n}\n.flexcontainer.wrap.column {\n    align-content: stretch;\n    align-items: center;\n    flex-flow: column wrap;\n    justify-content: center;\n}\n.flexcontainer.wrap.column.nospace {\n    align-content: center;\n    align-items: center;\n    justify-content: center;\n}\n.flexcontainer.column.pin {\n    align-items: center;\n}\n.flexcontainer.column.pin .left {\n    align-self: flex-start;\n}\n.flexcontainer.column.pin .right {\n    margin-left: auto;\n}\n</style>\n\n<p class=\"summary\">\n\tBefore you dive right into the cheat sheet, <a class=\"cta\" href=\"/flexbox-tutorial\">brush up on the fundamentals.</a>\n</p>\n\n\n<p class=\"cta\">Note: If any of the examples are not working you will need to upgrade your browser.</p>\n\n\n\n<h3><a name=\"create\">Create a flex container</a></h3>\n\n\n\n<p>\n\tThe first step in any flexbox layout is to create a flex container. To do that, set the <span class=\"keyword\">display</span> property to <span class=\"keyword\">flex</span>. In Safari, you will still have to use the <span class=\"keyword\">-webkit</span> prefix.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n}</code></pre>\n\n\n\n<h3><a name=\"row\">Put flex items into a row</a></h3>\n\n\n\n<p>\n\tFlex items are the children of a flex container. They are positioned along a main axis and a cross axis. The main axis is horizontal by default, so the items flow into a row. You can flip the main axis by setting <span class=\"keyword\">flex-direction</span> to <span class=\"keyword\">column</span>, it's set to <span class=\"keyword\">row</span> by default.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t/*On the flex container*/\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: row;\n\tflex-direction: row;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"column\">Put flex items into a column</a></h3>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: column;\n\tflex-direction: column;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer column\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"top\">Move flex items to the top</a></h3>\n\n\n\n<p>\n\tHow you move flex items to the top depends on the orientation of the main axis. If it's vertical, you set <span class=\"keyword\">align-items</span>. If it's horizontal, you set <span class=\"keyword\">justify-content</span>.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\t-webkit-flex-direction: column;\n\tflex-direction: column;\n\t-webkit-justify-content: flex-start;\njustify-content: flex-start;</code></pre>\n\n\n\n<div class=\"flexcontainer column top\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: row;\n\tflex-direction: row;\n\t-webkit-align-items: flex-start;\n\talign-items: flex-start;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer row top\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"left\">Move flex items to the left</a></h3>\n\n\n\n<p>\n\tMoving items to the left or right also depends on the orientation of the main axis. If <span class=\"keyword\">flex-direction</span> is set to <span class=\"keyword\">row</span>, then you set <span class=\"keyword\">justify-content</span>, otherwise if it's set to <span class=\"keyword\">column</span> you set <span class=\"keyword\">align-items</span>\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: row;\n\tflex-direction: row;\n\t-webkit-justify-content: flex-start;\n\tjustify-content: flex-start;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer row left\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: column;\n\tflex-direction: column;\n\t-webkit-align-items: flex-start;\n\talign-items: flex-start;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer column left\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"right\">Move flex items to the right</a></h3>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: row;\n\tflex-direction: row;\n\t-webkit-justify-content: flex-end;\n\tjustify-content: flex-end;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer row right\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: column;\n\tflex-direction: column;\n\t-webkit-align-items: flex-end;\n\talign-items: flex-end;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer column right\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"center\">Center everything</a></h3>\n\n\n\n<p>\n\tVertical and horizontal centering within a flexcontainer is trivial. Just set <span class=\"keyword\">justify-content</span> and/or <span class=\"keyword\">align-items</span> to center. Again, it depends on the orientation of the main axis, so whether <span class=\"keyword\">flex-direction</span> is set to <span class=\"keyword\">row</span> or <span class=\"keyword\">column</span>.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-flex-direction: row /* works with row or column */\n\tflex-direction: row;\n\t-webkit-align-items: center;\n\talign-items: center;\n\t-webkit-justify-content: center;\n\tjustify-content: center;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer row center\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<div class=\"flexcontainer column center\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"grow\">Grow a flex item X times as big as other flex items</a></h3>\n\n\n\n<p>\n\tYou can define how an individual flex item grows and shrinks relative to other flex items in the container. To do this set the <span class=\"keyword\">flex</span> property on each flex item you want to grow or shrink.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.bigitem {\n\t/* This will be twice as big as the small item. */\n\t-webkit-flex: 2 0 0;\n\tflex: 2 0 0;\n\t}\n\t.smallitem {\n\t-webkit-flex: 1 0 0;\n\tflex: 1 0 0;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer growshrink\">\n\t<div class=\"bigitem\"></div>\n\n\n\n\t<div class=\"smallitem\"></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"wraprow\">Wrap flex items into multiple rows</a></h3>\n\n\n\n<p>\n\tAt the moment browser support for wrapping flex items is limited to webkit browsers and IE11. Firefox does not support wrapping yet. (Bad Firefox, BAD!)\n</p>\n\n\n\n<pre><code class=\"css\">\n\t/* On the flex container */\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-align-items: center;\n\talign-items: center;\n\t-webkit-justify-content: center;\n\tjustify-content: center;\n\t/* You can set flex-wrap and flex-direction individually */\n\t-webkit-flex-direction: row;\n\tflex-direction: row;\n\t-webkit-flex-wrap: wrap;\n\tflex-wrap: wrap;\n\t/* Or do it all in one line with flex flow */\n\t-webkit-flex-flow: row wrap;\n\tflex-flow: row wrap;\n\t/* tweak the where items line up on the row */\n\t/* valid values are: flex-start, flex-end, space-between, space-around, stretch */\n\t-webkit-align-content: flex-end;\n\talign-content: flex-end;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer wrap row\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"wrapcolumn\">Wrap flex items into multiple columns</a></h3>\n\n\n\n<pre><code class=\"css\">\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-align-items: center;\n\talign-items: center;\n\t-webkit-justify-content: center;\n\tjustify-content: center;\n\t-webkit-flex-flow: column wrap;\n\tflex-flow: column wrap;\n\t-webkit-align-content: stretch;\n\talign-content: stretch;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer wrap column\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"nospace\">Remove the space from wrapped rows or columns</a></h3>\n\n\n\n<p>\n\tThe <span class=\"keyword\">align-content</span> property gives you options for distributing the space around wrapped rows or columns. The options are <span class=\"keyword\">flex-start, flex-end, space-between, space-around</span> and <span class=\"keyword\">stretch</span>. To simply remove the space around wrapped columns, set <span class=\"keyword\">align-content</span> to <span class=\"keyword\">center</span>.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t.flexcontainer {\n\tdisplay: -webkit-flex;\n\tdisplay: flex;\n\t-webkit-align-items: center;\n\talign-items: center;\n\t-webkit-justify-content: center;\n\tjustify-content: center;\n\t-webkit-flex-flow: column wrap;\n\tflex-flow: column wrap;\n\t-webkit-align-content: center;\n\talign-content: center;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer wrap column nospace\">\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h3><a name=\"pin\">Pin an element to one side of the flex container</a></h3>\n\n\n\n<p>\n\tYou can control the <span class=\"keyword\">align-items</span> value for individual elements with <span class=\"keyword\">align-self</span>. You can also use <span class=\"keyword\">margins</span> to move individual elements up or down or left of right. e.g. on a column layout you can move an individual flex item all the way to the left of the container by setting <span class=\"keyword\">margin-right: auto</span>.\n</p>\n\n\n\n<pre><code class=\"css\">\n\t/* On the flex item to pin */\n\t.left {\n\t-webkit-align-self: flex-start;\n\talign-self: flex-start;\n\t}\n\t.right {\n\tmargin-left: auto;\n}</code></pre>\n\n\n\n<div class=\"flexcontainer pin column\">\n\t<div></div>\n\n\n\n\t<div class=\"left\"></div>\n\n\n\n\t<div class=\"right\"></div>\n\n\n\n\t<div></div>\n\n\n\n</div>\n\n\n\n<h2><a name=\"other\">Other flexbox resources</a></h2>\n\n\n\n<ul class=\"resources\">\n\n\n\n\t<li><a href=\"/flexbox-tutorial\">A free class on flexbox (based on this cheat sheet)</a></li>\n\n\n\n\t<li><a href=\"http://dev.w3.org/csswg/css-flexbox/\">The latest spec</a></li>\n\n\n\n\t<li><a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks guide to flexbox</a></li>\n\n\n\n\t<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">Mozilla guide to flexbox</a></li>\n\n\n\n\t<li><a href=\"http://coding.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/\">Smashing Magazine tutorial</a></li>\n\n\n\n</ul>","tags":"css3,Flexbox","isStarred":"false","note":"","dateCreated":"Tue Feb 10 2015 17:06:03 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423569000145},"mode":"add","comments":[],"images":[],"_id":"TVygaWZVLD84bLC4"}
{"id":"0","category":"javascript","categoryId":"30","title":"Using the HTML5 History API","refSite":"https://css-tricks.com/using-the-html5-history-api/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>The HTML5 History API gives developers the ability to modify a \nwebsite's URL without a full page refresh. This is particularly useful \nfor loading portions of a page with JavaScript, such that the content is\n significantly different and warrants a new URL. </p>\n<p>Here's an example. Let's say a person navigates from the homepage of a\n site to the Help page. We're loading the content of that Help page with\n Ajax. That user then heads off to the Products page which we again load\n and swap out content with Ajax. Then they want to share the URL. With \nthe History API, we could have been changing the URL of the page right \nalong with the user as they navigate, so the URL they see (and thus \nshare or save) is relevant and correct.</p>\n<p><span></span></p>\n<h3>The Basics</h3>\n<p>To check out the features of this API it's as simple as heading into the Developer Tools and typing <code>history</code> into the console. If the API is supported in your browser of choice then we'll find a host of methods attached to this object:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2015/03/history.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/history_27_3_2015.png\"><figcaption>These are the methods available to us to manipulate the browser's history.</figcaption></figure>\n<p>We're interested in the <code>pushState</code> and <code>replaceState</code>\n methods in this tutorial. Returning to the console, we can experiment a\n little with the methods and see what happens to the URL when we use \nthem. We'll cover the other parameters in this function later, but for \nnow all we need to use is the final parameter:</p>\n<pre rel=\"JavaScript\"><code>history<span>.</span><span>replaceState<span>(</span></span><span>null</span><span>,</span> <span>null</span><span>,</span> <span>'hello'</span><span>)</span><span>;</span></code></pre>\n<p>The <code>replaceState</code> method above switches out the URL in \nthe address bar with '/hello' despite no assets being requested and the \nwindow remaining on the same page. Yet there is a problem here. Upon \nhitting the back button we'll find that we don't return to the URL of \nthis article but instead we'll go <em>back</em> to whatever page we were on before. This is because <code>replaceState</code> does not manipulate the browser's history, it simply replaces the current URL in the address bar.</p>\n<p>To fix this we'll need to use the <code>pushState</code> method instead:</p>\n<pre rel=\"JavaScript\"><code>history<span>.</span><span>pushState<span>(</span></span><span>null</span><span>,</span> <span>null</span><span>,</span> <span>'hello'</span><span>)</span><span>;</span></code></pre>\n<p>Now if we click on the back button we should find it working as we'd like it to, since <code>pushState</code>\n has changed our history to include whatever URL we just passed into it.\n This is interesting, but what happens if we try something a little \ndevious and pretend that the current URL wasn't css-tricks.com at all, \nbut another website entirely?</p>\n<pre rel=\"JavaScript\"><code>history<span>.</span><span>pushState<span>(</span></span><span>null</span><span>,</span> <span>null</span><span>,</span> <span>'https://twitter.com/hello'</span><span>)</span><span>;</span></code></pre>\n<p>This will throw an exception because the URL has to be of the <strong>same origin</strong>\n as the current one, otherwise we might risk major security flaws and \ngive developers the ability to fool people into believing they were on a\n different website altogether.</p>\n<p>Returning to those other parameters that are passed into this method, we can summarise them like this:</p>\n<pre rel=\"JavaScript\"><code>history<span>.</span><span>pushState<span>(</span></span><span>[</span>data<span>]</span><span>,</span> <span>[</span>title<span>]</span><span>,</span> <span>[</span>url<span>]</span><span>)</span><span>;</span></code></pre>\n<ol>\n<li>The first parameter is the data we'll need if the state of the web \npage changes, for instance whenever someone presses the back or forwards\n button in their browser. Note that in Firefox this data is limited to \n640k characters.</li>\n<li><code>title</code> is the second parameter which can be a string, but at the time of writing, every browser simply ignores it.</li>\n<li>This final parameter is the URL we want to appear in the address bar.</li>\n</ol>\n<h3>A Quick History</h3>\n<p>The most significant thing with these history API's is that they \ndon't reload the page. In the past, the only way to change the URL was \nto change the <code>window.location</code> which always reloaded the page. Except, if all you changed was the <code>hash</code> (like how clicking a <code>&lt;a href=\"#target\"&gt;link&lt;/a&gt;</code> doesn't reload the page).</p>\n<p>This lead to the <a href=\"http://stackoverflow.com/a/3951093\">old hashbang method</a>\n of changing the URL without a full page refresh. Famously, Twitter used\n to do things this way and was largely criticized for it (a hash not \nbeing a \"real\" resource location).</p>\n<p>Twitter moved aways from that, and was one of the early proponents of this API. In 2012 <a href=\"https://blog.twitter.com/2012/implementing-pushstate-for-twittercom\">the team described their new approach</a>.\n Here they outline some of their problems when working at this kind of \nscale whilst also detailing how various browsers implement this \nspecification.</p>\n<h3>An example using pushState and Ajax</h3>\n<p>Let's build <a href=\"https://css-tricks.com/examples/State/\">a demo!</a></p>\n<p>In our imaginary interface we want the users of our website to find \ninformation about a character from Ghostbusters. When they select an \nimage we need the text about that character to appear underneath and we \nalso want to add a current class to each image so that it's clear who's \nbeen selected. Then when we click the back button the current class will\n jump to the previously selected character (and vice-versa for the \nforwards button) and of course we'll need the content beneath to switch \nback again, too.</p>\n<p>Here's <a href=\"https://css-tricks.com/examples/State/\">a working example</a> that we can dissect:</p>\n<figure><a href=\"https://css-tricks.com/examples/State/\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2015/03/who-you-gonna-call.gif\" alt=\"An example project showing how we might use the History API\" data-src=\"../database/uploads/images/article_images/who-you-gonna-call_27_3_2015.gif\"></a></figure>\n<p>The markup for this example is simple enough: we have a <code>.gallery</code>\n which contains some links and within each of them is an image. We then \nhave the text beneath that we want to update with the selected name and \nthe empty <code>.content</code> div that we want to replace with the data from each character's respective HTML files:</p>\n<pre rel=\"HTML\"><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>gallery<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>\"</span>/peter.html<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>bill.png<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>Peter<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>peter<span>\"</span></span> <span>data-name</span><span><span>=</span><span>\"</span>peter<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>\"</span>/ray.html<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>ray.png<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>Ray<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>ray<span>\"</span></span> <span>data-name</span><span><span>=</span><span>\"</span>ray<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>\"</span>/egon.html<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>egon.png<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>Egon<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>egon<span>\"</span></span> <span>data-name</span><span><span>=</span><span>\"</span>egon<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>\"</span>/winston.html<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>winston.png<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>Winston<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>winston<span>\"</span></span> <span>data-name</span><span><span>=</span><span>\"</span>winston<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;/</span>a</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>p</span> <span>class</span><span><span>=</span><span>\"</span>selected<span>\"</span></span><span>&gt;</span></span>Ghostbusters<span><span><span>&lt;/</span>p</span><span>&gt;</span></span>\n<span><span><span>&lt;</span>p</span> <span>class</span><span><span>=</span><span>\"</span>highlight<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>p</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>content<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span></code></pre>\n<p>Without any JavaScript this page will still function as it should, \nclicking a link heads to the right page and clicking the back button \nalso works just as a user would expect it too. Yay for accessibility and\n graceful degradation!</p>\n<p>Next we'll hop on over to JavaScript where we can begin adding an event handler to each link inside the <code>.gallery</code> element by using <a href=\"http://www.kirupa.com/html5/handling_events_for_many_elements.htm\">event propagation</a>, like so:</p>\n<pre rel=\"JavaScript\"><code><span>var</span> container <span>=</span> document<span>.</span><span>querySelector<span>(</span></span><span>'.gallery'</span><span>)</span><span>;</span>\n\ncontainer<span>.</span><span>addEventListener<span>(</span></span><span>'click'</span><span>,</span> <span>function</span><span>(</span>e<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>e<span>.</span>target <span>!</span><span>=</span> e<span>.</span>currentTarget<span>)</span> <span>{</span>\n    e<span>.</span><span>preventDefault<span>(</span></span><span>)</span><span>;</span>\n    <span spellcheck=\"true\">// e.target is the image inside the link we just clicked.\n</span>  <span>}</span>\n  e<span>.</span><span>stopPropagation<span>(</span></span><span>)</span><span>;</span>\n<span>}</span><span>,</span> <span>false</span><span>)</span><span>;</span></code></pre>\n<p>Inside this <code>if</code> statement we can then assign the <code>data-name</code> attribute of the image we select to the <code>data</code> variable. Then we'll append \".html\" to it and use that as the third parameter, the URL we'd like to load, in our <code>pushState</code> method (although in a real example we'd probably want to change the URL only <em>after</em> the Ajax request has been successful):</p>\n<pre rel=\"JavaScript\"><code><span>var</span> data <span>=</span> e<span>.</span>target<span>.</span><span>getAttribute<span>(</span></span><span>'data-name'</span><span>)</span><span>,</span>\n  url <span>=</span> data <span>+</span> <span>\".html\"</span><span>;</span>\n  history<span>.</span><span>pushState<span>(</span></span><span>null</span><span>,</span> <span>null</span><span>,</span> url<span>)</span><span>;</span>\n    \n  <span spellcheck=\"true\">// here we can fix the current classes\n</span>  <span spellcheck=\"true\">// and update text with the data variable\n</span>  <span spellcheck=\"true\">// and make an Ajax request for the .content element\n</span>  <span spellcheck=\"true\">// finally we can manually update the document’s title</span></code></pre>\n<p>(Alternatively, we could also grab the link's href attribute for this.)</p>\n<p>I've replaced working code with comments so we can focus on the <code>pushState</code> method for now.</p>\n<p>So at this point, clicking on an image will update the URL bar and \nthe content with the Ajax request but clicking the back button won't \nsend us to the previous character we selected.  What we need to do here \nis to make another Ajax request when the user clicks the back/forwards \nbutton and then we'll need to update the URL once again with <code>pushState</code>.</p>\n<p>We'll first head back and update the state parameter of our <code>pushState</code> method in order to stash that information away:</p>\n<pre rel=\"JavaScript\"><code>history<span>.</span><span>pushState<span>(</span></span>data<span>,</span> <span>null</span><span>,</span> url<span>)</span><span>;</span></code></pre>\n<p>This is the first parameter, <code>data</code> in the method above. Now anything that’s set to that  variable will be accessible to us in a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/popstate\">popstate</a></code> event which fires whenever the user clicks on the forward or back buttons. </p>\n<pre rel=\"JavaScript\"><code>window<span>.</span><span>addEventListener<span>(</span></span><span>'popstate'</span><span>,</span> <span>function</span><span>(</span>e<span>)</span> <span>{</span>\n  <span spellcheck=\"true\">// e.state is equal to the data-attribute of the last image we clicked\n</span><span>}</span><span>)</span><span>;</span></code></pre>\n<p>Consequently we can then use this information however we like, which \nin this case is passing the name of the previous Ghostbuster we selected\n as a parameter into the Ajax <code>requestContent</code> function, which uses jQuery's <code>load</code> method:</p>\n<pre rel=\"jQuery\"><code><span>function</span> <span>requestContent<span>(</span></span>file<span>)</span> <span>{</span>\n  $<span>(</span><span>'.content'</span><span>)</span><span>.</span><span>load<span>(</span></span>file <span>+</span> <span>' .content'</span><span>)</span><span>;</span>\n<span>}</span>\n\nwindow<span>.</span><span>addEventListener<span>(</span></span><span>'popstate'</span><span>,</span> <span>function</span><span>(</span>e<span>)</span> <span>{</span>\n  <span>var</span> character <span>=</span> e<span>.</span>state<span>;</span>\n\n  <span>if</span> <span>(</span>character <span>==</span> <span>null</span><span>)</span> <span>{</span>\n    <span>removeCurrentClass<span>(</span></span><span>)</span><span>;</span>\n    textWrapper<span>.</span>innerHTML <span>=</span> <span>\" \"</span><span>;</span>\n    content<span>.</span>innerHTML <span>=</span> <span>\" \"</span><span>;</span>\n    document<span>.</span>title <span>=</span> defaultTitle<span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n      <span>updateText<span>(</span></span>character<span>)</span><span>;</span>\n      <span>requestContent<span>(</span></span>character <span>+</span> <span>\".html\"</span><span>)</span><span>;</span>\n      <span>addCurrentClass<span>(</span></span>character<span>)</span><span>;</span>\n      document<span>.</span>title <span>=</span> <span>\"Ghostbuster | \"</span> <span>+</span> character<span>;</span>\n  <span>}</span>\n<span>}</span><span>)</span><span>;</span></code></pre>\n<p>If a user was to click on the picture of Ray our event listener would\n fire, which would then store the data attribute of our image within the\n <code>pushState</code> event. Consequently this loads the <code>ray.html</code> file which will be called upon if the user selects another image and then clicks the back button. *Phew*.</p>\n<p>What does this leave us with? Well, if we click on a character and \nthen share the URL we've updated, then that HTML file would be loaded \ninstead. It might be a less confusing experience and we'll preserve the \nintegrity of our URLs whilst giving our users a faster browsing \nexperience over all.</p>\n<p>It’s important to acknowledge that the example above is simplistic \nsince loading content in this way with jQuery is very messy and we’d \nprobably want to pass a more complex object into our <code>pushState</code> method but it shows us how we can immediately start learning how to use the History API. First we walk, then we run.</p>\n<h3>The Next Step</h3>\n<p>If we were to use this technique on a larger scale then we should \nprobably consider using a tool designed specifically for that purpose. \nFor example <a href=\"https://github.com/defunkt/jquery-pjax\">pjax</a> is\n a jQuery plugin that speeds up the process of using Ajax and pushState \nsimultaneously, although it only supports browsers that use the History \nAPI.</p>\n<p><a href=\"https://github.com/browserstate/history.js\">History JS</a> on the other hand supports older browsers with the old hash-fallback in the URLs.</p>\n<h3>Cool URLs</h3>\n<p>I like thinking about URLs, and I particularly reference this post on <a href=\"http://warpspire.com/posts/url-design\">URL design</a> by Kyle Neath all the time:</p>\n<blockquote><p>URLs are universal. They work in Firefox, Chrome, Safari,\n Internet Explorer, cURL, wget, your iPhone, Android and even written \ndown on sticky notes. They are the one universal syntax of the web. \nDon't take that for granted. Any regular semi-technical user of your \nsite should be able to navigate 90% of your app based off memory of the \nURL structure. In order to achieve this, your URLs will need to be \npragmatic.</p></blockquote>\n<p>This means that regardless of any hacks or performance boosting \ntricks we might want to implement, web developers ought to cherish the \nURL and with the help of the HTML5 History API we can fix problems like \nthe above example with just a little elbow grease.</p>\n<h3>Common Gotchas</h3>\n<ul>\n<li>It's often a good idea to embed the location of an Ajax request in the <code>href</code> attributes of an anchor element.</li>\n<li>Make sure to <code>return true</code> from Javascript click handlers when people middle or command click so that we don't override them accidentally.</li>\n</ul>\n<h3>Further Reading</h3>\n<ul>\n<li>Mozilla's documentation on <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">manipulating the browser history</a></li>\n<li>The Ajax gallery example from <a href=\"http://diveintohtml5.info/history.html\">Dive into HTML5</a></li>\n<li><a href=\"https://blog.twitter.com/2012/implementing-pushstate-for-twittercom\">Twitter’s implementation</a> of pushState</li>\n</ul>\n<h3>Browser support</h3>\n<table>\n<thead>\n<tr>\n<th>Chrome</th>\n<th>Safari</th>\n<th>Firefox</th>\n<th>Opera</th>\n<th>IE</th>\n<th>Android</th>\n<th>iOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td data-browser-name=\"Chrome\">31+</td>\n<td data-browser-name=\"Safari\">7.1+</td>\n<td data-browser-name=\"Firefox\">34+</td>\n<td data-browser-name=\"Opera\">11.50+</td>\n<td data-browser-name=\"IE\">10+</td>\n<td data-browser-name=\"Android\">4.3+</td>\n<td data-browser-name=\"iOS\">7.1+</td></tr></tbody></table>","tags":"javascript,HTML5,History API","isStarred":"false","articleImages":["https://cdn.css-tricks.com/wp-content/uploads/2015/03/history.png","https://cdn.css-tricks.com/wp-content/uploads/2015/03/who-you-gonna-call.gif"],"note":"","dateCreated":"Fri Mar 27 2015 19:18:49 GMT+0530 (India Standard Time)","dateModified":"Fri Mar 27 2015 19:18:49 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"TYaGYaA64iHoUZ1s"}
{"id":"0","category":"javascript","categoryId":"30","title":"Group array items, based on variable in javascript","codes":[{"code":"var myArray = [];\nmyArray[0] = [1,\"The Melting Pot\",\"A\"]\nmyArray[1] = [5,\"Mamas MexicanKitchen\",\"C\"]\nmyArray[2] = [6,\"Wingdome\",\"D\"]\nmyArray[3] = [7,\"Piroshky Piroshky\",\"D\"]\nmyArray[4] = [4,\"Crab Pot\",\"F\"]\nmyArray[5] = [2,\"Ipanema Grill\",\"G\"]\nmyArray[6] = [0,\"Pan Africa Market\",\"Z\"]\n\nvar other = {},\nletter;\n\nfor (var i=0; i < myArray.length; i++) {\n\tletter = myArray[i][2];\n\t// if other doesn't already have a property for the current letter\n\t// create it and assign it to a new empty array\n\tif (!(letter in other))\n\tother[letter] = [];\n\t\n\tother[letter].push(myArray[i]);\n}\n\nconsole.log(other);","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<p>Reference Link : StackOverflow</p><p>You shouldn't use arrays with non-integer indexes. Your <code>other</code> variable should be a plain object rather than an array. (It does work with arrays, but it's not the best option.)</p><p><br></p><p></p>","tags":"javascript,js","isStarred":"false","note":"","dateCreated":"Wed Jan 28 2015 17:40:22 GMT+0530 (India Standard Time)","dateModified":"Wed Jan 28 2015 17:40:22 GMT+0530 (India Standard Time)","mode":"add","comments":[{"snippetID":"TZNetl7tQ2vcj0nv","commentId":"1","description":"<p>sfsfsfsfs sdfsfasfasfasfsaf</p>","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1422600911309},"dateModified":{"$$date":1423056574350}},{"snippetID":"TZNetl7tQ2vcj0nv","commentId":"2","description":"<p>xdfdsff</p>","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1422602230146}},{"snippetID":"TZNetl7tQ2vcj0nv","commentId":"3","description":"fdsfsf","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1422602349018}},{"snippetID":"TZNetl7tQ2vcj0nv","commentId":"4","description":"dffdfdf sfsfsfsf","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1423056035029},"dateModified":{"$$date":1423056143776}},{"snippetID":"TZNetl7tQ2vcj0nv","commentId":"5","description":"dfdsfdfaffadf","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1423056106991}}],"images":["bonheur_by_arefin03-d7mslxf_3_2_2015.jpg","blue____by_impatienss_3_2_2015.jpg","colors_of_drosera_by_nitrok-d7nfp1q_3_2_2015.jpg","autumnal_fire_by_john_peter-d6eypxq_3_2_2015.jpg","221f849d-smush-kenya_amboseli_dust-and-goats-ammended_6_2_2015.jpg","backpacker-planner_6_2_2015.png"],"_id":"TZNetl7tQ2vcj0nv"}
{"id":"XhsgudPXY9DsbGew","category":"jquery","categoryId":"50","title":"JQuery pass more parameters into callback","codes":[{"code":"// Example 1\nfunction clicked() {\n\n    var myDiv = $(\"#my-div\");\n\n    $.post(\"someurl.php\",someData,function(data){\n        doSomething(data, myDiv);\n    },\"json\"); \n}\n\nfunction doSomething(curData, curDiv) {\n\n}","codeLanguage":"javascript"},{"code":"// Example 2\n\nfunction callBack(data, textStatus, jqXHR) {};\n\nvar doSomething = function(extraStuff) {\n    return function(data, textStatus, jqXHR) {\n        // do something with extraStuff\n    };\n};\n\nvar clicked = function() {\n    var extraStuff = {\n        myParam1: 'foo',\n        myParam2: 'bar'\n    }; // an object / whatever extra params you wish to pass.\n\n    $.post(\"someurl.php\", someData, doSomething(extraStuff), \"json\");\n};\n\n/* Explaination\n----------------------------------\nWhat is happening?\n\nIn the last line, doSomething(extraStuff) is invoked and the result of that invocation is a function pointer.\n\nBecause extraStuff is passed as an argument to doSomething it is within scope of the doSomething function.\n\nWhen extraStuff is referenced in the returned anonymous inner function of doSomething it is bound by closure to the outer function's extraStuff argument. This is true even after doSomething has returned.\n\nI haven't tested the above, but I've written very similar code in the last 24 hours and it works as I've described.\n\nYou can of course pass multiple variables instead of a single 'extraStuff' object depending on your personal preference/coding standards.\n*/","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"}],"description":"<p><br></p>","tags":"jQuery","isStarred":"false","note":"","dateCreated":"Mon Jan 12 2015 21:44:18 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422108857932},"mode":"add","comments":[],"images":[],"_id":"XhsgudPXY9DsbGew"}
{"id":"QY6ug7xn1nsKqj2w","category":"html","categoryId":"49","title":"5 Lesser Used HTML Elements","refSite":"http://mattsparks.com/5-lesser-used-html-elements/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>There are a number of HTML elements that are used a lot less than \ntheir more popular, quarterback playing, comrades. Here are 5 that tend \nto fly under the radar.</p>\n<h2>&lt;base&gt;</h2>\n<p>The <code>&lt;base&gt;</code> element is used to specify the base URL for all relative URLs in a document.</p>\n<h3>Example</h3>\n<pre>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&nbsp;&nbsp; &nbsp;&lt;title&gt;Base Element Example&lt;/title&gt;\n&nbsp;&nbsp; &nbsp;&lt;base href=\"http://www.example.com/about/index.html\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&nbsp;&nbsp; &nbsp;&lt;p&gt;Hello! Check out my awesome &lt;a href=\"portfolio.html\" title=\"Portfolio\"&gt;Portfolio&lt;/a&gt;!&lt;/p&gt;\n&nbsp;&nbsp; &nbsp;&lt;!--\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// The above link will point to: http://www.example.com/about/portfolio.html\n&nbsp;&nbsp; &nbsp;--&gt;\n&lt;/body&gt;</pre>\n<h3>Browser Support</h3>\n<p>There is basic support in all major browsers, including mobile.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a title=\"W3C Specification\" href=\"http://www.w3.org/TR/html5/document-metadata.html#the-base-element\" target=\"_blank\">W3C Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">&lt;base&gt; on MDN</a></li>\n</ul>\n<h2>&lt;figure&gt;</h2>\n<p>The <code>&lt;figure&gt;</code> element is used to represent an independent (but related) bit of content. Optionally, a caption (<code>&lt;figcaption&gt;</code>) can be included.</p>\n<h3>Example</h3>\n<pre>&lt;p&gt;Let's pretend this is a business website or something and I reference a chart.&lt;/p&gt;\n\n&lt;figure&gt;\n&nbsp;&nbsp; &nbsp;&lt;img src=\"http://www.example.com/img/a_business_chart.jpg\" alt=\"2015 Estimated Earnings\"&gt;\n&nbsp;&nbsp; &nbsp;&lt;figcaption&gt;Estimated 2015 Earnings&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;p&gt;So, the chart above is related to this document. HOWEVER, it's also independent content that could be included on another document.&lt;/p&gt;</pre>\n<h3>Browser Support</h3>\n<p>Pretty much fully supported (IE 8+), including mobile.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/grouping-content.html#the-figure-element\" target=\"_blank\">W3C Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\" target=\"_blank\">&lt;figure&gt; on MDN</a></li>\n<li><a href=\"http://caniuse.com/#search=figure\" target=\"_blank\">Can I Use?</a></li>\n</ul>\n<h2>&nbsp;&lt;kbd&gt;</h2>\n<p>The <code>&lt;kdb&gt;</code> element is used to represent user input. This can be input from a keyboard (hence <em>kbd</em>) to voice commands. It functions much in the same way as the <code>&lt;code&gt;</code> element.</p>\n<h3>Example</h3>\n<pre>&lt;p&gt;First type in: &lt;kbd&gt;Crtl+Atl+Shift+CapsLock+fn+8&lt;/kbd&gt;&lt;/p&gt;\n&lt;p&gt;Then hit: &lt;kbd&gt;return&lt;/kbd&gt;&lt;/p&gt;</pre>\n<h3>Browser Support</h3>\n<p>Fully supported, go nuts.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/text-level-semantics.html#the-kbd-element\" target=\"_blank\">W3C Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\" target=\"_blank\">&lt;kbd&gt; on MDN</a></li>\n</ul>\n<h2>&lt;del&gt;</h2>\n<p>The <code>&lt;del&gt;</code> element is used when text has been deleted from a document. Its partner in crime is the <code>&lt;ins&gt;</code> element.</p>\n<h3>Example</h3>\n<pre>&lt;p&gt;I try to make stupid jokes in my code examples and they are &lt;del&gt;always&lt;/del&gt; never funny.&lt;/p&gt;</pre>\n<h3>Browser Support</h3>\n<p>Fully supported.</p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/edits.html#the-del-element\" target=\"_blank\">W3C Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\" target=\"_blank\">&lt;del&gt; on MDN</a></li>\n</ul>\n<h2>&lt;template&gt;</h2>\n<p>The <code>&lt;template&gt;</code> tag is used to define reusable HTML. The HTML is not rendered on load, but can be later on using JavaScript.</p>\n<h3>Example</h3>\n<pre>&lt;template id=\"row\"&gt;\n&nbsp;&nbsp; &nbsp;&lt;tr&gt;\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;td&gt;&lt;/td&gt;\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;td&gt;&lt;/td&gt;\n&nbsp;&nbsp; &nbsp;&lt;/tr&gt;\n&lt;/template&gt;</pre>\n<h3>Browser Support</h3>\n<p>There is support in Firefox, Chrome, Safari, and Opera. Internet \nExplorer does not support the &lt;template&gt; element at all. It seems \nto be moderately supported on mobile.</p>\n<p>Further Reading</p>\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/scripting-1.html#the-template-element\" target=\"_blank\">W3C Specification</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\" target=\"_blank\">&lt;template&gt; on MDN</a></li>\n<li><a href=\"http://caniuse.com/#search=template\" target=\"_blank\">Can I Use?</a></li>\n</ul>\n<p>What other elements would you consider lesser used? Let me know in the comments!</p>\n<a></a><div>\n<h3>Related posts:</h3><ol>\n<li><a href=\"http://mattsparks.com/front-end-development-annoyances/\" rel=\"bookmark\" title=\"Front-end Development Annoyances\">Front-end Development Annoyances </a></li>\n<li><a href=\"http://mattsparks.com/looking-placeme-js-html5-pollyfill-placeholder-attribute/\" rel=\"bookmark\" title=\"Looking for placeMe.js, the placeholder pollyfill?\">Looking for placeMe.js, the placeholder pollyfill? </a></li>\n<li><a href=\"http://mattsparks.com/stuff-found-week/\" rel=\"bookmark\" title=\"Stuff I Found This Week\">Stuff I Found This Week </a></li>\n<li><a href=\"http://mattsparks.com/web-development-tips-z/\" rel=\"bookmark\" title=\"Web Development Tips: A to Z\">Web Development Tips: A to Z&nbsp;</a></li>\n</ol></div>","tags":"html","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 12:45:11 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 12:45:11 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"YoMpa3PIz6uHP732"}
{"id":"0","category":"javascript","categoryId":"30","title":"Array.prototype.slice()","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2 name=\"Summary\">Summary</h2>\n<p>The <code><strong>slice()</strong></code> method returns a shallow copy of a portion of an array into a new array object.</p>\n<h2 name=\"Syntax\">Syntax</h2>\n<pre><code><var>arr</var>.slice([<var>begin</var>[, <var>end</var>]])</code></pre>\n<h2 name=\"Parameters\">Parameters</h2>\n<dl>\n <dt>\n  <code>begin</code></dt>\n <dd>\n  Zero-based index at which to begin extraction.</dd>\n <dd>\n  As a negative index, <code>begin</code> indicates an offset from the end of the sequence. <code>slice(-2)</code> extracts the last two elements in the sequence.</dd>\n <dd>\n  If <code>begin</code> is omitted, <code>slice</code> begins from index <code>0</code>.</dd>\n <dt>\n  <code>end</code></dt>\n <dd>\n  Zero-based index at which to end extraction. <code>slice</code> extracts up to but not including <code>end</code>.</dd>\n <dd>\n  <code>slice(1,4)</code> extracts the second element up to the fourth element (elements indexed 1, 2, and 3).</dd>\n <dd>\n  As a negative index, <code>end</code> indicates an offset from the end of the sequence. <code>slice(2,-1)</code> extracts the third element through the second-to-last element in the sequence.</dd>\n <dd>\n  If <code>end</code> is omitted, <code>slice</code> extracts to the end of the sequence (<code>arr.length</code>)<code>.</code></dd>\n</dl>\n<h2 name=\"Description\">Description</h2>\n<p><code>slice</code>&nbsp;does not alter. It returns a shallow copy of \nelements from the original array. Elements of the original array are \ncopied into the returned array as follows:</p>\n<ul>\n <li>For object references (and not the actual object), <code>slice</code>\n copies object references into the new array. Both the original and new \narray refer to the same object. If a referenced object changes, the \nchanges are visible to both the new and original arrays.</li>\n <li>For strings and numbers (not <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" title=\"The String global object is a constructor for strings, or a sequence of characters.\"><code>String</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\" title=\"The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.\"><code>Number</code></a> objects), <code>slice</code> copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.</li>\n</ul>\n<p>If a new element is added to either array, the other array is not affected.</p>\n<h2 name=\"Examples\">Examples</h2>\n<h3 name=\"Example:_Return_a_portion_of_an_existing_array\">Example: Return a portion of an existing array</h3>\n<pre data-number=\"\"><code><span spellcheck=\"true\">// Our good friend the citrus from fruits example\n</span><span>var</span> fruits <span>=</span> <span>[</span><span>'Banana'</span><span>,</span> <span>'Orange'</span><span>,</span> <span>'Lemon'</span><span>,</span> <span>'Apple'</span><span>,</span> <span>'Mango'</span><span>]</span><span>;</span>\n<span>var</span> citrus <span>=</span> fruits<span>.</span><span>slice<span>(</span></span><span>1</span><span>,</span> <span>3</span><span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// citrus contains ['Orange','Lemon']</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div></code></pre>\n<h3 name=\"Example:_Using_slice\">Example: Using <code>slice</code></h3>\n<p>In the following example, <code>slice</code> creates a new array, <code>newCar</code>, from <code>myCar</code>. Both include a reference to the object <code>myHonda</code>. When the color of <code>myHonda</code> is changed to purple, both arrays reflect the change.</p>\n<pre data-number=\"\"><code><span spellcheck=\"true\">// Using slice, create newCar from myCar.\n</span><span>var</span> myHonda <span>=</span> <span>{</span> color<span>:</span> <span>'red'</span><span>,</span> wheels<span>:</span> <span>4</span><span>,</span> engine<span>:</span> <span>{</span> cylinders<span>:</span> <span>4</span><span>,</span> size<span>:</span> <span>2.2</span> <span>}</span> <span>}</span><span>;</span>\n<span>var</span> myCar <span>=</span> <span>[</span>myHonda<span>,</span> <span>2</span><span>,</span> <span>'cherry condition'</span><span>,</span> <span>'purchased 1997'</span><span>]</span><span>;</span>\n<span>var</span> newCar <span>=</span> myCar<span>.</span><span>slice<span>(</span></span><span>0</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// Display the values of myCar, newCar, and the color of myHonda\n</span><span spellcheck=\"true\">//  referenced from both arrays.\n</span>console<span>.</span><span>log<span>(</span></span><span>'myCar = '</span> <span>+</span> myCar<span>.</span><span>toSource<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'newCar = '</span> <span>+</span> newCar<span>.</span><span>toSource<span>(</span></span><span>)</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'myCar[0].color = '</span> <span>+</span> myCar<span>[</span><span>0</span><span>]</span><span>.</span>color<span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'newCar[0].color = '</span> <span>+</span> newCar<span>[</span><span>0</span><span>]</span><span>.</span>color<span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// Change the color of myHonda.\n</span>myHonda<span>.</span>color <span>=</span> <span>'purple'</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'The new color of my Honda is '</span> <span>+</span> myHonda<span>.</span>color<span>)</span><span>;</span>\n<span spellcheck=\"true\">\n// Display the color of myHonda referenced from both arrays.\n</span>console<span>.</span><span>log<span>(</span></span><span>'myCar[0].color = '</span> <span>+</span> myCar<span>[</span><span>0</span><span>]</span><span>.</span>color<span>)</span><span>;</span>\nconsole<span>.</span><span>log<span>(</span></span><span>'newCar[0].color = '</span> <span>+</span> newCar<span>[</span><span>0</span><span>]</span><span>.</span>color<span>)</span><span>;</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div><div data-start=\"11\"></div><div data-start=\"12\"></div><div data-start=\"13\"></div><div data-start=\"14\"></div><div data-start=\"15\"></div><div data-start=\"16\"></div><div data-start=\"17\"></div><div data-start=\"18\"></div><div data-start=\"19\"></div></code></pre>\n<p>This script writes:</p>\n<pre data-number=\"\"><code>myCar <span>=</span> <span>[</span><span>{</span>color<span>:</span><span>'red'</span><span>,</span> wheels<span>:</span><span>4</span><span>,</span> engine<span>:</span><span>{</span>cylinders<span>:</span><span>4</span><span>,</span> size<span>:</span><span>2.2</span><span>}</span><span>}</span><span>,</span> <span>2</span><span>,</span>\n         <span>'cherry condition'</span><span>,</span> <span>'purchased 1997'</span><span>]</span>\nnewCar <span>=</span> <span>[</span><span>{</span>color<span>:</span><span>'red'</span><span>,</span> wheels<span>:</span><span>4</span><span>,</span> engine<span>:</span><span>{</span>cylinders<span>:</span><span>4</span><span>,</span> size<span>:</span><span>2.2</span><span>}</span><span>}</span><span>,</span> <span>2</span><span>]</span>\nmyCar<span>[</span><span>0</span><span>]</span><span>.</span>color <span>=</span> red \nnewCar<span>[</span><span>0</span><span>]</span><span>.</span>color <span>=</span> red\nThe <span>new</span> <span>color</span> of my Honda is purple\nmyCar<span>[</span><span>0</span><span>]</span><span>.</span>color <span>=</span> purple\nnewCar<span>[</span><span>0</span><span>]</span><span>.</span>color <span>=</span> purple<div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div></code></pre>\n<h2 name=\"Array-like\">Array-like objects</h2>\n<p><code>slice</code> method can also be called to convert Array-like \nobjects / collections to a new Array. You just bind the method to the \nobject. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>arguments</code></a> inside a function is an example of an 'array-like object'.</p>\n<pre data-number=\"\"><code><span>function</span> <span>list<span>(</span></span><span>)</span> <span>{</span>\n  <span>return</span> Array<span>.</span>prototype<span>.</span>slice<span>.</span><span>call<span>(</span></span>arguments<span>,</span> <span>0</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>var</span> list1 <span>=</span> <span>list<span>(</span></span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>;</span><span spellcheck=\"true\"> // [1, 2, 3]</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div></code></pre>\n<p>Binding can be done with the .<code>call</code> function of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\" title=\"The Function.prototype property represents the Function prototype object.\"><code>Function.prototype</code></a> and it can also be reduced using <code>[].slice.call(arguments)</code> instead of <code>Array.prototype.slice.call</code>. Anyway, it can be simplified using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" title=\"The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\"><code>bind</code></a>.</p>\n<pre data-number=\"\"><code><span>var</span> unboundSlice <span>=</span> Array<span>.</span>prototype<span>.</span>slice<span>;</span>\n<span>var</span> slice <span>=</span> Function<span>.</span>prototype<span>.</span>call<span>.</span><span>bind<span>(</span></span>unboundSlice<span>)</span><span>;</span>\n\n<span>function</span> <span>list<span>(</span></span><span>)</span> <span>{</span>\n  <span>return</span> <span>slice<span>(</span></span>arguments<span>,</span> <span>0</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>var</span> list1 <span>=</span> <span>list<span>(</span></span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>;</span><span spellcheck=\"true\"> // [1, 2, 3]</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div></code></pre>\n<h2 name=\"Streamlining_cross-browser_behavior\">Streamlining cross-browser behavior</h2>\n<p>Although host objects (such as DOM objects) are not required by spec to follow the Mozilla behavior when converted by <code>Array.prototype.slice</code>\n and IE &lt; 9 does not do so, versions of IE starting with version 9 do\n allow this, “shimming” it can allow reliable cross-browser behavior. As\n long as other modern browsers continue to support this ability, as \ncurrently do IE, Mozilla, Chrome, Safari, and Opera, developers reading \n(DOM-supporting) slice code relying on this shim will not be misled by \nthe semantics; they can safely rely on the semantics to provide the now \napparently <em>de facto</em> standard behavior. (The shim also fixes IE to work with the second argument of <code>slice()</code> being an explicit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"The value null is a JavaScript literal representing null or an &quot;empty&quot; value, i.e. no object value is present. It is one of JavaScript's primitive values.\"><code>null</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"The global undefined value property represents the value undefined. It is one of JavaScript's primitive types.\"><code>undefined</code></a> value as earlier versions of IE also did not allow but all modern browsers, including IE &gt;= 9, now do.)</p>\n<pre data-number=\"\"><code><span spellcheck=\"true\">/**\n * Shim for \"fixing\" IE's lack of support (IE &lt; 9) for applying slice\n * on host objects like NamedNodeMap, NodeList, and HTMLCollection\n * (technically, since host objects have been implementation-dependent,\n * at least before ES6, IE hasn't needed to work this way).\n * Also works on strings, fixes IE &lt; 9 to allow an explicit undefined\n * for the 2nd argument (as in Firefox), and prevents errors when\n * called on other DOM objects.\n */</span>\n<span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>'use strict'</span><span>;</span>\n  <span>var</span> _slice <span>=</span> Array<span>.</span>prototype<span>.</span>slice<span>;</span>\n\n  <span>try</span> <span>{</span>\n   <span spellcheck=\"true\"> // Can't be used with DOM elements in IE &lt; 9\n</span>    _slice<span>.</span><span>call<span>(</span></span>document<span>.</span>documentElement<span>)</span><span>;</span>\n  <span>}</span> <span>catch</span> <span>(</span><span>e</span><span>)</span> <span>{</span><span spellcheck=\"true\"> // Fails in IE &lt; 9\n</span>   <span spellcheck=\"true\"> // This will work for genuine arrays, array-like objects, \n</span>   <span spellcheck=\"true\"> // NamedNodeMap (attributes, entities, notations),\n</span>   <span spellcheck=\"true\"> // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),\n</span>   <span spellcheck=\"true\"> // and will not fail on other DOM objects (as do DOM elements in IE &lt; 9)\n</span>    Array<span>.</span>prototype<span>.</span>slice <span>=</span> <span>function</span><span>(</span>begin<span>,</span> end<span>)</span> <span>{</span>\n     <span spellcheck=\"true\"> // IE &lt; 9 gets unhappy with an undefined end argument\n</span>      end <span>=</span> <span>(</span><span>typeof</span> end <span>!</span><span>==</span> <span>'undefined'</span><span>)</span> <span>?</span> end <span>:</span> <span>this</span><span>.</span>length<span>;</span>\n\n     <span spellcheck=\"true\"> // For native Array objects, we use the native slice function\n</span>      <span>if</span> <span>(</span>Object<span>.</span>prototype<span>.</span>toString<span>.</span><span>call<span>(</span></span><span>this</span><span>)</span> <span>===</span> <span>'[object Array]'</span><span>)</span><span>{</span>\n        <span>return</span> _slice<span>.</span><span>call<span>(</span></span><span>this</span><span>,</span> begin<span>,</span> end<span>)</span><span>;</span> \n      <span>}</span>\n\n     <span spellcheck=\"true\"> // For array like object we handle it ourselves.\n</span>      <span>var</span> i<span>,</span> cloned <span>=</span> <span>[</span><span>]</span><span>,</span>\n        size<span>,</span> len <span>=</span> <span>this</span><span>.</span>length<span>;</span>\n\n     <span spellcheck=\"true\"> // Handle negative value for \"begin\"\n</span>      <span>var</span> start <span>=</span> begin <span>||</span> <span>0</span><span>;</span>\n      start <span>=</span> <span>(</span>start <span>&gt;=</span> <span>0</span><span>)</span> <span>?</span> start<span>:</span> len <span>+</span> start<span>;</span>\n\n     <span spellcheck=\"true\"> // Handle negative value for \"end\"\n</span>      <span>var</span> upTo <span>=</span> <span>(</span>end<span>)</span> <span>?</span> end <span>:</span> len<span>;</span>\n      <span>if</span> <span>(</span>end <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n        upTo <span>=</span> len <span>+</span> end<span>;</span>\n      <span>}</span>\n\n     <span spellcheck=\"true\"> // Actual expected size of the slice\n</span>      size <span>=</span> upTo <span>-</span> start<span>;</span>\n\n      <span>if</span> <span>(</span>size <span>&gt;</span> <span>0</span><span>)</span> <span>{</span>\n        cloned <span>=</span> <span>new</span> <span>Array</span><span>(</span>size<span>)</span><span>;</span>\n        <span>if</span> <span>(</span><span>this</span><span>.</span>charAt<span>)</span> <span>{</span>\n          <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> size<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            cloned<span>[</span>i<span>]</span> <span>=</span> <span>this</span><span>.</span><span>charAt<span>(</span></span>start <span>+</span> i<span>)</span><span>;</span>\n          <span>}</span>\n        <span>}</span> <span>else</span> <span>{</span>\n          <span>for</span> <span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> size<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n            cloned<span>[</span>i<span>]</span> <span>=</span> <span>this</span><span>[</span>start <span>+</span> i<span>]</span><span>;</span>\n          <span>}</span>\n        <span>}</span>\n      <span>}</span>\n\n      <span>return</span> cloned<span>;</span>\n    <span>}</span><span>;</span>\n  <span>}</span>\n<span>}</span><span>(</span><span>)</span><span>)</span><span>;</span></code></pre>","tags":"array","isStarred":"false","note":"","dateCreated":"Sat Mar 14 2015 20:49:40 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 14 2015 20:49:40 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"Zl7ULnIwmN3K9nL1"}
{"id":"0","category":"scss","categoryId":"57","title":"Responsive Web Design in Sass: Using media queries in Sass 3.2","refSite":"http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>In <a href=\"http://thesassway.com/intermediate/responsive-web-design-part-2\">Responsive Web Design in Sass Part 2</a> I wrote about using media queries in Sass 3.1. At the time, I was mostly limited to the (still very cool) <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#media\">@media bubbling</a> feature. I also pointed out some of the shortcomings.</p>\n\n<p>At the end of the post I previewed how you can use <a target=\"_blank\" href=\"https://gist.github.com/1215856\">@content blocks</a>,\n one of the emerging features of Sass 3.2, to write a mixin that can \nreally help to simplify using media queries in Sass. With Sass 3.2 \nnearly upon us, I am happy to report that media queries have become the \nfirst-class citizens they deserve to be. Let's see what's new.</p>\n\n<h2>Variables in queries</h2>\n\n<p>If you tried to use a variable in the media query test in Sass 3.1 it\n would fail by simply spitting out the actual text of the variable name.\n This is fixed in Sass 3.2, and works pretty much as I always expected \nit would.</p>\n\n<div>\n<pre><span>$break-small</span><span>:</span> <span>320</span><span>px</span><span>;</span>\n<span>$break-large</span><span>:</span> <span>1200</span><span>px</span><span>;</span>\n\n<span>.profile-pic</span> <span>{</span>\n  <span>float</span><span>:</span> <span>left</span><span>;</span>\n  <span>width</span><span>:</span> <span>250</span><span>px</span><span>;</span>\n  <span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>$</span><span>break-small</span><span>)</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100</span><span>px</span><span>;</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n  <span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>$</span><span>break-large</span><span>)</span> <span>{</span>\n    <span>float</span><span>:</span> <span>right</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Compiles to:</p>\n\n<div>\n<pre><span>profile-pic</span> <span>{</span>\n  <span>float</span><span>:</span> <span>left</span><span>;</span>\n  <span>width</span><span>:</span> <span>250px</span><span>;</span>\n<span>}</span>\n<span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100px</span><span>;</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>1200px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>float</span><span>:</span> <span>right</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Variables as full query</h2>\n\n<p>You're not limited to using variables in the numerical part of a \n@media test. Go ahead and set the whole test as a variable. (Note the \nneed for the interpolation braces <code>#{}</code>)</p>\n\n<div>\n<pre><span>$information-phone</span><span>:</span> <span>\"only screen and (max-width : 320px)\"</span><span>;</span>\n\n<span>@media</span> <span>#</span><span>{</span><span>$</span><span>information-phone</span><span>}</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Compiles to:</p>\n\n<div>\n<pre><span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span> <span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Variables on either side of the colon in a query</h2>\n\n<p>You can also get really abstract and set a variable for items on \neither side of the colon in a test. I can see this being very usefull in\n building flexible responsive frameworks.</p>\n\n<div>\n<pre><span>$width-name</span><span>:</span> <span>max-device-width</span><span>;</span>\n<span>$target-width</span><span>:</span> <span>320</span><span>px</span><span>;</span>\n\n<span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>$</span><span>width-name</span> <span>:</span> <span>$</span><span>target-width</span><span>)</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Compiles to</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-device-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>You can also do math on a variable in a query, like so:</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>$</span><span>width-name</span> <span>:</span> <span>$</span><span>target-width</span> <span>+</span> <span>1</span><span>)</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Compiles to</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-device-width</span><span>:</span> <span>321px</span><span>)</span> <span>{</span>\n  <span>background</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Variables in queries, using @content</h2>\n\n<p>In <a href=\"http://thesassway.com/intermediate/responsive-web-design-part-2\">Responsive Web Design in Sass Part 2</a>, I illustrated how to write some nicely abstracted media query systems using <code>@content</code>\n blocks in mixins. Now you can take that a step further by using \nvariables in the actual queries. I think this will be very helpful in \nrefining a set of breakpoints.</p>\n\n<p>On my next project, I think I'll start with some of the usual \ndevice-related breakpoints (320, 480, 720) as \"placeholder\" breakpoints.\n Then as I progress in building my design I'll alter those to whatever \nvalues suit my design.</p>\n\n<p>SCSS</p>\n\n<div>\n<pre><span>$break-small</span><span>:</span> <span>320</span><span>px</span><span>;</span>\n<span>$break-large</span><span>:</span> <span>1024</span><span>px</span><span>;</span>\n\n<span>@mixin</span><span> respond-to</span><span>(</span><span>$media</span><span>)</span> <span>{</span>\n  <span>@if</span> <span>$media</span> <span>==</span> <span>handhelds</span> <span>{</span>\n    <span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>$</span><span>break-small</span><span>)</span> <span>{</span> <span>@content</span><span>;</span> <span>}</span>\n  <span>}</span>\n  <span>@else</span> <span>if</span> <span>$</span><span>media</span> <span>==</span> <span>medium-screens</span> <span>{</span>\n    <span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>$</span><span>break-small</span> <span>+</span> <span>1</span><span>)</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>$</span><span>break-large</span> <span>-</span> <span>1</span><span>)</span> <span>{</span> <span>@content</span><span>;</span> <span>}</span>\n  <span>}</span>\n  <span>@else</span> <span>if</span> <span>$</span><span>media</span> <span>==</span> <span>wide-screens</span> <span>{</span>\n    <span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>$</span><span>break-large</span><span>)</span> <span>{</span> <span>@content</span><span>;</span> <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>.profile-pic</span> <span>{</span>\n  <span>float</span><span>:</span> <span>left</span><span>;</span>\n  <span>width</span><span>:</span> <span>250</span><span>px</span><span>;</span>\n  <span>@include</span><span> respond-to</span><span>(</span><span>handhelds</span><span>)</span> <span>{</span> <span>width</span><span>:</span> <span>100</span><span>%</span> <span>;}</span>\n  <span>@include</span><span> respond-to</span><span>(</span><span>medium</span><span>-</span><span>screens</span><span>)</span> <span>{</span> <span>width</span><span>:</span> <span>125</span><span>px</span><span>;</span> <span>}</span>\n  <span>@include</span><span> respond-to</span><span>(</span><span>wide-screens</span><span>)</span> <span>{</span> <span>float</span><span>:</span> <span>none</span><span>;</span> <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>CSS</p>\n\n<div>\n<pre><span>.profile-pic</span> <span>{</span>\n  <span>float</span><span>:</span> <span>left</span><span>;</span>\n  <span>width</span><span>:</span> <span>250px</span><span>;</span>\n<span>}</span>\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100</span><span>%</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>321px</span><span>)</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>1023px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>width</span><span>:</span> <span>125px</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>min-width</span><span>:</span> <span>1024px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Nothing is Perfect</h2>\n\n<h3>@extend within @media</h3>\n\n<p>There are features and optimisations I'd like to see regarding <code>@media</code> handling in Sass. For example <code>@extend</code> doesn't behave like I'd expect when I use it in a media query.</p>\n\n<p>When I write the Following in SCSS:</p>\n\n<div>\n<pre><span>.red</span> <span>{</span>\n  <span>color</span><span>:</span> <span>red</span><span>;</span>\n  <span>}</span>\n\n<span>.blue</span> <span>{</span>\n  <span>color</span><span>:</span> <span>blue</span><span>;</span>\n<span>}</span>\n\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span> <span>:</span> <span>300px</span><span>)</span><span>{</span>\n  <span>.blue</span> <span>{</span>\n    <span>@extend</span> <span>.red</span><span>;</span>\n    <span>margin</span><span>:</span> <span>10px</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>I intended for the generated css to look something like:</p>\n\n<div>\n<pre><span>.red</span> <span>{</span>\n  <span>color</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>300px</span><span>)</span> <span>{</span>\n  <span>.blue</span> <span>{</span>\n    <span>color</span><span>:</span> <span>red</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>.blue</span> <span>{</span>\n  <span>color</span><span>:</span> <span>blue</span><span>;</span>\n<span>}</span>\n\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>300px</span><span>)</span> <span>{</span>\n  <span>.blue</span> <span>{</span>\n    <span>margin</span><span>:</span> <span>10px</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>But what I really got wasn't nearly as useful.</p>\n\n<div>\n<pre><span>.red</span><span>,</span> <span>.blue</span> <span>{</span>\n  <span>color</span><span>:</span> <span>red</span><span>;</span>\n<span>}</span>\n\n<span>.blue</span> <span>{</span>\n  <span>color</span><span>:</span> <span>blue</span><span>;</span>\n<span>}</span>\n\n<span>@media</span> <span>only</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>300px</span><span>)</span> <span>{</span>\n  <span>.blue</span> <span>{</span>\n    <span>margin</span><span>:</span> <span>10px</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>This is a hairy issue, and different use cases suggest different results. Eventually this may just be <a target=\"_blank\" href=\"https://github.com/nex3/sass/issues/154\">disallowed</a>.</p>\n\n<h3>Combining @media Queries on Compile</h3>\n\n<p>One feature I hear a lot of people bring up with <code>@media</code> \nbubbling is that you often end up with the same query in many places in \nyour compiled CSS. The resulting CSS would be much smaller and more \nclosely resemble \"handcrafted\" CSS if all the rules that match a \nparticular query be combined when the CSS is compiled.</p>\n\n<div>\n<pre><span>.profile-pic</span> <span>{</span>\n  <span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100</span><span>px</span><span>;</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>.biography</span> <span>{</span>\n  <span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n    <span>font-size</span><span>:</span> <span>1</span><span>.5</span><span>em</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>It would be nice (and smaller) if that became:</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100px</span><span>;</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n  <span>.biography</span> <span>{</span>\n    <span>font-size</span><span>:</span> <span>1.5em</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>But instead we get:</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>.profile-pic</span> <span>{</span>\n    <span>width</span><span>:</span> <span>100px</span><span>;</span>\n    <span>float</span><span>:</span> <span>none</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>@media</span> <span>screen</span> <span>and</span> <span>(</span><span>max-width</span><span>:</span> <span>320px</span><span>)</span> <span>{</span>\n  <span>.biography</span> <span>{</span>\n    <span>font-size</span><span>:</span> <span>1.5em</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Nothing's broken here, but it's certainly not optimal. I think this would be a <a target=\"_blank\" href=\"https://github.com/nex3/sass/issues/116\">great issue</a> to tackle, and it looks like there are some other smart optimisations they're considering.</p>\n\n<h2>So go get it!</h2>\n\n<p>As before, you don't have to work hard to get the new good stuff. \nJust run the following in your command line and you're all set.</p>\n\n<p><code>gem install sass --pre</code></p>","tags":"css,SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:09:49 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:09:49 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"aLVMJ4dyCFOgOHfy"}
{"id":"0","category":"css","categoryId":"29","title":"Extending the Color Cascade with the CSS currentColor Variable","refSite":"http://blogs.adobe.com/dreamweaver/2015/02/extending-the-color-cascade-with-the-css-currentcolor-variable.html#.VP_l_JPB27n","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>If you use Sass or LESS, then you probably already use variables in \nyour style sheets and know how useful they are. If you don’t use a \npreprocessor, then you might be curious what the fuss is all about and \nwhy variables are so popular and how they can be useful. In this \narticle, we’re going to get an overview of why variables are useful, and\n get acquainted with one particular variable: <code>currentColor</code>.</p>\n<h2>What are variables good for?</h2>\n<p>Variables in CSS are useful because they allow us to write more DRY \n(Don’t Repeat Yourself) code. They are also particularly useful for \nmanaging and maintaining large-scale projects that contain a lot of \nrepeated values.</p>\n<p>One of the most common use cases for variables are color \nthemes/schemes throughout a website or application. With variables, \ncreating and managing color schemes across a CSS document becomes a lot \neasier. For example, color schemes usually require you to reuse a few \ncolor values for different properties in the CSS file. If you want to \nchange the primary color of a scheme, you would normally have to change \nall occurrences of that color in the style sheet. Using CSS variables, \nyou can define a variable in one place (for example a variable named \n“primary-color”), assign a color value to it, and then use the variable \nas a value anywhere you want in the style sheet. Then, when the time \ncomes to change this color, all you would have to do is assign it a \ndifferent color value, and all occurrences of that variable in the style\n sheet will be automatically updated.</p>\n<p>CSS 2.1 did not introduce variables. (Although, that’s not entirely true, as you will see in this article.) In 2014, <a href=\"http://dev.w3.org/csswg/css-variables/\">native CSS variables</a> that are similar to preprocessor variables were introduced; these variables are arguably even <a href=\"http://www.sitepoint.com/css-variables-can-preprocessors-cant/\">more capable</a> than preprocessor variables. A CSS variable is accepted as a value by <em>all</em> CSS properties.</p>\n<p>In addition to the new variables, CSS already comes with a keyword value that is practically also a variable: the <code>currentColor</code> keyword.<span></span></p>\n<h2>The <code>currentColor</code> keyword</h2>\n<p>The <code>currentColor</code> keyword is like a CSS variable, except that it has one main restriction: you can only use it where a <a href=\"http://tympanus.net/codrops/css_reference/color_value/\"><code>&lt;color&gt;</code> value</a> is expected; if a property does not accept a <code>&lt;color&gt;</code> value, it will not accept <code>currentColor</code> as a value.</p>\n<p>The following are all examples of using <code>currentColor</code> in properties that accept it as a value.</p>\n<pre><code>box-shadow: inset 2px 2px 3px currentColor;\nbackground-color: currentColor; /* not a good idea! */\nbackground-image: linear-gradient(currentColor, transparent);\n</code></pre>\n<p>Another difference between <code>currentColor</code> and other \nvariables is that you don’t get to assign a value to it the same way you\n would assign other variables values. The value of <code>currentColor</code> is determined by the computed value of the <code>color</code> property that is currently being used on the element. That is, the value of <code>currentColor</code> is equal to the current <code>color</code> property value. And this is where the <code>currentColor</code> name comes from.</p>\n<p>So, if we were to go back to our previous example, the <code>currentColor</code> keyword sets the box shadow color to whatever <code>color</code> value you have set on the <code>div</code>. If you haven’t set any <code>color</code>, it will use the inherited color from any of the <code>div</code>’s ancestors. If no ancestor has a <code>color</code>, most browsers will just default to black.</p>\n<p>Put another way: the <code>currentColor</code> keyword is used to make properties of an element, or child elements of an element, inherit the color set by the element’s <code>color</code> property. It therefore acts as the <code>inherit</code> value to allow inheritance of a color that would otherwise not be inherited by a property or child element.</p>\n<p>This also means that, for properties that already inherit the <code>color</code> value, <code>currentColor</code> will not be of much use.</p>\n<h2>Properties and elements that inherit the <code>color</code> value by default</h2>\n<p>When an element has a <code>color</code> value, <strong>whether it is explicitly set or inherited</strong>, some of the foreground elements of that element that accept a <code>&lt;color&gt;</code> value will inherit that <code>color</code> value by default.</p>\n<p>For example, an element’s borders are part of the element’s \nforeground; thus, even if you don’t specify a border color, the border \nwill get the same color as the <code>color</code> property value. If the element does not have one, most browsers usually default to black.</p>\n<p>The border color in this example will be purple:</p>\n<pre><code>.parent {\n    color: purple;\n}\n\n.child {\n    border: 5px solid; /* we didn’t specify the border color here */\n}\n</code></pre>\n<p>The elements that will get/inherit the element’s <code>color</code> value include:</p>\n<ul>\n<li>The element’s text—it is what the <code>color</code> property is used for.</li>\n<li>The text’s outline.</li>\n<li>The element’s border.</li>\n<li>The element’s box shadow.</li>\n<li>An <code>img</code>’s <code>alt</code> text. That is, when the image cannot be displayed, the text that appears in its stead will have that color value.</li>\n<li>A list item’s bullet(s) and border.</li>\n<li>In some browsers (e.g Chrome) the horizontal rule’s (<code>&lt;hr&gt;</code>) border color. (Without a border, the color will not be affected.)</li>\n</ul>\n<p>When you set these element’s properties on an element without explicitly assigning them a color, they will inherit the computed <code>color</code> value of the element by default.</p>\n<p>The following demo shows the above elements in action as they inherit the <code>color</code> set on the page’s <code>body</code>. Change the <code>color</code> property value on the body to see these elements’ colors also change.</p>\n<div><iframe src=\"http://codepen.io/SaraSoueidan/embed/0b1022f32d9e3b4287a12f0d0008aa11?user=SaraSoueidan&amp;default-tab=result&amp;slug-hash=0b1022f32d9e3b4287a12f0d0008aa11&amp;theme-id=3617&amp;height=266\" scrolling=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" frameborder=\"0\" height=\"266\"></iframe></div>\n<p>At this point, you might be wondering: if so many properties/elements already inherit the <code>color</code> value, how or where can <code>currentColor</code> be useful? &nbsp;</p>\n<h2>Extending color inheritance with <code>currentColor</code></h2>\n<p>There are some places where retrieving the <code>color</code> value and using it could come in handy. One example where <code>currentColor</code> can be used that would not otherwise inherit the <code>color</code> value is gradients. CSS gradient images, be that linear or radial gradients, do not inherit colors. By using <code>currentColor</code>,\n you can make a linear gradient used as a background image, for example,\n adjust to match any color you specify somewhere else as the “primary \ncolor” of a theme.</p>\n<pre><code>background-image: linear-gradient(to bottom, currentColor, #fff);\n</code></pre>\n<p>Such an example was created by Scott Kellum who took this concept a little further and added an animation to the <code>color</code> property. As the <code>color</code> property animates, all the elements affected by that color will also animate their colors. &nbsp; See the Pen <a href=\"http://codepen.io/scottkellum/pen/Fhxql/\">currentColor</a> by Scott Kellum (<a href=\"http://codepen.io/scottkellum\">@scottkellum</a>) on <a href=\"http://codepen.io/\">CodePen</a>.</p>\n<p>This is a great example of using <code>currentColor</code>, particularly the animation part.</p>\n<p>However, more practical examples for <code>currentColor</code> exist. Let’s take a look at some of them.</p>\n<h2><code>currentColor</code> Use Cases</h2>\n<p>The idea behind <code>currentColor</code> is to extend the color cascade. This comes in handy in a lot scenarios.</p>\n<h3><code>currentColor</code> for theming UI components</h3>\n<p>From the previous demo, we can move to a more practical (and brilliant, I must say) use case for <code>currentColor</code> demonstrated by <a href=\"http://simurai.com/\">Simon “Simurai”</a> in <a href=\"http://www.youtube.com/watch?v=jPOBVaomzLE&amp;list=PLZriQCloF6GDEOUPK7tlaWAtJhPW21ZDF\">a talk</a> he gave at CSSConfau last year. The talk was about how we can use Flexbox, <code>currentColor</code> and <code>em</code> units inside UI components to quickly style entire Web Apps straight in the browser.</p>\n<p>To demonstrate the usefulness of <code>currentColor</code>, Simon \ncreated a set of UI elements, including some sliders. These elements \nhave the same color scheme applied. For coloring the sliders and input \ntypes, he used the <code>currentColor</code> variable to force the <code>color</code> inheritance in the background color of the slider’s thumb and checkboxes that would otherwise not inherit that color.</p>\n<figure>\n<div><a href=\"http://blogs.adobe.com/dreamweaver/files/2015/02/currentColor-slider.gif\" target=\"_blank\"><img src=\"http://blogs.adobe.com/dreamweaver/files/2015/02/currentColor-slider-700x455.gif\" alt=\"currentColor-slider\" height=\"455\" width=\"700\"></a><p>An example using currentColor to apply the color property’s value to the slider’s thumb. (<a href=\"http://simurai.com/blog/2014/05/04/cssconf/\" target=\"_blank\">Source</a>)</p></div>\n<p></p><figcaption><br>\n</figcaption></figure>\n<p>Similarly, more UI components can be created that inherit a <code>color</code>\n value that you would specify somewhere up in the cascade. With this, a \nUI theme is established on these components. Then, leveraging the \ncascade and <code>currentColor</code>, you can change the main <code>color</code> value and get a new set of colored components every time you do, thus practically automating the process.</p>\n<p>The following GIF image shows that in action. Simon is using the \nbrowser devtools and the color picker in the browser to change the value\n of the <code>color</code> property, and get a live preview of these changes on the components.</p>\n<figure>\n<div><a href=\"http://blogs.adobe.com/dreamweaver/files/2015/02/currentColor-components-small.gif\" target=\"_blank\"><img src=\"http://blogs.adobe.com/dreamweaver/files/2015/02/currentColor-components-small.gif\" alt=\"\" height=\"389\" width=\"700\"></a><p>Changing\n the value of the color property will update the colors of all UI \ncomponents that are inheriting this color, with the help of the \ncurrentColor variable. (<a href=\"http://simurai.com/blog/2014/05/04/cssconf/\" target=\"_blank\">Source</a>)</p></div>\n<p>&nbsp;</p>\n</figure>\n<p>Using the browser’s devtools capabilities, you would be able to \nchange the theme to your liking and then save the changes to your \nworking files right from the browser. To learn all about it, refer to \nSimon’s talk and <a href=\"http://simurai.com/blog/2014/05/04/cssconf/\">blog post</a>.</p>\n<h3><code>currentColor</code> for theming and styling SVG</h3>\n<p>SVGs are great, but they come with a few styling quirks and \nlimitations depending on how you use them. One such case is reusing \nparts of an SVG using the SVG <code>&lt;use&gt;</code> element.</p>\n<p>If you’re not familiar with the <code>&lt;use&gt;</code> element, you can read all about it <a href=\"http://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/\">here</a>. The idea behind <code>&lt;use&gt;</code> is to reuse parts of an SVG anywhere we want these parts to appear on the page. By <code>use</code>ing\n an SVG element, we’re practically creating a live copy of that element.\n This is similar to copy-pasting the element in a graphics editor, \nexcept that the copy is live—meaning that its characteristics can change\n as the original copy changes.</p>\n<p>The <code>&lt;use&gt;</code> element is used a lot when <a href=\"http://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/\">creating SVG sprites</a>.\n An SVG containing all of the icons would be used as the sprite, and \nthen we can insert individual icons from that sprite anywhere on the \npage, using <code>&lt;use&gt;</code>. You can read all about SVG creating sprites in <a href=\"http://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/\">this article</a>.</p>\n<p>When an element is <code>use</code>d, however, the copy of its contents is cloned into a <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/\">shadow DOM</a>.\n This means that these contents cannot be selected and styled with CSS \nthe way we would select and style SVG elements or even HTML elements \npresent in the regular DOM. This is one reason why styling SVG icons \ncreated like that is limited.</p>\n<p>Using <code>currentColor</code>, we can work around this limitation but allowing a color we specify in CSS “leak” into the contents of the <code>use</code>d SVG, by setting <code>currentColor</code> as a value for the properties we want the color value to leak into.</p>\n<p>So with an SVG icon used like so:</p>\n<pre><code>&lt;svg class=\"home-icon\"&gt;\n    &lt;use xlink:href=\"#home\"&gt;&lt;/use&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>And assuming the <code>#home</code> icon defined in the sprite sheet contains something like:</p>\n<pre><code>&lt;symbol id=\"home\"&gt;\n    &lt;rect id=\"bottom\" fill=\"currentColor\" ... /&gt;\n    &lt;polygon id=\"roof\" ... /&gt;\n&lt;/symbol&gt;\n</code></pre>\n<p>We can then apply styles to the icon and have the <code>fill</code> color cascade down to the <code>#roof</code> (which does not have a fill attribute above) and the <code>color</code> value be inherited by the <code>#bottom</code> rectangle’s <code>fill</code> attribute:</p>\n<pre><code>.home-icon {\n    fill: red;\n    color: white;\n}\n</code></pre>\n<p>The <code>fill</code> color will cascade down from the <code>svg</code> to <code>use</code> and then to <code>#roof</code>. The <code>color</code> value will be used as a value for the <code>#bottom</code> fill color because of <code>currentColor</code>.</p>\n<p>Fabrice Weinberg wrote <a href=\"http://codepen.io/FWeinb/blog/quick-tip-svg-use-style-two-colors\">an article</a> about this technique a while back on his Codepen blog.</p>\n<p>This technique comes in handy when you want to create multiple icons \neach having different colors; all you would have to do in that case is \nchange the <code>color</code> and <code>fill</code> values in the CSS. An example of this usage is the following demo Fabrice shows in his post:</p>\n<div><iframe src=\"http://codepen.io/FWeinb/embed/rGBsC?user=FWeinb&amp;default-tab=result&amp;slug-hash=rGBsC&amp;theme-id=3617&amp;height=266\" scrolling=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" frameborder=\"0\" height=\"266\"></iframe></div>\n<p></p>\n<p>Of course, you can use <code>currentColor</code> on multiple elements\n inside the SVG. However, as you probably have noticed, this only allows\n you to change two colors inside the SVG.</p>\n<p>If you want to have more control over colors and specify more color \nvalues that you could leak into the SVG, you would need more variables; \nthis is where the new CSS Variables specification will come in handy. \nYou can read more about this <a href=\"http://codepen.io/AmeliaBR/thoughts/customizable-svg-icons-css-variables\">here</a>.</p>\n<h2>Final Words</h2>\n<p>In the previous examples, we saw how we can use <code>currentColor</code>\n in multiple places, and then change the colors we want in one place and\n have that color be applied to those multiple places, instead of having \ncreated multiple occurances of the same color and then changed all of \nthem. This helps us <a href=\"http://osvaldas.info/keeping-css-short-with-currentcolor\">write shorter CSS</a>, and provides us with some sort of automation, especially in situations like the UI components we saw in Simon’s talk.</p>\n<p>With CSS Variables, you will be able to define your own set of \nvariables and use them in similar and much, much more use cases, as the \nnew variables will be valid values for <em>any</em> CSS property, not only those that accept <code>&lt;color&gt;</code>\n values. Dealing with SVG icons will certainly become easier, as will \nmaintaining large-scale projects. Again, if you use a preprocessor, then\n you already know how useful variables are.</p>\n<p>Can you think of more use cases for <code>currentColor</code>? If so, make sure you share them in the comments below!</p>","tags":"css","isStarred":"false","note":"","dateCreated":"Wed Mar 11 2015 12:33:15 GMT+0530 (India Standard Time)","dateModified":"Wed Mar 11 2015 12:33:15 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"bD7YXtVTlWegz8ou"}
{"id":"bQQWiCF0jC3AC6Qt","category":"css","categoryId":"29","title":"Align Div in Vertical and Horizontal Center","codes":[{"code":"<div class=\"container\">\n    <div class=\"block\"></div>\n</div>","codeLanguage":"html"},{"code":".container {\n    display: flex;\n    /* Vertical align: */\n    align-items: center;\n    /* Horizontal align: */\n    justify-content: center;\n    \n    /* Safari: */\n    display: -webkit-flex;\n    -webkit-align-items: center;\n    -webkit-justify-content: center;\n}\n\n.container {\n    width: 200px;\n    height: 150px;\n    background: brown;\n}\n\n.block {\n    width: 100px;\n    height: 75px;\n    background: yellow;\n}","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"<span>Using Flexbox:</span>","tags":"css3","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 14:52:10 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423300956523},"mode":"add","comments":[],"images":[],"_id":"bQQWiCF0jC3AC6Qt"}
{"id":"0","category":"node.js","categoryId":"31","title":"Writing for node and the browser","refSite":"http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div>\n    <span>By</span>\n    <a href=\"http://caolanmcmahon.com/about/\">Caolan M<sup>c</sup>Mahon</a>\n    <span>Thu Jul 01 2010</span>\n    <div>\n      <a href=\"http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/#disqus_thread\">12 Comments</a>\n    </div>\n  </div>\n\n  <div>\n    <p>Modules that can be used both on the server and the client-side are a useful\nway to reuse code. This is one way of writing a module that will work well with\nboth systems, while allowing you to write code in the familiar node style.</p>\n\n<p>In node you use module.exports (or just exports) to expose a function:</p>\n\n<pre><code>exports.test = <span>function</span>(){\n    <span>return</span> <span>'hello world'</span>;\n};\n</code></pre>\n\n<p>However, in the browser this will break since 'exports' is not defined. So,\nto work around this, we first need to check if exports is defined, and if not,\ncreate a sensible object for exporting functions to. In the browser this could\nbe a global with the same name as the module:</p>\n\n<pre><code><span>if</span>(<span>typeof</span> exports == <span>'undefined'</span>){\n    <span>var</span> exports = <span>this</span>[<span>'mymodule'</span>] = {};\n}\n</code></pre>\n\n<p>The second problem is that anything you define in the module but don't\nexport can become available in the browser:</p>\n\n<pre><code><span><span>function</span> <span>notExported</span><span>()</span>{</span>\n    <span>return</span> <span>\"shh, I'm not here\"</span>;\n}\n\nexports.test = <span>function</span>(){\n    <span>return</span> <span>'hello world'</span>;\n};\n</code></pre>\n\n<p>In the example above, requiring the module in node would return an object with\nthe method test and nothing else, but in the browser this code would create a\nnew global function called notExported. To fix this problem its a good idea to\nwrap the module's code in a closure (this is good practice anyway!).</p>\n\n<p>Below is an example module that uses a closure which accepts an exports\nobject as an argument. A sensible exports object is created if one does not\nalready exist.</p>\n\n<p><strong>mymodule.js</strong></p>\n\n<pre><code>(<span>function</span>(exports){\n\n    <span>// your code goes here</span>\n\n   exports.test = <span>function</span>(){\n        <span>return</span> <span>'hello world'</span>\n    };\n\n})(<span>typeof</span> exports === <span>'undefined'</span>? <span>this</span>[<span>'mymodule'</span>]={}: exports);\n</code></pre>\n\n<p>Note the use of this['mymodule'] as an export location in the browser. This\ncode can now be used both client and server side:</p>\n\n<p><strong>node</strong></p>\n\n<pre><code><span>var</span> mymodule = require(<span>'./mymodule'</span>),\n    sys = require(<span>'sys'</span>);\n\nsys.puts(mymodule.test());\n</code></pre>\n\n<p><strong>browser</strong></p>\n\n<pre><code><span>&lt;<span>script</span> <span>src</span>=<span>\"mymodule.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n<span>&lt;<span>script</span>&gt;</span><span>\n    alert(mymodule.test());\n</span><span>&lt;/<span>script</span>&gt;</span>\n</code></pre>\n\n<p>Of course, the browser doesn't support many other node features like require(),\nso you'll need to test that your code is suitable for use in the browser first.\nAlso, be careful when using code originally written only for node because the\nV8 javascript engine supports newer language features than many browsers.</p></div>","tags":"node.js","isStarred":"true","note":"","dateCreated":"Fri Feb 27 2015 12:03:17 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 27 2015 12:03:17 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"cIpXweRa1PWVWZ07"}
{"id":"0","category":"jquery","categoryId":"50","title":"Custom Events are Pretty Cool","refSite":"https://css-tricks.com/custom-events-are-pretty-cool/","codes":[{"code":"// Example using .call()\n\n$.fn.faq = function(options) {\n    \n\treturn this.each(function(i, el) {\n\n\t  var base = el,\n              $base = $(el);\n          \n          console.log(options);\n\t  \n\t  base.init = function() {\n\t    // Do initialization stuff\n            $base\n               .find(\"dd\")\n               .hide()\n               .end()\n               .find(\"dt\")\n               .click(function() {\n                 \n                 var ans = $(this).next();\n                 \n                 if (ans.is(\":visible\")) {\n                   base.closeQ(ans); \n                 } else {\n                   base.openQ(ans); \n                 }\n                 \n               });\n\t  };\n\t  \n\t  base.openQ = function(ans) {\n\t  \t// Open panel\n                ans.show();\n\t\t\n\t\t// Do callback\n\t\toptions.qOpen.call();\n\t  };\n\t  \n\t  base.closeQ = function(ans) {\n\t  \t// Open panel\n                ans.hide();\n\t\t\n\t\t// Do callback\n\t\toptions.qClose.call();\n\t  };\n\t  \n\t  base.init();\n\t       \n\t});\n  \n};\n\n$(\"dl\").faq({\n  qOpen: myQuestionOpenCallback,\n  qClose: myQuestionCloseCallback\n});\n\nfunction myQuestionOpenCallback() {\n  alert(\"answer opened!\");\n}\n\nfunction myQuestionCloseCallback() {\n  alert(\"answer closed!\");\n}","codeLanguage":"javascript"},{"code":"// Example using .trigger()\n\n$.fn.faq = function(options) {\n    \n\treturn this.each(function(i, el) {\n\n\t  var base = el,\n              $base = $(el);\n          \n          console.log(options);\n\t  \n\t  base.init = function() {\n\t    // Do initialization stuff\n            $base\n               .find(\"dd\")\n               .hide()\n               .end()\n               .find(\"dt\")\n               .click(function() {\n                 \n                 var ans = $(this).next();\n                 \n                 if (ans.is(\":visible\")) {\n                   base.closeQ(ans); \n                 } else {\n                   base.openQ(ans); \n                 }\n                 \n               });\n\t  };\n\t  \n\t  base.openQ = function(ans) {\n\t  \t// Open panel\n                ans.show();\n\t\t\n\t\t// Do callback\n                ans.trigger(\"ansOpen\");\n\t  };\n\t  \n\t  base.closeQ = function(ans) {\n\t  \t// Open panel\n                ans.hide();\n\t\t\n\t\t// Do callback\n\t\tans.trigger(\"ansClose\");\n\t  };\n\t  \n\t  base.init();\n\t       \n\t});\n  \n};\n\n$(\"dl\").faq();\n  \n$(\"dd\").on(\"ansOpen\", function() {\n  alert(\"answer opened!\");\n});\n\n$(\"dd\").on(\"ansClose\", function() {\n  alert(\"answer closed!\");\n});","codeLanguage":"javascript"},{"code":"<h1>Click questions to see answers.</h1>\n  <dl>\n    <dt>Example Question #1</dt>\n    <dd>Answer #1</dd>\n    <dt>Example Question #2</dt>\n    <dd>Answer #2</dd>\n    <dt>Example Question #3</dt>\n    <dd>Answer #3</dd>\n  </dl>","codeLanguage":"html5"}],"description":"","tags":"jQuery,custom event","isStarred":"false","note":"","dateCreated":"Fri Feb 27 2015 12:46:05 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 27 2015 12:46:05 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"cy7lP0HcTm7UXORA"}
{"id":"0","category":"patterns","categoryId":"58","title":"JavaScript Design Patterns : Observer","refSite":"http://www.dofactory.com/javascript/observer-design-pattern","codes":[{"code":"function Click() {\n    this.handlers = []; // observers\n}\n\nClick.prototype = {\n\t\n    subscribe: function(fn) {\n\t\tthis.handlers.push(fn);\n\t},\n\t\n    unsubscribe: function(fn) {\n\t\tthis.handlers = this.handlers.filter(\n\t\tfunction(item) {\n\t\t\tif (item !== fn) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t\t);\n\t},\n\t\n    fire: function(o, thisObj) {\n\t\tvar scope = thisObj || window;\n\t\tthis.handlers.forEach(function(item) {\n\t\t\titem.call(scope, o);\n\t\t});\n\t}\n}\n\n// log helper\n\nvar log = (function() {\n    var log = \"\";\n\t\n    return {\n\t\tadd: function(msg) { log += msg + \"\\n\"; },\n\t\tshow: function() { alert(log); log = \"\"; }\n\t}\n})();\n\nfunction run() {\n\t\n    var clickHandler = function(item) {\n\t\tlog.add(\"fired: \" + item);\n\t};\n\t\n    var click = new Click();\n\t\n    click.subscribe(clickHandler);\n    click.fire('event #1');\n    click.unsubscribe(clickHandler);\n    click.fire('event #2');\n    click.subscribe(clickHandler);\n    click.fire('event #3');\n\t\n    log.show();\n}","codeLanguage":"javascript"},{"code":"","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"}],"description":"<h3>Summary</h3>\n\n<p>\n    The Observer pattern offers a subscription model in which objects \nsubscribe to an event and get notified when the event occurs.\n    This pattern is the cornerstone of event driven programming, \nincluding JavaScript.\n    The Observer pattern facilitates good object-oriented design and \npromotes loose coupling.\n</p>\n<p>\n    When building web apps you end up writing many event handlers. Event\n handlers are functions that will be notified when a certain event \nfires.\n    These notifications optionally receive an event argument with \ndetails about the event (for example the x and y position of the mouse \nat a click event).\n</p>\n<p>\n    The event and event-handler paradigm in JavaScript is the manifestation of the Observer design pattern.\n    Another name for the Observer pattern is Pub/Sub, short for Publication/Subscription.\n</p>\n\n<br>\n\n<h3>Diagram</h3>\n<div>\n    <img src=\"http://www.dofactory.com/images/diagrams/javascript/javascript-observer.jpg\" alt=\"Diagram JavaScript Observer Design Pattern\">\n</div>\n<br>\n<br>\n\n<h3>Participants</h3>\n<div>\n    The objects participating in this pattern are:<br><br>\n\n    <ul>\n        <li>\n            <b>Subject</b> -- In sample code: <b>Click</b>\n            <ul>\n                <li>maintains list of observers. Any number of Observer objects may observe a Subject</li>\n                <li>implements an interface that lets observer objects subscribe or unsubscribe</li>\n                <li>sends a notification to its observers when its state changes</li>\n            </ul>\n        </li>\n        <li>\n            <b>Observers</b> -- In sample code: <b>clickHandler</b>\n            <ul>\n                <li>has a function signature that can be invoked when Subject changes (i.e. event occurs)</li>\n            </ul>\n        </li>\n    </ul>\n\n</div>\n\n<h3>Sample code in JavaScript</h3>\n\n<p>\n    The <span>Click</span> object represents the Subject.\n    The <span>clickHandler</span> function is the subscribing Observer.\n    This handler subscribes, unsubscribes, and then subscribes itself while events are firing.\n    It gets notified only of events #1 and #3.\n</p>\n<p>\n    Notice that the <span>fire</span> method accepts two arguments.\n    The first one has details about the event and the second one is the\n    context, that is, the <span>this</span> value for when the eventhandlers are called.\n    If no context is provided <span>this</span> will be bound to the global object (window).\n</p>\n<p>\n    The <span>log</span> function is a helper which collects and displays results.&nbsp;</p>","tags":"javascript,Design Patterns,Observer Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 19:53:06 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 19:53:06 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"dTXtU2vGkhJ196eS"}
{"id":"0","category":"javascript","categoryId":"30","title":"Function.prototype.call()","refSite":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2>Summary</h2>\n<p>The <code><strong>call()</strong></code> method calls a function with a given <code>this</code> value and arguments provided individually.</p>\n<div>\n <p><strong>Note:</strong> While the syntax of this function is almost identical to that of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" title=\"The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).\"><code>apply()</code></a>, the fundamental difference is that <code>call()</code> accepts an <strong>argument list</strong>, while <code>apply()</code> accepts a <strong>single array of arguments</strong>.</p>\n</div>\n\n<h2>Syntax</h2>\n<pre><code><var>fun</var>.call(<var>thisArg</var>[, <var>arg1</var>[, <var>arg2</var>[, ...]]])</code></pre>\n\n<h3>Parameters</h3>\n<dl>\n <dt><code>thisArg</code></dt>\n <dd>The value of <code>this</code> provided for the call to <em><code>fun</code></em>. Note that <code>this</code> may not be the actual value seen by the method: if the method is a function in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\" title=\"The documentation about this has not yet been written; please consider contributing!\">non-strict mode</a> code, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"The value null is a JavaScript literal representing null or an &quot;empty&quot; value, i.e. no object value is present. It is one of JavaScript's primitive values.\"><code>null</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"The global undefined value property represents the value undefined. It is one of JavaScript's primitive types.\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be boxed.</dd>\n <dt><code>arg1, arg2, ...</code></dt>\n <dd>Arguments for the object.</dd>\n</dl>\n\n<h2>Description</h2>\n<p>You can assign a different <code>this</code> object when calling an existing function. <code>this</code> refers to the current object, the calling object. With <code>call</code>, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</p>\n\n<h2>Examples</h2>\n\n<h3>Example: Using <code>call</code> to chain constructors for an object</h3>\n<p>You can use <code>call</code> to chain constructors for an object, similar to Java. In the following example, the constructor for the <code>Product</code> object is defined with two parameters, <code>name</code> and <code>price</code>. Two other functions <code>Food</code> and <code>Toy</code> invoke <code>Product</code> passing <code>this</code> and <code>name</code> and <code>price</code>. Product initializes the properties <code>name</code> and <code>price</code>, both specialized functions define the <code>category</code>.</p>\n<pre data-number=\"\"><code><span>function</span> <span>Product<span>(</span></span>name<span>,</span> price<span>)</span> <span>{</span>\n  <span>this</span><span>.</span>name <span>=</span> name<span>;</span>\n  <span>this</span><span>.</span>price <span>=</span> price<span>;</span>\n\n  <span>if</span> <span>(</span>price <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>\n    <span>throw</span> <span>RangeError<span>(</span></span><span>'Cannot create product '</span> <span>+</span>\n                      <span>this</span><span>.</span>name <span>+</span> <span>' with a negative price'</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>return</span> <span>this</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>Food<span>(</span></span>name<span>,</span> price<span>)</span> <span>{</span>\n  Product<span>.</span><span>call<span>(</span></span><span>this</span><span>,</span> name<span>,</span> price<span>)</span><span>;</span>\n  <span>this</span><span>.</span>category <span>=</span> <span>'food'</span><span>;</span>\n<span>}</span>\n\nFood<span>.</span>prototype <span>=</span> Object<span>.</span><span>create<span>(</span></span>Product<span>.</span>prototype<span>)</span><span>;</span>\n\n<span>function</span> <span>Toy<span>(</span></span>name<span>,</span> price<span>)</span> <span>{</span>\n  Product<span>.</span><span>call<span>(</span></span><span>this</span><span>,</span> name<span>,</span> price<span>)</span><span>;</span>\n  <span>this</span><span>.</span>category <span>=</span> <span>'toy'</span><span>;</span>\n<span>}</span>\n\nToy<span>.</span>prototype <span>=</span> Object<span>.</span><span>create<span>(</span></span>Product<span>.</span>prototype<span>)</span><span>;</span>\n\n<span>var</span> cheese <span>=</span> <span>new</span> <span>Food</span><span>(</span><span>'feta'</span><span>,</span> <span>5</span><span>)</span><span>;</span>\n<span>var</span> fun <span>=</span> <span>new</span> <span>Toy</span><span>(</span><span>'robot'</span><span>,</span> <span>40</span><span>)</span><span>;</span><div data-start=\"1\"></div><div data-start=\"2\"></div><div data-start=\"3\"></div><div data-start=\"4\"></div><div data-start=\"5\"></div><div data-start=\"6\"></div><div data-start=\"7\"></div><div data-start=\"8\"></div><div data-start=\"9\"></div><div data-start=\"10\"></div><div data-start=\"11\"></div><div data-start=\"12\"></div><div data-start=\"13\"></div><div data-start=\"14\"></div><div data-start=\"15\"></div><div data-start=\"16\"></div><div data-start=\"17\"></div><div data-start=\"18\"></div><div data-start=\"19\"></div><div data-start=\"20\"></div><div data-start=\"21\"></div><div data-start=\"22\"></div><div data-start=\"23\"></div><div data-start=\"24\"></div><div data-start=\"25\"></div><div data-start=\"26\"></div><div data-start=\"27\"></div><div data-start=\"28\"></div></code></pre>\n\n<h3>Example: Using <code>call</code> to invoke an anonymous function</h3>\n<p>In this purely constructed example, we create anonymous function and use <code>call</code>\n to invoke it on every object in an array. The main purpose of the \nanonymous function here is to add a print function to every object, \nwhich is able to print the right index of the object in the array. \nPassing the object as <code>this</code> value was not strictly necessary, but is done for explanatory purpose.</p>\n<pre data-number=\"\"><code><span>var</span> animals <span>=</span> <span>[</span>\n  <span>{</span> species<span>:</span> <span>'Lion'</span><span>,</span> name<span>:</span> <span>'King'</span> <span>}</span><span>,</span>\n  <span>{</span> species<span>:</span> <span>'Whale'</span><span>,</span> name<span>:</span> <span>'Fail'</span> <span>}</span>\n<span>]</span><span>;</span>\n\n<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> animals<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>\n  <span>(</span><span>function</span><span>(</span>i<span>)</span> <span>{</span>\n    <span>this</span><span>.</span>print <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n      console<span>.</span><span>log<span>(</span></span><span>'#'</span> <span>+</span> i <span>+</span> <span>' '</span> <span>+</span> <span>this</span><span>.</span>species\n                  <span>+</span> <span>': '</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>\n    <span>}</span>\n    <span>this</span><span>.</span><span>print<span>(</span></span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>.</span><span>call<span>(</span></span>animals<span>[</span>i<span>]</span><span>,</span> i<span>)</span><span>;</span>\n<span>}</span></code></pre>","tags":"javascript,Call and Apply","isStarred":"false","note":"","dateCreated":"Fri Feb 27 2015 19:40:50 GMT+0530 (India Standard Time)","dateModified":"Fri Feb 27 2015 19:40:50 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"e9dtiDrVNo6Rghdm"}
{"id":"0","category":"javascript","categoryId":"30","title":"Bootstrap Popover : Show on hover but don't hide until user hover out of popover","codes":[{"code":"// Show Bootstrap popover on mouse hover, but don't hide \n// until it hover out of Popover itself\n\n$('a[data-toggle=\"popover\"]').popover({ \n\ttrigger: \"manual\" , \n\thtml: true, \n\tanimation:false,\n\tcontainer: 'body',\n\tcontent: function() {\n\t\treturn $('.career-progression-map .map-popover-content').find('#'+$(this).attr('data-map-name')).html() ;\n\t},\n\t}).on(\"mouseenter\", function () {\n\tvar _this = this;\n\t$(this).popover(\"show\");\n\t$('.popover .js-scrollbar').mCustomScrollbar({\n\t\tmouseWheel:true,\n\t\tcontentTouchScroll: true,\n\t\tupdateOnContentResize : true,\n\t\taxis:\"y\",\n\t\ttheme: \"thin\",\n\t\tscrollInertia: 0,\n\t\t//setTop : 0,\n\t\tadvanced:{\n\t\t\tupdateOnContentResize: true,\n\t\t\tupdateOnBrowserResize: true\n\t\t}\n\t});\n\t$('.popover .js-scrollbar').mCustomScrollbar(\"update\");\n\t$(\".popover\").on(\"mouseleave\", function () {\n\t\t$(_this).popover('hide');\n\t});\n\t}).on(\"mouseleave\", function () {\n\tvar _this = this;\n\tsetTimeout(function () {\n\t\tif (!$(\".popover:hover\").length) {\n\t\t\t$(_this).popover(\"hide\");\n\t\t}\n\t}, 300);\n});\n\n$('.popover .js-scrollbar').mCustomScrollbar(\"update\");","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<ul><li>Open popover on hover event for the popover button</li><li>Keep popover open when hovering over the popover box</li><li>Close popover on mouseleave for either the popover button, or the popover box.</li></ul>","tags":"bootstrap,js,javascript","isStarred":"false","note":"","dateCreated":"Tue Dec 30 2014 22:10:25 GMT+0530 (India Standard Time)","dateModified":"Tue Dec 30 2014 22:10:25 GMT+0530 (India Standard Time)","mode":"add","comments":[{"snippetID":"eIQLBu6phkvCcMwI","commentId":"1","description":"<p>sfsfsfsfs sdfsfasfasfasfsaf</p>","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1419957708985},"dateModified":{"$$date":1423056574350}}],"images":[],"_id":"eIQLBu6phkvCcMwI"}
{"id":"0","category":"javascript","categoryId":"30","title":"JavaScript Basic Type Detection","refSite":"http://jsmantras.com/blog/JavaScript-Basic-Type-Detection","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>JavaScript is a loosely typed language. As <a href=\"http://www.crockford.com/\">Douglas Crockford</a>\n says, this is one of its good parts. However, in JavaScript there is no\n native functions for type detection as in case of some other high level\n languages like Java.</p>\n<p>Often while programming in JS we required to check the type for an \nobject. Some JS frameworks provide native functions for type detection. \nIn case if the framework doesn't have, we can create new functions.</p>\n<br>\n\n<pre>\t<code><span>function</span> isArray<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span>Object<span>.</span>prototype<span>.</span>toString<span>.</span>apply<span>(</span>o<span>)</span> <span>==</span><span>=</span> <span>'[object Array]'</span><span>)</span><span>;</span>\n\t<span>}</span>\n\n\t<span>function</span> isNull<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span>o <span>==</span><span>=</span> <span>null</span><span>)</span><span>;</span>\n\t<span>}</span>\n\n\t<span>function</span> isNumber<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'number'</span><span>)</span> <span>&amp;&amp;</span> isFinite<span>(</span>o<span>)</span><span>;</span>\n\t<span>}</span>\n\n\t<span>function</span> isString<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'string'</span><span>)</span><span>;</span>\n\t<span>}</span>\n\n\t<span>function</span> isUndefined<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'undefined'</span><span>)</span><span>;</span>\n\t<span>}</span>\n\n\t<span>function</span> isFunction<span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'function'</span><span>)</span> <span>||</span> \n\t\t\t<span>(</span>Object<span>.</span>prototype<span>.</span>toString<span>.</span>apply<span>(</span>o<span>)</span> <span>==</span><span>=</span> <span>'[object Function]'</span><span>)</span><span>;</span>\n\t<span>}</span></code>\n</pre>\n<br>\n<p>Or we can extend the framework to have these functions. For instance, jQuery has inbuilt functions  <code>$.isArray(obj)</code> and <code>$.isFunction(obj)</code>. We can define other functions as follows:</p>\n<br>\t\n<pre>\t<code>$<span>.</span>extend<span>(</span><span>{</span>\n\tisNull <span>:</span> <span>function</span> <span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span>o <span>==</span><span>=</span> <span>null</span><span>)</span><span>;</span>\n\t<span>}</span><span>,</span>\n\tisNumber <span>:</span> <span>function</span> <span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'number'</span><span>)</span> <span>&amp;&amp;</span> isFinite<span>(</span>o<span>)</span><span>;</span>\n\t<span>}</span><span>,</span>\n\tisString <span>:</span> <span>function</span> <span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'string'</span><span>)</span><span>;</span>\n\t<span>}</span><span>,</span>\n\tisUndefined <span>:</span> <span>function</span> <span>(</span>o<span>)</span> <span>{</span>\n\t\t<span>return</span> <span>(</span><span>typeof</span> o <span>==</span><span>=</span> <span>'undefined'</span><span>)</span><span>;</span>\n\t<span>}</span>\n<span>}</span><span>)</span><span>;</span></code>\n</pre>\t\n\t\n<br>\t\n\t\n<blockquote>\n<h3>Note:</h3><h3>\n\n<p>jQuery method <code>isNumeric()</code> is not equivalent to the isNumber() mentioned above.\n<code>isNumeric()</code> parse the input object to float and then checks whether it is a number or not. But in case of <code>isNumber()</code> <code>typeOf</code> the object is checked.</p><p>\n<br>\n</p><pre>\t<code>$<span>.</span>isNumeric<span>(</span><span>'12345'</span><span>)</span> <span spellcheck=\"true\">//true\n</span>$<span>.</span>isNumber<span>(</span><span>'12345'</span><span>)</span> <span spellcheck=\"true\">//false</span></code>\n</pre>\t\n<br>\n<p><code>isNumeric(obj)</code> function in general can be defined as follows:</p>\t\n<br>\n<pre>\t<code><span>function</span> isNumeric<span>(</span>o<span>)</span> <span>{</span>\n\t<span>return</span> <span>!</span>isNaN<span>(</span> parseFloat<span>(</span>obj<span>)</span> <span>)</span> <span>&amp;&amp;</span> isFinite<span>(</span> obj <span>)</span><span>;</span>\n<span>}</span></code>\n</pre>\t\n</h3></blockquote>\n<br>\t\n<h3>Conclusion</h3>\n<p>Object type detection is basic functionality for a programming \nlanguage. But in case of JavaScript this feature is not complete. The \nbest way to overcome this is using well built frameowrks (like <a href=\"http://yuilibrary.com/\">YUI</a>, <a href=\"http://jquery.com/\">jQuery</a>, etc,.), which either have inbuilt functions for type detection or can be easily added/extended to have such functionalities.</p>","tags":"javascript","isStarred":"false","note":"","dateCreated":"Fri Mar 13 2015 19:11:56 GMT+0530 (India Standard Time)","dateModified":"Fri Mar 13 2015 19:11:56 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"eukfyTyXJdlqyM6i"}
{"id":"0","category":"node.js","categoryId":"31","title":"How To Serve Large Files With Node.js","codes":[{"code":"var libpath = require('path');\nvar http = require('http');\nvar fs = require('fs');\nvar url = require('url');\nvar bind_port = 8001;\nvar path = \"/path/to/your/base_directory/\";\n\nhttp.createServer(function (request, response) {\n\tvar uri = url.parse(request.url).pathname;\n\tvar filename = libpath.join(path, uri);\n\tlibpath.exists(filename, function (exists) {\n\t\tif (!exists) {\n\t\t\tconsole.log('404 File Not Found: ' + filename);\n\t\t\tresponse.writeHead(404, {\n\t\t\t\t\"Content-Type\": \"text/plain\"\n\t\t\t});\n\t\t\tresponse.write(\"404 Not Found\\n\");\n\t\t\tresponse.end();\n\t\t\treturn;\n\t\t\t} else{\n\t\t\tconsole.log('Starting download: ' + filename);\n\t\t\tvar stream = fs.createReadStream(filename, { bufferSize: 64 * 1024 });\n\t\t\tstream.pipe(response);\n\t\t}\n\t});\n}).listen(bind_port);\n\nconsole.log('Download Server listening on Port' + bind_port); ","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<p>Here we go: Simple HTTP Server built with <a href=\"http://node.js/\">node.js</a> to serve/ stream large files.<br></p>","tags":"node.js,javascript","isStarred":"false","note":"","dateCreated":"Sat Jan 24 2015 11:51:41 GMT+0530 (India Standard Time)","dateModified":"Sat Jan 24 2015 11:51:41 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"fAHRB7Rl0QCsPOVX"}
{"id":"h1bj3VD2gpC3ETCa","category":"javascript","categoryId":"30","title":"The Knowledge That Will Double Your Hourly Rate As A Web Designer","refSite":"http://www.1stwebdesigner.com/freelance-design-rates/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2>How Can I Possibly Increase My Freelance Design Rates?</h2>\n<p>Let me tell you a story of a $100 nail, which will change your whole \nperception about how much you can charge as a freelancer or service \nbusiness owner. If you will get this story and article right, your \nfreelance design rates and happiness levels will skyrocket. If you won’t\n you will keep competing in the bidding wars never being able to make \njust enough money to have a proper living. Let’s get to the story..</p>\n<p>One man had a gorgeous parquet floor in his house but one day it suddenly started creaking.</p>\n<p>Every time someone walks around the house would make loud creaking sounds which irritated this man a lot.</p>\n<p>At first, he tried fixing it himself by rearranging the furniture. \nThen, he called the guys who made his floor and had them take it apart \nand put it back.</p>\n<p>But nothing worked because the creaking continued.</p>\n<p>Someone told him about the best carpenter in town and so he invited the man to his house.</p>\n<p>The carpenter walked around the house for a few minutes and listened \ncarefully to the creaking sound that came from the floor. Then, he took a\n tiny little nail and hammered it between two sections of the parquet.</p>\n<p>The creaking went away.</p>\n<blockquote><p>- “That is amazing! How much do I owe you?” the guy asked.</p>\n<p>– “A hundred dollars,” replied the carpenter .</p>\n<p>– “You mean I am going to pay you a $100 for one tiny nail?”</p>\n<p>– “Of course not. You’re only paying 10 cents for that nail and $99.90 goes for my knowledge where to put it.”</p></blockquote>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/valuable.jpg\" alt=\"valuable\" height=\"480\" width=\"800\" data-src=\"database/uploads/images/article_images/valuable.jpg\"></div><p>Think about how you can deliver better results to your client.</p></div>\n<h2>&nbsp;What Are You Getting Paid For?</h2>\n<p>The hours you spend designing a website for someone are the hours of \nYour Life that you can never get back. So when you sell a part of your \nlife to someone, you want to sell it at the highest price possible.</p>\n<p>The&nbsp;question, therefore, is: what makes a web designer charge more per hour and how to increase your freelance design rates?</p>\n<p>It’s the knowledge! And the <a href=\"http://www.1stwebdesigner.com/partnership-business-lessons/\" target=\"_blank\">lessons</a> you learn when applying this knowledge.</p>\n<p>The knowledge that makes you solve the problems of your clients.</p>\n<p>If you understand the goals and the pains of your clients and you \nhave enough knowledge to address them like no one else, you can charge a\n lot higher rates for your freelance design work. Just like the \ncarpenter from my story.</p>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/knowledge.jpg\" alt=\"knowledge\" height=\"480\" width=\"800\" data-src=\"database/uploads/images/article_images/knowledge.jpg\"></div><p>Think how to add more value to your service and your client.</p></div>\n<h2>You Should Have Your ROI As A Web Designer</h2>\n<p>Why do people launch websites anyways?</p>\n<p>They launch websites because they want to make money <i>(in most cases)</i>.</p>\n<p>So instead of designing a “good-looking picture,” you should be \ndesigning a “profitable online entity” that will help your clients \nachieve their business goals.</p>\n<p>You can easily persuade a person to pay you 2x more if you explain \nhim that with your design he will easily return that money in a few \ndays. That’s your ROI.</p>\n<div></div><div><div><a href=\"http://ctt.ec/x4U88\" target=\"_blank\">Cheap designers create what the client asks them. Expensive designers create what the client needs.</a></div><div></div></div>\n<p>You have to familiarize yourself with all the ins and outs of the \nbusiness your client intends to put online and create a perfect website \nthat will give your client the results he needs.</p>\n<p>If you’re able to create a website that will bring tons of money to \nyour client, he will happily share some of that money with you.</p>\n<h2>Learn To Design For Conversions</h2>\n<p>If you’ve never heard of CRO <i>(</i><a href=\"https://qualaroo.com/beginners-guide-to-cro/\" target=\"_blank\"><i>Conversion Rate Optimisation</i></a><i>)</i> I guess you’re not getting paid a lot for your design work.</p>\n<p>What’s the point of having a website that does not convert visitors to fans, leads, or sales?</p>\n<p>Different websites have different goals but, generally, they can be divided into three groups:</p>\n<ol><li><b>Designed to make you stick</b> and regularly come back:\n<ul><li><a href=\"https://www.youtube.com/\" target=\"_blank\">https://www.youtube.com/</a> ;</li>\n<li><a href=\"http://www.buzzfeed.com/\" target=\"_blank\">http://www.buzzfeed.com/</a> ;</li>\n<li><a href=\"http://www.reddit.com/\" target=\"_blank\">http://www.reddit.com/</a>.</li>\n</ul></li>\n</ol><ol start=\"2\"><li><b>Designed to make you opt in</b> for something. This can be a free service, a trial period, or email updates:\n<ul><li><a href=\"https://basecamp.com/\" target=\"_blank\">https://basecamp.com/</a> ;</li>\n<li><a href=\"https://www.dropbox.com/\" target=\"_blank\">https://www.dropbox.com/</a> ;</li>\n<li><a href=\"http://www.groupon.com/\" target=\"_blank\">http://www.groupon.com/</a></li>\n</ul></li>\n</ol><ol start=\"3\"><li><b>Designed to make you buy</b> something:\n<ul><li><a href=\"http://www.amazon.com/\" target=\"_blank\">http://www.amazon.com/</a> ;</li>\n<li><a href=\"http://themeforest.net/\" target=\"_blank\">http://themeforest.net/</a> ;</li>\n<li><a href=\"http://www.ebay.com/\" target=\"_blank\">http://www.ebay.com/</a></li>\n</ul></li>\n</ol><p>You, as a web designer, should study some psychological \nprinciples and conversion optimization best practices to make sure your \ndesign is perfect for achieving the business goal that it was built for.</p>\n<p>A good example would be this eye-tracking study from <a href=\"http://thinkeyetracking.com/\" target=\"_blank\">ThinkEyeTracking:</a></p>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/eye-tracking-increase-conversions.jpg\" alt=\"Predict where people will look and ensure design converts.\" height=\"573\" width=\"485\" data-src=\"database/uploads/images/article_images/eye-tracking-increase-conversions.jpg\"></div><p>Predict where people will look and ensure design converts.</p></div>\n<ul><li><b>Before</b> (eye looking straight ahead): Only 6% of 200 usability test participants looked at the product.</li>\n</ul><ul><li><b>After </b>(eye looking towards the product): 84% of usability test participants now looked at the product!</li>\n</ul><p>A few pieces of knowledge like that would easily impress your client and persuade him that you’re well worth your money.</p>\n<h4><b>Where to start to learn about conversion rate optimization?</b></h4>\n<p>If you’re totally new to this, I suggest you read the book <a href=\"http://www.amazon.com/gp/product/0321489829/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321489829&amp;linkCode=as2&amp;tag=1stwebdesigne-20&amp;linkId=27SMIR76TXD3URMS\" target=\"_blank\">Web Design For ROI</a>. Then, you might want to become a regular reader of <a href=\"http://conversionxl.com/blog/\" target=\"_blank\">ConversionXL blog</a>, because they are one of the best resources on CRO so far.</p>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/results.jpg\" alt=\"results\" height=\"480\" width=\"800\" data-src=\"database/uploads/images/article_images/results.jpg\"></div><p>Design for conversions, results.</p></div>\n<h2>Learn To Design For Usability</h2>\n<p>If you’re still thinking about websites as a bunch of static HTML pages, you’re way too old school my friend.</p>\n<p>Today a website can be just about anything: a social network, an \nonline community, a blogging platform, a web tool, a crowdfunding \nplatform, etc.</p>\n<p>New start-ups emerge every single day and there is a learning curve \nto every one of them. If that curve feels comfortable, people will \nstick. But if it’s not, you’re out of business.</p>\n<p>The way you make the learning curve painless is by applying usability principles to your design.</p>\n<p>A good example would be the navigation menu of the website you’re \ndesigning. There’s a good chance that many people will land on some \ninternal page and if you hide the navigation menu from them in a \n“not-so-obvious” place, they will bounce. That is why the vast majority \nof websites has the navigation menu at the top of every page. Read more \nabout common navigation menu mistakes at <a href=\"https://blog.kissmetrics.com/common-website-navigation-mistakes/\" target=\"_blank\">KissMetrics article.</a></p>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/1-non-standard-navigation-location.jpg\" alt=\"Don't underestimate user friendliness in the website.\" height=\"348\" width=\"652\" data-src=\"database/uploads/images/article_images/1-non-standard-navigation-location.jpg\"></div><p>Don’t underestimate user friendliness in the website.</p></div>\n<p>Another important thing to keep in mind is the device that people will use to access the site.</p>\n<p><a href=\"http://www.theage.com.au/it-pro/business-it/mary-meekers-2014-internet-trends-report-is-a-must-read-20140529-zrrdf.html\" target=\"_blank\">According to Mary Meeker</a>,\n mobile usage now accounts for 25% of all web traffic in 2014. That is \nup from 14% a year ago. This means that some knowledge about responsive \ndesign will instantly make you a more expensive web designer.</p>\n<h4><b>Where you can start?</b></h4>\n<p>There’s an awesome book by Steve Krug called <a href=\"http://www.amazon.com/gp/product/0321344758/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321344758&amp;linkCode=as2&amp;tag=1stwebdesigne-20&amp;linkId=BUFSR6IWMU5DS2YS\" target=\"_blank\">Don’t Make Me Think</a> and once you’re done with it, go read some articles of <a href=\"http://www.nngroup.com/articles/author/jakob-nielsen/\" target=\"_blank\">Jacob Nielsen</a>&nbsp;because he’s considered as one of the pioneers of usability.</p>\n<h2>Learn To Design For Readability</h2>\n<p>It amazes me how many designers don’t pay attention to text content.</p>\n<p>I’m a huge fan of typography and I believe that a good selection of fonts can breathe some charisma into your website.</p>\n<p>Just think about it – every major brand has its own unique font but that’s only the tip of the iceberg.</p>\n<p>Did you know that the optimal width of text content is about 600 pixels <i>(or 100 characters per line)</i>? That number comes from <a href=\"http://www.eldritch.org/erskin/temp/layout_on_screen.pdf\" target=\"_blank\">research by Mary C. Dyson</a> called “How Physical Text Layout Affects Reading From the Screen”.</p>\n<p>To me, this looks like a perfect bit of knowledge to impress your clients and ask more for your design work.</p>\n<p>And there’s so many other stuff you have to consider, such as \ntypeface, size, spacing, line height, subheadings, paragraphs, etc. All \nof that makes the website more readable, and people stick longer and \nconvert better.</p>\n<p>Now,&nbsp;do you know who else used to be a huge fan of typography?</p>\n<blockquote><p>“Because I had dropped out and didn’t have to take the \nnormal classes, I decided to take a calligraphy class to learn how to do\n this. I learned about serif and san serif typefaces, about varying the \namount of space between different letter combinations, about what makes \ngreat typography great. It was beautiful, historical, artistically \nsubtle in a way that science can’t capture, and I found it fascinating.”</p>\n<p><em>- Steve Jobs</em></p></blockquote>\n<p><b>Where to start?</b></p>\n<p>I haven’t heard of any good books on typography and designing content <i>(maybe you can recommend me some?)</i> but I sure know some amazing websites on that topic:</p>\n<ul><li><a href=\"http://typedia.com/\" target=\"_blank\">http://typedia.com/</a></li>\n<li><a href=\"http://www.fonts.com/\" target=\"_blank\">http://www.fonts.com/</a></li>\n<li><a href=\"http://ilovetypography.com/\" target=\"_blank\">http://ilovetypography.com/</a></li>\n</ul><h1>Time To Become Smarter</h1>\n<p>I hope you resonate my idea that becoming more knowledgeable in your \nfield is a perfect way to earn more money and be able to increase your \nfreelance design rates while cutting your working hours.</p>\n<p><em>Shameless self promotion: If you want to spice up your web design\n skills and learn Bootstrap, building WordPress responsive site, you \nmight want to check out our recent course <a href=\"http://rockingcode.com/\" target=\"_blank\">RockingCode</a>.</em></p>\n<p>In fact, if you look at the richest people in the world and their \nhabits, you’re going to discover that they love to self-educate:</p>\n<ul><li><b>63%</b> of them listen to audio books during commute;</li>\n<li><b>88%</b> read 30+ minutes each day;</li>\n<li><b>86%</b> believe in lifelong educational self-improvement.</li>\n</ul><p>For example one way to leverage your knowledge is by learning to use <a href=\"http://www.1stwebdesigner.com/how-to-build-a-wordpress-website-10x-speed/\" target=\"_blank\">better tools</a>, so you can work faster.</p>\n<div><div><img src=\"http://www.1stwebdesigner.com/wp-content/uploads/2015/02/productivity-stats.jpg\" alt=\"productivity stats\" height=\"480\" width=\"800\" data-src=\"database/uploads/images/article_images/productivity-stats.jpg\"></div><p>These numbers come from an awesome infographic called “<a href=\"http://www.business-management-degree.net/features/wealthiest-people/\" target=\"_blank\">Habits of the World’s Wealthiest People</a>”.</p></div>\n<p>So, I guess now you can see the pattern.</p>\n<p><em>This article has been written by <a href=\"http://bloggerjet.com/\" target=\"_blank\">Tim Soulo</a>, Friend and Premium Content Partner of 1WD.</em></p>\n<p><em>In&nbsp;case you’re looking for some great business / life / productivity advice, I encourage you to download my free ebook called “<a href=\"http://bloggerjet.com/free-ebook-youtube/\" target=\"_blank\">15 YouTube Channels That Make You Smarter</a>” and let me know your thoughts on this article in the comments below.</em></p>","tags":"Knowledge","isStarred":"false","note":"","dateCreated":"Thu Mar 12 2015 20:21:34 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426176684578},"mode":"add","comments":[],"images":[],"_id":"h1bj3VD2gpC3ETCa"}
{"id":"0","category":"node.js","categoryId":"31","title":"Writing JavaScript Modules for Both Browser and Node.js","refSite":"http://www.matteoagosti.com/blog/2013/02/24/writing-javascript-modules-for-both-browser-and-node/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>I recently started the complete refactor of <a href=\"http://feathe.rs/\" title=\"Feathers, blogless writing since 2012\">feathe.rs</a> and immediately faced with the issue of code reuse between client and server. The app is completely written in JavaScript using Node.js on the server side and requires several validation routines that should also run on the client Browser. With this short article I’ll explain how to write modules whose code can be easily reused in both Browser and Node.js.</p><p>Let’s assume we want to create a module with a <code>Validator</code> object that exports a serie of routines for validating stuff. The Node.js approach would be creating a <code>validator.js</code> file with the following content:</p><pre><code>var Validator = (function() {  var Validator = function(options) {    ...  };  Validator.prototype.foo = function foo() {    ...  };  return Validator;})();module.exports = Validator;</code></pre><p>and then access it in using the <code>require</code> function:</p><pre><code>var Validator = require('./validator');var v = new Validator({...});v.foo(...);</code></pre><p>To use it in the client we could do the following:</p><pre><code>&lt;script src=\"validator.js\"&gt;&lt;script&gt;  var v = new Validator({...});  v.foo(...);</code></pre><p>The above code will throw an error as the <code>module</code> variable used in <code>validator.js</code> is not defined. However the <code>Validator</code> object sill gets exported, contrary to what happens in Node.js where only what’s actually being assigned to <code>module.exports</code> is visible outside the module. In order to fix this weird behaviour we have first to deal with the <code>module</code> definition and then with information hiding.</p><p>The workaround is to check for <code>module</code> variable definition (including <code>exports</code>) and if undefined, as in the Browser, associate whatever gets exported to the <code>window</code> scope. In addition to it, as to keep information hiding all module’s code should be wrapped into a closure. The resulting module’s code would look like this:</p><pre><code>(function() {  var Validator = (function() {    var Validator = function(options) {      ...    };    Validator.prototype.foo = function foo() {      ...    };    return Validator;  })();  if (typeof module !== 'undefined' &amp;&amp; typeof module.exports !== 'undefined')    module.exports = Validator;  else    window.Validator = Validator;})();</code></pre><p>If you want to support <code>AMD</code> you can modify the exporting block as follows:</p><pre><code>...  if (typeof module !== 'undefined' &amp;&amp; typeof module.exports !== 'undefined') {    module.exports = Validator;  }  else {    if (typeof define === 'function' &amp;&amp; define.amd) {      define([], function() {        return Validator;      });    }    else {      window.Validator = Validator;    }  }  ...</code></pre>","tags":"node.js,javascript","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 21:41:28 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 21:41:28 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"hF8BJUhaGDieDq0o"}
{"id":"0","category":"express.js","categoryId":"62","title":"Express.js  : Routing","refSite":"http://expressjs.com/guide/routing.html","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Routing refers to the definition of end points (URIs) to an application and how it responds to client requests.</p>\n\n<p>A route is a combination of a URI, a HTTP request method (GET, POST, \nand so on), and one or more handlers for the endpoint. It takes the \nfollowing structure <code>app.METHOD(path, [callback...], callback)</code>, where <code>app</code> is an instance of <code>express</code>, <code>METHOD</code> is an <a href=\"http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">HTTP request method</a>, <code>path</code> is a path on the server, and <code>callback</code> is the function executed when the route is matched.</p>\n\n<p>The following is an example of a very basic route.</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require<span class=\"token punctuation\">(</span></span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// respond with \"hello world\" when a GET request is made to the homepage\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h2 id=\"route-methods\">Route methods</h2>\n\n<p>A route method is derived from one of the HTTP methods, and is attached to an instance of <code>express</code>.</p>\n\n<p>The following is an example of routes defined for the GET and the POST methods to the root of the app.</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// GET method route\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'GET request to the homepage'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// POST method route\n</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'POST request to the homepage'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n\n<p>Express supports the following routing methods corresponding to HTTP methods: <code>get</code>, <code>post</code>, <code>put</code>, <code>head</code>, <code>delete</code>, <code>options</code>, <code>trace</code>, <code>copy</code>, <code>lock</code>, <code>mkcol</code>, <code>move</code>, <code>purge</code>, <code>propfind</code>, <code>proppatch</code>, <code>unlock</code>, <code>report</code>, <code>mkactivity</code>, <code>checkout</code>, <code>merge</code>, <code>m-search</code>, <code>notify</code>, <code>subscribe</code>, <code>unsubscribe</code>, <code>patch</code>, <code>search</code>, and <code>connect</code>.</p>\n\n<div class=\"doc-box doc-info\">\n<p>To route methods which translate to invalid JavaScript variable names, use the bracket notation. For example,\n<code>app['m-search']('/', function ...</code></p>\n\n</div>\n\n<p>There is a special routing method, <code>app.all()</code>, which is not derived from any HTTP method. It is used for loading middleware at a path for all request methods.</p>\n\n<p>In the following example, the handler will be executed for requests \nto “/secret” whether using GET, POST, PUT, DELETE, or any other HTTP \nrequest method supported in the <a href=\"https://nodejs.org/api/http.html#http_http_methods\">http module</a>.</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">all<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/secret'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Accessing the secret section ...'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// pass control to the next handler\n</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h2 id=\"route-paths\">Route paths</h2>\n\n<p>Route paths, in combination with a request method, define the \nendpoints at which requests can be made to. They can be strings, string \npatterns, or regular expressions.</p>\n\n<div class=\"doc-box doc-info\">\n<p>Express uses <a href=\"https://www.npmjs.com/package/path-to-regexp\">path-to-regexp</a> for matching the route paths; see its documentation for all the possibilities in defining route paths. <a href=\"http://forbeslindesay.github.io/express-route-tester/\">Express Route Tester</a> is a handy tool for testing Express routes.</p>\n\n</div>\n\n<div class=\"doc-box doc-warn\">\n<p>Query strings are not a part of the route path.</p>\n\n</div>\n\n<p>Examples of route paths based on strings:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// with match request to the root\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match requests to /about\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'about'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match request to /random.text\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/random.text'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'random.text'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>Examples of route paths based on string patterns:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// will match acd and abcd\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ab?cd'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'ab?cd'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match abcd, abbcd, abbbcd, and so on\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ab+cd'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'ab+cd'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match abcd, abxcd, abRABDOMcd, ab123cd, and so on\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ab*cd'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'ab*cd'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match /abe and /abcde\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ab(cd)?e'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'ab(cd)?e'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<div class=\"doc-box doc-info\">\n<p>The characters ?, +, *, and () are subsets of their Regular \nExpression counterparts. The hyphen (-) and the dot (.) are interpreted \nliterally by string-based paths.</p>\n\n</div>\n\n<p>Examples of route paths based on regular expressions:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// will match anything with an a in the route name:\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/a/</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/a/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// will match butterfly, dragonfly; but not butterflyman, dragonfly man, and so on\n</span>app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.*fly$/</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/.*fly$/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h2 id=\"route-handlers\">Route handlers</h2>\n\n<p>You can provide multiple callback functions that behave just like <a href=\"http://expressjs.com/guide/using-middleware.html\">middleware</a> to handle a request. The only exception is that these callbacks may invoke <code>next('route')</code>\n to bypass the remaining route callback(s). You can use this mechanism \nto impose pre-conditions on a route, then pass control to subsequent \nroutes if there’s no reason to proceed with the current route.</p>\n\n<p>Route handlers can come in the form of a function, an array of \nfunctions, or various combinations of both, as shown the following \nexamples.</p>\n\n<p>A route can be handled using a single callback function:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example/a'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Hello from A!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>A route can be handled using a more than one callback function (make sure to specify the <code>next</code> object):</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example/b'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'response will be sent by the next function ...'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Hello from B!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>A route can be handled using an array of callback functions:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token keyword\">var</span> cb0 <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'CB0'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> cb1 <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'CB1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> cb2 <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Hello from C!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example/c'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>cb0<span class=\"token punctuation\">,</span> cb1<span class=\"token punctuation\">,</span> cb2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<p>A route can be handled using a combination of array of functions and independent functions:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token keyword\">var</span> cb0 <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'CB0'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> cb1 <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'CB1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example/d'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>cb0<span class=\"token punctuation\">,</span> cb1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'response will be sent by the next function ...'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Hello from D!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h2 id=\"response-methods\">Response methods</h2>\n\n<p>The methods on the response object (<code>res</code>) in the \nfollowing table can send a response to the client and terminate the \nrequest response cycle. If none of them is called from a route handler, \nthe client request will be left hanging.</p>\n\n<table>\n\n<thead>\n<tr>\n\n<th>Method</th>\n\n<th>Description</th>\n\n</tr>\n\n</thead>\n\n<tbody>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.download\">res.download()</a></td>\n\n<td>Prompt a file to be downloaded.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.end\">res.end()</a></td>\n\n<td>End the response process.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.json\">res.json()</a></td>\n\n<td>Send a JSON response.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.jsonp\">res.jsonp()</a></td>\n\n<td>Send a JSON response with JSONP support.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.redirect\">res.redirect()</a></td>\n\n<td>Redirect a request.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.render\">res.render()</a></td>\n\n<td>Render a view template.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.send\">res.send()</a></td>\n\n<td>Send a response of various types.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.sendFile\">res.sendFile</a></td>\n\n<td>Send a file as an octet stream.</td>\n\n</tr>\n\n<tr>\n\n<td><a href=\"http://expressjs.com/4x/api.html#res.sendStatus\">res.sendStatus()</a></td>\n\n<td>Set the response status code and send its string representation as the response body.</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\n<h2 id=\"app-route\">app.route()</h2>\n\n<p>Chainable route handlers for a route path can be created using <code>app.route()</code>.\nSince the path is specified at a single location, it\nhelps to create modular routes and reduce redundancy and typos. For more\ninformation on routes, see <a href=\"http://expressjs.com/4x/api.html#router\">Router() documentation</a>.</p>\n\n<p>Here is an example of chained route handlers defined using <code>app.route()</code>.</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">route<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/book'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Get a random book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">post<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Add a book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">put<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Update the book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n\n<h2 id=\"express-router\">express.Router</h2>\n\n<p>The <code>express.Router</code> class can be used to create modular mountable\nroute handlers. A <code>Router</code> instance is a complete middleware and\nrouting system; for this reason it is often referred to as a “mini-app”.</p>\n\n<p>The following example creates a router as a module, loads a middleware in\nit, defines some routes, and mounts it on a path on the main app.</p>\n\n<p>Create a router file named <code>birds.js</code> in the app directory,\nwith the following content:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require<span class=\"token punctuation\">(</span></span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// middleware specific to this router\n</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">use<span class=\"token punctuation\">(</span></span><span class=\"token keyword\">function</span> <span class=\"token function\">timeLog<span class=\"token punctuation\">(</span></span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Time: '</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// define the home page route\n</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'Birds home page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// define the about route\n</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send<span class=\"token punctuation\">(</span></span><span class=\"token string\">'About birds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span>\n</code></pre>\n\n<p>Then, load the router module in the app:</p>\n\n<pre class=\"  language-javascript\"><code class=\"  language-javascript\"><span class=\"token keyword\">var</span> birds <span class=\"token operator\">=</span> <span class=\"token function\">require<span class=\"token punctuation\">(</span></span><span class=\"token string\">'./birds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use<span class=\"token punctuation\">(</span></span><span class=\"token string\">'/birds'</span><span class=\"token punctuation\">,</span> birds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n\n<p>The app will now be able to handle requests to <code>/birds</code> and\n<code>/birds/about</code>, along with calling the <code>timeLog</code>\nmiddleware specific to the route.</p>","tags":"javascript,Express.js","isStarred":"false","note":"","dateCreated":"Sat Mar 21 2015 19:10:04 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 21 2015 19:10:04 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"hYbiYoMhqDCY7BYi"}
{"id":"jEJwYPG2hS73sTAs","category":"css","categoryId":"29","title":"DESIGNER'S GUIDE TO DPI","refSite":"http://sebastien-gabriel.com/designers-guide-to-dpi/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div>\n\t\t\t\t<div>\n\t\t\t\t<h2><a name=\"dpi\">What is DPI and PPI</a></h2></div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tDPI or Dots Per Inch is a measure of spatial dot density initially \nused in print. It's the number of ink drops your printer can put in an \ninch\n\t\t\t\t\t. A smaller DPI yields a less-detailed image.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis concept is applied to computer screens under the name PPI for Pixels Per Inch.\n\t\t\t\t\tSame principle: It counts the number of pixels your screen can display per inch.\n\t\t\t\t\tThe name DPI is also used in screens.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tWindows computers have a default PPI of 96. Mac uses 72, although this value hasn't been accurate since the 80's.<br>\n\t\t\t\t\tRegular, non-retina desktops (mac included) will have a PPI of 72 minimum up to around 120 maximum.\n\t\t\t\t\tDesigning with a PPI between 72 and 120 ensures your work is going to be roughly the same size ratio everywhere.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tHere’s an applied example:<br>\n\t\t\t\t\tA Mac Cinema Display 27” has a PPI of 109, which means that it displays 109 pixels per inch of screen.\n\t\t\t\t\tThe width with bevel is 25.7 inches (65cm). The width of the actual screen is approximately 23.5 inches so\n\t\t\t\t\t23.5*109~2560, which makes the native screen resolution 2560x1440px.<br><br>\n\t\t\t\t\t<span>\n\t\t\t\t\t*I know that 23.5*109 does not equal exactly 2560. It’s actually \n23.486238532 inches. It would be more precise with pixels per \ncentimeters, but you get the idea.</span>\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/dpi-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/dpi-01_21_3_2015.png\">\n\t\t\t\t\n</div>\n\n\n\n<div>\n\t\t\t\t<div>\n\t\t\t\t<h2><a name=\"impact\">Impact on your design</a></h2></div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tLet’s say you design a blue square of 109*109px on the screen we just talked about above.<br>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis square will have a physical size on the screen of 1*1 inch. \nBut if your user has a screen with a PPI of 72, your blue square will \nappear physically bigger. Since the PPI is 72, the screen will need \napproximately an inch and a half to display your blue square of 109px. \n\t\t\t\t\tSee a simulation of the effect below.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/blue-square-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/blue-square-01_21_3_2015.png\">\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway<br>Leaving color and resolution differences aside, keep in\n mind that everybody will see your design differently. You should aim \nfor the best compromise and hit the largest percentage of users. Do not \nassume that the user has a screen similar and as good as yours.</span>\n\t\t\t\t</p>\n\t\t\t\t\n</div>\n\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"resolution\">Screen resolution (and native resolution)</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\tScreen resolution can have a huge impact on how the user perceives \nyour design. Thankfully, since LCD monitors have replaced CRT ones, \nusers now tend to have native screen resolutions that guarantee a good \nscreen size/PPI ratio.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe resolution defines the number of pixels displayed on the screen\n (ex: 2560*1440px for the cinema display 27in.) 2560 is the width, 1440 \nis the height. Of course now that you know what PPI means, you \nunderstand that this can’t be an unit of measure of a physical size. You\n can have a 2560x1440 screen the size of your wall and another one the \nsize of your head.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tToday’s LCD monitors have a pre-defined default or native resolution\n that will handle the exact number of pixels that the screen is able to \ndisplay. It was slightly different with old CRT monitors, but since \nthose can be considered dead, let’s not enter into the details (and not \nreveal my only partial understanding of the good old TV).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tLet’s take our 27” Cinema Display that can display 109 PPI at a \nnative resolution of 2560*1440px. If you reduce the resolution, the \nelements will appear bigger. After all you’ll have 23.5 horizontal \ninches to fill with virtually less pixels.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/resolution-01_21_3_2015.png\">\n\t\t\t\t<p>I said virtually because in this case it will be. The screen has a\n native resolution of 2560*1440px. If the resolution goes down, the \npixels are still here, displayed in 109PPI. What your OS will do to fill\n the gap and fill the entire screen is stretch everything. Your GPU/CPU \nwill take every pixels and calculate them with the new ratio.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIf you want the resolution to be 1280*720 (half the width, half the\n height as before) on your 27\", then your GPU will have to simulate a \npixel that is twice as big to fill the screen. What will the result be ?\n Well, blur. While half the ratio will look fairly ok because of the \nsimple divider, if you ask for 1/3 or 3/4 of the ratio then you’ll end \nup with decimal numbers, and you CANNOT divide a pixel. See example \nbelow.</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/resolution-02_21_3_2015.png\">\n\t\t\t\t<p>\n\t\t\t\t\tConsider the other example below. Take a 1px line on a native \nresolution screen. Now apply a resolution 50% smaller. To fill the \nscreen the CPU will have to generate the visuals at 150%, multiplying \neverything by 1.5. 1*1.5=1.5, but you can't have half pixels. What will \nhappen is that it will fill the surrounding pixels by a fraction of the \ncolor, creating blur.</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-03.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/resolution-03_21_3_2015.png\">\n\t\t\t\t<p>\n\t\t\t\t\tThat’s why if you have a Retina Macbook Pro and want to change your\n resolution, it will display the window below, letting you know that (in\n the screenshot below) this resolution will “look like” 1280*800px. It \nuses the user's resolution experience to express a size ratio.</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-04.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/resolution-04_21_3_2015.png\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t This is a highly subjective representation because it’s using a \npixel resolution as a unit of physical size, but it is not a lie, at \nleast from their standpoint.</p>\n\t\t\t\t\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>If you want to always see your design (or any design)\n pixel-perfect, never use a resolution different from your native one. \nYes you may be more comfortable with a smaller ratio but when it comes \nto pixels, you want to be as accurate as possible.\n\t\t\t\t\tUnfortunately, some people use the resolution as a way to see \nbetter what’s on the screen (especially on desktop) when they should be \nusing accessibility settings. That will still make your design look bad,\n but at that point users are looking for enhanced legibility, not \npolish.</span>\n\t\t\t\t</p>\n\t\t\t\t\n</div>\n\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"4k\">What is 4k</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\tYou may have heard the term 4K a lot lately (at least when I wrote \nthis, beginning of 2014), 4k is quite a trendy subject. To understand \nwhat is is let's first understand what \"HD\" means.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tCareful, this is an ultra-simplification. I'm only going to talk about the most common resolutions.\n\t\t\t\tThere is different categories of HD. <br>\n\t\t\t\tThe term HD is applicable to any resolution starting from 1280x720px\n or 720p for 720 horizontal lines. Some may also call this resolution SD\n for standard definition<br><br>\n\t\t\t\tThe term full HD applies to the 1920x1080px screens. Most TVs uses \nthis resolution and more and more high end phones (Galaxy SIV, HTC one, \nSony Xperia Z, Nexus5)<br><br>\n\t\t\t\t4K starts at 3840x2160 pixels. It was also call Quad HD and can be \nreferred to as UHD for Ultra HD. Simply put, you can put 4 1080p in a 4K\n screen in term of number of pixels.<br><br>\n\t\t\t\tAnother resolution of 4K is 4096x2160. It's slightly larger and used for projectors and professional cameras.<br>\n\t\t\t\t</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/4k-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/4k-01_21_3_2015.png\">\n\t\t\t\t\t<h3>What happens if I plug a 4K display to my computer</h3>\n\t\t\t\t<p>\n\t\t\t\t\tCurrent OS do not scale 4K, it means that if you plug a 4K display \nto a Chromebook or a macbook, it will use the highest DPI asset, in this\n case the 200% or @2x ones, and display them at normal ratio, making \neverything look good but tiny.<br>\n\t\t\t\t\tHypothetical example: If you plug a 12\" 4K screen to a computer \nwith a 12\" hi-res screen (2x), everything will appear twice as small.\n\t\t\t\t</p>\n\t\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>\n\t\t\t\t\t- 4k is 4 times Full HD.<br>\n\t\t\t\t\t- If current OS handles 4K but do not scale it, meaning no 4K specific assets yet.<br>\n\t\t\t\t\t- No phone or tablet uses 4K as of today.<br>\n\t\t\t\t\t</span>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"hz\">Monitor Hertz</a></h2>\n\t</div>\t\t\t\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tA little break from the PPI and screen resolution here for a quick \nnote. You might have seen that close to the resolution settings for your\n screen there is the monitor Hz value.\n\t\t\t\t\tThis has nothing to do with PPI, but just in case you’re wondering,\n the monitor Hertz - or refresh rate - is the unit of speed at which \nyour monitor will display a fixed image or frame, per second. A monitor \nwith 60Hz will be able to display 60 frame per second. A monitor of \n120Hz, 120fps etc…\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn the context of an UI, monitor Hertz(Hz) will define how smooth \nand detailed your animation will look. \n\t\t\t\t\tMost screens are 60Hz. Note that the number of frames displayed per\n second is also dependent on the device's processing and graphical \npower. Adapting a 120Hz screen on an Atari 2600 would be quite useless.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tTo better understand, look at the example below. the T-rex goes to \npoint A to point B at a fast and exactly equal pace on both a 60Hz and \n120Hz screen.\n\t\t\t\t\tThe 60fps screen is able to display 9 frames during the animation \nwhile the 120fps logically displays twice as more frame in the same \nfraction of time.\n\t\t\t\t\tThe animation will appear much smoother on the 120Hz screen.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/hertz-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/hertz-01_21_3_2015.png\">\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>Some people might say that the human eye can’t see \nabove 60fps. This is wrong. Don’t listen and walk away while laughing in\n the most obnoxious way possible.</span>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"retina\">What is a retina display</a></h2>\n\t</div>\t\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tThe naming of “Retina display” was introduced by Apple for the \niPhone 4 release. It’s called Retina because the PPI of the device was \nso high that the human's retina was supposedly not able to distinguish \nthe pixels on the screens.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis statement is true for the range of devices' screen size it's \nused in, but as the screens are getting better and better, our eyes are \nnow trained enough to perceive the pixels - especially for rounded UI \nelements. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tTechnically, What they did is display twice as many pixels in height and width in the exact same physical size. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe iPhone 3G/S was 3.5 inch diagonal with a resolution of 480*320px which makes 163PPI.<br>\n\t\t\t\t\tThe iPhone 4/S was 3.5 inch diagonal with a resolution of 960*640px which makes 326PPI.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/retina-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/retina-01_21_3_2015.png\">\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tBOOM! Exactly twice. An easy multiplier. So instead of being \nsmaller, the elements on the screen are twice as visually sharp because \nthey have twice as many pixels and are exactly the same physical size. A\n single 1 normal pixel = 4 retina pixels, four times as many pixels.</p>\n\t\t\t\t\t\n\t\t\t\t\t<p>\n\t\t\t\t\t\tConsider the example below for direct application in a complex design.</p>\n\t\t\t\t\t\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/retina-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/retina-02_21_3_2015.png\">\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<p><span>Image note: It is hard to simulate \ndifferent image quality from two devices on a third device, i.e. the one\n you are looking at right now. For the retina music player above, even \nwhile taking the exact same physical space, image quality will look \ntwice as nice and sharp on the iPhone 4. If you want to check it out \nlocally, I used one of my freebies for the purpose of this demonstration\n and you can <a href=\"http://sebastien-gabriel.com/freebies/Grey-UI.zip\">download the source.</a></span></p>\n\t\t\t\t\t\t\t\t\t<p>\"Retina\" display naming is owned by Apple so other companies\n will use \"HI-DPI\" or “Super power pixel maximum sp33d display” (I'm \ngoing to trademark the latter) or nothing at all. It’ll up to you while \nreading device spec to figure out what’s the DPI and screen size (how \nfun.)</p>\n\t\t\t\t\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>Apple products are an excellent way to get familiar \nwith DPI conversion and to understand the differences between \nresolution, PPI and physical size ratio because you’ll only have to \nworry about 1 multiplier.</span>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\n\n\n<div>\n\t<div>\n\t\t\t\t<h2><a name=\"multiplier\">What is a multiplier</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tThe multiplier is your mathematical savior when it comes to \nconverting your design for all the different PPIs. When you know the \nmultiplier, you don't have to care about the detailed specs of the \ndevice anymore.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tLet’s take our iPhone 3G and 4 example. You have twice as many \npixels in the same physical size. Therefore your multiplier is 2.\n\t\t\t\t\tIt means that to make your assets compatible with the 4G \nresolution, you just have to multiply your assets size by 2 and you’ll \nbe done.\n\t\t\t\t\t</p>\n\t\t\t\t\t\n\t\t\t\t\t<p>\n\t\t\t\t\t\tLet's say you create a 44*44px button which is the recommended \ntouch target by iOS (I'll talk about that later). Let’s call him by a \ntypical button name like \"Jim.\"<br>\n\t\t\t\t\t\tTo make Jim look good on the iPhone 4 you're going to have to \ncreate a twice-as-large version of him. That's what we're doing below.</p>\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/multiplier-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/multiplier-01_21_3_2015.png\">\n\t\t\t\t\t<p>Pretty simple. Now Jim has a Jim.png version for the normal PPI (iPhone 3) and a Jim@2x.png version for the 200% PPI (iPhone 4.)</p>\n\t\t\t\t\t<p>Now you may ask, “But wait! I’m pretty sure there are other \nmultipliers beyond just two.” \n\t\t\t\t\tThere are, and that’s where it becomes a nightmare. OK, maybe not a\n nightmare, but I’m pretty sure you’d prefer spending a day ironing your\n socks then handling a gazillion multipliers. Thankfully it is not as \nterrible as you think, we'll get to that later.</p>\n\t\t\t\t\t\n\t\t\t\t\t<p>Let's talk units first because now you are going to need an unit\n other than pixel to spec your multi-DPI designs. That's where DP and PT\n comes in.</p>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>The multiplier is what you need to know for every \ndesign you’re working on. Multipliers are what hold together this world \nof chaos that is screen size and PPI and make it understandable to \nhumans.</span>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\t\n\n\t\n<div>\n\t<div>\n\t\t<h2><a name=\"dp\">What are DP, PT and SP</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\t<b>DP or PT</b> is the unit of measure you can use to spec out your multi-device, multi-DPI app mock-ups.<br>\n\t\t\t\t\tDP or DiP stands for Device independent Pixel and PT for Point. PT \nis an Apple thing; DP is an Android thing, but they are essentially the \nsame.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<p>\nIn short, it will define a size independently of the device multiplier. \nThis helps a lot while discussing a spec between different actors like \nthe designer and the engineer.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Let's take our previous button example, \"Jim.\"<br>\n\t\t\t\t\tJim has a 44px width on normal non-retina screens and a 88px width \nfor retina screens. Let’s get technical and add a padding around Jim of \n20px because he likes having his space. The padding will then be 40px \nfor retina. But it really doesn’t make sense to count retina pixels when\n you’re designing on a non-retina screen.</p>\n\t\t\t\t\t<p>So what we’re going to do is take a normal 100% non-retina ratio as the base of everything.</p>\n\t\t\t\t\t\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/dp-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/dp-01_21_3_2015.png\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<p>In this case Jim will have a size of 44*44DP or PT and a padding of 20DP or PT. \n\t\t\t\t\t\tYou can deliver your spec in any PPI, Jim will still be 44*44dp or pt.</p>\n\t\t\t\t\t\t<p>Android and iOS will adapt this size to the screen and convert with the right multiplier. \n\t\t\t\t\t\tThat’s why I find it easier to always design using the default PPI of your screen.</p>\n\t\t\t\t\t\t<p><b>SP</b> is separated from DP and PT by it's usage but works \nthe same way. SP stands for Scale-independent pixels and is used to \ndefine font sizes.\n\t\t\t\t\t\tThe SP will be influenced by the user font settings on their \nAndroid devices. As a designer, defining the SP is like defining a DP \nfor anything else. Base it on what's legible at 1x scale (16sp for \nexample, is a great font size for readibility).</p>\n\t\t\t\t\t\t<p><span>\n\t\t\t\t\t\t\tTakeaway: <br>Always use resolution/scale-independent values when\n specing. Always. The more varied the screen size/resolution are, the \nmore it becomes essential.</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\n\t\t\t</div>\t\n\n\n\t\n<div>\n\t<div>\n\t\t<h2><a name=\"ppi-configuration\">The PPI configuration</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tNow That you know what PPI, retina and a multiplier is, it is \nimportant to talk about something that have been asked to me quite a bit\n and is quite confusing: <b>\"What happens if I change the PPI configuration in my design tool ?\"</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIf you asked yourself this question, that means that you are a bit \nfamiliar with design software. Now here is something extremely important\n to understand that took me a while:<br><br>\n\t\t\t\t\t<b>Anything non-print uses pixel sizes regardless of the initial PPI configuration.</b>\n\t\t\t\t</p>\n\t\t\t\t<p>PPI configuration in software is a printing legacy. If you design\n only for the web, PPI won't have any influense on the size of your \nbitmap.</p>\n\t\t\t\t<p>This is why we use multipliers and not direct PPI value. Your \ncanvas and graphics will always be converted to pixel by the software \nusing the corresponding multiplier.</p>\n\t\t\t\t<p>Here's an example. You can try it yourself with a program that \nallows PPI configuration, like Photoshop. I drew a 80*80px square and a \ntext with a size of 16pt in photoshop with a configuration of 72PPI. The\n second one is the same thing with a 144PPI configuration.</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ppi-influence-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ppi-influence-01_21_3_2015.png\">\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ppi-influence-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ppi-influence-02_21_3_2015.png\">\t\n\t\t\t\t<p>As you can see, the text got quite bigger, twice bigger to be \nexact while the square remained the same. The reason for that is that \nthe program (Photoshop in this case) scales the pt values (as it should)\n based on the PPI value, resulting in doubling the rendering size of the\n text on the doubled PPI configuration.\n\t\t\t\t\tOn the other hand, what has been defined using pixel, i.e, the blue\n square shape, remains the exact same size. A pixel is a pixel and will \nstay a pixel whatever the PPI configuration. What will make it different\n is the PPI of the screen that displays it. </p>\n\t\t\t\t<p>What is important to remember is that when designing for digital,\n the PPI will only have an incidence on how you perceive your design and\n on your workflow and on pt sized graphics such as font. If you include \nin your workflow source files with various PPI configurations, the \nprogram will resize any transferred visual between the different files \nby the PPI ratio of the receiving file. It will be come a problem for \nyou.</p> \n\t\t\t\t<p><b>The solution ?</b> Use a PPI (preferably in the 72-120 range \nfor 1x design) and stick to it. I personnaly use 72PPI because it's the \ndefault configuration in Photoshop and most of my co-workers do the \nsame.</p>\n\n\t\t\t\t<p><span>\n\t\t\t\t\tTakeaway: <br>\n\t\t\t\t\t- PPI configuration doesn't have any influence when exporting for the web.<br>\n\t\t\t\t\t- PPI configuration will only have influence on graphics generated based on PPI-independent measurement such as PT<br>\n\t\t\t\t\t- Pixel is the unit of measure for anything digital.<br>\n\t\t\t\t\t- Keep the multipliers in mind and what you are designing for, not the PPI. <br>\n\t\t\t\t\t- Use a realistic PPI configuration when designing for digital, \nsomething that gives you a sense of what it's going to look like on the \ntargeted device (72-120ppi for 1x web/desktop for example).<br>\n\t\t\t\t\t- Keep the same PPI configuration thoughout your files.\n\t\t\t\t\t</span>\n\t\t\t\t</p>\n\n\t\t\t\t<p>Additional reading on that on this very interesting <a href=\"http://graphicdesign.stackexchange.com/questions/13777/is-it-mandatory-to-keep-72-dpi-for-web-design-what-if-i-create-in-200dpi\" target=\"_blank\">StackExchange post</a>.</p>\n\t\t\t</div>\t\n\n\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"ios\">Handling PPI on iOS</a></h2>\n\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tTime to dive into platform-specific design.\n\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tLet's take a little tour of what devices iOS has as of the start of 2014.<br>\n\t\t\t\t\t\tWhen it comes to screen size and DPI, iOS has 2 types of mobile devices and 2 types of laptop/desktop screens.<br>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tOn mobile, they have the iPhone, of course, and the iPad. <br>\n\t\t\t\t\t\tIn the phone category, you have the old 3GS (still supported on \niOS6) and up. Only the iPhone 3GS is non-retina. iPhone 5 and up use a \ntaller screen with the same DPI as the iPhone 4 and 4s. See cheatsheet \nbelow:\n\t\t\t\t\t</p>\t\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-01_21_3_2015.png\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tAnnounced at the september 2014 Apple Keynote, you now have 2 new \ncategories of iPhone: The iPhone 6 and the iPhone 6 Plus.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t The iPhone 6 is a bit bigger than the 5 (0.7\" more) but carries \nthe same PPI. The iPhone 6 Plus on the other hand introduces a whole new\n multiplier for iOS, @3x due to it's size, 5.5\". \n \t\t\t\t\t</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-1.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-01-1_21_3_2015.png\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t There is something very special to know about how the iPhone 6 \nPlus handles its display compared to all the other iPhones: <br><b>It downsamples the visuals</b>. \n \t\t\t\t\t</p>\n \t\t\t\t\t<p>\n \t\t\t\t\t\tWhen you design for the iPhone 6 for example, you'll design on a \ncanvas of 1334*750px and the phone will render 1334*750 physical pixel \nas well. In the case of the Iphone 6 Plus, the phone has a smaller \nresolution than the rendered image so you will have to design for a \nresolution of 2208*1242px and the Phone will downsample it to its \nresolution of 1920*1080px. See illustration below:\n \t\t\t\t\t</p>\n \t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-2.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-01-2_21_3_2015.png\">\n \t\t\t\t\t<p>\n \t\t\t\t\t\tThe physical resolution being 15% smaller than the rendered \nresolution, it will create a few glitches such as half-pixels making \nvery fine detail a bit blurry. The resolution is so high though that it \nwill be very subtle, unless you look really closely. So design on a \n2208*1242px canvas and be aware of that for the really fine part of your\n design such as super thing separators. See a simulation of what is \nhappening below:\n \t\t\t\t\t</p>\n \t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-3.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-01-3_21_3_2015.png\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\tThanks to <a href=\"http://www.paintcodeapp.com/\" targe=\"_blank\">Paintcode</a> for coming up with an awesome explanation of this right after the keynote. <a href=\"http://www.paintcodeapp.com/news/iphone-6-screens-demystified\" target=\"_blank\">Check out their dedicated page.</a> This explanation is derived of their very nice schematics.\n\t\t\t\t\t</span>\t\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThen you have the iPod touch category. Consider them as iPhones \nwhen it comes to design. iPod 4th gen and down are using iOS6 and are \nnon-retina. iPod 5th gen is using a retina(@2x) screen and is compatible\n with iOS7. Screen-wise iPod 5th gen is using an iPhone 5-sized screen.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Finally you have the iPads. With the exception of iPad 1st gen \n(out-of-date today,) they all use iOS7, and only the iPad2 and iPad mini\n 1st Gen uses a non-retina screen.\n\t\t\t\t\t\tIf you're wondering what an iPad mini is from a design standpoint,\n it's a regular iPad (same PPI screen), but physically smaller. By this I\n mean that they took the same resolution and reduced it from 9.7in to \n7.9in. Keeping the same ratio and therefore increasing the pixel \ndensity. Your visual assets will appear slightly smaller.</p>\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-02_21_3_2015.png\">\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-03.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-03_21_3_2015.png\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<p>Regarding the desktop/laptop category, we're not going to be \ncovering every single screen sizes Apple offers. As of today, Apple \noffers most of its screens in 1x multiplier (Macbook, Macbook Air, old \nMacbook Pros, desktop screens.) Retina exists in 13 and 15\" for Macbook \nPros only. The multiplier is 2x, exactly like iPads and iPhones. If \ndesigning for desktop is different than mobile, you'll produce assets \nthe same way to cover the 2 different types of screens.</p>\n\t\t\t\t\t\t<p>With only one multiplier, creating assets for iOS and OSX is \npretty straightforward. \n\t\t\t\t\t\tI suggest to start designing for the base PPI (i.e 100%/1x) and \nmultiply by 2 afterwards to proof your design on a @2x screen and \ngenerate the @2x assets.\n\t\t\t\t\t\tOnce you are more comfortable with switching back and forth \nbetween 1x and 2x, you'll be able to design directly in @2x, scaling \ndown your assets for lower resolution. This will be particularly helpful\n if you are designing on a retina screen (Macbook pro).\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<h3>Required Assets, Chrome example.</h3>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-04.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/ios-04_21_3_2015.png\">\n\t\t\t\t\t\t<p>As you can see we need to deliver two images per asset each \ntime. Non-retina images are called name.png. For retina images we append\n @2x to that to have name@2x.png. This is an iOS convention and it \nshould be followed.</p>\n\t\t\t\t\t\t<p>If you create an image that is only going to be used on iPads, \nwe use ~ipad after the .@2x. It is only a Chrome convention. Repeat this\n process for every asset you need. Never give only one version of an \nasset; cover every DPI.</p> \n\t\t\t\t\t\t\n\t\t\t\t\t\t<p><span>\n\t\t\t\t\t\t\tTakeaway, iOS ruleset:<br>\n\t\t\t\t\t\t\t- @2x asset must be de double of 1x asset, always. <br>\n\t\t\t\t\t\t\t- Append @2x for retina assets and @3x for the 300% ones (iPhone 6Plus)<br>\n\t\t\t\t\t\t\t- Always create 100% and 200% images.<br>\n\t\t\t\t\t\t\t- Always have the same name for 1x and 2x assets.<br>\n\t\t\t\t\t\t\t- Start designing in 100%, then multiply.<br>\n\t\t\t\t\t\t\t- Deliver .png images.<br>\n\t\t\t\t\t\t\t- Create specs in pt not px.\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\n\t\t\t</div>\t\n\n\n\n<div>\n\t\t<div>\n\t\t\t<h2><a name=\"android\">Handling PPI on Android</a></h2>\n\t\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tThe Android platform has a wider range of devices than iOS. The \nreason is that any OEM can build a device and with few restrictions in \nterm of scale and put their own version of Android on it. \n\t\t\t\t\tAs a result, you end up with a virtually unlimited variety of \nscreen sizes and DPI, from phones as big as tablets and tablets almost \nas small as phones. For this reason, your design will always have to \nadapt.\n\t\t\t\t</p>\n\t\t\t\t<p>For this section we're going to take a different approach than \nfor iOS. We'll talk about the multipliers and categories of DPI first.</p>\n\t\t\t\t<p>Like for iOS, you have two categories of devices: phones and \ntablets. Both categories can be arranged in different DPI categories: \nldpi, mdpi, tvdpi, hdpi, xhdpi, xxhdpi and xxxhdpi.</p>\n\t\t\t\t<p>Fortunately, some are used more frequently than others, some are even deprecated.</p> \n\t\t\t\t\t<p>The first thing we have to do is to find the base unit that is the equivalent of the 1x for iOS. On Android, this base is MDPI.</p>\n\t\t\t\t\t<p>Let's take a look at the multipliers in the cheatsheet below. </p> \n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-01_21_3_2015.png\">\n\t\t\t\t\t<p>Yes, it's a lot, and it's not over. There is one left.</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-02_21_3_2015.png\">\n\t\t\t\t\t<p>Effectively there are five DPI in use: MDPI, HDPI, XHDPI, XXHDPI and XXXHDPI.<br>\n\t\t\t\t\t\tLDPI is an old DPI, not used anymore, TVDPI was a specific case \nfor TV UI and was used briefly for the Nexus 7 2012 edition. It can be \nconsidered not necessary for phone and tablet use.\n\t\t\t\t\t\tA note though, the TVDPI's multiplier(1.33x) is used in some of \nAndroid Wear's devices such as the LG G watch but we'll talk about that \nlater.</p>\n\t\t\t\t\t<p>Let's put everything in perspective by associating Android phones and tablets with their respective DPI.</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-03.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-03_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-04.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-04_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-05.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-05_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-06.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-06_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-07.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-07_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-08.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-08_21_3_2015.png\">\n\t\t\t\t\t<br><br>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-10.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-10_21_3_2015.png\">\n\n\n\t\t\t\t\t\t<h3>Required Assets, Chrome example.</h3>\n\t\t\t\t\t\t<p>You are going to have to deliver a set of 4 images per asset, \nfrom MDPI to XXHDPI. You can leave LDPI out of the set. Note that in the\n case of the version of Chrome showed below, TVDPI was exported as well \nthat why the count is 5 images per asset in this specific case.</p>\n\t\t\t\t\t\t<p>Just as for iOS, I suggest you take the 100% or 1x multiplier \nas a base for your design. This makes prepping the design for every \nother multiplier easier, expecially on Android with multipliers such as \n1.33 and 1.5.</p>\n\t\t\t\t\t\t<p>See below for an example Chrome's back button on Android.</p>\n\t\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-09.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/android-09_21_3_2015.png\">\n\t\t\t\t\t\t<p><span>The naming suggested here with the appended \nDPI is not something that is mandatory nor presented in the Android \nofficial guidelines. It is the way that we have been naming our assets \nbecause of the limitation of the current design tools that make it hard \nto define a specific path per asset export. <br>\n\t\t\t\t\t\tConsidering that an asset source can sometimes hold hundreds of \nassets, it is a way to make the export process less painful and to avoid\n duplicated names errors on the designer's side. The way that the asset \nbuckets are structured in the source repository will be as followed:<br>\n\t\t\t\t\t\t<b>- drawable-mdpi/asset.png</b><br>\n\t\t\t\t\t\t<b>- drawable-hdpi/asset.png</b><br>\n\t\t\t\t\t\t<b>- etc...</b>\n\t\t\t\t\t\t</span></p>\n\t\t\t\t\t\t<p>As you can see, the asset is cut in a 32*32dp square. The issue\n with Android multipliers is that some of them use decimals. When you \nmultiply a number by 1.33 or 1.5, chances are you're going to end up \nwith a decimal number. In this case you'll want to round the number to \nwhat you think makes sense. In the case of the example, 32*1.33=42.56 so\n we rounded it up to 43px.</p>\n\t\t\t\t\t\t<p>You'll need to be careful for pixel-sized elements such as \nstroke. you may want to make sure your stroke is either 1px wide or 2px \nwide and not blurry as described in the <a href=\"http://sebastien-gabriel.com/designers-guide-to-dpi/#resolution\">screen resolution section.</a></p>\n\t\t\t\t\t\t<p><span>\n\t\t\t\t\t\t\tTakeaway, Android ruleset:<br>\n\t\t\t\t\t\t\t- Android has 7 different DPIs, you need to worry about 4: \nmdpi,hdpi,xhdpi,xxhdpi plus one if you want to future-proof your app, \nXXXHDPI <br>\n\t\t\t\t\t\t\t- MDPI is the base DPI or your 1x multiplier<br>\n\t\t\t\t\t\t\t- Android uses dp instead of pt for specs, but they are the same<br>\n\t\t\t\t\t\t\t- Use your best judgment for decimal multipliers.<br>\n\t\t\t\t\t\t\t- Deliver .png images.<br>\n\t\t\t\t\t\t\t- Make sure to validate your naming convention and export process with the person responsible of the implementation.\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t</div>\n\n\n\n<div>\n\t\t<div>\n\t\t\t\t<h2><a name=\"macandcros\">Mac and Chrome OS PPI</a></h2>\n\t\t</div>\t\t\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tMac (OSX) and Chrome OS behave quite the same way in term of PPI handling.<br>\n\t\t\t\t\tBoth OS support regular PPI (100%) and hi-res / retina PPI (200%). \nLike for the iPhone and iPads, there is only a 2x multiplier. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tEven if most of your users, both Mac and Chrome OS will be on low \nres devices(for now), I highly recommend future proofing your apps for \nthese high-end screens.\n\t\t\t\tFuture proofing for ChromeOS means creating hi-res assets for your \nWeb-app or website, which will never be wasted time.\n\t\t\t\t<br>\n\t\t\t\t\tThere are currently a total of 3 laptops handling this PPI, the \nMacbook pro 13\", 15\" and the Chromebook Pixel. Additionally to this, the\n Chromebook Pixel handles touch.\n\t\t\t\t</p>\n\t\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/mac_cros_01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/mac_cros_01_21_3_2015.png\">\n\t\t\t\t\t<h3>Required Assets, Chrome example.</h3>\t\t\n\t\t\t\t<p>\n\t\t\t\t\tA perfect example of this similarity would be the Chrome toolbar \nassets button. We use the exact same ones across both platforms. If the \ncode is different, the visuals are the same.\n\t\t\t\t\tSee below the Chrome menu button example.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/mac_cros_02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/mac_cros_02_21_3_2015.png\">\n\t\t\t\t\t \n\t\t\t\t\t\t<p><span>\n\t\t\t\t\t\tTakeaway:<br>\n\t\t\t\t\t\t\t- Chrome OS and OSX use the same multiplier, 2.<br>\n\t\t\t\t\t\t\t- The only Chrome OS hi-resolution display also handles touch.\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t</div>\n\t\n\n\n<div>\n\t<div>\n\t\t<h2><a name=\"strechable\">Stretchable assets</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tWhether your app is on desktop or mobile. You'll almost always require stretchable assets.\n\t\t\t\t</p>\n\t\t\t\t<p>A stretchable asset is set up so the code will be able to make it as big as it needs to be without degrading the rendering.</p>\n\t\t\t\t<p>They are different from repeatable assets, which work differently even while sometimes displaying the same result.</p>\n\t\t\t\t<p>See the Chrome example below. The toolbar on iOS is generated \nusing only one super thin asset that is repeated on the X-axis across \nthe entire screen.</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-01_21_3_2015.png\">\n\t\t\t\t<p>Now that this is out of the way, let's see how different platforms handle stretchable assets.</p>\n\t\t\t\t<h3>Stretchable assets on iOS</h3>\n\t\t\t\t<p>iOS makes it easy for the designer because the stretch is defined\n in the code rather that in the way you make your asset slices or \nmarkings. All you'll have to do is provide a base image, and - if you're\n not implementing it yourself - spec this asset as stretchable \nhorizontally, vertically or both. See the example below which is the \ndefault Chrome content button on iOS.</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-02.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-02_21_3_2015.png\">\n\t\t\t\t\n\t\t\t\t<h3>Stretchable assets on Android</h3>\n\t\t\t\t<p>Android has a different way of doing stretchable assets than iOS. It relies a bit more on the designer. <br><br>\n\t\t\t\t\n\t\t\t\tFor this platform, you'll be using 9-patch guides. These guides \nconsist of 4 lines surrounding the asset itself. They have to be \ndelivered in the slice/image like it is part of the visual itself, \nliterally visually display its specs within it.\n\t\t\t\t\n\t\t\t\t<br><br>They define two things: the scalable area and the fill area.\n Once these are defined, the code will only be able to stretch what you \ndefined and put content where you defined it to go.</p>\n\t\t\t\t<p>See the example below, which is the Android version of the \ndefault Chrome button you saw earlier. I made it bigger on purpose for \nthe demonstration.</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-03.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-03_21_3_2015.png\">\n\t\t\t\t<p>As you can see, the 9-patch is a set of 4 pure #000000 bars. They\n should have a width of 1px for any DPI; this is a code indication. The \nstretchable area does not include the rounded corners because it is not \nsomething that can be repeated (or it will look terrible.) \n\t\t\t\tIn this case, we added a 10dp padding for the button. This is \nsomething you won't have to spec out. .9 indicators also need to lay and\n a 100% transparent part of the asset cut. If not, it won't work and \nrequire modification. </p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-04.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-04_21_3_2015.png\">\n\t\t\t\t<p>Using 9-patch requires you to append .9 to the name, the same way\n you add @2x for iOS assets. Retaking our button asset example below:</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-05.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-05_21_3_2015.png\">\n\t\t\t\t<p>Note that you should be careful of the size of your asset. If I \nmade it quite big for demonstration, it is important\n\t\t\t\tthat you optimize your asset weight by reducing it's size to a \nminimum, as show below. I kept the corners as they were but reduced the \nstretchable and content area to a minimum.</p>\t\t\t\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-05-2.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/stretchable-05-2_21_3_2015.png\">\n\t\t\t\t<p>Be careful that the 9-patch markings do not overlap your design \nand that the cut of the asset is correct.\n\t\t\t\tThe .9 should be as close to the asset as possible without \noverlapping it, try not to build-in padding. The example before has \nbuilt-in padding because of shadowing.</p>\n\t\t\t\t<p>The 9-patch doesn't replace exporting your asset in every DPI. It needs to be done for each version of the asset.</p>\n\n\t\t\t\t<p>Last thing, a .9 can have multiple stretchable areas (the top and\n left ones). It's not something I encountered a lot, if not ever in my \nworkflow, but it's worth mentionning.</p>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t<p><span>\n\t\t\t\t\t\tTakeaway:<br>\n\t\t\t\t\t\tAlways ask the person implementing your design what's the best \nsolution to adopt, especially for desktop. The more images you'll have, \nthe heavier the app will be, and it will become harder for you to track \nand update your assets. 9-patch should be used only with good naming and\n good organization of your sources.<br>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\n\n\n<div>\n\t<div>\n\t\t\t\t<h2><a name=\"touch\">Touch and touch targets</a></h2>\n\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tThe first thing to understand here is that making something touch \nready has nothing to do with DPI. But when it comes to creating a UI or\n\t\t\t\t\tgenerating assets, it is important to understand the relationship \nbetween touch and DPI.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tMaking the choice between touch or non-touch will highly depend on \nthe scope of your app, where it is going to be deployed and how you want\n the user experience to be.<br>\n\t\t\t\t\tLet's split it in simple categories, desktop non-touch and mobile. \n\t\t\t\t</p>\n\t\t\t\t<h3>Desktop, non-touch</h3>\n\t\t\t\t<p>\n\t\t\t\t\tLet's not give a history class here but unless you were born in \n2005, you know that the computing technology wasn't created with touch \nin mind.<br>\n\t\t\t\t\tWe use mouse and keyboard, that are extremely precise tools to \nnavigate a UI. The precision of your mouse cursor is 1pt. You could in \ntheory create a 1x1pt button \n\t\t\t\t\tthat would be clickable by any super-human out there.\n\t\t\t\t</p>\n\t\t\t\t<p>See the illustration below. \n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/touch_01_21_3_2015.png\">\n\t\t\t\t<p>This is a 20x version of the Chrome OS cursor. <br>The red zoning it the actual area that triggers an action on the UI. Pretty precise. <br>\n\t\t\t\tYou know were I'm heading. What's not very precise ? Our fingers.</p>\n\t\t\t\t<p>\n\t\t\t\t\tSo how do you design for touch ? Well you make everything bigger.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<h3>Finger size</h3>\n\t\t\t\t<p>\n\t\t\t\t\tHere's the average size of the two most used fingers for UI \ninteraction, the pointer and the thumb.\n\t\t\t\t\tIt represents both the touch zone and the the area obstructed by \nthe finger. The actual touch zone (i.e the part of your finger that is \nin contact\n\t\t\t\t\twith the screen) will of course be smaller and a bit more precise, \n\t\t\t\t\tunless you really smash your finger against the screen. \n\t\t\t\t\t<br><br>\n\t\t\t\t\t<b>When designing for touch, it's safer to overestimate the size needed for touch targets than underestimate them.</b>\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_03.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/touch_03_21_3_2015.png\">\n\t\t\t\t\n\t\t\t\t<h3>How to apply this to my design flow</h3>\n\t\t\t\t<p>\n\t\t\t\t\tAs we already saw, inches or cm are not the best way to count in a \npixel world. Matter of fact, even pixel is not a really good way to \ncount.\n\t\t\t\t\tSo how do you make sure your design is touch ready ? <br>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tI'm going to state the obvious but you should always try your design on the targeted devices/platform.<br>\n\t\t\t\t\tBut to avoid losing too much time, there is some base pixel-based \nsizes that are considered safe to use and that are recommended on an per\n OS basis.<br>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<h3>Recommended touch targets per platform</h3>\n\t\t\t\t<p>\n\t\t\t\tAgain, careful, these sizes are for convenience and are not a unit \nof real life size measurement whatsoever. They work because OEM and \nmanufacturers are following guidelines \n\t\t\t\tto make screens consistent in term of size/dpi ratio.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_04.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/touch_04_21_3_2015.png\">\n\t\t\t\t<p>\n\t\t\t\tAs you can see each OS has its own set of recommendations but they \nare all around the 48pt. Windows includes the padding in its specs, \nthat's why I added it here.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tThe difference in these sizes comes from different factors.<br>\n\t\t\t\tApple controls its hardware so they know the quality of the touch \nscreen and control the exact ratio. They can rely on a smaller\n\t\t\t\ttouch target. Additionaly, their hardware tends to be physically \nsmaller. <br><br>\n\t\t\t\t\n\t\t\t\tAndroid and Windows on the other hand have different OEMs, each \nbuilding its own hardware, having bigger touch targets makes them \n\"safer\". \n\t\t\t\tTheir UI is also more spaced out (especially windows) and their \ndevices tends to be physically bigger.\n\t\t\t\t</p>\n\t\t\t\t<h3>The chrome example</h3>\n\t\t\t\t<p>\n\t\t\t\tHere's how Chrome applies this. The coded touch targets appear in blue.\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_05.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/touch_05_21_3_2015.png\">\n\t\t\t\t<p>\n\t\t\t\tAs you can see, both toolbars are the recommended touch target \nheight for each platform. Also the area surrounding the visual is a \n44x44pt and 48x48pt square for\n\t\t\t\tiOS and Android respectively. Not only this makes the UI consistent \nwith the rest of the OS in term of sizing but it's a great way for you \nto have a minimum size\n\t\t\t\tfor everything you want the user to interact with.\n\t\t\t\t</p>\n\t\t\t\t<h3>Windows 8 And Chrome OS</h3>\n\t\t\t\t\n\t\t\t\t<p>Windows 8 and Chrome OS supports both touch and non-touch \ninterfaces. If you design for a Windows 8 app, I'd highly recommend \nfollowing their <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465326.aspx\">guidelines for touch targets</a>.\n\t\t\t\t<br><br>Chrome OS guidelines has yet to be released but and the \nPixel usage it not big. However, since all Chrome OS apps are web based,\n I'd suggest designing to touch anyway.\n\t\t\t\tMy recommendation would be to apply the <a href=\"http://developer.android.com/design/style/metrics-grids.html\">Android touch targets guidelines</a>.</p>\n\t\t\t\t\n\t\t\t\t<h3>The web, hybrid devices and the future.</h3>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tIf you're designing for mobile, it will be clear what decision to \nmake, go touch. If you're designing for desktop, go non-touch. It sounds\n easy but it'd be ignoring\n\t\t\t\t\ta new tendency that arrises, hybrid devices. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tAn hybrid device is a device that supposedly does both touch and \nnon-touch. The Chromebook Pixel, the Surface Pro and the Lenovo Yoga are\n a good example. <br>\n\t\t\t\t\tWhat to do in this case ? Well there is no easy answer but I'm \ngoing to go ahead and give one, go for touch. That's where the \ntechnology is going to evolve.\n\t\t\t\t\t<br>If you design for the web, or anything for that matter, think touch upfront. \n\t\t\t\t</p>\n\t\t\t\t\t<p><span>\n\t\t\t\t\t\tTakeaway:<br>\n\t\t\t\t\t\t- Think mobile, think touch in almost everything you'll do in the future. <br>\n\t\n\t\t\t\t\t\t- Use recommended touch targets for each OS. This will help make \nyour design better and help you reach consistency within the OS.\n\t\t\t\t\t\t- Touch targets are reference values, it doesn't mean you should \nfollow them to the letter. Ultimately, you control the experience.\t\t\t\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\t\n\n\n<div>\n\t<div>\n\t\t\t\t<h2><a name=\"software\">Design software</a></h2>\n\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tThe software doesn't make the designer, but choosing the right \nsoftware for the task at hand can improve your productivity and ease of \nwork by quite a bit.\n\t\t\t\t\tSoftware \"know-hows\" shouldn't be your only skill but learning and \nmastering the right tool will be a great asset to make your ideas \nhappen.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tWhen it comes to handling DPI variation in interface design, \ndifferent software work in different ways. Some are better at particular\n tasks than others.\n\t\t\t\tHere are the most common:\n\t\t\t\t</p>\n\t\t\t\t<img src=\"http://sebastien-gabriel.com/designers-guide-to-dpi/images/software_01.png\" width=\"900\" data-src=\"../database/uploads/images/article_images/software_01_21_3_2015.png\">\n\t\t\t\t\n\t\t\t\t<h3>Photoshop</h3>\n\t\t\t\t<p>\n\t\t\t\tThe mother of interface design tools. Probably the most used tool \nout there today. There are an infinite number of resources,\n\t\t\t\ttutorials and articles for it. Photoshop has been around almost \nsince the beginning of interface design. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tAs its name suggests, the first intention of the program wasn't \ninterface design but photo or bitmap retouching. It evolved over the \nyear and \n\t\t\t\twith the birth of interface design, designers appropriated it and \nre-purposed it. Part of this was because they were used to it and \nbecause \n\t\t\t\tit was the only program around that was able to do things as good as\n needed.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tPhotoshop is, to this day, the master of Bitmap editing and is still\n the most used program out there for UI design. Its decades long legacy \nmakes it a hard program \n\t\t\t\tto approach and learn though. As a gigantic swiss army knife of a \nsoftware, you'll be able to do anything, but not always in the most \nefficient way.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tAs it it bitmap based initially, it is DPI dependent, the opposite of Illustrator and Sketch described below.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<h3>Illustrator</h3>\n\t\t\t\t<p>\n\t\t\t\tPhotoshop's vector based sibling. As its name indicates, it is aimed\n at Illustrators but it is also usable as an interface design tool.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tIllustrator is suited for print design as well so its interface, \ncolor management, scale, rulers and units may throw you off at first and\n it requires a few tweaks\n\t\t\t\tto be easily usable for interface design only. Like Photoshop, it is\n an incredibly powerful tool with a steep learning curve.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tWhat differs from Photoshop is that it is DPI independent due to its\n reliance on vector shapes. Contrary to bitmap or raster images, \ngraphics made using vector \n\t\t\t\tshapes, relying on mathematical formulas, will be rescaled \nprogrammatically without any quality loss. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tUnderstanding the difference between rasterized and vectorized image is key to build scalable visual design and assets. \n\t\t\t\t</p><p> \n\t\t\t\t</p><p>\n\t\t\t\tIf you want to get started with using Illustrator for web/interface design, I recommend reading <a href=\"https://medium.com/@janoskoos/my-vector-workflow-dd1357d28d7c\" target=\"_blank\">\"My vector workflow\"</a> by <a href=\"https://twitter.com/@janoskoos\" target=\"_blank\">@janoskoos</a>.\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t<h3>Sketch 3.0</h3>\n\t\t\t\t<p>\n\t\t\t\tSketch is new compared to Photoshop and Illustrator. With only 4 \nyears of age, this program generated a lot of hype (in a good way) in \nthe UI designer industry.\n\t\t\t\tThe reason is that Sketch is aimed, from the start, to be used by \ninterface and UX designers. Without the legacy of Photoshop or \nIllustrator,\n\t\t\t\tSketch positions itself as the perfectly adapted tool for the niche \naudience that is interface designers.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tSketch is suited for fast wireframing as well as more complex visual\n design. It is entirely vector based, like Illustrator, with a minimal \nand well thought UI.\n\t\t\t\tThe combination of artboards and the ease of use and flexibility of \nits asset generation system makes it the fastest tool for multi-DPI and \nmulti-platform design.\n\t\t\t\tThe recent release of its 3.0 version make it a very solid \nalternative to Photoshop. \n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tOn the downside, Sketch is supported by a smaller team and is still \nfairly recent. Its team is extremely reactive but doesn't have the scale\n of the Adobe (Photoshop and Illustrator) one.\n\t\t\t\tSketch offers (by design) the bare minimum when it comes to bitmap \nedition. Photoshop will be more suited for this kind of job.\n\t\t\t\tFinally, due to its fairly still young life, the resources in term \nof source files, tutorials and overall community is orders of magnitude \nsmaller than Photoshop. That being said, the community is very active \nand motivated.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tOn a more personal note, I've been a Photoshop user since I started \ndesign 8 years ago but I recently switch to Sketch 3.0 for the most part\n\t\t\t\tof my design process. This is not a judgement of quality, Photoshop \nis still a hell of a good program, it just suits my needs better.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tIf you want to learn more on my particular experience I encourage you to read my <a href=\"https://medium.com/@KounterB/a-month-with-sketch-3-68c443fe5041\" target=\"_blank\">\"A month with Sketch 3.0\" article</a> or my <a href=\"https://medium.com/@KounterB/sketch-tutorial_01-b76271a095e3\" target=\"_blank\">\"Sketch tutorial_01\"</a>.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\tWant to get even deeper and understand how vectors work in sketch ? Head to <a href=\"https://twitter.com/@pnowelldesign\" target=\"_blank\">@pnowelldesign's</a> article <a href=\"https://medium.com/sketch-app/harnessing-vector-awesomeness-in-sketch-3c9621408138\" target=\"_blank\">\"Harnessing vector awesomeness in Sketch\"</a>\n\t\t\t\t</p>\n\t\t\t\t\n\t\t\t\t\t<p><span>\n\t\t\t\t\t\tTakeaway:<br>\n\t\t\t\t\t\tThere is no perfect tool for the job but the one you are \ncomfortable using. If you can afford the time an money, I recommend you \ntry them all to make up your own opinion.\t\t\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t\n\t\t\t</div>\n\t\t\n\n\t\t\t\n<div>\n\t<div>\n\t\t\t\t<h2><a name=\"documentation\">Doc and resources</a></h2>\n\t</div>\n\t\t\t\t\n\t\t\t\t<p>\n\t\t\t\t\tThis guide was only an introduction, time to start doing and learn more.\n\t\t\t\t\tHere are a few links if you want to learn more or simply get more details about the subjects we discussed here:<br><br>\n\t\t\t\t\t\n\t\t\t\t\t<b>Platform documentation</b><br>\n\t\t\t\t\t<a href=\"https://developer.android.com/design/index.html\" target=\"_blank\">Android UI guidelines</a><br>\n\t\t\t\t\t<a href=\"http://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\">Google Material guidelines</a><br>\n\t\t\t\t\t<a href=\"https://developer.apple.com/library/ios/documentation/userexperience/conceptual/MobileHIG/index.html\" target=\"_blank\">iOS7 UI guidelines</a><br>\n\t\t\t\t\t<a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465424.aspx\" target=\"_blank\">Windows UI guidelines</a><br>\n\t\t\t\t\t<a href=\"https://developers.google.com/web/fundamentals/principles/\" target=\"_blank\"> Google dev Principles of site design</a><br><br>\n\t\t\t\t\t\n\t\t\t\t\t<b>Cheat-sheets and templates</b><br>\n\t\t\t\t\t<a href=\"http://www.paintcodeapp.com/news/iphone-6-screens-demystified\" target=\"_blank\">iPhone 6 Screens Demystified</a><br>\n\t\t\t\t\t<a href=\"http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\" target=\"_blank\">Ultimate guide to iphone resolutions</a> by <a href=\"http://www.paintcodeapp.com/\" target=\"_blank\">PaintCodeApp</a><br>\n\t\t\t\t\t<a href=\"http://screensiz.es/phone\" target=\"_blank\"> Screen sizes, ratio and PPI</a><br>\n\t\t\t\t\t<a href=\"http://ivomynttinen.com/blog/the-ios-7-design-cheat-sheet/\" target=\"_blank\"> iOS7 designer cheat sheet</a><br>\n\t\t\t\t\t<a href=\"https://developer.apple.com/library/prerelease/ios/design/index.html\" target=\"_blank\"> iOS7 design resource</a> (requires Apple account)<br>\n\t\t\t\t\t<a href=\"http://appicontemplate.com/\" target=\"_blank\"> App icons template, Android and iOS</a><br>\n\t\t\t\t\t<a href=\"http://bjango.com/articles/\" target=\"_blank\"> Bjango blog</a> (A design article gold mine)<br>\n\t\t\t\t\t<a href=\"http://www.teehanlax.com/tools/iphone/\" target=\"_blank\">iPhone GUI</a><a> and </a><a href=\"http://www.teehanlax.com/tools/ipad/\" target=\"_blank\"> iPad GUI(.psd)</a> by <a href=\"https://twitter.com/teehanlax\" target=\"_blank\">@teehanlax</a><br><br>\n\t\t\t\t\t\n\t\t\t\t\t<b>Tools</b><br>\n\t\t\t\t\t<a href=\"http://density.brdrck.me/\" target=\"_blank\">Density converter</a> by <a href=\"https://twitter.com/brdrck\" target=\"_blank\">@brdrck</a><br>\n\t\t\t\t\t<a href=\"http://dribbble.com/shots/1237570-Asset-Creation-Process?list=searches\" target=\"_blank\">Android asset generation</a> by <a href=\"https://twitter.com/brdrck\" target=\"_blank\">@brdrck</a><br>\n\t\t\t\t\t<a href=\"http://www.androiddesign.tips/\">Android design tips</a> by <a href=\"https://twitter.com/destroywerk\" target=\"_blank\">@destroywerk</a> and <a href=\"https://twitter.com/BPScott\" target=\"_blank\">@BPScott</a><br>\n\t\t\t\t\t<a href=\"http://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch\" target=\"_blank\"> 9patch creation in Android</a> by <a href=\"https://twitter.com/romannurik\" target=\"_blank\">@romannurik</a><br>\n\t\t\t\t\t<a href=\"http://romannurik.github.io/AndroidAssetStudio/index.html\" target=\"_blank\">Android asset studio</a> by <a href=\"https://twitter.com/romannurik\" target=\"_blank\">@romannurik</a>. Lots of great tools for Android specific asset creation.<br><br>\n\t\t\t\t\t\n\t\t\t\t\t<b>Learn more and other reads</b><br>\n\t\t\t\t\t<a href=\"http://www.brandbuilderwebsites.com/blog/2012/03/29/device-independent-pixel-formula-for-mobile-devices/\" target=\"_blank\">Device independent pixel formula for Mobile devices</a><br>\n\t\t\t\t\t<a href=\"http://reviews.cnet.com/8301-33199_7-57364224-221/what-is-4k-uhd-next-generation-resolution-explained/\" target=\"_blank\"> More information about 4K by Cnet.com</a><br>\n\t\t\t\t\t<a href=\"http://uxdesign.smashingmagazine.com/2012/02/21/finger-friendly-design-ideal-mobile-touchscreen-target-sizes/\" target=\"_blank\">More informations about touch targets by Smashing Mag</a><br>\n\t\t\t\t\t<a href=\"http://rustyshelf.org/2014/07/08/the-android-screen-fragmentation-myth/\">The Android Screen Fragmentation Myth</a><br></p></div>","tags":"css,Guide,DPI","isStarred":"true","articleImages":["http://sebastien-gabriel.com/designers-guide-to-dpi/images/dpi-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/blue-square-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-03.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/resolution-04.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/4k-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/hertz-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/retina-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/retina-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/multiplier-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/dp-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ppi-influence-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ppi-influence-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-1.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-2.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-01-3.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-03.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/ios-04.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-03.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-04.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-05.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-06.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-07.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-08.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-10.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/android-09.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/mac_cros_01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/mac_cros_02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-02.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-03.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-04.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-05.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/stretchable-05-2.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_01.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_03.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_04.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/touch_05.png","http://sebastien-gabriel.com/designers-guide-to-dpi/images/software_01.png"],"note":"","dateCreated":"Sat Mar 21 2015 19:57:27 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426948204633},"mode":"add","comments":[],"images":[],"_id":"jEJwYPG2hS73sTAs"}
{"id":"0","category":"css","categoryId":"29","title":"High-level advice and guidelines for writing sane, manageable, scalable CSS","refSite":"","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div class=\"wrapper\">\n\n    <h1 class=\"hide\">CSS Guidelines</h1>\n<h2 class=\"alpha  site-title\">High-level advice and guidelines for writing sane, manageable, scalable CSS</h2>\n\n\n<h2 id=\"about-the-author\">About the Author</h2>\n\n<p><cite>CSS Guidelines</cite> is a document by me, <a href=\"http://csswizardry.com/work/\">Harry\nRoberts</a>. I am a Consultant Front-end Architect\nfrom the UK, and I help companies all over the world write and manage better\nquality UIs for their products and teams. I am available for hire.</p>\n\n\n<h2 id=\"support-the-guidelines\">Support the Guidelines</h2>\n\n<h2 id=\"contents\">Contents</h2>\n\n<ul>\n  <li><a href=\"#introduction\">Introduction</a>\n    <ul>\n      <li><a href=\"#the-importance-of-a-styleguide\">The Importance of a Styleguide</a></li>\n      <li><a href=\"#disclaimers\">Disclaimers</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#syntax-and-formatting\">Syntax and Formatting</a>\n    <ul>\n      <li><a href=\"#multiple-files\">Multiple Files</a></li>\n      <li><a href=\"#table-of-contents\">Table of Contents</a></li>\n      <li><a href=\"#characters-wide\">80 Characters Wide</a></li>\n      <li><a href=\"#titling\">Titling</a></li>\n      <li><a href=\"#anatomy-of-a-ruleset\">Anatomy of a Ruleset</a></li>\n      <li><a href=\"#multi-line-css\">Multi-line CSS</a></li>\n      <li><a href=\"#indenting\">Indenting</a>\n        <ul>\n          <li><a href=\"#indenting-sass\">Indenting Sass</a></li>\n          <li><a href=\"#alignment\">Alignment</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#meaningful-whitespace\">Meaningful Whitespace</a></li>\n      <li><a href=\"#html\">HTML</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#commenting\">Commenting</a>\n    <ul>\n      <li><a href=\"#high-level\">High-level</a>\n        <ul>\n          <li><a href=\"#objectextension-pointers\">Object&ndash;Extension Pointers</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#low-level\">Low-level</a></li>\n      <li><a href=\"#preprocessor-comments\">Preprocessor Comments</a></li>\n      <li><a href=\"#removing-comments\">Removing Comments</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#naming-conventions\">Naming Conventions</a>\n    <ul>\n      <li><a href=\"#hyphen-delimited\">Hyphen Delimited</a></li>\n      <li><a href=\"#bem-like-naming\">BEM-like Naming</a>\n        <ul>\n          <li><a href=\"#starting-context\">Starting Context</a></li>\n          <li><a href=\"#more-layers\">More Layers</a></li>\n          <li><a href=\"#modifying-elements\">Modifying Elements</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#naming-conventions-in-html\">Naming Conventions in HTML</a></li>\n      <li><a href=\"#javascript-hooks\">JavaScript Hooks</a>\n        <ul>\n          <li><a href=\"#data--attributes\"><code>data-*</code> Attributes</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#taking-it-further\">Taking It Further</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#css-selectors\">CSS Selectors</a>\n    <ul>\n      <li><a href=\"#selector-intent\">Selector Intent</a></li>\n      <li><a href=\"#reusability\">Reusability</a></li>\n      <li><a href=\"#location-independence\">Location Independence</a></li>\n      <li><a href=\"#portability\">Portability</a>\n        <ul>\n          <li><a href=\"#quasi-qualified-selectors\">Quasi-Qualified Selectors</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#naming\">Naming</a>\n        <ul>\n          <li><a href=\"#naming-ui-components\">Naming UI Components</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#selector-performance\">Selector Performance</a>\n        <ul>\n          <li><a href=\"#the-key-selector\">The Key Selector</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#general-rules\">General Rules</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#specificity\">Specificity</a>\n    <ul>\n      <li><a href=\"#ids-in-css\">IDs in CSS</a></li>\n      <li><a href=\"#nesting\">Nesting</a></li>\n      <li><a href=\"#important\"><code>!important</code></a></li>\n      <li><a href=\"#hacking-specificity\">Hacking Specificity</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#architectural-principles\">Architectural Principles</a>\n    <ul>\n      <li><a href=\"#high-level-overview\">High-level Overview</a></li>\n      <li><a href=\"#object-orientation\">Object-orientation</a></li>\n      <li><a href=\"#the-single-responsibility-principle\">The Single Responsibility Principle</a></li>\n      <li><a href=\"#the-openclosed-principle\">The Open/Closed Principle</a></li>\n      <li><a href=\"#dry\">DRY</a></li>\n      <li><a href=\"#composition-over-inheritance\">Composition over Inheritance</a></li>\n      <li><a href=\"#the-separation-of-concerns\">The Separation of Concerns</a>\n        <ul>\n          <li><a href=\"#misconceptions\">Misconceptions</a></li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"up-next\">Up Next</h3>\n\n<ul>\n  <li>Preprocessors</li>\n  <li>Layout</li>\n  <li>Performance</li>\n  <li>Sanity, Simplicity</li>\n  <li>Code Smells</li>\n  <li>Legacy, Hacks, and Technical Debt</li>\n</ul>\n\n<hr>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>CSS is not a pretty language. While it is simple to learn and get started with,\nit soon becomes problematic at any reasonable scale. There isn’t much we can do\nto change how CSS works, but we can make changes to the way we author and\nstructure it.</p>\n\n<p>In working on large, long-running projects, with dozens of developers of\ndiffering specialities and abilities, it is important that we all work in a\nunified way in order to&mdash;among other things&mdash;</p>\n\n<ul>\n  <li>keep stylesheets maintainable;</li>\n  <li>keep code transparent, sane, and readable;</li>\n  <li>keep stylesheets scalable.</li>\n</ul>\n\n<p>There are a variety of techniques we must employ in order to satisfy these\ngoals, and <cite>CSS Guidelines</cite> is a document of recommendations and\napproaches that will help us to do so.</p>\n\n<h3 id=\"the-importance-of-a-styleguide\">The Importance of a Styleguide</h3>\n\n<p>A coding styleguide (note, not a visual styleguide) is a valuable tool for teams\nwho</p>\n\n<ul>\n  <li>build and maintain products for a reasonable length of time;</li>\n  <li>have developers of differing abilities and specialisms;</li>\n  <li>have a number of different developers working on a product at any given time;</li>\n  <li>on-board new staff regularly;</li>\n  <li>have a number of codebases that developers dip in and out of.</li>\n</ul>\n\n<p>Whilst styleguides are typically more suited to product teams&mdash;large codebases on\nlong-lived and evolving projects, with multiple developers contributing over\nprolonged periods of time&mdash;all developers should strive for a degree of\nstandardisation in their code.</p>\n\n<p>A good styleguide, when well followed, will</p>\n\n<ul>\n  <li>set the standard for code quality across a codebase;</li>\n  <li>promote consistency across codebases;</li>\n  <li>give developers a feeling of familiarity across codebases;</li>\n  <li>increase productivity.</li>\n</ul>\n\n<p>Styleguides should be learned, understood, and implemented at all times on a\nproject which is governed by one, and any deviation must be fully justified.</p>\n\n<h3 id=\"disclaimers\">Disclaimers</h3>\n\n<p><cite>CSS Guidelines</cite> is <em>a</em> styleguide; it is not <em>the</em> styleguide. It\ncontains methodologies, techniques, and tips that I would firmly recommend to my\nclients and teams, but your own tastes and circumstances may well be different.\nYour mileage may vary.</p>\n\n<p>These guidelines are opinionated, but they have been repeatedly tried, tested,\nstressed, refined, broken, reworked, and revisited over a number of years on\nprojects of all sizes.</p>\n\n<hr>\n\n<h2 id=\"syntax-and-formatting\">Syntax and Formatting</h2>\n\n<p>One of the simplest forms of a styleguide is a set of rules regarding syntax and\nformatting. Having a standard way of writing (<em>literally</em> writing) CSS means\nthat code will always look and feel familiar to all members of the team.</p>\n\n<p>Further, code that looks clean <em>feels</em> clean. It is a much nicer environment to\nwork in, and prompts other team members to maintain the standard of cleanliness\nthat they found. Ugly code sets a bad precedent.</p>\n\n<p>At a very high-level, we want</p>\n\n<ul>\n  <li>four (4) space indents, no tabs;</li>\n  <li>80 character wide columns;</li>\n  <li>multi-line CSS;</li>\n  <li>meaningful use of whitespace.</li>\n</ul>\n\n<p><span id=\"did-you-see-this-bit\" class=\"highlight\">But, as with anything, the\nspecifics are somewhat irrelevant&mdash;consistency is key.</span></p>\n\n<h3 id=\"multiple-files\">Multiple Files</h3>\n\n<p>With the meteoric rise of preprocessors of late, more often is the case that\ndevelopers are splitting CSS across multiple files.</p>\n\n<p>Even if not using a preprocessor, it is a good idea to split discrete chunks of\ncode into their own files, which are concatenated during a build step.</p>\n\n<p>If, for whatever reason, you are not working across multiple files, the next\nsections might require some bending to fit your setup.</p>\n\n<h3 id=\"table-of-contents\">Table of Contents</h3>\n\n<p>A table of contents is a fairly substantial maintenance overhead, but the\nbenefits it brings far outweigh any costs. It takes a diligent developer to keep\na table of contents up to date, but it is well worth sticking with. An\nup-to-date table of contents provides a team with a single, canonical catalogue\nof what is in a CSS project, what it does, and in what order.  </p>\n\n<p>A simple table of contents will&mdash;in order, naturally&mdash;simply provide the name of\nthe section and a brief summary of what it is and does, for example:</p>\n\n<pre><code>/**\n * CONTENTS\n *\n * SETTINGS\n * Global...............Globally-available variables and config.\n *\n * TOOLS\n * Mixins...............Useful mixins.\n *\n * GENERIC\n * Normalize.css........A level playing field.\n * Box-sizing...........Better default `box-sizing`.\n *\n * BASE\n * Headings.............H1&ndash;H6 styles.\n *\n * OBJECTS\n * Wrappers.............Wrapping and constraining elements.\n *\n * COMPONENTS\n * Page-head............The main page header.\n * Page-foot............The main page footer.\n * Buttons..............Button elements.\n *\n * TRUMPS\n * Text.................Text helpers.\n */\n</code></pre>\n\n<p>Each item maps to a section and/or include.</p>\n\n<p>Naturally, this section would be substantially larger on the majority of\nprojects, but hopefully we can see how this section&mdash;in the master\nstylesheet&mdash;provides developers with a project-wide view of what is being used\nwhere, and why.</p>\n\n<h3 id=\"characters-wide\">80 Characters Wide</h3>\n\n<p>Where possible, limit CSS files’ width to 80 characters. Reasons for this\ninclude</p>\n\n<ul>\n  <li>the ability to have multiple files open side by side;</li>\n  <li>viewing CSS on sites like GitHub, or in terminal windows;</li>\n  <li>providing a comfortable line length for comments.</li>\n</ul>\n\n<pre><code>/**\n * I am a long-form comment. I describe, in detail, the CSS that follows. I am\n * such a long comment that I easily break the 80 character limit, so I am\n * broken across several lines.\n */</code></pre>\n\n<p>There will be unavoidable exceptions to this rule&mdash;such as URLs, or gradient\nsyntax&mdash;which shouldn’t be worried about.</p>\n\n<h3 id=\"titling\">Titling</h3>\n\n<p>Begin every new major section of a CSS project with a title:</p>\n\n<pre><code>/*------------------------------------*\\\n    #SECTION-TITLE\n\\*------------------------------------*/\n\n.selector {}\n</code></pre>\n\n<p>The title of the section is prefixed with a hash (<code>#</code>) symbol to allow us to\nperform more targeted searches (e.g. <code>grep</code>, etc.): instead of searching for\njust <kbd>SECTION-TITLE</kbd>&mdash;which may yield many results&mdash;a more scoped search\nof <kbd>#SECTION-TITLE</kbd> should return only the section in question.</p>\n\n<p>Leave a carriage return between this title and the next line of code (be that a\ncomment, some Sass, or some CSS).</p>\n\n<p>If you are working on a project where each section is its own file, this title\nshould appear at the top of each one. If you are working on a project with\nmultiple sections per file, each title should be preceded by five (5) carriage\nreturns. This extra whitespace coupled with a title makes new sections much\neasier to spot when scrolling through large files:</p>\n\n<pre><code>/*------------------------------------*\\\n    #A-SECTION\n\\*------------------------------------*/\n\n.selector {}\n\n\n\n\n\n/*------------------------------------*\\\n    #ANOTHER-SECTION\n\\*------------------------------------*/\n\n/**\n * Comment\n */\n\n.another-selector {}\n</code></pre>\n\n<h3 id=\"anatomy-of-a-ruleset\">Anatomy of a Ruleset</h3>\n\n<p>Before we discuss how we write out our rulesets, let’s first familiarise\nourselves with the relevant terminology:</p>\n\n<pre><code>[selector] {\n    [property]: [value];\n    [&lt;--declaration---&gt;]\n}\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>.foo, .foo--bar,\n.baz {\n    display: block;\n    background-color: green;\n    color: red;\n}\n</code></pre>\n\n<p>Here you can see we have</p>\n\n<ul>\n  <li>related selectors on the same line; unrelated selectors on new lines;</li>\n  <li>a space before our opening brace (<code>{</code>);</li>\n  <li>properties and values on the same line;</li>\n  <li>a space after our property&ndash;value delimiting colon (<code>:</code>);</li>\n  <li>each declaration on its own new line;</li>\n  <li>the opening brace (<code>{</code>) on the same line as our last selector;</li>\n  <li>our first declaration on a new line after our opening brace (<code>{</code>);</li>\n  <li>our closing brace (<code>}</code>) on its own new line;</li>\n  <li>each declaration indented by four (4) spaces;</li>\n  <li>a trailing semi-colon (<code>;</code>) on our last declaration.</li>\n</ul>\n\n<p>This format seems to be the largely universal standard (except for variations in\nnumber of spaces, with a lot of developers preferring two (2)).</p>\n\n<p>As such, the following would be incorrect:</p>\n\n<pre><code>.foo, .foo--bar, .baz\n{\n\tdisplay:block;\n\tbackground-color:green;\n\tcolor:red }\n</code></pre>\n\n<p>Problems here include</p>\n\n<ul>\n  <li>tabs instead of spaces;</li>\n  <li>unrelated selectors on the same line;</li>\n  <li>the opening brace (<code>{</code>) on its own line;</li>\n  <li>the closing brace (<code>}</code>) does not sit on its own line;</li>\n  <li>the trailing (and, admittedly, optional) semi-colon (<code>;</code>) is missing;</li>\n  <li>no spaces after colons (<code>:</code>).</li>\n</ul>\n\n<h3 id=\"multi-line-css\">Multi-line CSS</h3>\n\n<p>CSS should be written across multiple lines, except in very specific\ncircumstances. There are a number of benefits to this:</p>\n\n<ul>\n  <li>A reduced chance of merge conflicts, because each piece of functionality\nexists on its own line.</li>\n  <li>More ‘truthful’ and reliable <code>diff</code>s, because one line only ever carries one\nchange.</li>\n</ul>\n\n<p>Exceptions to this rule should be fairly apparent, such as similar rulesets that\nonly carry one declaration each, for example:</p>\n\n<pre><code>.icon {\n    display: inline-block;\n    width:  16px;\n    height: 16px;\n    background-image: url(/img/sprite.svg);\n}\n\n.icon--home     { background-position:   0     0  ; }\n.icon--person   { background-position: -16px   0  ; }\n.icon--files    { background-position:   0   -16px; }\n.icon--settings { background-position: -16px -16px; }\n</code></pre>\n\n<p>These types of ruleset benefit from being single-lined because</p>\n\n<ul>\n  <li>they still conform to the one-reason-to-change-per-line rule;</li>\n  <li>they share enough similarities that they don’t need to be read as thoroughly\nas other rulesets&mdash;there is more benefit in being able to scan their selectors,\nwhich are of more interest to us in these cases.</li>\n</ul>\n\n<h3 id=\"indenting\">Indenting</h3>\n\n<p>As well as indenting individual declarations, indent entire related rulesets to\nsignal their relation to one another, for example:</p>\n\n<pre><code>.foo {}\n\n    .foo__bar {}\n\n        .foo__baz {}\n</code></pre>\n\n<p>By doing this, a developer can see at a glance that <code>.foo__baz {}</code> lives inside\n<code>.foo__bar {}</code> lives inside <code>.foo {}</code>.</p>\n\n<p>This quasi-replication of the DOM tells developers a lot about where classes are\nexpected to be used without them having to refer to a snippet of HTML.</p>\n\n<h4 id=\"indenting-sass\">Indenting Sass</h4>\n\n<p>Sass provides nesting functionality. That is to say, by writing this:</p>\n\n<pre><code>.foo {\n    color: red;\n\n    .bar {\n        color: blue;\n    }\n\n}\n</code></pre>\n\n<p>…we will be left with this compiled CSS:</p>\n\n<pre><code>.foo { color: red; }\n.foo .bar { color: blue; }\n</code></pre>\n\n<p>When indenting Sass, we stick to the same four (4) spaces, and we also leave a\nblank line before and after the nested ruleset.</p>\n\n<p><strong>N.B.</strong> Nesting in Sass should be avoided wherever possible. See <a href=\"#specificity\">the\nSpecificity section</a> for more details.</p>\n\n<h4 id=\"alignment\">Alignment</h4>\n\n<p>Attempt to align common and related identical strings in declarations, for\nexample:</p>\n\n<pre><code>.foo {\n    -webkit-border-radius: 3px;\n       -moz-border-radius: 3px;\n            border-radius: 3px;\n}\n\n.bar {\n    position: absolute;\n    top:    0;\n    right:  0;\n    bottom: 0;\n    left:   0;\n    margin-right: -10px;\n    margin-left:  -10px;\n    padding-right: 10px;\n    padding-left:  10px;\n}\n</code></pre>\n\n<p>This makes life a little easier for developers whose text editors support column\nediting, allowing them to change several identical and aligned lines in one go.</p>\n\n<div class=\"box  box--promo  box--outdent\">\n    <p>It looks like you’re enjoying these guidelines…</p>\n    <p><a class=\"btn  btn--full  btn--tertiary\" href=\"https://gumroad.com/l/JAgjq\">Support Them</a></p>\n</div>\n\n<h3 id=\"meaningful-whitespace\">Meaningful Whitespace</h3>\n\n<p>As well as indentation, we can provide a lot of information through liberal and\njudicious use of whitespace between rulesets. We use:</p>\n\n<ul>\n  <li>One (1) empty line between closely related rulesets.</li>\n  <li>Two (2) empty lines between loosely related rulesets.</li>\n  <li>Five (5) empty lines between entirely new sections.</li>\n</ul>\n\n<p>For example:</p>\n\n<pre><code>/*------------------------------------*\\\n    #FOO\n\\*------------------------------------*/\n\n.foo {}\n\n    .foo__bar {}\n\n\n.foo--baz {}\n\n\n\n\n\n/*------------------------------------*\\\n    #BAR\n\\*------------------------------------*/\n\n.bar {}\n\n    .bar__baz {}\n\n    .bar__foo {}\n</code></pre>\n\n<p>There should never be a scenario in which two rulesets do not have an empty line\nbetween them. This would be incorrect:</p>\n\n<pre><code>.foo {}\n    .foo__bar {}\n.foo--baz {}\n</code></pre>\n\n<h3 id=\"html\">HTML</h3>\n\n<p>Given HTML and CSS’ inherently interconnected nature, it would be remiss of me\nto not cover some syntax and formatting guidelines for markup.</p>\n\n<p>Always quote attributes, even if they would work without. This reduces the\nchance of accidents, and is a more familiar format to the majority of\ndevelopers. For all this would work (and is valid):</p>\n\n<pre><code>&lt;div class=box&gt;\n</code></pre>\n\n<p>…this format is preferred:</p>\n\n<pre><code>&lt;div class=\"box\"&gt;\n</code></pre>\n\n<p>The quotes are not required here, but err on the safe side and include them.</p>\n\n<p>When writing multiple values in a class attribute, separate them with two\nspaces, thus:</p>\n\n<pre><code>&lt;div class=\"foo  bar\"&gt;\n</code></pre>\n\n<p>When multiple classes are related to each other, consider grouping them in\nsquare brackets (<code>[</code> and <code>]</code>), like so:</p>\n\n<pre><code>&lt;div class=\"[ box  box--highlight ]  [ bio  bio--long ]\"&gt;\n</code></pre>\n\n<p>This is not a firm recommendation, and is something I am still trialling myself,\nbut it does carry a number of benefits. Read more in <a href=\"http://csswizardry.com/2014/05/grouping-related-classes-in-your-markup/\"><cite>Grouping related\nclasses in your\nmarkup</cite></a>.</p>\n\n<p>As with our rulesets, it is possible to use meaningful whitespace in your HTML.\nYou can denote thematic breaks in content with five (5) empty lines, for\nexample:</p>\n\n<pre><code>&lt;header class=\"page-head\"&gt;\n    ...\n&lt;/header&gt;\n\n\n\n\n\n&lt;main class=\"page-content\"&gt;\n    ...\n&lt;/main&gt;\n\n\n\n\n\n&lt;footer class=\"page-foot\"&gt;\n    ...\n&lt;/footer&gt;\n</code></pre>\n\n<p>Separate independent but loosely related snippets of markup with a single empty\nline, for example:</p>\n\n<pre><code>&lt;ul class=\"primary-nav\"&gt;\n\n    &lt;li class=\"primary-nav__item\"&gt;\n        &lt;a href=\"/\" class=\"primary-nav__link\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n\n    &lt;li class=\"primary-nav__item  primary-nav__trigger\"&gt;\n        &lt;a href=\"/about\" class=\"primary-nav__link\"&gt;About&lt;/a&gt;\n\n        &lt;ul class=\"primary-nav__sub-nav\"&gt;\n            &lt;li&gt;&lt;a href=\"/about/products\"&gt;Products&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/about/company\"&gt;Company&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n    &lt;/li&gt;\n\n    &lt;li class=\"primary-nav__item\"&gt;\n        &lt;a href=\"/contact\" class=\"primary-nav__link\"&gt;Contact&lt;/a&gt;\n    &lt;/li&gt;\n\n&lt;/ul&gt;\n</code></pre>\n\n<p>This allows developers to spot separate parts of the DOM at a glance, and also\nallows certain text editors&mdash;like Vim, for example&mdash;to manipulate\nempty-line-delimited blocks of markup.</p>\n\n<h3 id=\"further-reading\">Further Reading</h3>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2014/05/grouping-related-classes-in-your-markup/\"><cite>Grouping related classes in your markup</cite></a></li>\n</ul>\n\n<hr>\n\n<h2 id=\"commenting\">Commenting</h2>\n\n<p>The cognitive overhead of working with CSS is huge. With so much to be aware of,\nand so many project-specific nuances to remember, the worst situation most\ndevelopers find themselves in is being the-person-who-didn’t-write-this-code.\nRemembering your own classes, rules, objects, and helpers is manageable <em>to an\nextent</em>, but anyone inheriting CSS barely stands a chance.</p>\n\n<p><strong>CSS needs more comments.</strong></p>\n\n<p>As CSS is something of a declarative language that doesn’t really leave much of\na paper-trail, it is often hard to discern&mdash;from looking at the CSS alone&mdash;</p>\n\n<ul>\n  <li>whether some CSS relies on other code elsewhere;</li>\n  <li>what effect changing some code will have elsewhere;</li>\n  <li>where else some CSS might be used;</li>\n  <li>what styles something might inherit (intentionally or otherwise);</li>\n  <li>what styles something might pass on (intentionally or otherwise);</li>\n  <li>where the author intended a piece of CSS to be used.</li>\n</ul>\n\n<p>This doesn’t even take into account some of CSS’ many quirks&mdash;such as various\nsates of <code>overflow</code> triggering block formatting context, or certain transform\nproperties triggering hardware acceleration&mdash;that make it even more baffling to\ndevelopers inheriting projects.</p>\n\n<p>As a result of CSS not telling its own story very well, it is a language that\nreally does benefit from being heavily commented.</p>\n\n<p>As a rule, you should comment anything that isn’t immediately obvious from the\ncode alone. That is to say, there is no need to tell someone that <code>color: red;</code>\nwill make something red, but if you’re using <code>overflow: hidden;</code> to clear\nfloats&mdash;as opposed to clipping an element’s overflow&mdash;this is probably something\nworth documenting.</p>\n\n<h3 id=\"high-level\">High-level</h3>\n\n<p>For large comments that document entire sections or components, we use a\nDocBlock-esque multi-line comment which adheres to our 80 column width.</p>\n\n<p>Here is a real-life example from the CSS which styles the page header on <a href=\"http://csswizardry.com/\">CSS\nWizardry</a>:</p>\n\n<pre><code>/**\n * The site’s main page-head can have two different states:\n *\n * 1) Regular page-head with no backgrounds or extra treatments; it just\n *    contains the logo and nav.\n * 2) A masthead that has a fluid-height (becoming fixed after a certain point)\n *    which has a large background image, and some supporting text.\n *\n * The regular page-head is incredibly simple, but the masthead version has some\n * slightly intermingled dependency with the wrapper that lives inside it.\n */\n</code></pre>\n\n<p>This level of detail should be the norm for all non-trivial code&mdash;descriptions of\nstates, permutations, conditions, and treatments.</p>\n\n<h4 id=\"objectextension-pointers\">Object&ndash;Extension Pointers</h4>\n\n<p>When working across multiple partials, or in an OOCSS manner, you will often\nfind that rulesets that can work in conjunction with each other are not always\nin the same file or location. For example, you may have a generic button\nobject&mdash;which provides purely structural styles&mdash;which is to be extended in a\ncomponent-level partial which will add cosmetics. We document this relationship\nacross files with simple <i>object&ndash;extension pointers</i>. In the object file:</p>\n\n<pre><code>/**\n * Extend `.btn {}` in _components.buttons.scss.\n */\n\n.btn {}\n</code></pre>\n\n<p>And in your theme file:</p>\n\n<pre><code>/**\n * These rules extend `.btn {}` in _objects.buttons.scss.\n */\n\n.btn--positive {}\n\n.btn--negative {}\n</code></pre>\n\n<p>This simple, low effort commenting can make a lot of difference to developers\nwho are unaware of relationships across projects, or who are wanting to know\nhow, why, and where other styles might be being inherited from.</p>\n\n<h3 id=\"low-level\">Low-level</h3>\n\n<p>Oftentimes we want to comment on specific declarations (i.e. lines) in a\nruleset. To do this we use a kind of reverse footnote. Here is a more complex\ncomment detailing the larger site headers mentioned above:</p>\n\n<pre><code>/**\n * Large site headers act more like mastheads. They have a faux-fluid-height\n * which is controlled by the wrapping element inside it.\n *\n * 1. Mastheads will typically have dark backgrounds, so we need to make sure\n *    the contrast is okay. This value is subject to change as the background\n *    image changes.\n * 2. We need to delegate a lot of the masthead’s layout to its wrapper element\n *    rather than the masthead itself: it is to this wrapper that most things\n *    are positioned.\n * 3. The wrapper needs positioning context for us to lay our nav and masthead\n *    text in.\n * 4. Faux-fluid-height technique: simply create the illusion of fluid height by\n *    creating space via a percentage padding, and then position everything over\n *    the top of that. This percentage gives us a 16:9 ratio.\n * 5. When the viewport is at 758px wide, our 16:9 ratio means that the masthead\n *    is currently rendered at 480px high. Let’s…\n * 6. …seamlessly snip off the fluid feature at this height, and…\n * 7. …fix the height at 480px. This means that we should see no jumps in height\n *    as the masthead moves from fluid to fixed. This actual value takes into\n *    account the padding and the top border on the header itself.\n */\n\n.page-head--masthead {\n    margin-bottom: 0;\n    background: url(/img/css/masthead.jpg) center center #2e2620;\n    @include vendor(background-size, cover);\n    color: $color-masthead; /* [1] */\n    border-top-color: $color-masthead;\n    border-bottom-width: 0;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset;\n\n    @include media-query(lap-and-up) {\n        background-image: url(/img/css/masthead-medium.jpg);\n    }\n\n    @include media-query(desk) {\n        background-image: url(/img/css/masthead-large.jpg);\n    }\n\n    &gt; .wrapper { /* [2] */\n        position: relative; /* [3] */\n        padding-top: 56.25%; /* [4] */\n\n        @media screen and (min-width: 758px) { /* [5] */\n            padding-top: 0; /* [6] */\n            height: $header-max-height - double($spacing-unit) - $header-border-width; /* [7] */\n        }\n\n    }\n\n}\n</code></pre>\n\n<p>These types of comment allow us to keep all of our documentation in one place\nwhilst referring to the parts of the ruleset to which they belong.</p>\n\n<h3 id=\"preprocessor-comments\">Preprocessor Comments</h3>\n\n<p>With most&mdash;if not all&mdash;preprocessors, we have the option to write comments that\nwill not get compiled out into our resulting CSS file. As a rule, use these\ncomments to document code that would not get written out to that CSS file\neither. If you are documenting code which will get compiled, use comments that\nwill compile also. For example, this is correct:</p>\n\n<pre><code>// Dimensions of the @2x image sprite:\n$sprite-width:  920px;\n$sprite-height: 212px;\n\n/**\n * 1. Default icon size is 16px.\n * 2. Squash down the retina sprite to display at the correct size.\n */\n.sprite {\n    width:  16px; /* [1] */\n    height: 16px; /* [1] */\n    background-image: url(/img/sprites/main.png);\n    background-size: ($sprite-width / 2 ) ($sprite-height / 2); /* [2] */\n}\n</code></pre>\n\n<p>We have documented variables&mdash;code which will not get compiled into our CSS\nfile&mdash;with preprocessor comments, whereas our CSS&mdash;code which will get compiled\ninto our CSS file&mdash;is documented using CSS comments. This means that we have only\nthe correct and relevant information available to us when debugging our compiled\nstylesheets.</p>\n\n<h3 id=\"removing-comments\">Removing Comments</h3>\n\n<p>It should go without saying that no comments should make their way into\nproduction environments&mdash;all CSS should be minified, resulting in loss of\ncomments, before being deployed.</p>\n\n<hr>\n\n<h2 id=\"naming-conventions\">Naming Conventions</h2>\n\n<p>Naming conventions in CSS are hugely useful in making your code more\nstrict, more transparent, and more informative.</p>\n\n<p>A good naming convention will tell you and your team</p>\n\n<ul>\n  <li>what type of thing a class does;</li>\n  <li>where a class can be used;</li>\n  <li>what (else) a class might be related to.</li>\n</ul>\n\n<p>The naming convention I follow is very simple: hyphen (<code>-</code>) delimited strings,\nwith BEM-like naming for more complex pieces of code.</p>\n\n<p>It’s worth noting that a naming convention is not normally useful CSS-side of\ndevelopment; they really come into their own when viewed in HTML.</p>\n\n<h3 id=\"hyphen-delimited\">Hyphen Delimited</h3>\n\n<p>All strings in classes are delimited with a hyphen (<code>-</code>), like so:</p>\n\n<pre><code>.page-head {}\n\n.sub-content {}\n</code></pre>\n\n<p>Camel case and underscores are not used for regular classes; the following are\nincorrect:</p>\n\n<pre><code>.pageHead {}\n\n.sub_content {}\n</code></pre>\n\n<h3 id=\"bem-like-naming\">BEM-like Naming</h3>\n\n<p>For larger, more interrelated pieces of UI that require a number of classes, we\nuse a BEM-like naming convention.</p>\n\n<p><cite>BEM</cite>, meaning <i>Block</i>, <i>Element</i>, <i>Modifier</i>, is a\nfront-end methodology coined by developers working at Yandex. Whilst BEM is a\ncomplete methodology, here we are only concerned with its naming convention.\nFurther, the naming convention here only is BEM-<em>like</em>; the principles are\nexactly the same, but the actual syntax differs slightly.</p>\n\n<p>BEM splits components’ classes into three groups:</p>\n\n<ul>\n  <li>Block: The sole root of the component.</li>\n  <li>Element: A component part of the Block.</li>\n  <li>Modifier: A variant or extension of the Block.</li>\n</ul>\n\n<p>To take an analogy (note, not an example):</p>\n\n<pre><code>.person {}\n.person__head {}\n.person--tall {}\n</code></pre>\n\n<p>Elements are delimited with two (2) underscores (<code>__</code>), and Modifiers are\ndelimited by two (2) hyphens (<code>--</code>).</p>\n\n<p>Here we can see that <code>.person {}</code> is the Block; it is the sole root of a\ndiscrete entity. <code>.person__head {}</code> is an Element; it is a smaller part of the\n<code>.person {}</code> Block. Finally, <code>.person--tall {}</code> is a Modifier; it is a specific\nvariant of the <code>.person {}</code> Block.</p>\n\n<h4 id=\"starting-context\">Starting Context</h4>\n\n<p>Your Block context starts at the most logical, self-contained, discrete\nlocation. To continue with our person-based analogy, we’d not have a class like\n<code>.room__person {}</code>, as the room is another, much higher context. We’d probably\nhave separate Blocks, like so:</p>\n\n<pre><code>.room {}\n\n    .room__door {}\n\n.room--kitchen {}\n\n\n.person {}\n\n    .person__head {}\n</code></pre>\n\n<p>If we did want to denote a <code>.person {}</code> inside a <code>.room {}</code>, it is more correct\nto use a selector like <code>.room .person {}</code> which bridges two Blocks than it is to\nincrease the scope of existing Blocks and Elements.</p>\n\n<p>A more realistic example of properly scoped blocks might look something like\nthis, where each chunk of code represents its own Block:</p>\n\n<pre><code>.page {}\n\n\n.content {}\n\n\n.sub-content {}\n\n\n.footer {}\n\n    .footer__copyright {}\n</code></pre>\n\n<p>Incorrect notation for this would be:</p>\n\n<pre><code>.page {}\n\n    .page__content {}\n\n    .page__sub-content {}\n\n    .page__footer {}\n\n        .page__copyright {}\n</code></pre>\n\n<p>It is important to know when BEM scope starts and stops. As a rule, BEM applies\nto self-contained, discrete parts of the UI.</p>\n\n<div class=\"box  box--promo  box--outdent\">\n    <p>Something you need some more help with?</p>\n    <p><a class=\"btn  btn--full  btn--tertiary\" href=\"http://csswizardry.com/work/\">Hire me</a></p>\n</div>\n\n<h4 id=\"more-layers\">More Layers</h4>\n\n<p>If we were to add another Element&mdash;called, let’s say, <code>.person__eye {}</code>&mdash;to this\n<code>.person {}</code> component, we would not need to step through every layer of the\nDOM. That is to say, the correct notation would be <code>.person__eye {}</code>, and not\n<code>.person__head__eye {}</code>. Your classes do not reflect the full paper-trail of the\nDOM.</p>\n\n<h4 id=\"modifying-elements\">Modifying Elements</h4>\n\n<p>You can have variants of Elements, and these can be denoted in a number of ways\ndepending on how and why they are being modified. Carrying on with our person\nexample, a blue eye might look like this:</p>\n\n<pre><code>.person__eye--blue {}\n</code></pre>\n\n<p>Here we can see we’re directly modifying the eye Element.</p>\n\n<p>Things can get more complex, however. Please excuse the crude analogy, and let’s\nimagine we have a face Element that is handsome. The person themselves isn’t\nthat handsome, so we modify the face Element directly&mdash;a handsome face on a\nregular person:</p>\n\n<pre><code>.person__face--handsome {}\n</code></pre>\n\n<p>But what if that person <em>is</em> handsome, and we want to style their face because\nof that fact? A regular face on a handsome person:</p>\n\n<pre><code>.person--handsome .person__face {}\n</code></pre>\n\n<p>Here is one of a few occasions where we’d use a descendant selector to modify\nan Element based on a Modifier on the Block.</p>\n\n<p>If using Sass, we would likely write this like so:</p>\n\n<pre><code>.person {}\n\n    .person__face {\n\n        .person--handsome &amp; {}\n\n    }\n\n.person--handsome {}\n</code></pre>\n\n<p>Note that we do not nest a new instance of <code>.person__face {}</code> inside of\n<code>.person--handsome {}</code>; instead, we make use of Sass’ parent selectors to\nprepend <code>.person--handsome</code> onto the existing <code>.person__face {}</code> selector. This\nmeans that all of our <code>.person__face {}</code>-related rules exist in once place, and\naren’t spread throughout the file. This is general good practice when dealing\nwith nested code: keep all of your context (e.g. all <code>.person__face {}</code> code)\nencapsulated in one location.</p>\n\n<h3 id=\"naming-conventions-in-html\">Naming Conventions in HTML</h3>\n\n<p>As I previously hinted at, naming conventions aren’t necessarily all that useful\nin your CSS. Where naming conventions’ power really lies is in your markup. Take\nthe following, non-naming-conventioned HTML:</p>\n\n<pre><code>&lt;div class=\"box  profile  pro-user\"&gt;\n\n    &lt;img class=\"avatar  image\" /&gt;\n\n    &lt;p class=\"bio\"&gt;...&lt;/p&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>How are the classes <code>box</code> and <code>profile</code> related to each other? How are the\nclasses <code>profile</code> and <code>avatar</code> related to each other? Are they related at all?\nShould you be using <code>pro-user</code> alongside <code>bio</code>? Will the classes <code>image</code> and\n<code>profile</code> live in the same part of the CSS? Can you use <code>avatar</code> anywhere else?</p>\n\n<p>From that markup alone, it is very hard to answer any of those questions. Using\na naming convention, however, changes all that:</p>\n\n<pre><code>&lt;div class=\"box  profile  profile--is-pro-user\"&gt;\n\n    &lt;img class=\"avatar  profile__image\" /&gt;\n\n    &lt;p class=\"profile__bio\"&gt;...&lt;/p&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>Now we can clearly see which classes are and are not related to each other, and\nhow; we know what classes we can’t use outside of the scope of this component;\nand we know which classes we may be free to reuse elsewhere.</p>\n\n<h3 id=\"javascript-hooks\">JavaScript Hooks</h3>\n\n<p>As a rule, it is unwise to bind your CSS and your JS onto the same class in your\nHTML. This is because doing so means you can’t have (or remove) one without\n(removing) the other. It is much cleaner, much more transparent, and much more\nmaintainable to bind your JS onto specific classes.</p>\n\n<p>I have known occasions before when trying to refactor some CSS has unwittingly\nremoved JS functionality because the two were tied to each other&mdash;it was\nimpossible to have one without the other.</p>\n\n<p>Typically, these are classes that are prepended with <code>js-</code>, for example:</p>\n\n<pre><code>&lt;input type=\"submit\" class=\"btn  js-btn\" value=\"Follow\" /&gt;\n</code></pre>\n\n<p>This means that we can have an element elsewhere which can carry with style of\n<code>.btn {}</code>, but without the behaviour of <code>.js-btn</code>.</p>\n\n<h4 id=\"data--attributes\"><code>data-*</code> Attributes</h4>\n\n<p>A common practice is to use <code>data-*</code> attributes as JS hooks, but this is\nincorrect. <code>data-*</code> attributes, as per the spec, are used <q><strong>to store custom\ndata</strong> private to the page or application</q> (emphasis mine). <code>data-*</code>\nattributes are designed to store data, not be bound to.</p>\n\n<h3 id=\"taking-it-further\">Taking It Further</h3>\n\n<p>As previously mentioned, these are very simple naming conventions, and ones that\ndon’t do much more than denote three distinct groups of class.</p>\n\n<p>I would encourage you to read up on and further look in to your naming\nconvention in order to provide more functionality&mdash;I know it’s something I’m keen\nto research and investigate further.</p>\n\n<h3 id=\"further-reading-1\">Further Reading</h3>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\"><cite>MindBEMding &ndash; getting your head ’round BEM syntax</cite></a></li>\n</ul>\n\n<hr>\n\n<h2 id=\"css-selectors\">CSS Selectors</h2>\n\n<p>Perhaps somewhat surprisingly, one of the most fundamental, critical aspects of\nwriting maintainable and scalable CSS is selectors. Their specificity, their\nportability, and their reusability all have a direct impact on the mileage we\nwill get out of our CSS, and the headaches it might bring us.</p>\n\n<h3 id=\"selector-intent\">Selector Intent</h3>\n\n<p>It is important when writing CSS that we scope our selectors correctly, and that\nwe’re selecting the right things for the right reasons. <i>Selector Intent</i>\nis the process of deciding and defining what you want to style and how you\nwill go about selecting it. For example, if you are wanting to style your\nwebsite’s main navigation menu, a selector like this would be incredibly unwise:</p>\n\n<pre><code>header ul {}\n</code></pre>\n\n<p>This selector’s intent is to style any <code>ul</code> inside any <code>header</code> element, whereas\n<em>our</em> intent was to style the site’s main navigation. This is poor Selector\nIntent: you can have any number of <code>header</code> elements on a page, and they in turn\ncan house any number of <code>ul</code>s, so a selector like this runs the risk of applying\nvery specific styling to a very wide number of elements. This will result in\nhaving to write more CSS to undo the greedy nature of such a selector.</p>\n\n<p>A better approach would be a selector like:</p>\n\n<pre><code>.site-nav {}\n</code></pre>\n\n<p>An unambiguous, explicit selector with good Selector Intent. We are explicitly\nselecting the right thing for exactly the right reason.</p>\n\n<p>Poor Selector Intent is one of the biggest reasons for headaches on CSS\nprojects. Writing rules that are far too greedy&mdash;and that apply very specific\ntreatments via very far reaching selectors&mdash;causes unexpected side effects and\nleads to very tangled stylesheets, with selectors overstepping their intentions\nand impacting and interfering with otherwise unrelated rulesets.</p>\n\n<p>CSS cannot be encapsulated, it is inherently leaky, but we can mitigate some of\nthese effects by not writing such globally-operating selectors: <strong>your selectors\nshould be as explicit and well reasoned as your reason for wanting to select\nsomething.</strong></p>\n\n<h3 id=\"reusability\">Reusability</h3>\n\n<p>With a move toward a more component-based approach to constructing UIs, the idea\nof reusability is paramount. We want the option to be able to move, recycle,\nduplicate, and syndicate components across our projects.</p>\n\n<p>To this end, we make heavy use of classes. IDs, as well as being hugely\nover-specific, cannot be used more than once on any given page, whereas classes\ncan be reused an infinite amount of times. Everything you choose, from the type\nof selector to its name, should lend itself toward being reused.</p>\n\n<h3 id=\"location-independence\">Location Independence</h3>\n\n<p>Given the ever-changing nature of most UI projects, and the move to more\ncomponent-based architectures, it is in our interests not to style things based\non where they are, but on <em>what</em> they are. That is to say, our components’\nstyling should not be reliant upon where we place them&mdash;they should remain\nentirely location independent.</p>\n\n<p>Let’s take an example of a call-to-action button that we have chosen to style\nvia the following selector:</p>\n\n<pre><code>.promo a {}\n</code></pre>\n\n<p>Not only does this have poor Selector Intent&mdash;it will greedily style any and\nevery link inside of a <code>.promo</code> to look like a button&mdash;it is also pretty wasteful\nas a result of being so locationally dependent: we can’t reuse that button with\nits correct styling outside of <code>.promo</code> because it is explicitly tied to that\nlocation. A far better selector would have been:</p>\n\n<pre><code>.btn {}\n</code></pre>\n\n<p>This single class can be reused anywhere outside of <code>.promo</code> and will always\ncarry its correct styling. As a result of a better selector, this piece of UI is\nmore portable, more recyclable, doesn’t have any dependencies, and has much\nbetter Selector Intent. <strong>A component shouldn’t have to live in a certain place\nto look a certain way.</strong></p>\n\n<h3 id=\"portability\">Portability</h3>\n\n<p>Reducing, or, ideally, removing, location dependence means that we can move\ncomponents around our markup more freely, but how about improving our ability to\nmove classes around components? On a much lower level, there are changes we\ncan make to our selectors that make the selectors themselves&mdash;as opposed to the\ncomponents they create&mdash;more portable. Take the following example:</p>\n\n<pre><code>input.btn {}\n</code></pre>\n\n<p>This is a <i>qualified</i> selector; the leading <code>input</code> ties this ruleset to\nonly being able to work on <code>input</code> elements. By omitting this qualification, we\nallow ourselves to reuse the <code>.btn</code> class on any element we choose, like an <code>a</code>,\nfor example, or a <code>button</code>.</p>\n\n<p>Qualified selectors do not lend themselves well to being reused, and every\nselector we write should be authored with reuse in mind.</p>\n\n<p>Of course, there are times when you may want to legitimately qualify a\nselector&mdash;you might need to apply some very specific styling to a particular\nelement when it carries a certain class, for example:</p>\n\n<pre><code>/**\n * Embolden and colour any element with a class of `.error`.\n */\n.error {\n    color: red;\n    font-weight: bold;\n}\n\n/**\n * If the element is a `div`, also give it some box-like styling.\n */\ndiv.error {\n    padding: 10px;\n    border: 1px solid;\n}\n</code></pre>\n\n<p>This is one example where a qualified selector might be justifiable, but I would\nstill recommend an approach more like:</p>\n\n<pre><code>/**\n * Text-level errors.\n */\n.error-text {\n    color: red;\n    font-weight: bold;\n}\n\n/**\n * Elements that contain errors.\n */\n.error-box {\n    padding: 10px;\n    border: 1px solid;\n}\n</code></pre>\n\n<p>This means that we can apply <code>.error-box</code> to any element, and not just a\n<code>div</code>&mdash;it is more reusable than a qualified selector.</p>\n\n<h4 id=\"quasi-qualified-selectors\">Quasi-Qualified Selectors</h4>\n\n<p>One thing that qualified selectors can be useful for is signalling where a class\nmight be expected or intended to be used, for example:</p>\n\n<pre><code>ul.nav {}\n</code></pre>\n\n<p>Here we can see that the <code>.nav</code> class is meant to be used on a <code>ul</code> element, and\nnot on a <code>nav</code>. By using <i>quasi-qualified selectors</i> we can still provide\nthat information without actually qualifying the selector:</p>\n\n<pre><code>/*ul*/.nav {}\n</code></pre>\n\n<p>By commenting out the leading element, we can still leave it to be read, but\navoid qualifying and increasing the specificity of the selector.</p>\n\n<h3 id=\"naming\">Naming</h3>\n\n<p>As Phil Karlton once said, <q>There are only two hard things in Computer\nScience: cache invalidation and naming things.</q></p>\n\n<p>I won’t comment on the former claim here, but the latter has plagued me for\nyears.  My advice with regard to naming things in CSS is to pick a name that is\nsensible, but somewhat ambiguous: aim for high reusability. For example, instead\nof a class like <code>.site-nav</code>, choose something like <code>.primary-nav</code>; rather than\n<code>.footer-links</code>, favour a class like <code>.sub-links</code>.</p>\n\n<p>The differences in these names is that the first of each two examples is tied to\na very specific use case: they can only be used as the site’s navigation or the\nfooter’s links respectively. By using slightly more ambiguous names, we can\nincrease our ability to reuse these components in different circumstances.</p>\n\n<p>To quote Nicolas Gallagher:</p>\n\n<blockquote>\n  <p>Tying your class name semantics tightly to the nature of the content has already\nreduced the ability of your architecture to scale or be easily put to use by\nother developers.</p>\n</blockquote>\n\n<p>That is to say, we should use sensible names&mdash;classes like <code>.border</code> or <code>.red</code>\nare never advisable&mdash;but we should avoid using classes which describe the exact\nnature of the content and/or its use cases. <strong>Using a class name to describe\ncontent is redundant because content describes itself.</strong></p>\n\n<p>The debate surrounding semantics has raged for years, but it is important that\nwe adopt a more pragmatic, sensible approach to naming things in order to work\nmore efficiently and effectively. Instead of focussing on ‘semantics’, look more\nclosely at sensibility and longevity&mdash;choose names based on ease of maintenance,\nnot for their perceived meaning.</p>\n\n<p>Name things for people; they’re the only things that actually <em>read</em> your\nclasses (everything else merely matches them). Once again, it is better to\nstrive for reusable, recyclable classes rather than writing for specific use\ncases. Let’s take an example:</p>\n\n<pre><code>/**\n * Runs the risk of becoming out of date; not very maintainable.\n */\n.blue {\n    color: blue;\n}\n\n/**\n * Depends on location in order to be rendered properly.\n */\n.header span {\n    color: blue;\n}\n\n/**\n * Too specific; limits our ability to reuse.\n */\n.header-color {\n    color: blue;\n}\n\n/**\n * Nicely abstracted, very portable, doesn’t risk becoming out of date.\n */\n.highlight-color {\n    color: blue;\n}\n</code></pre>\n\n<p>It is important to strike a balance between names that do not literally describe\nthe style that the class brings, but also ones that do not explicitly describe\nspecific use cases. Instead of <code>.home-page-panel</code>, choose <code>.masthead</code>; instead\nof <code>.site-nav</code>, favour <code>.primary-nav</code>; instead of <code>.btn-login</code>, opt for\n<code>.btn-primary</code>.</p>\n\n<h4 id=\"naming-ui-components\">Naming UI Components</h4>\n\n<p>Naming components with agnosticism and reusability in mind really helps\ndevelopers construct and modify UIs much more quickly, and with far less waste.\nHowever, it can sometimes be beneficial to provide more specific or meaningful\nnaming alongside the more ambiguous class, particularly when several agnostic\nclasses come together to form a more complex and specific component that might\nbenefit from having a more meaningful name. In this scenario, we augment the\nclasses with a  <code>data-ui-component</code> attribute which houses a more specific name,\nfor example:</p>\n\n<pre><code>&lt;ul class=\"tabbed-nav\" data-ui-component=\"Main Nav\"&gt;\n</code></pre>\n\n<p>Here we have the benefits of a highly reusable class name which does not\ndescribe&mdash;and, therefore, tie itself to&mdash;a specific use case, and added meaning\nvia our <code>data-ui-component</code> attribute. The <code>data-ui-component</code>’s value can take\nany format you wish, like title case:</p>\n\n<pre><code>&lt;ul class=\"tabbed-nav\" data-ui-component=\"Main Nav\"&gt;\n</code></pre>\n\n<p>Or class-like:</p>\n\n<pre><code>&lt;ul class=\"tabbed-nav\" data-ui-component=\"main-nav\"&gt;\n</code></pre>\n\n<p>Or namespaced:</p>\n\n<pre><code>&lt;ul class=\"tabbed-nav\" data-ui-component=\"nav-main\"&gt;\n</code></pre>\n\n<p>The implementation is largely personal preference, but the concept still\nremains: <strong>Add any useful or specific meaning via a mechanism that will not\ninhibit your and your team’s ability to recycle and reuse CSS.</strong></p>\n\n<div class=\"box  box--promo  box--outdent\">\n    <p>It looks like you’re enjoying these guidelines…</p>\n    <p><a class=\"btn  btn--full  btn--tertiary\" href=\"https://gumroad.com/l/JAgjq\">Support Them</a></p>\n</div>\n\n<h3 id=\"selector-performance\">Selector Performance</h3>\n\n<p>A topic which is&mdash;with the quality of today’s browsers&mdash;more interesting than it\nis important, is selector performance. That is to say, how quickly a browser can\nmatch the selectors your write in CSS up with the nodes it finds in the DOM.</p>\n\n<p>Generally speaking, the longer a selector is (i.e. the more component parts) the\nslower it is, for example:</p>\n\n<pre><code>body.home div.header ul {}\n</code></pre>\n\n<p>…is a far less efficient selector than:</p>\n\n<pre><code>.primary-nav {}\n</code></pre>\n\n<p>This is because browsers read CSS selectors <strong>right-to-left</strong>. A browser will\nread the first selector as</p>\n\n<ul>\n  <li>find all <code>ul</code> elements in the DOM;</li>\n  <li>now check if they live anywhere inside an element with a class of <code>.header</code>;</li>\n  <li>next check that <code>.header</code> class exists on a <code>div</code> element;</li>\n  <li>now check that that all lives anywhere inside any elements with a class of\n<code>.home</code>;</li>\n  <li>finally, check that <code>.home</code> exists on a <code>body</code> element.</li>\n</ul>\n\n<p>The second, in contrast, is simply a case of the browser reading</p>\n\n<ul>\n  <li>find all the elements with a class of <code>.primary-nav</code>.</li>\n</ul>\n\n<p>To further compound the problem, we are using descendant selectors (e.g. <code>.foo\n.bar {}</code>). The upshot of this is that a browser is required to start with the\nrightmost part of the selector (i.e. <code>.bar</code>) and keep looking up the DOM\nindefinitely until it finds the next part (i.e. <code>.foo</code>). This could mean\nstepping up the DOM dozens of times until a match is found.</p>\n\n<p>This is just one reason why <strong>nesting with preprocessors is often a false\neconomy</strong>; as well as making selectors unnecessarily more specific, and creating\nlocation dependency, it also creates more work for the browser.</p>\n\n<p>By using a child selector (e.g. <code>.foo &gt; .bar {}</code>) we can make the process much\nmore efficient, because this only requires the browser to look one level higher\nin the DOM, and it will stop regardless of whether or not it found a match.</p>\n\n<h4 id=\"the-key-selector\">The Key Selector</h4>\n\n<p>Because browsers read selectors right-to-left, the rightmost selector is often\ncritical in defining a selector’s performance: this is called the <i>key\nselector</i>.</p>\n\n<p>The following selector might appear to be highly performant at first glance. It\nuses an ID which is nice and fast, and there can only ever be one on a page, so\nsurely this will be a nice and speedy lookup&mdash;just find that one ID and then\nstyle everything inside of it:</p>\n\n<pre><code>#foo * {}\n</code></pre>\n\n<p>The problem with this selector is that the key selector (<code>*</code>) is very, <em>very</em>\nfar reaching. What this selector actually does is finds <em>every single</em> node in\nthe DOM (even <code>&lt;title&gt;</code>, <code>&lt;link&gt;</code>, and <code>&lt;head&gt;</code> elements; <em>everything</em>) and then\nlooks to see if it lives anywhere at any level within <code>#foo</code>. This is a very,\n<em>very</em> expensive selector, and should most likely be avoided or rewritten.</p>\n\n<p>Thankfully, by writing selectors with good <a href=\"#selector-intent\">Selector Intent</a>,\nwe are probably avoiding inefficient selectors by default; we are very unlikely\nto have greedy key selectors if we’re targeting the right things for the right\nreason.</p>\n\n<p>That said, however, CSS selector performance should be fairly low on your list\nof things to optimise; browsers are fast, and are only ever getting faster, and\nit is only on notable edge cases that inefficient selectors would be likely to\npose a problem.</p>\n\n<p>As well as their own specific issues, nesting, qualifying, and poor Selector\nIntent all contribute to less efficient selectors.</p>\n\n<h3 id=\"general-rules\">General Rules</h3>\n\n<p>Your selectors are fundamental to writing good CSS. To very briefly sum up the\nabove sections:</p>\n\n<ul>\n  <li><strong>Select what you want explicitly</strong>, rather than relying on circumstance or\ncoincidence. Good Selector Intent will rein in the reach and leak of your\nstyles.</li>\n  <li><strong>Write selectors for reusability</strong>, so that you can work more efficiently and\nreduce waste and repetition.</li>\n  <li><strong>Do not nest selectors unnecessarily</strong>, because this will increase\nspecificity and affect where else you can use your styles.</li>\n  <li><strong>Do not qualify selectors unnecessarily</strong>, as this will impact the number of\ndifferent elements you can apply styles to.</li>\n  <li><strong>Keep selectors as short as possible</strong>, in order to keep specificity down and\nperformance up.</li>\n</ul>\n\n<p>Focussing on these points will keep your selectors a lot more sane and easy to\nwork with on changing and long-running projects.</p>\n\n<h3 id=\"further-reading-2\">Further Reading</h3>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/\"><cite>Shoot to kill; CSS selector intent</cite></a></li>\n  <li><a href=\"http://csswizardry.com/2013/05/scope-in-css/\"><cite>‘Scope’ in CSS</cite></a></li>\n  <li><a href=\"http://csswizardry.com/2012/05/keep-your-css-selectors-short/\"><cite>Keep your CSS selectors short</cite></a></li>\n  <li><a href=\"http://nicolasgallagher.com/about-html-semantics-front-end-architecture/\"><cite>About HTML semantics and front-end architecture</cite></a></li>\n  <li><a href=\"http://csswizardry.com/2014/03/naming-ui-components-in-oocss/\"><cite>Naming UI components in OOCSS</cite></a></li>\n  <li><a href=\"http://csswizardry.com/2011/09/writing-efficient-css-selectors/\"><cite>Writing efficient CSS selectors</cite></a></li>\n</ul>\n\n<hr>\n\n<h2 id=\"specificity\">Specificity</h2>\n\n<p>As we’ve seen, CSS isn’t the most friendly of languages: globally operating,\nvery leaky, dependent on location, hard to encapsulate, based on inheritance…\nBut! None of that even comes close to the horrors of specificity.</p>\n\n<p>No matter how well considered your naming, regardless of how perfect your source\norder and cascade are managed, and how well you’ve scoped your rulesets, just\none overly-specific selector can undo everything. It is a gigantic curveball,\nand undermines CSS’ very nature of the cascade, inheritance, and source order.</p>\n\n<p>The problem with specificity is that it sets precedents and trumps that cannot\n<em>simply</em> be undone. If we take a real example that I was responsible for some\nyears ago:</p>\n\n<pre><code>#content table {}\n</code></pre>\n\n<p>Not only does this exhibit poor <a href=\"#selector-intent\">Selector Intent</a>&mdash;I didn’t\nactually want every <code>table</code> in the <code>#content</code> area, I wanted a specific type of\n<code>table</code> that just happened to live there&mdash;it is a hugely over-specific selector.\nThis became apparent a number of weeks later, when I needed a second type of\n<code>table</code>:</p>\n\n<pre><code>#content table {}\n\n/**\n * Uh oh! My styles get overwritten by `#content table {}`.\n */\n.my-new-table {}\n</code></pre>\n\n<p>The first selector was trumping the specificity of the one defined <em>after</em> it,\nworking against CSS’ source-order based application of styles. In order to\nremedy this, I had two main options. I could</p>\n\n<ol>\n  <li>refactor my CSS and HTML to remove that ID;</li>\n  <li>write a more specific selector to override it.</li>\n</ol>\n\n<p>Unfortunately, refactoring would have taken a long time; it was a mature product\nand the knock-on effects of removing this ID would have been a more substantial\nbusiness cost than the second option: just write a more specific selector.</p>\n\n<pre><code>#content table {}\n\n#content .my-new-table {}\n</code></pre>\n\n<p>Now I have a selector that is <em>even more specific still!</em> And if I ever want to\noverride this one, I will need another selector of at least the same specificity\ndefined after it. I’ve started on a downward spiral.</p>\n\n<p>Specificity can, among other things,</p>\n\n<ul>\n  <li>limit your ability to extend and manipulate a codebase;</li>\n  <li>interrupt and undo CSS’ cascading, inheriting nature;</li>\n  <li>cause avoidable verbosity in your project;</li>\n  <li>prevent things from working as expected when moved into different\nenvironments;</li>\n  <li>lead to serious developer frustration.</li>\n</ul>\n\n<p>All of these issues are greatly magnified when working on a larger project with\na number of developers contributing code.</p>\n\n<h3 id=\"keep-it-low-at-all-times\">Keep It Low at All Times</h3>\n\n<p>The problem with specificity isn’t necessarily that it’s high or low; it’s the\nfact it is so variant and that it cannot be opted out of: the only way to deal\nwith it is to get progressively more specific&mdash;the notorious <i>specificity\nwars</i> we looked at above.</p>\n\n<p>One of the single, simplest tips for an easier life when writing\nCSS&mdash;particularly at any reasonable scale&mdash;is to keep always try and keep\nspecificity as low as possible at all times. Try to make sure there isn’t a lot\nof variance between selectors in your codebase, and that all selectors strive\nfor as low a specificity as possible.</p>\n\n<p>Doing so will instantly help you tame and manage your project, meaning that no\noverly-specific selectors are likely to impact or affect anything of a lower\nspecificity elsewhere. It also means you’re less likely to need to fight your\nway out of specificity corners, and you’ll probably also be writing much smaller\nstylesheets.</p>\n\n<p>Simple changes to the way we work include, but are not limited to,</p>\n\n<ul>\n  <li>not using IDs in your CSS;</li>\n  <li>not nesting selectors;</li>\n  <li>not qualifying classes;</li>\n  <li>not chaining selectors.</li>\n</ul>\n\n<p><strong>Specificity can be wrangled and understood, but it is safer just to avoid it\nentirely.</strong></p>\n\n<h3 id=\"ids-in-css\">IDs in CSS</h3>\n\n<p>If we want to keep specificity low, which we do, we have one really quick-win,\nsimple, easy-to-follow rule that we can employ to help us: avoid using IDs in CSS.</p>\n\n<p>Not only are IDs inherently non-reusable, they are also vastly more specific\nthan any other selector, and therefore become specificity anomalies. Where the\nrest of your selectors are relatively low specificity, your ID-based selectors\nare, comparatively, much, <em>much</em> higher.</p>\n\n<p>In fact, to highlight the severity of this difference, see how <em>one thousand</em>\nchained classes cannot override the specificity of a single ID:\n<a href=\"http://jsfiddle.net/csswizardry/0yb7rque/\">jsfiddle.net/0yb7rque</a>.\n<small>(Please note that in Firefox you may see the text rendering in blue: this\nis a <a href=\"https://twitter.com/codepo8/status/505004085398224896\">known bug</a>, and an\nID will be overridden by 256 chained classes.)</small></p>\n\n<p><small><strong>N.B.</strong> It is still perfectly okay to use IDs in HTML and JavaScript; it\nis only in CSS that they prove troublesome.</small></p>\n\n<p>It is often suggested that developers who choose not to use IDs in CSS merely\n<q>don’t understand how specificity works</q>. This is as incorrect as it is\noffensive: no matter how experienced a developer you are, this behaviour cannot\nbe circumvented; no amount of knowledge will make an ID less specific.</p>\n\n<p>Opting into this way of working only introduces the chance of problems occurring\nfurther down the line, and&mdash;particularly when working at scale&mdash;all efforts should\nbe made to <em>avoid</em> the potential for problems to arise. In a sentence:</p>\n\n<p><strong>It is just not worth introducing the risk.</strong></p>\n\n<h3 id=\"nesting\">Nesting</h3>\n\n<p>We’ve already looked at how nesting can lead to location dependent and\npotentially inefficient code, but now it’s time to take a look at another of its\npitfalls: it makes selectors more specific.</p>\n\n<p>When we talk about nesting, we don’t necessarily mean preprocessor nesting, like\nso:</p>\n\n<pre><code>.foo {\n\n    .bar {}\n\n}\n</code></pre>\n\n<p>We’re actually talking about <em>descendant</em> or <em>child</em> selectors; selectors which\nrely on a thing within a thing. That could look like any one of the following:</p>\n\n<pre><code>/**\n * An element with a class of `.bar` anywhere inside an element with a class of\n * `.foo`.\n */\n.foo .bar {}\n\n\n/**\n * An element with a class of `.module-title` directly inside an element with a\n * class of `.module`.\n */\n.module &gt; .module-title {}\n\n\n/**\n * Any `li` element anywhere inside a `ul` element anywhere inside a `nav`\n * element\n */\nnav ul li {}\n</code></pre>\n\n<p>Whether you arrive at this CSS via a preprocessor or not isn’t particularly\nimportant, but it is worth noting that <strong>preprocessors tout this as a feature,\nwhere is actually to be avoided wherever possible</strong>.</p>\n\n<p>Generally speaking, each part in a compound selector adds specificity. Ergo, the\nfewer parts to a compound selector then the lower its overall specificity, and\nwe always want to keep specificity low. To quote Jonathan Snook:</p>\n\n<blockquote>\n  <p>…whenever declaring your styles, <strong>use the least number of selectors required\nto style an element.</strong></p>\n</blockquote>\n\n<p>Let’s look at an example:</p>\n\n<pre><code>.widget {\n    padding: 10px;\n}\n\n    .widget &gt; .widget__title {\n        color: red;\n    }\n</code></pre>\n\n<p>To style an element with a class of <code>.widget__title</code>, we have a selector that is\ntwice as specific as it needs to be. That means that if we want to make any\nmodifications to <code>.widget__title</code>, we’ll need another at-least-equally specific\nselector:</p>\n\n<pre><code>.widget { ... }\n\n    .widget &gt; .widget__title { ... }\n\n    .widget &gt; .widget__title--sub {\n        color: blue;\n    }\n</code></pre>\n\n<p>Not only is this entirely avoidable&mdash;we caused this problem ourselves&mdash;we have a\nselector that is literally double the specificity it needs to be. We used 200%\nof the specificity actually required. And not only <em>that</em>, but this also leads\nto needless verbosity in our code&mdash;more to send over the wire.</p>\n\n<p>As a rule, <strong>if a selector will work without it being nested then do not nest\nit</strong>.</p>\n\n<h4 id=\"scope\">Scope</h4>\n\n<p>One possible advantage of nesting&mdash;which, unfortunately, does not outweigh the\ndisadvantages of increased specificity&mdash;is that it provides us with a namespace\nof sorts. A selector like <code>.widget .title</code> scopes the styling of <code>.title</code> to\nan element that only exists inside of an element carrying a class of <code>.widget</code>.</p>\n\n<p>This goes some way to providing our CSS with scope and encapsulation, but does\nstill mean that our selectors are twice as specific as they need to be. A better\nway of providing this scope would be via a namespace&mdash;which we already have in\nthe form of <a href=\"#bem-like-naming\">BEM-like Naming</a>&mdash;which does not lead to an\nunnecessary increase in specificity.</p>\n\n<p>Now we have better scoped CSS with minimal specificity&mdash;the best of both worlds.</p>\n\n<h5 id=\"further-reading-3\">Further Reading</h5>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2013/05/scope-in-css/\"><cite>‘Scope’ in CSS</cite></a></li>\n</ul>\n\n<h3 id=\"important\"><code>!important</code></h3>\n\n<p>The word <code>!important</code> sends shivers down the spines of almost all front-end\ndevelopers. <code>!important</code> is a direct manifestation of problems with specificity;\nit is a way of cheating your way out of specificity wars, but usually comes at a\nheavy price. It is often viewed as a last resort&mdash;a desperate, defeated stab at\npatching over the symptoms of a much bigger problem with your code.</p>\n\n<p>The general rule is that <code>!important</code> is always a bad thing, but, to quote Jamie\nMason:</p>\n\n<blockquote>\n  <p>Rules are the children of principles.</p>\n</blockquote>\n\n<p>That is to say, a single rule is a simple, black-and-white way of adhering to a\nmuch larger principle. When you’re starting out, the rule <q>never use\n<code>!important</code></q> is a good one.</p>\n\n<p>However, once you begin to grow and mature as a developer, you begin to\nunderstand that the principle behind that rule is simply about keeping\nspecificity low. You’ll also learn when and where the rules can be bent…</p>\n\n<p><code>!important</code> does have a place in CSS projects, but only if used sparingly and\nproactively.</p>\n\n<p>Proactive use of <code>!important</code> is when it is used <em>before</em> you’ve encountered any\nspecificity problems; when it is used as a guarantee rather than as a fix. For\nexample:</p>\n\n<pre><code>.one-half {\n    width: 50% !important;\n}\n\n.hidden {\n    display: none !important;\n}\n</code></pre>\n\n<p>These two helper, or <i>utility</i>, classes are very specific in their\nintentions: you would only use them if you wanted something to be rendered at\n50% width or not rendered at all. If you didn’t want this behaviour, you would\nnot use these classes, therefore whenever you do use them you will definitely\nwant them to win.</p>\n\n<p>Here we proactively apply <code>!important</code> to ensure that these styles always win.\nThis is correct use of <code>!important</code> to guarantee that these trumps always work,\nand don’t accidentally get overridden by something else more specific.</p>\n\n<p>Incorrect, <i>reactive</i> use of <code>!important</code> is when it is used to combat\nspecificity problems after the fact: applying <code>!important</code> to declarations\nbecause of poorly architected CSS. For example, let’s imagine we have this HTML:</p>\n\n<pre><code>&lt;div class=\"content\"&gt;\n    &lt;h2 class=\"heading-sub\"&gt;...&lt;/h2&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>…and this CSS:</p>\n\n<pre><code>.content h2 {\n    font-size: 2em;\n}\n\n.heading-sub {\n    font-size: 1.5em !important;\n}\n</code></pre>\n\n<p>Here we can see how we’ve used <code>!important</code> to force our <code>.heading-sub {}</code>\nstyles to reactively override our <code>.content h2 {}</code> selector. This could have\nbeen circumvented by any number of things, including using better Selector\nIntent, or avoiding nesting.</p>\n\n<p>In these situations, it is preferable that you investigate and refactor any\noffending rulesets to try and bring specificity down across the board, as\nopposed to introducing such specificity heavyweights.</p>\n\n<p><strong>Only use <code>!important</code> proactively, not reactively.</strong></p>\n\n<h3 id=\"hacking-specificity\">Hacking Specificity</h3>\n\n<p>With all that said on the topic of specificity, and keeping it low, it is\ninevitable that we will encounter problems. No matter how hard we try, and how\nconscientious we are, there will always be times that we need to hack and\nwrangle specificity.</p>\n\n<p>When these situations do arise, it is important that we handle the hacks as\nsafely and elegantly as possible.</p>\n\n<p>In the event that you need to increase the specificity of a class selector,\nthere are a number of options. We could nest the class inside something else to\nbring its specificity up. For example, we could use <code>.header .site-nav {}</code> to\nbring up the specificity of a simple <code>.site-nav {}</code> selector.</p>\n\n<p>The problem with this, as we’ve discussed, is that it introduces location\ndependency: these styles will only work when the <code>.site-nav</code> component is in the\n<code>.header</code> component.</p>\n\n<p>Instead, we can use a much safer hack that will not impact this component’s\nportability: we can chain that class with itself:</p>\n\n<pre><code>.site-nav.site-nav {}\n</code></pre>\n\n<p>This chaining doubles the specificity of the selector, but does not introduce\nany dependency on location.</p>\n\n<p>In the event that we do, for whatever reason, have an ID in our markup that we\ncannot replace with a class, select it via an attribute selector as opposed to\nan ID selector. For example, let’s imagine we have embedded a third-party widget\non our page. We can style the widget via the markup that it outputs, but we have\nno ability to edit that markup ourselves:</p>\n\n<pre><code>&lt;div id=\"third-party-widget\"&gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n\n<p>Even though we know not to use IDs in CSS, what other option do we have? We want\nto style this HTML but have no access to it, and all it has on it is an ID.</p>\n\n<p>We do this:</p>\n\n<pre><code>[id=\"third-party-widget\"] {}\n</code></pre>\n\n<p>Here we are selecting based on an attribute rather than an ID, and attribute\nselectors have the same specificity as a class. This allows us to style based on\nan ID, but without introducing its specificity.</p>\n\n<p>Do keep in mind that these <em>are</em> hacks, and should not be used unless you have\nno better alternative.</p>\n\n<h4 id=\"further-reading-4\">Further Reading</h4>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/\"><cite>Hacks for dealing with specificity</cite></a></li>\n</ul>\n\n<hr>\n\n<h2 id=\"architectural-principles\">Architectural Principles</h2>\n\n<p>You would be forgiven for thinking that an architecture for CSS is a somewhat\ngrandiose and unnecessary concept: why would something so simple, so\n<em>straightforward</em>, need something as complex or considered as an architecture?!</p>\n\n<p>Well, as we’ve seen, CSS’ simplicity, its looseness, and its unruly nature mean\nthat the best way of managing (read, taming) it at any reasonable scale is\nthrough a strict and specific architecture. A solid architecture can help us\ncontrol our specificity, enforce naming conventions, manage our source order,\ncreate a sane development environment, and generally make managing our CSS\nprojects a lot more consistent and comfortable.</p>\n\n<p>There is no tool, no preprocessor, no magic bullet, that will make your CSS\nbetter on its own: a developer’s best tool when working with such a loose syntax\nis self-discipline, conscientiousness, and diligence, and a well-defined\narchitecture will help enforce and facilitate these traits.</p>\n\n<p>Architectures are large, overarching, principle-led collections of smaller\nconventions which come together to provide a managed environment in which code\nis written and maintained. Architectures are typically quite high level, and\nleave implementation details&mdash;such as naming conventions or syntax and\nformatting, for example&mdash;to the team implementing it.</p>\n\n<p>Most architectures are usually based around existing design patterns and\nparadigms, and, more often than not, these paradigms were born of computer\nscientists and software engineers. For all CSS isn’t ‘code’, and doesn’t exhibit\nmany traits that programming languages do, we find that we can apply some of\nthese same principles to our own work.</p>\n\n<p>In this section, we’ll take a look at some of these design patterns and\nparadigms, and how we can use them to reduce code&mdash;and increase code reuse&mdash;in our\nCSS projects.</p>\n\n<h3 id=\"high-level-overview\">High-level Overview</h3>\n\n<p>At a very high-level, your architecture should help you</p>\n\n<ul>\n  <li>provide a consistent and sane environment;</li>\n  <li>accommodate change;</li>\n  <li>grow and scale your codebase;</li>\n  <li>promote reuse and efficiency;</li>\n  <li>increase productivity.</li>\n</ul>\n\n<p>Typically, this will mean a class-based and componentised architecture, split up\ninto manageable modules, probably using a preprocessor. Of course, there is far\nmore to an architecture than that, so let’s look at some principles…</p>\n\n<h3 id=\"object-orientation\">Object-orientation</h3>\n\n<p><i>Object-orientation</i> is a programming paradigm that breaks larger programs\nup into smaller, in(ter)dependent objects that all have their own roles and\nresponsibilities. From Wikipedia:</p>\n\n<blockquote>\n  <p>Object-oriented programming (OOP) is a programming paradigm that represents\nthe concept of ‘objects’ […] which are usually instances of classes, [and] are\nused to interact with one another to design applications and computer\nprograms.</p>\n</blockquote>\n\n<p>When applied to CSS, we call it object-oriented CSS, or <i>OOCSS</i>. OOCSS was\ncoined and popularised by Nicole Sullivan, whose <cite>Media Object</cite> has\nbecome the poster child of the methodology.</p>\n\n<p>OOCSS deals with the separation of UIs into <i>structure</i> and <i>skin</i>:\nbreaking UI components into their underlying structural forms, and layering\ntheir cosmetic forms on separately. This means that we can recycle common and\nrecurring design <em>patterns</em> very cheaply without having to necessarily recycle\ntheir specific implementation details at the same time. OOCSS promotes reuse of\ncode, which makes us quicker, as well as keeping the size of our codebase down.</p>\n\n<p>Structural aspects can be thought of like skeletons; common, recurring frames\nthat provide design-free constructs known as <i>objects</i> and\n<i>abstractions</i>. Objects and abstractions are simple design patterns that\nare devoid of any cosmetics; we abstract out the shared structural traits from a\nseries of components into a generic object.</p>\n\n<p>Skin is a layer that we (optionally) add to our structure in order to give\nobjects and abstractions a specific look-and-feel. Let’s look at an example:</p>\n\n<pre><code>/**\n * A simple, design-free button object. Extend this object with a `.btn--*` skin\n * class.\n */\n.btn {\n    display: inline-block;\n    padding: 1em 2em;\n    vertical-align: middle;\n}\n\n\n/**\n * Positive buttons’ skin. Extends `.btn`.\n */\n.btn--positive {\n    background-color: green;\n    color: white;\n}\n\n/**\n * Negative buttons’ skin. Extends `.btn`.\n */\n.btn--negative {\n    background-color: red;\n    color: white;\n}\n</code></pre>\n\n<p>Above, we can see how the <code>.btn {}</code> class simply provides structural styling to\nan element, and doesn’t concern itself with any cosmetics. We supplement the\n<code>.btn {}</code> object with a second class, such as <code>.btn--negative {}</code> in order to\ngive that DOM node specific cosmetics:</p>\n\n<pre><code>&lt;button class=\"btn  btn--negative\"&gt;Delete&lt;/button&gt;\n</code></pre>\n\n<p>Favour the multiple-class approach over using something like <code>@extend</code>: using\nmultiple classes in your markup&mdash;as opposed to wrapping the classes up into one\nusing a preprocessor&mdash;</p>\n\n<ul>\n  <li>gives you a better paper-trail in your markup, and allows you to see quickly\nand explicitly which classes are acting on a piece of HTML;</li>\n  <li>allows for greater composition in that classes are not tightly bound to other\nstyles in your CSS.</li>\n</ul>\n\n<p>Whenever you are building a UI component, try and see if you can break it into\ntwo parts: one for structural styles (paddings, layout, etc.) and another for\nskin (colours, typefaces, etc.).</p>\n\n<h4 id=\"further-reading-5\">Further Reading</h4>\n\n<ul>\n  <li><a href=\"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/\">The media object saves hundreds of lines of code</a></li>\n  <li><a href=\"http://csswizardry.com/2013/05/the-flag-object/\">The flag object</a></li>\n  <li><a href=\"http://csswizardry.com/2014/03/naming-ui-components-in-oocss/\">Naming UI components in OOCSS</a></li>\n</ul>\n\n<h3 id=\"the-single-responsibility-principle\">The Single Responsibility Principle</h3>\n\n<p>The <i>single responsibility principle</i> is a paradigm that, very loosely,\nstates that all pieces of code (in our case, classes) should focus on doing one\nthing and one thing only. More formally:</p>\n\n<blockquote>\n  <p>…the single responsibility principle states that every context (class,\nfunction, variable, etc.) should have a single responsibility, and that\nresponsibility should be entirely encapsulated by the context.</p>\n</blockquote>\n\n<p>What this means for us is that our CSS should be composed of a series of much\nsmaller classes that focus on providing very specific and limited functionality.\nThis means that we need to decompose UIs into their smallest component pieces\nthat each serve a single responsibility; they all do just one job, but can be\nvery easily combined and composed to make much more versatile and complex\nconstructs. Let’s take some example CSS that does not adhere to the single\nresponsibility principle:</p>\n\n<pre><code>.error-message {\n    display: block;\n    padding: 10px;\n    border-top: 1px solid #f00;\n    border-bottom: 1px solid #f00;\n    background-color: #fee;\n    color: #f00;\n    font-weight: bold;\n}\n\n.success-message {\n    display: block;\n    padding: 10px;\n    border-top: 1px solid #0f0;\n    border-bottom: 1px solid #0f0;\n    background-color: #efe;\n    color: #0f0;\n    font-weight: bold;\n}\n</code></pre>\n\n<p>Here we can see that&mdash;despite being named after one very specific use-case&mdash;these\nclasses are handling quite a lot: layout, structure, and cosmetics. We also have\na <em>lot</em> of repetition. We need to refactor this in order to abstract out some\nshared objects (OOCSS) and bring it more inline with the single responsibility\nprinciple. We can break these two classes out into four much smaller\nresponsibilities:</p>\n\n<pre><code>.box {\n    display: block;\n    padding: 10px;\n}\n\n\n.message {\n    border-style: solid;\n    border-width: 1px 0;\n    font-weight: bold;\n}\n\n.message--error {\n    background-color: #fee;\n    color: #f00;\n}\n\n.message--success {\n    background-color: #efe;\n    color: #0f0;\n}\n</code></pre>\n\n<p>Now we have a general abstraction for boxes which can live, and be used,\ncompletely separately from our message component, and we have a base message\ncomponent that can be extended by a number of smaller responsibility classes.\nThe amount of repetition has been greatly reduced, and our ability to extend and\ncompose our CSS has been greatly increased. This is a great example of OOCSS and\nthe single responsibility principle working in tandem.</p>\n\n<p>By focussing on single responsibilities, we can give our code much more\nflexibility, and extending components’ functions becomes very simple when\nsticking to the <i>open/closed principle</i>, which we’re going to look at next.</p>\n\n<h4 id=\"further-reading-6\">Further Reading</h4>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/\">The single responsibility principle applied to CSS</a></li>\n</ul>\n\n<h3 id=\"the-openclosed-principle\">The Open/Closed Principle</h3>\n\n<p>The <i>open/closed principle</i>, in my opinion, is rather poorly named. It is\npoorly named because 50% of the vital information is omitted from its title. The\nopen/closed principle states that</p>\n\n<blockquote>\n  <p>[s]oftware entities (classes, modules, functions, etc.) should be open for\nextension, but closed for modification.</p>\n</blockquote>\n\n<p>See? The most important words&mdash;<i>extension</i> and <i>modification</i>&mdash;are\ncompletely missing from the name, which isn’t very useful at all.</p>\n\n<p>Once you have trained yourself to remember what the words open and closed\nactually relate to, you’ll find that open/closed principle remarkably simple:\nany additions, new functionality, or features we add to our classes should be\nadded via <em>extension</em>&mdash;we should not modify these classes directly. This really\ntrains us to write bulletproof single responsibilities: because we shouldn’t\nmodify objects and abstractions directly, we need to make sure we get them as\nsimple as possible the first time. This means that we should never need to\nactually change an abstraction&mdash;we’d simply stop using it&mdash;but any slight variants\nof it can be made very easily by extending it.</p>\n\n<p>Let’s take an example:</p>\n\n<pre><code>.box {\n    display: block;\n    padding: 10px;\n}\n\n.box--large {\n    padding: 20px;\n}\n</code></pre>\n\n<p>Here we can see that the <code>.box {}</code> object is incredibly simple: we’ve stripped\nit right back into one very small and very focussed responsibility. To modify\nthat box, we extend it with another class; <code>.box--large {}</code>. Here the <code>.box {}</code>\nclass is closed to modification, but open to being extended.</p>\n\n<p>An incorrect way of achieving the same might look like this:</p>\n\n<pre><code>.box {\n    display: block;\n    padding: 10px;\n}\n\n.content .box {\n    padding: 20px;\n}\n</code></pre>\n\n<p>Not only is this overly specific, locationally dependent, and potentially\ndisplaying poor Selector Intent, we are modifying the <code>.box {}</code> directly. We\nshould rarely&mdash;if ever&mdash;find an object or abstraction’s class as a key selector in\na compound selector.</p>\n\n<p>A selector like <code>.content .box {}</code> is potentially troublesome because</p>\n\n<ul>\n  <li>it forces all <code>.box</code> components into that style when placed inside of\n<code>.content</code>, which means the modification is dictated to developers, whereas\ndevelopers should be allowed to opt into changes explicitly;</li>\n  <li>the <code>.box</code> style is now unpredictable to developers; the single responsibility\nno longer exists because nesting the selector produces a forced caveat.</li>\n</ul>\n\n<p>All modifications, additions, and changes should always be opt-in, not\nmandatory. If you think something might need a slight adjustment to take it away\nfrom the norm, provide another class which adds this functionality.</p>\n\n<p>When working in a team environment, be sure to write API-like CSS; always ensure\nthat existing classes remain backward compatible (i.e. no changes at their root)\nand provide new hooks to bring in new features. Changing the root object,\nabstraction, or component could have huge knock-on effects for developers making\nuse of that code elsewhere, so never modify existing code directly.</p>\n\n<p>Exceptions may present themselves when it transpires that a root object does\nneed a rewrite or refactor, but it is only in these specific cases that you\nshould modify code. Remember: <strong>open for extension; closed for modification</strong>.</p>\n\n<h4 id=\"further-reading-7\">Further Reading</h4>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/\">The open/closed principle applied to CSS</a></li>\n</ul>\n\n<h3 id=\"dry\">DRY</h3>\n\n<p><i>DRY</i>, which stands for <i>Don’t Repeat Repeat Yourself</i>, is a\nmicro-principle used in software development which aims to keep the repetition\nof key information to a minimum. Its formal definition is that</p>\n\n<blockquote>\n  <p>[e]very piece of knowledge must have a single, unambiguous, authoritative\nrepresentation within a system.</p>\n</blockquote>\n\n<p>Although a very simple principle&mdash;in principle&mdash;DRY is often misinterpreted as the\nnecessity to never repeat the exact same thing twice at all in a project. This\nis impractical and usually counterproductive, and can lead to forced\nabstractions, over-thought and -engineered code, and unusual dependencies.</p>\n\n<p>The key isn’t to avoid all repetition, but to normalise and abstract\n<em>meaningful</em> repetition. If two things happen to share the same declarations\ncoincidentally, then we needn’t DRY anything out; that repetition is purely\ncircumstantial and cannot be shared or abstracted. For example:</p>\n\n<pre><code>.btn {\n    display: inline-block;\n    padding: 1em 2em;\n    font-weight: bold;\n}\n\n[...]\n\n.page-title {\n    font-size: 3rem;\n    line-height: 1.4;\n    font-weight: bold;\n}\n\n[...]\n\n    .user-profile__title {\n        font-size: 1.2rem;\n        line-height: 1.5;\n        font-weight: bold;\n    }\n</code></pre>\n\n<p>From the above code, we can reasonably deduce that the <code>font-weight: bold;</code>\ndeclaration appears three times purely coincidentally. To try and create an\nabstraction, mixin, or <code>@extend</code> directive to cater for this repetition would\nbe overkill, and would tie these three rulesets together based purely on\ncircumstance.</p>\n\n<p>However, imagine we’re using a web-font that requires <code>font-weight: bold;</code> to be\ndeclared every time the <code>font-family</code> is:</p>\n\n<pre><code>.btn {\n    display: inline-block;\n    padding: 1em 2em;\n    font-family: \"My Web Font\", sans-serif;\n    font-weight: bold;\n}\n\n[...]\n\n.page-title {\n    font-size: 3rem;\n    line-height: 1.4;\n    font-family: \"My Web Font\", sans-serif;\n    font-weight: bold;\n}\n\n[...]\n\n    .user-profile__title {\n        font-size: 1.2rem;\n        line-height: 1.5;\n        font-family: \"My Web Font\", sans-serif;\n        font-weight: bold;\n    }\n</code></pre>\n\n<p>Here we’re repeating a more meaningful snippet of CSS; these two declarations\nhave to always be declared together. In this instance, we probably would DRY\nout our CSS.</p>\n\n<p>I would recommend using a mixin over <code>@extend</code> here because, even though the two\ndeclarations are thematically grouped, the rulesets themselves are still \nseparate, unrelated entities: to use <code>@extend</code> would be to physically group\nthese unrelated rulesets together in our CSS, thus making the unrelated related.</p>\n\n<p>Our mixin:</p>\n\n<pre><code>@mixin my-web-font() {\n    font-family: \"My Web Font\", sans-serif;\n    font-weight: bold;\n}\n\n.btn {\n    display: inline-block;\n    padding: 1em 2em;\n    @include my-web-font();\n}\n\n[...]\n\n.page-title {\n    font-size: 3rem;\n    line-height: 1.4;\n    @include my-web-font();\n}\n\n[...]\n\n    .user-profile__title {\n        font-size: 1.2rem;\n        line-height: 1.5;\n        @include my-web-font();\n    }\n</code></pre>\n\n<p>Now the two declarations only exist once, meaning we’re not repeating ourselves.\nIf we ever switch out our web-font, or move to a <code>font-weight: regular;</code>\nversion, we only need to make that change in one place.</p>\n\n<p>In short, only DRY code that is actually, thematically related. Do not try to\nreduce purely coincidental repetition: <strong>duplication is better than the wrong\nabstraction</strong>.</p>\n\n<h4 id=\"further-reading-8\">Further Reading</h4>\n\n<ul>\n  <li><a href=\"http://csswizardry.com/2013/07/writing-dryer-vanilla-css/\">Writing DRYer vanilla CSS</a></li>\n</ul>\n\n<h3 id=\"composition-over-inheritance\">Composition over Inheritance</h3>\n\n<p>Now that we’re used to spotting abstractions and creating single\nresponsibilities, we should be in a great position to start composing more\ncomplex composites from a series of much smaller component parts. Nicole\nSullivan likens this to using Lego; tiny, single responsibility pieces which can\nbe combined in a number of different quantities and permutations to create a\nmultitude of very different looking results.</p>\n\n<p>This idea of building through composition is not a new one, and is often\nreferred to as <i>composition over inheritance</i>. This principle suggests that\nlarger systems should be composed from much smaller, individual parts, rather\nthan inheriting behaviour from a much larger, monolithic object. This should\nkeep your code decoupled&mdash;nothing inherently relies on anything else.</p>\n\n<p>Composition is a very valuable principle for an architecture to make use of,\nparticularly considering the move toward component-based UIs. It will mean you\ncan more easily recycle and reuse functionality, as well rapidly construct\nlarger parts of UI from a known set of composable objects. Think back to our\nerror message example in the <a href=\"#the-single-responsibility-principle\">Single Responsibility\nPrinciple</a> section; we created a complete\nUI component by composing a number of much smaller and unrelated objects.</p>\n\n<h3 id=\"the-separation-of-concerns\">The Separation of Concerns</h3>\n\n<p>The <i>separation of concerns</i> is a principle which, at first, sounds a lot\nlike the single responsibility principle. The separation of concerns states that\ncode should be broken up</p>\n\n<blockquote>\n  <p>into distinct sections, such that each section addresses a separate concern. A\nconcern is a set of information that affects the code of a computer program.\n[…] A program that embodies SoC well is called a modular program.</p>\n</blockquote>\n\n<p>Modular is a word we’re probably used to; the idea of breaking UIs and CSS into\nmuch smaller, composable pieces. The separation of concerns is just a formal\ndefinition which covers the concepts of modularity and encapsulation in code. In\nCSS this means building individual components, and writing code which only\nfocusses itself on one task at a time.</p>\n\n<p>The term was coined by Edsger W. Dijkstra, who rather elegantly said:</p>\n\n<blockquote>\n  <p>Let me try to explain to you, what to my taste is characteristic for all\nintelligent thinking. It is, that one is willing to study in depth an aspect\nof one’s subject matter in isolation for the sake of its own consistency, all\nthe time knowing that one is occupying oneself only with one of the aspects.\nWe know that a program must be correct and we can study it from that viewpoint\nonly; we also know that it should be efficient and we can study its efficiency\non another day, so to speak. In another mood we may ask ourselves whether, and\nif so: why, the program is desirable. But nothing is gained&mdash;on the\ncontrary!&mdash;by tackling these various aspects simultaneously. It is what I\nsometimes have called ‘the separation of concerns’, which, even if not\nperfectly possible, is yet the only available technique for effective ordering\nof one’s thoughts, that I know of. This is what I mean by ‘focusing one’s\nattention upon some aspect’: it does not mean ignoring the other aspects, it\nis just doing justice to the fact that from this aspect’s point of view, the\nother is irrelevant. It is being one- and multiple-track minded\nsimultaneously.</p>\n</blockquote>\n\n<p>Beautiful. The idea here is to focus fully on one thing at once; build one thing\nto do its job very well whilst paying as little attention as possible to other\nfacets of your code. Once you have addressed and built all these separate\nconcerns in isolation&mdash;meaning they’re probably very modular, decoupled, and\nencapsulated&mdash;you can begin bringing them together into a larger project.</p>\n\n<p>A great example is layout. If you are using a grid system, all of the code\npertaining to layout should exist on its own, without including anything else.\nYou’ve written code that handles layout, and that’s it:</p>\n\n<pre><code>&lt;div class=\"layout\"&gt;\n\n    &lt;div class=\"layout__item  two-thirds\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"layout__item  one-third\"&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>You will now need to write new, separate code to handle what lives inside of\nthat layout:</p>\n\n<pre><code>&lt;div class=\"layout\"&gt;\n\n    &lt;div class=\"layout__item  two-thirds\"&gt;\n        &lt;section class=\"content\"&gt;\n            ...\n        &lt;/section&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"layout__item  one-third\"&gt;\n        &lt;section class=\"sub-content\"&gt;\n            ...\n        &lt;/section&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>The separation of concerns allows you to keep code self-sufficient, ignorant,\nand ultimately a lot more maintainable. Code which adheres to the separation of\nconcerns can be much more confidently modified, edited, extended, and maintained\nbecause we know how far its responsibilities reach. We know that modifying\nlayout, for example, will only ever modify layout&mdash;nothing else.</p>\n\n<p>The separation of concerns increases reusability and confidence whilst reducing\ndependency.</p>\n\n<h4 id=\"misconceptions\">Misconceptions</h4>\n\n<p>There are, I feel, a number of unfortunate misconceptions surrounding the\nseparation of concerns when applied to HTML and CSS. They all seem to revolve\naround some format of:</p>\n\n<blockquote>\n  <p>Using classes for CSS in your markup breaks the separation of concerns.</p>\n</blockquote>\n\n<p>Unfortunately, this is simply not true. The separation of concerns <em>does</em> exist\nin the context of HTML and CSS (and JS), but not in the way a lot of people seem\nto believe.</p>\n\n<p>The separation of concerns when applied to front-end code is not about\nclasses-in-HTML-purely-for-styling-hooks-blurring-the-lines-between-concerns;\nit is about the very fact that we are using different languages for markup and\nstyling at all.</p>\n\n<p>Back before CSS was widely adopted, we’d use <code>table</code>s to lay content out, and\n<code>font</code> elements with <code>color</code> attributes to provide cosmetic styling. The problem\nhere is that HTML was being used to create content and also to style it; there\nwas no way of having one without the other. This was a complete lack of\nseparation of concerns, which was a problem. CSS’ job was to provide a\ncompletely new syntax to apply this styling, allowing us to separate our\ncontent and style concerns across two technologies.</p>\n\n<p>Another common argument is that <q>putting classes in your HTML puts style\ninformation in your markup</q>.</p>\n\n<p>So, in a bid to circumvent this, people adopt selectors that might look a little\nlike this:</p>\n\n<pre><code>body &gt; header:first-of-type &gt; nav &gt; ul &gt; li &gt; a {\n}\n</code></pre>\n\n<p>This CSS&mdash;presumably to style our site’s main nav&mdash;has the usual problems of\nlocation dependency, poor Selector Intent, and high specificity, but it also\nmanages to do <em>exactly what developers are trying to avoid</em>, only in the\nopposite direction: <strong>it puts DOM information in your CSS</strong>. Aggressive attempts\nto avoid putting any style hints or hooks in markup only lead to overloading\nstylesheets with DOM information.</p>\n\n<p>In short: having classes in your markup does not violate the separation of\nconcerns. Classes merely act as an API to link two separate concerns together.\nThe simplest way to separate concerns is to write well formed HTML and well\nformed CSS, and link to two together with sensible, judicious use of classes.</p>\n\n<div class=\"box  box--promo  box--outdent\">\n    <p>Something you need some more help with?</p>\n    <p><a class=\"btn  btn--full  btn--tertiary\" href=\"http://csswizardry.com/work/\">Hire me</a></p>\n</div>\n\n\n\n\n    <footer class=\"page-foot\">\n\n        <hr class=\"hr-minor\">\n\n        <p class=\"version\">2.2.3</p>\n\n        <p>Last updated: <time datetime=\"2015-03-13\">13 March, 2015</time></p>\n\n        <p>&copy; 2014 <a href=\"https://twitter.com/csswizardry\">Harry Roberts</a></p>\n\n    </footer>\n\n</div>","tags":"css,Guide","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 14:15:12 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 14:15:12 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"jFU3n2DDO1ERqpbX"}
{"id":"0","category":"javascript","categoryId":"30","title":"sort a list alphabetically using jQuery or Javascript","codes":[{"code":"\nfunction sortUnorderedList(ul, sortDescending) {\n\tif(typeof ul == \"string\")\n\tul = document.getElementById(ul);\n\t\n\tvar lis = ul.getElementsByTagName(\"LI\");\n\tvar vals = [];\n\t\n\tfor(var i = 0, l = lis.length; i < l; i++)\n\tvals.push(lis[i].innerHTML);\n\t\n\tvals.sort();\n\t\n\tif(sortDescending)\n\tvals.reverse();\n\t\n\tfor(var i = 0, l = lis.length; i < l; i++)\n\tlis[i].innerHTML = vals[i];\n}\n\nwindow.onload = function() {\n\tvar desc = false;\n\tdocument.getElementById(\"test\").onclick = function() {\n\t\tsortUnorderedList(\"list\", desc);\n\t\tdesc = !desc;\n\t\treturn false;\n\t}\n}\n\n// Usage\nsortUnorderedList(\"ID_OF_LIST\");","codeLanguage":"javascript"},{"code":"<input type=\"button\" id=\"test\" value=\"Sort List (click again to reverse)\"/>\n<ul id=\"list\">\n\t<li>1</li>\n\t<li>11</li>\n\t<li>25</li>\n\t<li>36</li>\n\t<li>James</li>\n\t<li>Peter</li>\n\t<li>Mary</li>\n\t<li>Paul</li>\n\t<li>Allen</li>\n\t<li>James</li>\n\t<li>Vicki</li>\n\t<li>Brock</li>\n\t<li>Dana</li>\n\t<li>Frank</li>\n\t<li>Gil</li>\n\t<li>Helen</li>\n</ul>","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"javascript,js,sort","isStarred":"false","note":"","dateCreated":"Sat Jan 31 2015 19:25:25 GMT+0530 (India Standard Time)","dateModified":"Sat Jan 31 2015 19:25:25 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"mIRtVsmRtFoef9j7"}
{"id":"mOg2zaC2P6o1OSGj","category":"jquery","categoryId":"50","title":"You might not need jQuery","codes":[{"code":"","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"\n<div>\n<p>\n</p><p>Website :&nbsp;http://youmightnotneedjquery.com/</p><p>jQuery and its cousins are great, and by all means use them if it makes it easier to develop your application.\n<br>\nIf you're developing a library on the other hand, please take a moment to consider if you actually need jQuery as a dependency. Maybe you can include a few lines of utility code, and forgo the requirement. If you're only targeting more modern browsers, you might not need anything more than what the browser ships with.\n<br>\nAt the very least, make sure you know what jQuery is doing for you, and what it's not. Some developers believe that jQuery is protecting us from a great demon of browser incompatibility when, in truth, post-IE8, browsers are pretty easy to deal with on their own.\n</p> \n      <section>\n        <div>\n          <h2><span>AJAX</span><br></h2>\n\n          <div>\n            <h4>Alternatives:</h4>\n\n            <ul>\n\n              <li><a href=\" https://github.com/ForbesLindesay/ajax\" target=\"_blank\">ajax</a></li>\n\n              <li><a href=\" https://github.com/then/request\" target=\"_blank\">request</a></li>\n\n              <li><a href=\" https://github.com/ded/Reqwest\" target=\"_blank\">reqwest</a></li>\n\n            </ul>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#json\">JSON</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.getJSON('/my/url', function(data) {\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onreadystatechange = function() {\n  if (this.readyState === 4) {\n    if (this.status &gt;= 200 &amp;&amp; this.status &lt; 400) {\n      // Success!\n      var data = JSON.parse(this.responseText);\n    } else {\n      // Error :(\n    }\n  }\n};\n\nrequest.send();\nrequest = null;\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onload = function() {\n  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {\n    // Success!\n    var data = JSON.parse(request.responseText);\n  } else {\n    // We reached our target server, but it returned an error\n\n  }\n};\n\nrequest.onerror = function() {\n  // There was a connection error of some sort\n};\n\nrequest.send();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onload = function() {\n  if (this.status &gt;= 200 &amp;&amp; this.status &lt; 400) {\n    // Success!\n    var data = JSON.parse(this.response);\n  } else {\n    // We reached our target server, but it returned an error\n\n  }\n};\n\nrequest.onerror = function() {\n  // There was a connection error of some sort\n};\n\nrequest.send();\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#post\">Post</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.ajax({\n  type: 'POST',\n  url: '/my/url',\n  data: data\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('POST', '/my/url', true);\nrequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\nrequest.send(data);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#request\">Request</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.ajax({\n  type: 'GET',\n  url: '/my/url',\n  success: function(resp) {\n\n  },\n  error: function() {\n\n  }\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onreadystatechange = function() {\n  if (this.readyState === 4) {\n    if (this.status &gt;= 200 &amp;&amp; this.status &lt; 400) {\n      // Success!\n      var resp = this.responseText;\n    } else {\n      // Error :(\n    }\n  }\n};\n\nrequest.send();\nrequest = null;\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onload = function() {\n  if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {\n    // Success!\n    var resp = request.responseText;\n  } else {\n    // We reached our target server, but it returned an error\n\n  }\n};\n\nrequest.onerror = function() {\n  // There was a connection error of some sort\n};\n\nrequest.send();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', '/my/url', true);\n\nrequest.onload = function() {\n  if (this.status &gt;= 200 &amp;&amp; this.status &lt; 400) {\n    // Success!\n    var resp = this.response;\n  } else {\n    // We reached our target server, but it returned an error\n\n  }\n};\n\nrequest.onerror = function() {\n  // There was a connection error of some sort\n};\n\nrequest.send();\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </section>\n      <section>\n        <div>\n          <h2>Effects</h2>\n\n          <div>\n            <h4>Alternatives:</h4>\n\n            <ul>\n\n              <li><a href=\" http://daneden.github.io/animate.css/\" target=\"_blank\">animate.css</a></li>\n\n              <li><a href=\" https://github.com/visionmedia/move.js\" target=\"_blank\">move.js</a></li>\n\n            </ul>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#fade_in\">Fade In</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).fadeIn();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function fadeIn(el) {\n  var opacity = 0;\n\n  el.style.opacity = 0;\n  el.style.filter = '';\n\n  var last = +new Date();\n  var tick = function() {\n    opacity += (new Date() - last) / 400;\n    el.style.opacity = opacity;\n    el.style.filter = 'alpha(opacity=' + (100 * opacity)|0 + ')';\n\n    last = +new Date();\n\n    if (opacity &lt; 1) {\n      (window.requestAnimationFrame &amp;&amp; requestAnimationFrame(tick)) || setTimeout(tick, 16);\n    }\n  };\n\n  tick();\n}\n\nfadeIn(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function fadeIn(el) {\n  el.style.opacity = 0;\n\n  var last = +new Date();\n  var tick = function() {\n    el.style.opacity = +el.style.opacity + (new Date() - last) / 400;\n    last = +new Date();\n\n    if (+el.style.opacity &lt; 1) {\n      (window.requestAnimationFrame &amp;&amp; requestAnimationFrame(tick)) || setTimeout(tick, 16)\n    }\n  };\n\n  tick();\n}\n\nfadeIn(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.classList.add('show');\nel.classList.remove('hide');\n</code></pre>\n\n              </div>\n\n              <div data-lang=\"css\">\n                <pre><code>.show {\n  transition: opacity 400ms;\n}\n.hide {\n  opacity: 0;\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#hide\">Hide</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).hide();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.style.display = 'none';\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#show\">Show</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).show();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.style.display = '';\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </section>\n      <section>\n        <div>\n          <h2>Elements</h2>\n\n          <div>\n            <h4>Alternatives:</h4>\n\n            <ul>\n\n              <li><a href=\" https://github.com/ded/bonzo\" target=\"_blank\">bonzo</a></li>\n\n              <li><a href=\" https://github.com/julienw/dollardom\" target=\"_blank\">$dom</a></li>\n\n            </ul>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#add_class\">Add Class</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).addClass(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.classList)\n  el.classList.add(className);\nelse\n  el.className += ' ' + className;\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.classList.add(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#after\">After</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).after(htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.insertAdjacentHTML('afterend', htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#append\">Append</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(parent).append(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>parent.appendChild(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#before\">Before</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).before(htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.insertAdjacentHTML('beforebegin', htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#children\">Children</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).children();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var children = [];\nfor (var i = el.children.length; i--;) {\n  // Skip comment nodes on IE8\n  if (el.children[i].nodeType != 8)\n    children.unshift(el.children[i]);\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.children\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#clone\">Clone</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).clone();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.cloneNode(true);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#contains\">Contains</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.contains(el, child);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el !== child &amp;&amp; el.contains(child);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#contains_selector\">Contains Selector</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).find(selector).length;\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.querySelector(selector) !== null\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#each\">Each</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(selector).each(function(i, el){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function forEachElement(selector, fn) {\n  var elements = document.querySelectorAll(selector);\n  for (var i = 0; i &lt; elements.length; i++)\n    fn(elements[i], i);\n}\n\nforEachElement(selector, function(el, i){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var elements = document.querySelectorAll(selector);\nArray.prototype.forEach.call(elements, function(el, i){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#empty\">Empty</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).empty();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>while(el.firstChild)\n  el.removeChild(el.firstChild);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.innerHTML = '';\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#filter\">Filter</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(selector).filter(filterFn);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function filter(selector, filterFn) {\n  var elements = document.querySelectorAll(selector);\n  var out = [];\n  for (var i = elements.length; i--;) {\n    if (filterFn(elements[i]))\n      out.unshift(elements[i]);\n  }\n  return out;\n}\n\nfilter(selector, filterFn);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>Array.prototype.filter.call(document.querySelectorAll(selector), filterFn);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#find_children\">Find Children</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).find(selector);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.querySelectorAll(selector);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#find_elements\">Find Elements</a></h3>\n\n            <div>\n              <h4>Alternatives:</h4>\n\n              <ul>\n\n                <li><a href=\" https://github.com/ded/qwery\" target=\"_blank\">qwery</a></li>\n\n                <li><a href=\" http://sizzlejs.com/\" target=\"_blank\">sizzle</a></li>\n\n              </ul>\n\n            </div>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$('.my #awesome selector');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>document.querySelectorAll('.my #awesome selector');\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#get_attributes\">Get Attributes</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).attr('tabindex');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.getAttribute('tabindex');\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#get_html\">Get Html</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).html();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.innerHTML\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#get_outer_html\">Get Outer Html</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$('&lt;div&gt;').append($(el).clone()).html();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.outerHTML\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#get_style\">Get Style</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).css(ruleName);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// Varies based on the properties being retrieved, some can be retrieved from el.currentStyle\n// https://github.com/jonathantneal/Polyfills-for-IE8/blob/master/getComputedStyle.js\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>getComputedStyle(el)[ruleName];\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#get_text\">Get Text</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).text();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.textContent || el.innerText\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.textContent\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#has_class\">Has Class</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).hasClass(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.classList)\n  el.classList.contains(className);\nelse\n  new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.classList.contains(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#matches\">Matches</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).is($(otherEl));\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el === otherEl\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#matches_selector\">Matches Selector</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).is('.my-class');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var matches = function(el, selector) {\n  var _matches = (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector);\n\n  if (_matches) {\n    return _matches.call(el, selector);\n  } else {\n    var nodes = el.parentNode.querySelectorAll(selector);\n    for (var i = nodes.length; i--;) {\n      if (nodes[i] === el)\n        return true;\n    }\n    return false;\n  }\n};\n\nmatches(el, '.my-class');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var matches = function(el, selector) {\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n};\n\nmatches(el, '.my-class');\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#next\">Next</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).next();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// nextSibling can include text nodes\nfunction nextElementSibling(el) {\n  do { el = el.nextSibling; } while ( el &amp;&amp; el.nodeType !== 1 );\n  return el;\n}\n\nel.nextElementSibling || nextElementSibling(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.nextElementSibling\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#offset\">Offset</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).offset();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var rect = el.getBoundingClientRect()\n\n{\n  top: rect.top + document.body.scrollTop,\n  left: rect.left + document.body.scrollLeft\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#offset_parent\">Offset Parent</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).offsetParent();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.offsetParent || el\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#outer_height\">Outer Height</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).outerHeight();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.offsetHeight\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#outer_height_with_margin\">Outer Height With Margin</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).outerHeight(true);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function outerHeight(el) {\n  var height = el.offsetHeight;\n  var style = el.currentStyle || getComputedStyle(el);\n\n  height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n  return height;\n}\n\nouterHeight(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function outerHeight(el) {\n  var height = el.offsetHeight;\n  var style = getComputedStyle(el);\n\n  height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n  return height;\n}\n\nouterHeight(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#outer_width\">Outer Width</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).outerWidth();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.offsetWidth\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#outer_width_with_margin\">Outer Width With Margin</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).outerWidth(true);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function outerWidth(el) {\n  var width = el.offsetWidth;\n  var style = el.currentStyle || getComputedStyle(el);\n\n  width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n  return width;\n}\n\nouterWidth(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function outerWidth(el) {\n  var width = el.offsetWidth;\n  var style = getComputedStyle(el);\n\n  width += parseInt(style.marginLeft) + parseInt(style.marginRight);\n  return width;\n}\n\nouterWidth(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#parent\">Parent</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).parent();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.parentNode\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#position\">Position</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).position();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>{left: el.offsetLeft, top: el.offsetTop}\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#position_relative_to_viewport\">Position Relative To Viewport</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var offset = el.offset();\n\n{\n  top: offset.top - document.body.scrollTop,\n  left: offset.left - document.body.scrollLeft\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.getBoundingClientRect()\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#prepend\">Prepend</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(parent).prepend(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>parent.insertBefore(el, parent.firstChild);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#prev\">Prev</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).prev();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// prevSibling can include text nodes\nfunction previousElementSibling(el) {\n  do { el = el.previousSibling; } while ( el &amp;&amp; el.nodeType !== 1 );\n  return el;\n}\n\nel.previousElementSibling || previousElementSibling(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.previousElementSibling\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#remove\">Remove</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).remove();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.parentNode.removeChild(el);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#remove_class\">Remove Class</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).removeClass(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.classList)\n  el.classList.remove(className);\nelse\n  el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.classList.remove(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#replace_from_html\">Replace From Html</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).replaceWith(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.outerHTML = string;\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#set_attributes\">Set Attributes</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).attr('tabindex', 3);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.setAttribute('tabindex', 3);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#set_html\">Set Html</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).html(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.innerHTML = string;\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#set_style\">Set Style</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).css('border-width', '20px');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// Use a class if possible\nel.style.borderWidth = '20px';\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#set_text\">Set Text</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).text(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.textContent !== undefined)\n  el.textContent = string;\nelse\n  el.innerText = string;\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.textContent = string;\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#siblings\">Siblings</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).siblings();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var siblings = Array.prototype.slice.call(el.parentNode.children);\n\nfor (var i = siblings.length; i--;) {\n  if (siblings[i] === el) {\n    siblings.splice(i, 1);\n    break;\n  }\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>Array.prototype.filter.call(el.parentNode.children, function(child){\n  return child !== el;\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#toggle_class\">Toggle Class</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).toggleClass(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.classList) {\n  el.classList.toggle(className);\n} else {\n    var classes = el.className.split(' ');\n    var existingIndex = -1;\n    for (var i = classes.length; i--;) {\n      if (classes[i] === className)\n        existingIndex = i;\n    }\n\n    if (existingIndex &gt;= 0)\n      classes.splice(existingIndex, 1);\n    else\n      classes.push(className);\n\n  el.className = classes.join(' ');\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (el.classList) {\n  el.classList.toggle(className);\n} else {\n  var classes = el.className.split(' ');\n  var existingIndex = classes.indexOf(className);\n\n  if (existingIndex &gt;= 0)\n    classes.splice(existingIndex, 1);\n  else\n    classes.push(className);\n\n  el.className = classes.join(' ');\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie10\">\n              <h4>IE10+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.classList.toggle(className);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </section>\n      <section>\n        <div>\n          <h2>Events</h2>\n\n          <div>\n            <h3><a href=\"#off\">Off</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).off(eventName, eventHandler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function removeEventListener(el, eventName, handler) {\n  if (el.removeEventListener)\n    el.removeEventListener(eventName, handler);\n  else\n    el.detachEvent('on' + eventName, handler);\n}\n\nremoveEventListener(el, eventName, handler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.removeEventListener(eventName, eventHandler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#on\">On</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).on(eventName, eventHandler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function addEventListener(el, eventName, handler) {\n  if (el.addEventListener) {\n    el.addEventListener(eventName, handler);\n  } else {\n    el.attachEvent('on' + eventName, function(){\n      handler.call(el);\n    });\n  }\n}\n\naddEventListener(el, eventName, handler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>el.addEventListener(eventName, eventHandler);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#ready\">Ready</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(document).ready(function(){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', fn);\n  }\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#trigger_custom\">Trigger Custom</a></h3>\n\n            <div>\n              <h4>Alternatives:</h4>\n\n              <ul>\n\n                <li><a href=\" https://github.com/Wolfy87/EventEmitter\" target=\"_blank\">EventEmitter</a></li>\n\n                <li><a href=\" https://github.com/arextar/Vine\" target=\"_blank\">Vine</a></li>\n\n                <li><a href=\" https://github.com/jeromeetienne/microevent.js\" target=\"_blank\">microevent</a></li>\n\n              </ul>\n\n            </div>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).trigger('my-event', {some: 'data'});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// Custom events are not natively supported, so you have to hijack a random\n// event.\n//\n// Just use jQuery.\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (window.CustomEvent) {\n  var event = new CustomEvent('my-event', {detail: {some: 'data'}});\n} else {\n  var event = document.createEvent('CustomEvent');\n  event.initCustomEvent('my-event', true, true, {some: 'data'});\n}\n\nel.dispatchEvent(event);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#trigger_native\">Trigger Native</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$(el).trigger('change');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>if (document.createEvent) {\n  var event = document.createEvent('HTMLEvents');\n  event.initEvent('change', true, false);\n  el.dispatchEvent(event);\n} else {\n  el.fireEvent('onchange');\n}\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>// For a full list of event types: https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent\nvar event = document.createEvent('HTMLEvents');\nevent.initEvent('change', true, false);\nel.dispatchEvent(event);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </section>\n      <section>\n        <div>\n          <h2>Utils</h2>\n\n          <div>\n            <h3><a href=\"#array_each\">Array Each</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.each(array, function(i, item){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function forEach(array, fn) {\n  for (i = 0; i &lt; array.length; i++)\n    fn(array[i], i);\n}\n\nforEach(array, function(item, i){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>array.forEach(function(item, i){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#bind\">Bind</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.proxy(fn, context);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>fn.apply(context, arguments);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>fn.bind(context);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#deep_extend\">Deep Extend</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.extend(true, {}, objA, objB);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var deepExtend = function(out) {\n  out = out || {};\n\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var obj = arguments[i];\n\n    if (!obj)\n      continue;\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (typeof obj[key] === 'object')\n          deepExtend(out[key], obj[key]);\n        else\n          out[key] = obj[key];\n      }\n    }\n  }\n\n  return out;\n};\n\ndeepExtend({}, objA, objB);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#extend\">Extend</a></h3>\n\n            <div>\n              <h4>Alternatives:</h4>\n\n              <ul>\n\n                <li><a href=\" http://lodash.com/docs#assign\" target=\"_blank\">lo-dash</a></li>\n\n                <li><a href=\" http://underscorejs.org/#extend\" target=\"_blank\">underscore</a></li>\n\n                <li><a href=\" http://www.2ality.com/2014/01/object-assign.html\" target=\"_blank\">ECMA6</a></li>\n\n              </ul>\n\n            </div>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.extend({}, objA, objB);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var extend = function(out) {\n  out = out || {};\n\n  for (var i = 1; i &lt; arguments.length; i++) {\n    if (!arguments[i])\n      continue;\n\n    for (var key in arguments[i]) {\n      if (arguments[i].hasOwnProperty(key))\n        out[key] = arguments[i][key];\n    }\n  }\n\n  return out;\n};\n\nextend({}, objA, objB);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#index_of\">Index Of</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.inArray(item, array);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function indexOf(array, item) {\n  for (var i = 0; i &lt; array.length; i++) {\n    if (array[i] === item)\n      return i;\n  }\n  return -1;\n}\n\nindexOf(array, item);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>array.indexOf(item);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#is_array\">Is Array</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.isArray(arr);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>isArray = Array.isArray || function(arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n}\n\nisArray(arr);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>Array.isArray(arr);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#map\">Map</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.map(array, function(value, index){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>function map(arr, fn) {\n  var results = [];\n  for (var i = 0; i &lt; arr.length; i++)\n    results.push(fn(arr[i], i));\n  return results;\n}\n\nmap(array, function(value, index){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>array.map(function(value, index){\n\n});\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#now\">Now</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.now();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>new Date().getTime();\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>Date.now();\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#parse_html\">Parse Html</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.parseHTML(htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var parseHTML = function(str) {\n  var el = document.createElement('div');\n  el.innerHTML = str;\n  return el.children;\n};\n\nparseHTML(htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>var parseHTML = function(str) {\n  var tmp = document.implementation.createHTMLDocument();\n  tmp.body.innerHTML = str;\n  return tmp.body.children;\n};\n\nparseHTML(htmlString);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#parse_json\">Parse Json</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.parseJSON(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>JSON.parse(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#trim\">Trim</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.trim(string);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>string.replace(/^\\s+|\\s+$/g, '');\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie9\">\n              <h4>IE9+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>string.trim();\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n          <div>\n            <h3><a href=\"#type\">Type</a></h3>\n\n            <div data-browser=\"jquery\">\n              <h4>jQuery</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>$.type(obj);\n</code></pre>\n\n              </div>\n\n            </div>\n\n            <div data-browser=\"ie8\">\n              <h4>IE8+</h4>\n\n              <div data-lang=\"javascript\">\n                <pre><code>Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();\n</code></pre>\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </section>\n    </div>","tags":"javascript,jQuery","isStarred":"true","note":"","dateCreated":"Thu Feb 12 2015 16:40:42 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423740533430},"mode":"add","comments":[],"images":[],"_id":"mOg2zaC2P6o1OSGj"}
{"id":"9fqot0itEs9eLsK7","category":"css","categoryId":"29","title":"Perfect CSS hexagons in any size using transform and calc()","refSite":"http://creative-punch.net/2014/01/perfect-css-hexagons-size-using-transform-calc/","codes":[{"code":"<div id=\"hex1\" class=\"hexagon-wrapper\">\n    <div id=\"color1\" class=\"hexagon\"></div>\n</div>\n<div id=\"hex2\" class=\"hexagon-wrapper\">\n    <div id=\"color2\" class=\"hexagon\"></div>\n</div>\n<div id=\"hex3\" class=\"hexagon-wrapper\">\n    <div id=\"color3\" class=\"hexagon\"></div>\n</div>","codeLanguage":"html"},{"code":"body {\n  background: #ecf0f1;\n}\n\n#hex1 {\n  width: 75px;\n  height: 75px;\n}\n\n#hex2 {\n  width: 150px;\n  height: 150px;\n}\n\n#hex3 {\n  width: 200px;\n  height: 200px;\n}\n\n#color1 {\n  background-color: #39D; \n}\n\n#color2 {\n  background-color: #93D;\n}\n\n#color3 {\n  background-color: #D93;\n}\n\n.hexagon-wrapper {\n  text-align: center;\n  margin: 20px;\n  position: relative;\n  display: inline-block;\n}\n\n.hexagon {\n  height: 100%;\n  width: calc(100% * 0.57735);\n  display: inline-block;\n}\n\n.hexagon:before {\n  position: absolute;\n  top: 0;\n  right: calc((100% / 2) - ((100% * 0.57735) / 2));\n  background-color: inherit;\n  height: inherit;\n  width: inherit;\n  content: '';\n  transform: rotateZ(60deg);\n}\n\n.hexagon:after {\n  position: absolute;\n  top: 0;\n  right: calc((100% / 2) - ((100% * 0.57735) / 2));\n  background-color: inherit;\n  height: inherit;\n  width: inherit;\n  content: '';\n  transform: rotateZ(-60deg);\n}","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"<p>In this tutorial I will how you how to create perfect CSS hexagons in any size using <em>transform</em> and <em>calc()</em>.\n This method doesn’t make use of borders and dynamically calculates the \nessential values like the width and positioning based on some \ntrigonometry calculations.</p>\n<p>The demo below features 3 differently sized hexagons. that can be \nmade with a single div (and a wrapper div to define width and height of \nthe hexagon).</p><h3>The HTML markup</h3><p>Our aim is to keep the markup simple.</p><div><div><div><table><tbody><tr><td><code>1</code></td><td><code>&lt;div id=</code><code>\"hex1\"</code> <code>class</code><code>=</code><code>\"hexagon-wrapper\"</code><code>&gt;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>2</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>&lt;div id=</code><code>\"color1\"</code> <code>class</code><code>=</code><code>\"hexagon\"</code><code>&gt;&lt;/div&gt;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>3</code></td><td><code>&lt;/div&gt;</code></td></tr></tbody></table></div></div></div><p>The important classes here are&nbsp;<em>hexagon-wrapper</em> and&nbsp;<em>hexagon</em>. The&nbsp;<em>hexagon-wrapper</em>‘s most important role will be to serve as a point to position the other elements. The&nbsp;<em>hexagon</em> class will take care of the rest!</p><p>In this particular example I have added two IDs to the divs. One for \nsize and one for color. Though in practice if you want all your hexagons\n to be the same color and size, or if you only want one hexagon, these \ncan be omitted.</p><h3>Creating the CSS hexagon</h3><p>To create a hexagon we will need to define a width and height. The&nbsp;<em>hexagon</em> class gets centered by&nbsp;<em>hexagon-wrapper</em>‘s&nbsp;<em>text-align:center</em> property. The height will be 100% of the parent div.</p><p>\n\n\n\n\n\n\n</p><p>But how do we calculate the width? We can easily do &nbsp;this by using&nbsp;<em>calc()</em>.</p><div><div><div><table><tbody><tr><td><code>.hexagon-wrapper {</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>02</code></td><td><code>&nbsp;&nbsp;</code><code>text-align</code><code>: </code><code>center</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>03</code></td><td><code>&nbsp;&nbsp;</code><code>margin</code><code>: </code><code>20px</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>04</code></td><td><code>&nbsp;&nbsp;</code><code>position</code><code>: </code><code>relative</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>05</code></td><td><code>&nbsp;&nbsp;</code><code>display</code><code>: inline-</code><code>block</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>06</code></td><td><code>}</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>07</code></td><td>&nbsp;</td></tr></tbody></table></div><div><table><tbody><tr><td><code>08</code></td><td><code>.hexagon {</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>09</code></td><td><code>&nbsp;&nbsp;</code><code>height</code><code>: </code><code>100%</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>10</code></td><td><code>&nbsp;&nbsp;</code><code>width</code><code>: calc(</code><code>100%</code> <code>* </code><code>0.57735</code><code>);</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>11</code></td><td><code>&nbsp;&nbsp;</code><code>display</code><code>: inline-</code><code>block</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>12</code></td><td><code>}</code></td></tr></tbody></table></div></div></div><p>Without going into too much detail about the mathemathics, we can define the width of a hexagon’s&nbsp;<strong>side</strong> by multiplying the height with approximately 0.57735.</p><p>This still doesn’t give us a hexagon of course, so we will use&nbsp;<em>:after</em> and&nbsp;<em>:before</em> to rotate the div by 60 degrees and -60 degrees.</p><div><div><div><table><tbody><tr><td><code>01</code></td><td><code>.hexagon:before {</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>02</code></td><td><code>&nbsp;&nbsp;</code><code>position</code><code>: </code><code>absolute</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>03</code></td><td><code>&nbsp;&nbsp;</code><code>top</code><code>: </code><code>0</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>04</code></td><td><code>&nbsp;&nbsp;</code><code>right</code><code>: calc((</code><code>100%</code> <code>/ </code><code>2</code><code>) - ((</code><code>100%</code> <code>* </code><code>0.57735</code><code>) / </code><code>2</code><code>));</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>05</code></td><td><code>&nbsp;&nbsp;</code><code>background-color</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>06</code></td><td><code>&nbsp;&nbsp;</code><code>height</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>07</code></td><td><code>&nbsp;&nbsp;</code><code>width</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>08</code></td><td><code>&nbsp;&nbsp;</code><code>content</code><code>: </code><code>''</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>09</code></td><td><code>&nbsp;&nbsp;</code><code>transform: rotateZ(</code><code>60</code><code>deg);</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>10</code></td><td><code>}</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>11</code></td><td>&nbsp;</td></tr></tbody></table></div><div><table><tbody><tr><td><code>12</code></td><td><code>.hexagon:after {</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>13</code></td><td><code>&nbsp;&nbsp;</code><code>position</code><code>: </code><code>absolute</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>14</code></td><td><code>&nbsp;&nbsp;</code><code>top</code><code>: </code><code>0</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>15</code></td><td><code>&nbsp;&nbsp;</code><code>right</code><code>: calc((</code><code>100%</code> <code>/ </code><code>2</code><code>) - ((</code><code>100%</code> <code>* </code><code>0.57735</code><code>) / </code><code>2</code><code>));</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>16</code></td><td><code>&nbsp;&nbsp;</code><code>background-color</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>17</code></td><td><code>&nbsp;&nbsp;</code><code>height</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>18</code></td><td><code>&nbsp;&nbsp;</code><code>width</code><code>: inherit;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>19</code></td><td><code>&nbsp;&nbsp;</code><code>content</code><code>: </code><code>''</code><code>;</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>20</code></td><td><code>&nbsp;&nbsp;</code><code>transform: rotateZ(</code><code>-60</code><code>deg);</code></td></tr></tbody></table></div><div><table><tbody><tr><td><code>21</code></td><td><code>}</code></td></tr></tbody></table></div></div></div><p>In addition to rotating. We also need to position the&nbsp;<em>:before</em> and&nbsp;<em>:after</em> pseudo-element. Luckily this can also be calculated relative to the size!</p><p>The formula for this is (x / 2) – ((x * 0.57735) / 2)). Of course in \nour CSS we replace x with 100%. It is also important to set&nbsp;<em>content</em> to an empty value or the element won’t appear.</p><h3>That’s it!</h3><p>\n\n\n\n\n\n\n</p><p>You now have created a hexagon using pure CSS that can be made in any size and have&nbsp;<em>calc()</em> do everything else for you!</p>","tags":"css,CSS Shapes,Hexagon","isStarred":"false","note":"","dateCreated":"Sat Mar 28 2015 19:58:21 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 28 2015 19:58:21 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"nClkuBMp4A3sBl5i"}
{"id":"nfsQVJeX43UcpfjX","category":"jquery","categoryId":"50","title":"Promise & Deferred objects in JavaScript Pt.1: Theory and Semantics.","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h1>Introduction</h1>\n\n<p>In the not too distant past the primary tool available to JavaScript \nprogrammers for handling asynchronous events was the callback.</p><p>Website :&nbsp;http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt1-theory-and-semantics</p>\n<blockquote>\n<p>A callback is a piece of executable code that is passed as an argument to other code, which is expected to call back ( <em>execute</em> ) the argument at some convenient time<br>\n— <em><a href=\"https://en.wikipedia.org/wiki/Callback_%28computer_programming\" title=\"Wikipedia: Callback\" rel=\"nofollow\">Wikipedia</a></em></p>\n</blockquote>\n<p>In other words, a function can be passed as an argument to another function to be executed when it is called.</p>\n\n<p>There’s nothing inherently wrong with callbacks, but depending on \nwhich environment we are programming in there are a number of options \navailable for managing asynchronous events. In this post my goal is to \nexamine one set of available tools: promise objects and deferred \nobjects. In part I, we will cover theory and semantics and in part 2 we \nwill look at the use.</p>\n\n<p>One of the keys to effectively working with asynchronous events in \nJavaScript is understanding that the program continues execution even \nwhen it doesn’t have the value it needs for work that is in progress. \nDealing with <strong>as yet unknown values from unfinished work</strong> can make working with asynchronous events in JavaScript challenging — especially when you’re first getting started. </p>\n\n<p>A classic example of this would be an XMLHttpRequest ( <em>Ajax</em> ). Imagine we want to:</p>\n\n<ul>\n<li>make an Ajax request to get some data</li>\n<li>immediately do something with that data, and then </li>\n<li>do other things</li>\n</ul>\n\n<p>In our program we initiate our Ajax request. The request is made but \nunlike with synchronous events, execution of our program isn’t stopped \nwhile the server is responding, instead the program continues running. \nBy the time we get the response data from our Ajax request, the program \nhas already finished execution.</p>\n\n<h1>Promises &amp; Deferreds: What are they?</h1>\n\n<p>Promises are a programming construct that have been <a href=\"http://en.wikipedia.org/wiki/Futures_and_promises\" title=\"Wikipedia: Futures and promises\" rel=\"nofollow\">around since 1976</a>. In short: </p>\n\n<ul>\n<li>a promise represents a value that is not yet known</li>\n<li>a deferred represents work that is not yet finished</li>\n</ul>\n\n<p>Considered from a high level, promises in JavaScript give us the \nability to write asynchronous code in a parallel manner to synchronous \ncode. Let’s start with a diagram to get an overview of the big picture \nbefore diving into the specifics.</p>\n\n<p><img src=\"http://www.mediumequalsmessage.com/blog-images/promises.png\" alt=\"Promises\" title=\"Promises\"></p>\n\n<p>A promise is a placeholder for a result which is initially unknown \nwhile a deferred represents the computation that results in the value. \nEvery deferred has a promise which functions as a proxy for the future \nresult. While a promise is a value returned by an asynchronous function,\n a deferred can be resolved or rejected by it’s caller which separates \nthe promise from the resolver. The promise itself can be given to any \nnumber of consumers and each will observe the resolution independently \nmeanwhile the resolver / deferred can be given to any number of \nproducers and the promise will be resolved by the one that first \nresolves it. From a semantic perspective this means that instead of \ncalling a function ( <em>callback</em> ), we are able to return a value ( <em>promise</em> ).</p>\n\n<h1>Promises According to the Promise/A Proposal</h1>\n\n<p>The <a href=\"http://wiki.commonjs.org/wiki/Promises/A\" title=\"Promises /A spec\" rel=\"nofollow\">Promises /A Proposal</a> suggests the following standard behavior and API regardless of implementation details.</p>\n\n<p>A promise:</p>\n\n<ul>\n<li>Represents the eventual value returned from the single completion of an operation</li>\n<li>may be in one of 3 states: unfulfilled, fulfilled and failed and may only move from unfulfilled to either fulfilled or failed</li>\n<li>has a function as a value for the property “then” ( <em>which must return a promise</em> )</li>\n<li>\n<p>Adds a fulfilledHandler, errorHandler, and progressHandler to be called for completion of a promise. </p>\n\n<pre><code><span>then</span><span>(</span><span>fulfilledHandler</span><span>,</span><span> errorHandler</span><span>,</span><span> progressHandler</span><span>)</span></code></pre>\n</li>\n<li><p>The value that is returned from the callback handler is the fulfillment value for the returned promise</p></li>\n<li><p>promise’s value MUST not be changed (avoids side effects from listeners creating unanticipated behavior)</p></li>\n</ul>\n\n<p>In other words, stripping out some of the nuances for a moment:</p>\n\n<p>A promise serves as a proxy for a future value, has 3 possible states\n and needs to have a function which adds handlers for it’s states: \nfulfilledHandler, errorHandler and progressHandler ( <em>optional</em> ) and returns a new promise ( <em>to allow chaining</em> ) which will be resolved / rejected when the handler finishes executing.</p>\n\n<h2>The states and return value of a promise</h2>\n\n<p>A promise has 3 possible states: unfulfilled, fulfilled and failed. </p>\n\n<ul>\n<li>unfulfilled: since a promise is a proxy for an unknown value it starts in an unfulfilled state</li>\n<li>fulfilled: the promise is filled with the value it was waiting for</li>\n<li>failed: if the promise was returned an exception, it is in the failed state.</li>\n</ul>\n\n<p>A promise may only move from unfulfilled to either fulfilled or \nfailed. Upon resolution or rejection, any observers are notified and \npassed the promise / value. Once the promise has been resolved or \nrejected neither it’s state or the resulting value can be modified.</p>\n\n<p>Here is an example of what this looks like:</p>\n\n<pre><code><span>// Promise to be filled with future value</span><span>\n</span><span>var</span><span> futureValue </span><span>=</span><span> </span><span>new</span><span> </span><span>Promise</span><span>();</span><span>\n\n</span><span>// .then() will return a new promise</span><span>\n</span><span>var</span><span> anotherFutureValue </span><span>=</span><span> futureValue</span><span>.</span><span>then</span><span>();</span><span>\n\n</span><span>// Promise state handlers ( must be a function ).</span><span>\n</span><span>// The returned value of the fulfilled / failed handler will be the value of the promise.</span><span>\nfutureValue</span><span>.</span><span>then</span><span>({</span><span>\n\n    </span><span>// Called if/when the promise is fulfilled</span><span>\n    fulfilledHandler</span><span>:</span><span> </span><span>function</span><span>()</span><span> </span><span>{},</span><span>\n\n    </span><span>// Called if/when the promise fails</span><span>\n    errorHandler</span><span>:</span><span> </span><span>function</span><span>()</span><span> </span><span>{},</span><span>\n\n    </span><span>// Called for progress events (not all implementations of promises have this)</span><span>\n    progressHandler</span><span>:</span><span> </span><span>function</span><span>()</span><span> </span><span>{}</span><span>\n</span><span>});</span></code></pre>\n\n<h1>Implementation differences &amp; Performance</h1>\n\n<p>When choosing a promise library, there are a number of considerations\n to take into account. Not all implementations are created equal. They \ncan differ in regards to what utilities are offered by the API, \nperformance and even in behaviour.</p>\n\n<p>Since the Promise/A proposal only outlines a proposal for the \nbehaviour of promises and not implementation specifics, varying promise \nlibraries have differing sets of features. All Promise/A compliant \nimplementations have a .then() function but also have varying features \nin their API. Additionally, they are still able to exchange promises \nwith each other. jQuery is the noticeable exception to the rule because \nits implementation of promises is not fully Promise/A compliant. The \nimpact of this decision is <a href=\"https://gist.github.com/domenic/3889970\" rel=\"nofollow\">documented here</a> and <a href=\"http://bugs.jquery.com/ticket/11010\" rel=\"nofollow\">discussed here</a>.\nIn Promise/A compliant libraries, a thrown exception is translated into a\n rejection and the errorHandler() is called with the exception. In \njQuery’s implementation an uncaught exception will hault the program’s \nexecution. As a result of the differing implementation, there are \ninteroperability problems if working with libraries which return or \nexpect Promise/A compliant promises. </p>\n\n<p>One solution to this problem is to convert jQuery promises into \nPromise/A compliant promises with another promise library and then use \nthe API from the compliant library.</p>\n\n<p>For example:</p>\n\n<pre><code><span>when</span><span>(</span><span>$</span><span>.</span><span>ajax</span><span>()).</span><span>then</span><span>()</span></code></pre>\n\n<p>When reading through jQuery’s decision to stick with their \nimplementation of promises, a mention of performance considerations \npiqued my curiosity and I decided to do a quick performance test. I used\n Benchmark.js and tested the results of creating and resolving a \ndeferred object with a success handler in .then(). </p>\n\n<p>The results:</p>\n\n<table>\n\n<thead>\n<tr>\n    <td>\n<strong>jQuery</strong> <em>91.6kb</em> </td>\n    <td>\n<strong>When.js</strong> <em>1.04kb</em> </td>\n    <td>\n<strong>Q.js</strong> <em>8.74kb</em> </td>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>9,979 ops/sec <em>±10.22%</em> </td>\n    <td>96,225 ops/sec <em>±10.10%</em> </td>\n    <td>2,385 ops/sec <em>±3.42%</em> </td>\n</tr>\n</tbody>\n</table>\n\n<p><em>Note: minified with Closure compiler, not gzipped</em></p>\n\n<p>After running these tests, I discovered a much more <a href=\"https://github.com/cujojs/promise-perf-tests#test-results\" rel=\"nofollow\">in-depth test-suite of promise libraries</a> which reveals similar overall results. </p>\n\n<p>The differences in performance may be negligible in a real \napplication but in my Benchmark.js tests, when.js comes out as a clear \nwinner. This combination of speed and the small size of the library make\n when.js a great choice when considering performance in the equation.</p>\n\n<p>Clearly there are tradeoffs to consider when choosing a promise \nlibrary. The answer to which library you should use depends on your \nspecific use case and the needs of your project. Some implementations to\n start exploring are:</p>\n\n<ul>\n<li>\n<strong><a href=\"https://github.com/cujojs/when\" rel=\"nofollow\">When.js</a></strong>:\n Fast, lightweight implementation that has a number of useful utilities \nand as of v2.0 has full support for asynchronous resolution.</li>\n<li>\n<strong><a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">Q.js</a></strong>: Runs in the browser or Node.js, offers a robust API and is fully Promise/A compliant.<br>\n</li>\n<li>\n<strong><a href=\"https://github.com/tildeio/rsvp.js\" rel=\"nofollow\">RSVP</a></strong>: Barebones implementation that is fully Promise/A compliant.</li>\n<li>\n<strong><a href=\"http://api.jquery.com/category/deferred-object/\" title=\"jQuery Documentation: Deferred Object\" rel=\"nofollow\">jQuery</a></strong>:\n Not Promise/A compliant but is widely used. If you are already using \njQuery in your project it’s easy to get started with and worth a look.</li>\n</ul>\n\n<h1>Conclusion</h1>\n\n<p>Promises provide the JavaScript developer a tool for working with \nasynchronous events . Now that we’ve covered some of the specifics of \nwhat promise objects and deferred objects are and how they behave, we \nare ready to dive into the specifics of how to work with them. In <a href=\"http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt2-practical-use\" title=\"Promise and Deferred objects in JavaScript Pt.2: in use\" rel=\"nofollow\">part 2</a>,\n we’ll take a closer look at using promises, some common gotcha’s and \nsome specifics of the jQuery API. In the meantime, feel free to start a \nconversation on  <a href=\"https://alpha.app.net/cwebbdesign\" rel=\"nofollow\">App.net</a> or  <a href=\"https://news.ycombinator.com/item?id=5499287\" rel=\"nofollow\">Hacker News</a>.</p>\n\n<h1>Further Resources</h1>\n\n<p><strong>Books</strong></p>\n\n<ul>\n<li><a href=\"http://www.amazon.com/gp/product/B00AKM4RVG/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00AKM4RVG&amp;linkCode=as2&amp;tag=mediumequalsm-20\" title=\"Async JavaScript\" rel=\"nofollow\">Async JavaScript</a></li>\n</ul>\n\n<p><strong>Articles</strong></p>\n\n<ul>\n<li>\n<a href=\"http://wiki.commonjs.org/wiki/Promises/A\" title=\"Promises/A\" rel=\"nofollow\">Promises/A Proposal</a> &amp; <a href=\"http://promises-aplus.github.com/promises-spec/\" title=\"Promises/A+\" rel=\"nofollow\">Promises/A+ Spec</a>\n</li>\n<li><a href=\"https://gist.github.com/domenic/3889970\" title=\"You're Missing the Point of Promises\" rel=\"nofollow\">You’re Missing the Point of Promises</a></li>\n<li><a href=\"http://bugs.jquery.com/ticket/11010\" title=\"Make Deferred.then == Deferred.pipe\" rel=\"nofollow\">#11010 (Make Deferred.then == Deferred.pipe like Promise/A) – jQuery Core - Bug Tracker</a></li>\n</ul>\n\n<p><strong>JSFiddle</strong></p>\n\n<ul>\n<li>\n<a href=\"http://jsfiddle.net/briancavalier/4canN/\" title=\"Promise/A forwarding\" rel=\"nofollow\">Promise/A forwarding</a> - jsFiddle documenting value and thrown error propagation in when.js</li>\n<li>\n<a href=\"http://jsfiddle.net/cwebbdesign/8BZhB/2/\" title=\"jQuery .then() and error propagation\" rel=\"nofollow\">jQuery .then() and error propagation</a> - jsfiddle demonstrating value and thrown error propagation in jQuery</li></ul>","tags":"javascript,jQuery,Promise & Deferred","isStarred":"false","note":"","dateCreated":"Tue Feb 17 2015 20:39:11 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424185867233},"mode":"add","comments":[],"images":[],"_id":"nfsQVJeX43UcpfjX"}
{"id":"noqRwO7856aXxvgF","category":"","categoryId":"","title":"Logos","refSite":"","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><div><ins><ins><iframe marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allowfullscreen=\"true\" name=\"aswift_1\" frameborder=\"0\" height=\"280\" width=\"336\"></iframe></ins></ins>\n          </div></div><p>\n</p><p><a href=\"http://webneel.com/design/logo-all/animal-logo/0/1/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%281%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-281-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/2/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%282%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-282-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/3/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%283%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-283-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/4/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%284%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-284-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/5/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%285%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-285-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/6/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%286%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-286-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/7/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%287%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-287-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/8/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%288%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-288-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/9/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%289%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-289-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/10/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2810%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-2810-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/11/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2811%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-2811-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/12/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2812%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-2812-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/13/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2813%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-2813-29_12_3_2015.gif\"></a> <a href=\"http://webneel.com/design/logo-all/animal-logo/0/14/0/g?n=7099\" target=\"_blank\"><img title=\"animal logos\" alt=\"animal logos\" src=\"http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2814%29.gif\" height=\"260\" width=\"660\" data-src=\"database/uploads/images/article_images/animal-logo-20-2814-29_12_3_2015.gif\"></a></p>","tags":"Logos","isStarred":"false","articleImages":["http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%281%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%282%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%283%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%284%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%285%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%286%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%287%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%288%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%289%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2810%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2811%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2812%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2813%29.gif","http://webneel.com/sites/default/files/images/manual/logo-all/animal-logo%20%2814%29.gif"],"note":"","dateCreated":"Thu Mar 12 2015 21:43:16 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426177392925},"mode":"add","comments":[],"images":[],"_id":"noqRwO7856aXxvgF"}
{"id":"nvQLyuu2SsxqZYsE","category":"patterns","categoryId":"58","title":"Observer or Pub/Sub pattern","refSite":"http://tech.diaslopes.com/?p=89","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"}],"description":"<p>If you ever worked with YUI or Dojo frameworks, you must be familiar \nwith this pattern, it consists on subscribing a widget’s event by \nsupplying a method to run when the event occurs. The Observer or Pub/Sub\n (publish/subscribe) pattern is not <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">new</a> but has great effect in a language like JavaScript which is event driven.</p>\n<p><span></span><br>\n</p><h2>How does it work</h2>\n<p>Imagine that we have a widget that loads on a page, and there are a \nset of procedures that we want to run when that widget fully loads. A \nconventional way to achieve this is by calling the methods from the \nwidget, however this doesn’t seem right, since you may be using the \nwidget in other pages. The proper way is to implement a mechanism that \ninforms when the widget has loaded, and then run the procedures. We can \neasily implement this with the observer pattern.</p>\n<h2>Advantages</h2>\n<p>There are two main advantages using this method: independence and \nmanageability. The object, widget or module that fires the event doesn’t\n care about their subscribers structure and if they still exist or not. \nWe can also subscribe or stop subscribing without interacting directly \nwith the publisher owner. So the code can be isolated which facilitates \nits management.</p>\n<h2>Disadvantages</h2>\n<p>The main disadvantage is that we need to know exactly how the \nenvironment should work. When we have multiple subscribers and \npublishers it’s easy to inadvertently create an endless loop.</p>\n<h2>Implementation</h2>\n<p>First we need the <span>Observer</span> constructor, it \nshould create a stack that stores all the necessary information to run \nthe handlers when the event fire and set the name of the topic. The name\n of the topic is used when the event is fired to inform the handler of \nthe occurred event’s name.</p>\n<pre><span>var</span><span> </span><span>Observer</span><span> </span><span>=</span><span> </span><span>function</span><span> </span><span>(</span><span>topic</span><span>)</span><span> </span><span>{</span><span>\n\t</span><span>this</span><span>.</span><span>_topic </span><span>=</span><span> topic </span><span>||</span><span> </span><span>\"\"</span><span>;</span><span>\n\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> </span><span>[];</span><span>\n</span><span>};</span></pre>\n<p>Next we need the subscribe method. This method should store the \nsubscription information: the handler function, an arguments object and a\n flag that defines if the arguments object should be used as scope or \nnot.</p>\n<pre><span>Observer</span><span>.</span><span>prototype </span><span>=</span><span> </span><span>{</span><p></p><span>\n</span><p><span>\tsubscribe</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>fHandler</span><span>,</span><span> oScope</span><span>,</span><span> bOverride</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>push</span><span>({</span><span>\n\t\t\thandler</span><span>:</span><span> fHandler</span><span>,</span><span>\n\t\t\tscope</span><span>:</span><span> </span><span>(</span><span>bOverride </span><span>&amp;&amp;</span><span> </span><span>typeof</span><span> oScope </span><span>===</span><span> </span><span>\"object\"</span><span>)</span><span> </span><span>?</span><span> oScope </span><span>:</span><span> window</span><span>,</span><span>\n\t\t\targs</span><span>:</span><span> oScope </span><span>||</span><span> </span><span>{},</span><span>\n\t\t\t</span><span>override</span><span>:</span><span> bOverride\n\t\t</span><span>});</span><span>\n\t</span><span>}</span><span>\n</span><span>};</span></p></pre>\n<p>Now we should create the method to fire (publish) the event. This \nmethod may receive some arguments if needed and run the subscribers, \nstored in the stack, according to their settings. The subscription \nhandler will receive as parameters the Observer’s topic, the \nsubscription arguments and the publish arguments:</p>\n<pre><span>Observer</span><span>.</span><span>prototype </span><span>=</span><span> </span><span>{</span><span>\n\t</span><span>...</span><span>\n\tpublish</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>args</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>var</span><span> i</span><span>,</span><span> li</span><span>,</span><span> cur</span><span>;</span><span>\n\t\targs </span><span>=</span><span> args </span><span>||</span><span> </span><span>[];</span><span>\n\t\t</span><span>for</span><span> </span><span>(</span><span>i </span><span>=</span><span> </span><span>0</span><span>,</span><span> li </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>length</span><span>;</span><span> i </span><span>&lt;</span><span> li</span><span>;</span><span> </span><span>++</span><span>i</span><span>)</span><span> </span><span>{</span><span>\n\t\t\tcur </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>[</span><span>i</span><span>];</span><span>\n\t\t\tcur</span><span>.</span><span>handler</span><span>.</span><span>call</span><span>(</span><span>cur</span><span>.</span><span>scope</span><span>,</span><span> </span><span>this</span><span>.</span><span>_topic</span><span>,</span><span> cur</span><span>.</span><span>args</span><span>,</span><span> args</span><span>);</span><span>\n\t\t</span><span>}</span><span>\n\t</span><span>}</span><span>\n</span><span>};</span></pre>\n<p>The publish method could be improved by using the <span>Array.forEach</span> if available, instead of the conventional for loop.</p>\n<p>The last required method is the <span>unsubscribe</span>, that removes a subscription from the stack by the defined handler.</p>\n<pre><span>Observer</span><span>.</span><span>prototype </span><span>=</span><span> </span><span>{</span><span>\n\t</span><span>...</span><span>\n\tunsubscribe</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>fHandler</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>var</span><span> cur</span><span>,</span><span> res </span><span>=</span><span> </span><span>[];</span><span>\n\t\t</span><span>while</span><span> </span><span>(</span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>length</span><span>)</span><span> </span><span>{</span><span>\n\t\t\tcur </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>shift</span><span>();</span><span>\n\t\t\t</span><span>if</span><span> </span><span>(</span><span>cur</span><span>.</span><span>handler </span><span>!==</span><span> fHandler</span><span>)</span><span> </span><span>{</span><span>\n\t\t\t\tres</span><span>.</span><span>push</span><span>(</span><span>cur</span><span>);</span><span>\n\t\t\t</span><span>}</span><span>\n\t\t</span><span>}</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> res</span><span>;</span><span>\n\t</span><span>}</span><span>\n</span><span>};</span></pre>\n<p>In more advanced browsers you can use the <span>Array.filter</span> instead of the while statement.</p>\n<p>There other useful methods to have in the Observer method, but not mandatory. The <span>unsubscribeAll</span>, unsubscribes all methods and is very useful when destroying a widget. The <span>getSubscribers</span> gets all the subscribers and enables to debug or filter the handlers.</p>\n<pre><span>Observer</span><span>.</span><span>prototype </span><span>=</span><span> </span><span>{</span><span>\n\t</span><span>...</span><span>\n\tgetSubscribers</span><span>:</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n\t\t</span><span>return</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>;</span><span>\n\t</span><span>},</span><span>\n\tunsubscribeAll</span><span>:</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> </span><span>[];</span><span>\n\t</span><span>}</span><span>\n</span><span>};</span></pre>\n<p>Putting all together:</p>\n<pre><span>var</span><span> </span><span>Observer</span><span> </span><span>=</span><span> </span><span>function</span><span> </span><span>(</span><span>topic</span><span>)</span><span> </span><span>{</span><span>\n\t</span><span>this</span><span>.</span><span>_topic </span><span>=</span><span> topic </span><span>||</span><span> </span><span>\"\"</span><span>;</span><span>\n\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> </span><span>[];</span><span>\n</span><span>};</span><p></p><span>\n</span><p><span>Observer</span><span>.</span><span>prototype </span><span>=</span><span> </span><span>{</span></p><span>\n</span><p><span>\tsubscribe</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>fHandler</span><span>,</span><span> oScope</span><span>,</span><span> bOverride</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>push</span><span>({</span><span>\n\t\t\thandler</span><span>:</span><span> fHandler</span><span>,</span><span>\n\t\t\tscope</span><span>:</span><span> </span><span>(</span><span>bOverride </span><span>&amp;&amp;</span><span> </span><span>typeof</span><span> oScope </span><span>===</span><span> </span><span>\"object\"</span><span>)</span><span> </span><span>?</span><span> oScope </span><span>:</span><span> window</span><span>,</span><span>\n\t\t\targs</span><span>:</span><span> oScope </span><span>||</span><span> </span><span>{},</span><span>\n\t\t\t</span><span>override</span><span>:</span><span> bOverride\n\t\t</span><span>});</span><span>\n\t</span><span>},</span></p><span>\n</span><p><span>\tpublish</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>args</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>var</span><span> i</span><span>,</span><span> li</span><span>,</span><span> cur</span><span>;</span><span>\n\t\targs </span><span>=</span><span> args </span><span>||</span><span> </span><span>[];</span><span>\n\t\t</span><span>for</span><span> </span><span>(</span><span>i </span><span>=</span><span> </span><span>0</span><span>,</span><span> li </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>length</span><span>;</span><span> i </span><span>&lt;</span><span> li</span><span>;</span><span> </span><span>++</span><span>i</span><span>)</span><span> </span><span>{</span><span>\n\t\t\tcur </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>[</span><span>i</span><span>];</span><span>\n\t\t\tcur</span><span>.</span><span>handler</span><span>.</span><span>call</span><span>(</span><span>cur</span><span>.</span><span>scope</span><span>,</span><span> </span><span>this</span><span>.</span><span>_topic</span><span>,</span><span> cur</span><span>.</span><span>args</span><span>,</span><span> args</span><span>);</span><span>\n\t\t</span><span>}</span><span>\n\t</span><span>},</span></p><span>\n</span><p><span>\tunsubscribe</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>fHandler</span><span>)</span><span> </span><span>{</span><span>\n\t\t</span><span>var</span><span> cur</span><span>,</span><span> res </span><span>=</span><span> </span><span>[];</span><span>\n\t\t</span><span>while</span><span> </span><span>(</span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>length</span><span>)</span><span> </span><span>{</span><span>\n\t\t\tcur </span><span>=</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>.</span><span>shift</span><span>();</span><span>\n\t\t\t</span><span>if</span><span> </span><span>(</span><span>cur</span><span>.</span><span>handler </span><span>!==</span><span> fHandler</span><span>)</span><span> </span><span>{</span><span>\n\t\t\t\tres</span><span>.</span><span>push</span><span>(</span><span>cur</span><span>);</span><span>\n\t\t\t</span><span>}</span><span>\n\t\t</span><span>}</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> res</span><span>;</span><span>\n\t</span><span>},</span></p><span>\n</span><p><span>\tgetSubscribers</span><span>:</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n\t\t</span><span>return</span><span> </span><span>this</span><span>.</span><span>_stack</span><span>;</span><span>\n\t</span><span>},</span></p><span>\n</span><p><span>\tunsubscribeAll</span><span>:</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n\t\t</span><span>this</span><span>.</span><span>_stack </span><span>=</span><span> </span><span>[];</span><span>\n\t</span><span>}</span><span>\n</span><span>};</span></p></pre>\n<h2>How to use it</h2>\n<p>The usage is fairly simple:.</p>\n<pre><span>var</span><span> </span><span>event</span><span>,</span><span>\n    obj1 </span><span>=</span><span> </span><span>{</span><span> a</span><span>:</span><span> </span><span>\"A\"</span><span>,</span><span> b</span><span>:</span><span> </span><span>\"B\"</span><span> </span><span>},</span><span>\n    obj2 </span><span>=</span><span> </span><span>{</span><span> c</span><span>:</span><span> </span><span>\"C\"</span><span>,</span><span> d</span><span>:</span><span> </span><span>\"D\"</span><span> </span><span>};</span><p></p><span>\n</span><p><span>// create a new Observer instance setting the topic (testing)</span><span>\n</span><span>event</span><span> </span><span>=</span><span> </span><span>new</span><span> </span><span>Observer</span><span>(</span><span>\"testing\"</span><span>);</span></p><span>\n</span><p><span>// create handler for the subscription</span><span>\n</span><span>// the received arguments are the topic, the subscription arguments</span><span>\n</span><span>// and the published arguments</span><span>\n</span><span>function</span><span> fn</span><span>(</span><span>sTopic</span><span>,</span><span> oSubArgs</span><span>,</span><span> oPubArgs</span><span>)</span><span> </span><span>{</span><span>\n\tconsole</span><span>.</span><span>log</span><span>(</span><span>\"inside the handler\"</span><span>,</span><span> sTopic</span><span>,</span><span> oSubArgs</span><span>,</span><span> oPubArgs</span><span>);</span><span>\n</span><span>}</span></p><span>\n</span><p><span>// subscribe the event</span><span>\n</span><span>event</span><span>.</span><span>subscribe</span><span>(</span><span>fn</span><span>,</span><span> obj1</span><span>,</span><span> </span><span>false</span><span>);</span></p><span>\n</span><p><span>// publish the event</span><span>\n</span><span>event</span><span>.</span><span>publish</span><span>(</span><span>obj2</span><span>);</span><span> </span><span>// logs the information from the handler</span></p><span>\n</span><p><span>// remove the subscription</span><span>\n</span><span>event</span><span>.</span><span>unsubscribe</span><span>(</span><span>fn</span><span>);</span></p><span>\n</span><p><span>// publish the event</span><span>\n</span><span>event</span><span>.</span><span>publish</span><span>();</span><span> </span><span>// shouldn't log anything</span></p></pre>\n<h2>Conclusion</h2>\n<p>This a very simple pattern that should be used to keep the modularity\n of the scripts, leading to clean and reliable code. You may optimize \nthe widget or add more events in an independent way without worrying \nabout side effects.</p>","tags":"javascript,Observer Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 19:36:13 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424786816397},"mode":"add","comments":[],"images":[],"_id":"nvQLyuu2SsxqZYsE"}
{"id":"0","category":"javascript","categoryId":"30","title":"Javascript String Functions","codes":[{"code":"Examples of the JavaScript string functions in action\n\n1. charAt(x) Returns the character at the \"x\" position within the string.\n\t\n//charAt(x)\nvar myString = 'jQuery FTW!!!';\nconsole.log(myString.charAt(7));\n//output: F\n\n2. charCodeAt(x) Returns the Unicode value of the character at position \"x\" within the string.\n\n\t\n//charAt(position)\nvar message=\"jquery4u\"\n//alerts \"q\"\nalert(message.charAt(1))\n\n3. concat(v1, v2,…) Combines one or more strings (arguments v1, v2 etc) into the existing one and returns the combined string. Original string is not modified.\n\n\t\n//concat(v1, v2,..)\nvar message=\"Sam\"\nvar final=message.concat(\" is a\",\" hopeless romantic.\")\n//alerts \"Sam is a hopeless romantic.\"\nalert(final)\n\n4. fromCharCode(c1, c2,…) Returns a string created by using the specified sequence of Unicode values (arguments c1, c2 etc). Method of String object, not String instance. For example: String.fromCharCode().\n\n\t\n//fromCharCode(c1, c2,...)\nconsole.log(String.fromCharCode(97,98,99,120,121,122))\n//output: abcxyz\nconsole.log(String.fromCharCode(72,69,76,76,79))\n//output: HELLO\n//(PS - I have no idea why you would use this? any ideas?)\n\nAlso see: Full List of JavaScript Character Codes\n\n5. indexOf(substr, [start]) Searches and (if found) returns the index number of the searched character or substring within the string. If not found, -1 is returned. \"Start\" is an optional argument specifying the position within string to begin the search. Default is 0.\n\n\t\n//indexOf(char/substring)\nvar sentence=\"Hi, my name is Sam!\"\nif (sentence.indexOf(\"Sam\")!=-1)\nalert(\"Sam is in there!\")\n\n6. lastIndexOf(substr, [start]) Searches and (if found) returns the index number of the searched character or substring within the string. Searches the string from end to beginning. If not found, -1 is returned. \"Start\" is an optional argument specifying the position within string to begin the search. Default is string.length-1.\n\n\t\n//lastIndexOf(substr, [start])\nvar myString = 'javascript rox';\nconsole.log(myString.lastIndexOf('r'));\n//output: 11\n\n7. match(regexp) Executes a search for a match within a string based on a regular expression. It returns an array of information or null if no match is found.\n\n//match(regexp) //select integers only\nvar intRegex = /[0-9 -()+]+$/; \n \nvar myNumber = '999';\nvar myInt = myNumber.match(intRegex);\nconsole.log(isInt);\n//output: 999\n \nvar myString = '999 JS Coders';\nvar myInt = myString.match(intRegex);\nconsole.log(isInt);\n//output: null\n\nAlso see: jQuery RegEx Examples to use with .match()\n\n8. replace(regexp/substr, replacetext) Searches and replaces the regular expression (or sub string) portion (match) with the replaced text instead.\n\n\n\t\n//replace(substr, replacetext)\nvar myString = '999 JavaScript Coders';\nconsole.log(myString.replace(/JavaScript/i, \"jQuery\"));\n//output: 999 jQuery Coders\n \n//replace(regexp, replacetext)\nvar myString = '999 JavaScript Coders';\nconsole.log(myString.replace(new RegExp( \"999\", \"gi\" ), \"The\"));\n//output: The JavaScript Coders\n\n9. search(regexp) Tests for a match in a string. It returns the index of the match, or -1 if not found.\n\t\n//search(regexp)\nvar intRegex = /[0-9 -()+]+$/; \n \nvar myNumber = '999';\nvar isInt = myNumber.search(intRegex);\nconsole.log(isInt);\n//output: 0\n \nvar myString = '999 JS Coders';\nvar isInt = myString.search(intRegex);\nconsole.log(isInt);\n//output: -1\n\n10. slice(start, [end]) Returns a substring of the string based on the \"start\" and \"end\" index arguments, NOT including the \"end\" index itself. \"End\" is optional, and if none is specified, the slice includes all characters from \"start\" to end of string.\n\n\t\n//slice(start, end)\nvar text=\"excellent\"\ntext.slice(0,4) //returns \"exce\"\ntext.slice(2,4) //returns \"ce\"\n\n11. split(delimiter, [limit]) Splits a string into many according to the specified delimiter, and returns an array containing each element. The optional \"limit\" is an integer that lets you specify the maximum number of elements to return.\n\n\t\n//split(delimiter)\nvar message=\"Welcome to jQuery4u\"\n//word[0] contains \"We\"\n//word[1] contains \"lcome to jQuery4u\"\nvar word=message.split(\"l\")\n\n12. substr(start, [length]) Returns the characters in a string beginning at \"start\" and through the specified number of characters, \"length\". \"Length\" is optional, and if omitted, up to the end of the string is assumed.\n\n\t\n//substring(from, to)\nvar text=\"excellent\"\ntext.substring(0,4) //returns \"exce\"\ntext.substring(2,4) //returns \"ce\"\n\n13. substring(from, [to]) Returns the characters in a string between \"from\" and \"to\" indexes, NOT including \"to\" inself. \"To\" is optional, and if omitted, up to the end of the string is assumed.\n\n\t\n//substring(from, [to])\nvar myString = 'javascript rox';\nmyString = myString.substring(0,10);\nconsole.log(myString)\n//output: javascript\n\n14. toLowerCase() Returns the string with all of its characters converted to lowercase.\n\n\t\n//toLowerCase()\nvar myString = 'JAVASCRIPT ROX';\nmyString = myString.toLowerCase();\nconsole.log(myString)\n//output: javascript rox\n\n15. toUpperCase() Returns the string with all of its characters converted to uppercase.\n\n\t\n//toUpperCase()\nvar myString = 'javascript rox';\nmyString = myString.toUpperCase();\nconsole.log(myString)\n//output: JAVASCRIPT ROX","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"javascript","isStarred":"false","note":"","dateCreated":"Sat Jan 31 2015 20:12:11 GMT+0530 (India Standard Time)","dateModified":"Sat Jan 31 2015 20:12:11 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"oSLnnbAr6rQ9jw0f"}
{"id":"0","category":"javascript","categoryId":"30","title":"Self-Executing Anonymous Functions","refSite":"http://markdalgleish.com/2011/03/self-executing-anonymous-functions/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><p>When learning JavaScript, with all the \nattention given to variables, functions, ‘if’ statements, loops and \nevent handlers, often little is done to educate you on how you might \ncleanly organise your code into a cohesive, structurally-sound whole.</p>\n\n<p>Let’s take the following code for example:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n</pre></td><td><pre><code><span><span>var</span> <span>foo</span> <span>=</span> <span>'Hello'</span><span>;</span>\n</span><span><span>var</span> <span>bar</span> <span>=</span> <span>'World!'</span><span>;</span>\n</span><span>\n</span><span><span>function</span> <span>baz</span><span>(){</span>\n</span><span>  <span>return</span> <span>foo</span>  <span>+</span> <span>' '</span> <span>+</span> <span>bar</span><span>;</span>\n</span><span><span>}</span>\n</span><span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>baz</span><span>());</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>This style of code looks quite normal, works fine and doesn’t cause any problems. At least for now.</p>\n\n<p>This style of code, when implemented in a large application, can \nstart to become an unwieldy mess. The global namespace becomes littered \nwith functions and variables, all tenuously linked to each other through\n a combination of rudimentary comments and potentially unspoken \ndeveloper knowledge.</p>\n\n<p>The first step on the journey to beautiful, modular JavaScript is to learn the art of the self-executing anonymous function.</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(){</span>\n</span><span>  <span>console</span><span>.</span><span>log</span><span>(</span><span>'Hello World!'</span><span>);</span>\n</span><span><span>})();</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>Let’s look at this carefully. This code is made up of two key parts.</p>\n\n<p>First is the anonymous function:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(){</span>\n</span><span>  <span>//Normal code goes here</span>\n</span><span><span>})</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>The really interesting part is what happens when we add this right at the end:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n</pre></td><td><pre><code><span>();</span>\n</code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>Those two little brackets cause everything contained in the preceding\n parentheses to be executed immediately. What’s useful here is that \nJavaScript has function level scoping. All variables and functions \ndefined within the anonymous function aren’t available to the code \noutside of it, effectively using closure to seal itself from the outside\n world.</p>\n\n<p>Let’s apply this design patten to our gloriously inane example code.</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(){</span>\n</span><span>  <span>var</span> <span>foo</span> <span>=</span> <span>'Hello'</span><span>;</span>\n</span><span>  <span>var</span> <span>bar</span> <span>=</span> <span>'World!'</span>\n</span><span>  \n</span><span>  <span>function</span> <span>baz</span><span>(){</span>\n</span><span>      <span>return</span> <span>foo</span> <span>+</span> <span>' '</span> <span>+</span> <span>bar</span><span>;</span>\n</span><span>  <span>}</span>\n</span><span><span>})();</span>\n</span><span>\n</span><span> <span>//These all throw exceptions:</span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>foo</span><span>);</span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>bar</span><span>);</span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>baz</span><span>());</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>The last three lines throw exceptions because currently nothing is \naccessible outside the anonymous function. To allow access to a variable\n or function, we need to expose it to the global ‘window’ object.</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(){</span>\n</span><span>  <span>var</span> <span>foo</span> <span>=</span> <span>'Hello'</span><span>;</span>\n</span><span>  <span>var</span> <span>bar</span> <span>=</span> <span>'World!'</span>\n</span><span>  \n</span><span>  <span>function</span> <span>baz</span><span>(){</span>\n</span><span>      <span>return</span> <span>foo</span> <span>+</span> <span>' '</span> <span>+</span> <span>bar</span><span>;</span>\n</span><span>  <span>}</span>\n</span><span>\n</span><span>  <span>window</span><span>.</span><span>baz</span> <span>=</span> <span>baz</span><span>;</span> <span>//Assign 'baz' to the global variable 'baz'...</span>\n</span><span><span>})();</span>\n</span><span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>baz</span><span>());</span> <span>//...and now this works.</span>\n</span><span>\n</span><span><span>//It's important to note that these still won't work: </span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>foo</span><span>);</span>\n</span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>bar</span><span>);</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>One of the major benefits of this pattern, as seen on the last two \nlines of the previous example, is that you can limit access to variables\n and functions within your closure, essentially making them private and \nonly choosing to expose an API of your choice to the global scope.</p>\n\n<p>One popular spin on this design pattern, which can be seen in the <a href=\"http://code.jquery.com/jquery-1.5.1.js\">jQuery source</a>,\n is to pass in some commonly used objects. In our code we reference \n‘window’, so let’s pass that in as a parameter to the anonymous \nfunction.</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(</span><span>window</span><span>){</span>\n</span><span>  <span>var</span> <span>foo</span> <span>=</span> <span>'Hello'</span><span>;</span>\n</span><span>  <span>var</span> <span>bar</span> <span>=</span> <span>'World!'</span>\n</span><span>  \n</span><span>  <span>function</span> <span>baz</span><span>(){</span>\n</span><span>      <span>return</span> <span>foo</span> <span>+</span> <span>' '</span> <span>+</span> <span>bar</span><span>;</span>\n</span><span>  <span>}</span>\n</span><span>\n</span><span>  <span>//In this context, 'window' refers to the parameter</span>\n</span><span>  <span>window</span><span>.</span><span>baz</span> <span>=</span> <span>baz</span><span>;</span>\n</span><span><span>})(</span><span>window</span><span>);</span> <span>//Pass in a reference to the global window object</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>When minifying your code, this design pattern will yield great \nresults. All references to ‘window’ in your code can be renamed to ‘a’, \nfor example:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(</span><span>a</span><span>){</span>\n</span><span>  <span>console</span><span>.</span><span>log</span><span>(</span><span>a</span> <span>===</span> <span>window</span><span>);</span> <span>//Returns 'true'</span>\n</span><span><span>})(</span><span>window</span><span>);</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>Normally you’ll want to pass in a few objects. A technique you can \nsee used within jQuery itself is to reference an extra parameter that \nisn’t defined when the anonymous function is executed, in effect \ncreating an alias for ‘undefined’:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>$</span><span>,</span> <span>undefined</span><span>){</span>\n</span><span>  <span>var</span> <span>foo</span><span>;</span>\n</span><span>  <span>console</span><span>.</span><span>log</span><span>(</span><span>foo</span> <span>===</span> <span>undefined</span><span>);</span> <span>//Returns 'true'</span>\n</span><span><span>})(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>jQuery</span><span>);</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>You may have noticed that the previous example also aliased ‘jQuery’ \nto ‘$’, allowing it to play nicely with other frameworks without having \nto use <a href=\"http://api.jquery.com/jQuery.noConflict/\">jQuery in noConflict mode</a>.</p>\n\n<p>It’s worth pointing out that the parameter names are purely for \nconvention. The following code would work equally as well and serves as a\n great illustration of what’s really going on in this design pattern:</p>\n\n<figure><figcaption></figcaption><div><table><tbody><tr><td><pre><span>1</span>\n<span>2</span>\n<span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n</pre></td><td><pre><code><span><span>(</span><span>function</span><span>(</span><span>mark</span><span>,</span> <span>loves</span><span>,</span> <span>drinking</span><span>,</span> <span>coffee</span><span>){</span>\n</span><span>  <span>mark</span><span>.</span><span>open</span><span>(</span><span>'http://www.google.com'</span><span>);</span> <span>//window</span>\n</span><span>  <span>loves</span><span>.</span><span>getElementById</span><span>(</span><span>'menu'</span><span>);</span> <span>//document</span>\n</span><span>  <span>drinking</span><span>(</span><span>'#menu'</span><span>).</span><span>hide</span><span>();</span> <span>//jQuery</span>\n</span><span>  <span>var</span> <span>foo</span><span>;</span>\n</span><span>  <span>console</span><span>.</span><span>log</span><span>(</span><span>foo</span> <span>===</span> <span>coffee</span><span>);</span> <span>//undefined</span>\n</span><span><span>})(</span><span>window</span><span>,</span> <span>document</span><span>,</span> <span>jQuery</span><span>);</span>\n</span></code></pre></td></tr></tbody></table></div></figure>\n\n\n<p>Although, for obvious reasons, I advise against this ;)</p>\n\n<p>The benefits of this design pattern will become even more apparent in\n later posts. Harnessing the power of self-executing anonymous functions\n will allow you to create more complex but ultimately more intuitive \ncode structures that will make your larger projects much easier to \nmanage.</p></div>","tags":"javascript,Function,Anonymous Functions","isStarred":"false","note":"","dateCreated":"Mon Mar 02 2015 11:19:50 GMT+0530 (India Standard Time)","dateModified":"Mon Mar 02 2015 11:19:50 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"p99yTiBVy9socAvk"}
{"id":"QY6ug7xn1nsKqj2w","category":"patterns","categoryId":"58","title":"The Javascript Observer Pattern","refSite":"https://carldanley.com/js-observer-pattern/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>This pattern implements a single object (the subject) that maintains a reference to a collection of objects (known as \"observers\") and broadcasts notifications when a change to state occurs. When we don't want to observe an object, we simply remove it from the collection of objects being observed. The observer pattern is similar to both the pub/sub implementation and the <a href=\"http://carldanley.com/js-mediator-pattern/\">mediator pattern</a> but still different in purpose &amp; theory and worth mentioning. Study the example below for a good idea of what's happening behind the scenes.</p><p>This article is part of a series called <a href=\"http://carldanley.com/javascript-design-patterns/\">JavaScript Design Patterns</a>.</p><h2>Advantages</h2><ul><li>Requires deeper-level thinking of the relationship between the various components of an application</li><li>Helps us pinpoint dependencies</li><li>Excellent at decoupling objects which often promotes smaller, reusable components</li></ul><h2>Disadvantages</h2><ul><li>Checking the integrity of your application can become difficult</li><li>Switching a subscriber from one publisher to another can be costly</li></ul><h2>Example</h2><div>        <div>          <div>    <div>      <table cellpadding=\"0\" cellspacing=\"0\">        <tbody><tr>          <td>            <pre><div><span>// build the Subject base class</span></div><div><span>var</span> Subject <span>=</span> ( <span>function</span>( <span>window</span>, <span>undefined</span> ) {</div><div>&nbsp;</div><div>  <span>function</span> <span>Subject</span>() {</div><div>    <span>this</span>._list <span>=</span> [];</div><div>  }</div><div>&nbsp;</div><div>  <span>// this method will handle adding observers to the internal list</span></div><div>  <span>Subject</span>.<span>prototype</span>.<span>observe</span> <span>=</span> <span>function</span> <span>observeObject</span>( <span>obj</span> ) {</div><div>    <span>console</span><span>.log</span>( <span><span>'</span>added new observer<span>'</span></span> );</div><div>    <span>this</span>._list.<span>push</span>( obj );</div><div>  };</div><div>  </div><div>  <span>Subject</span>.<span>prototype</span>.<span>unobserve</span> <span>=</span> <span>function</span> <span>unobserveObject</span>( <span>obj</span> ) {</div><div>    <span>for</span>( <span>var</span> i <span>=</span> <span>0</span>, len <span>=</span> <span>this</span>._list.<span>length</span>; i <span>&lt;</span> len; i<span>++</span> ) {</div><div>      <span>if</span>( <span>this</span>._list[ i ] <span>===</span> obj ) {</div><div>        <span>this</span>._list.<span>splice</span>( i, <span>1</span> );</div><div>        <span>console</span><span>.log</span>( <span><span>'</span>removed existing observer<span>'</span></span> );</div><div>        <span>return</span> <span>true</span>;</div><div>      }</div><div>    }</div><div>    <span>return</span> <span>false</span>;</div><div>  };</div><div>  </div><div>  <span>Subject</span>.<span>prototype</span>.<span>notify</span> <span>=</span> <span>function</span> <span>notifyObservers</span>() {</div><div>    <span>var</span> args <span>=</span> <span>Array</span>.<span>prototype</span>.slice.<span>call</span>( arguments, <span>0</span> );</div><div>    <span>for</span>( <span>var</span> i <span>=</span> <span>0</span>, len <span>=</span> <span>this</span>._list.<span>length</span>; i <span>&lt;</span> len; i<span>++</span> ) {</div><div>      <span>this</span>._list[ i ].update.<span>apply</span>( <span>null</span>, args );</div><div>    }</div><div>  };</div><div>&nbsp;</div><div>  <span>return</span> Subject;</div><div>&nbsp;</div><div>} )( <span>window</span> );</div><div>&nbsp;</div><div><span>// setup an object that fetchs stocks</span></div><div><span>function</span> <span>StockGrabber</span>() {</div><div>  </div><div>  <span>var</span> subject <span>=</span> <span>new</span> <span>Subject</span>();</div><div>  </div><div>  <span>this</span>.addObserver <span>=</span> <span>function</span> <span>addObserver</span>( <span>newObserver</span> ) {</div><div>    subject.observe( newObserver );</div><div>  };</div><div>  </div><div>  <span>this</span>.removeObserver <span>=</span> <span>function</span> <span>removeObserver</span>( <span>deleteObserver</span> ) {</div><div>    subject.unobserve( deleteObserver );</div><div>  };</div><div>  </div><div>  <span>this</span>.fetchStocks <span>=</span> <span>function</span> <span>fetchStocks</span>() {</div><div>    <span>// fake fetching the stocks</span></div><div>    <span>var</span> stocks <span>=</span> {</div><div>      aapl <span>:</span> <span>167.00</span>,</div><div>      goog <span>:</span> <span>243.67</span>,</div><div>      msft <span>:</span> <span>99.34</span></div><div>    };</div><div>    </div><div>    <span>// notify our observers of the stock change</span></div><div>    subject.notify( stocks );</div><div>  };</div><div>  </div><div>}</div><div>&nbsp;</div><div><span>// define a couple of different observers</span></div><div><span>var</span> StockUpdaterComponent <span>=</span> {</div><div>  <span>update</span> : <span>function</span>() {</div><div>    <span>console</span><span>.log</span>( <span><span>'</span>\"update\" called on StockUpdater with: <span>'</span></span>, arguments );</div><div>  }</div><div>};</div><div><span>var</span> StockChartsComponent <span>=</span> {</div><div>  <span>update</span> : <span>function</span>() {</div><div>    <span>console</span><span>.log</span>( <span><span>'</span>\"update\" called on StockCharts with: <span>'</span></span>, arguments );</div><div>  }</div><div>};</div><div>&nbsp;</div><div><span>// example usage</span></div><div><span>var</span> stockApp <span>=</span> <span>new</span> <span>StockGrabber</span>();</div><div>stockApp.addObserver( StockUpdaterComponent );</div><div>stockApp.fetchStocks(); <span>// console logs: \"update\" called on StockUpdater with...</span></div><div>stockApp.addObserver( StockChartsComponent );</div><div>stockApp.fetchStocks(); <span>// console logs: \"update\" called on StockUpdater with... \"update\" called on StockCarts with...</span></div><div>stockApp.removeObserver( StockUpdaterComponent );</div><div>stockApp.fetchStocks(); <span>// console logs: \"update\" called on StockCharts with...</span></div><div>stockApp.removeObserver( StockChartsComponent );</div><div>stockApp.fetchStocks(); <span>// does nothing; no observers</span></div></pre>          </td>        </tr>      </tbody></table>    </div>          </div>          <div>            <a href=\"https://gist.github.com/carldanley/3a382adec88b9d035b94/raw/observer-pattern-example.js\">view raw</a>            <a href=\"https://gist.github.com/carldanley/3a382adec88b9d035b94#file-observer-pattern-example-js\">observer-pattern-example.js</a>            hosted with ❤ by <a href=\"https://github.com/\">GitHub</a>          </div>        </div></div><p>In the example above, the <code>Subject</code> object becomes a base class from which we build an example stock tracking application. You can see that the <code>StockGrabber</code> object uses the <code>Subject</code> object internally to handle notifications to other components of the application such as the <code>StockUpdaterComponent</code> and the <code>StockChartsComponent</code>.</p>","tags":"javascript,Pattern","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 15:26:10 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 15:26:10 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"pB7EQarK50AD8SOj"}
{"id":"0","category":"javascript","categoryId":"30","title":"ECMAScript 6 Features","refSite":"https://babeljs.io/docs/learn-es6/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h3>Arrows</h3>\n\n<p>Arrows are a function shorthand using the <code>=&gt;</code> syntax.  They are syntactically\nsimilar to the related feature in C#, Java 8 and CoffeeScript.  They support\nboth expression and statement bodies.  Unlike functions, arrows share the same\nlexical <code>this</code> as their surrounding code.</p>\n<div><pre><code data-lang=\"js\"><span>// Expression bodies</span>\n<span>var</span> <span>odds</span> <span>=</span> <span>evens</span><span>.</span><span>map</span><span>(</span><span>v</span> <span>=&gt;</span> <span>v</span> <span>+</span> <span>1</span><span>);</span>\n<span>var</span> <span>nums</span> <span>=</span> <span>evens</span><span>.</span><span>map</span><span>((</span><span>v</span><span>,</span> <span>i</span><span>)</span> <span>=&gt;</span> <span>v</span> <span>+</span> <span>i</span><span>);</span>\n\n<span>// Statement bodies</span>\n<span>nums</span><span>.</span><span>forEach</span><span>(</span><span>v</span> <span>=&gt;</span> <span>{</span>\n  <span>if</span> <span>(</span><span>v</span> <span>%</span> <span>5</span> <span>===</span> <span>0</span><span>)</span>\n    <span>fives</span><span>.</span><span>push</span><span>(</span><span>v</span><span>);</span>\n<span>});</span>\n\n<span>// Lexical this</span>\n<span>var</span> <span>bob</span> <span>=</span> <span>{</span>\n  <span>_name</span><span>:</span> <span>\"Bob\"</span><span>,</span>\n  <span>_friends</span><span>:</span> <span>[],</span>\n  <span>printFriends</span><span>()</span> <span>{</span>\n    <span>this</span><span>.</span><span>_friends</span><span>.</span><span>forEach</span><span>(</span><span>f</span> <span>=&gt;</span>\n      <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span><span>_name</span> <span>+</span> <span>\" knows \"</span> <span>+</span> <span>f</span><span>));</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<h3>Classes</h3>\n\n<p>ES6 classes are a simple sugar over the prototype-based OO pattern.  Having a\nsingle convenient declarative form makes class patterns easier to use, and\nencourages interoperability.  Classes support prototype-based inheritance, super\ncalls, instance and static methods and constructors.</p>\n<div><pre><code data-lang=\"js\"><span>class</span> <span>SkinnedMesh</span> <span>extends</span> <span>THREE</span><span>.</span><span>Mesh</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>geometry</span><span>,</span> <span>materials</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span><span>geometry</span><span>,</span> <span>materials</span><span>);</span>\n\n    <span>this</span><span>.</span><span>idMatrix</span> <span>=</span> <span>SkinnedMesh</span><span>.</span><span>defaultMatrix</span><span>();</span>\n    <span>this</span><span>.</span><span>bones</span> <span>=</span> <span>[];</span>\n    <span>this</span><span>.</span><span>boneMatrices</span> <span>=</span> <span>[];</span>\n    <span>//...</span>\n  <span>}</span>\n  <span>update</span><span>(</span><span>camera</span><span>)</span> <span>{</span>\n    <span>//...</span>\n    <span>super</span><span>.</span><span>update</span><span>();</span>\n  <span>}</span>\n  <span>static</span> <span>defaultMatrix</span><span>()</span> <span>{</span>\n    <span>return</span> <span>new</span> <span>THREE</span><span>.</span><span>Matrix4</span><span>();</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<h3>Enhanced Object Literals</h3>\n\n<p>Object literals are extended to support setting the prototype at construction,\nshorthand for <code>foo: foo</code> assignments, defining methods and making super calls.\nTogether, these also bring object literals and class declarations closer\ntogether, and let object-based design benefit from some of the same\nconveniences.</p>\n<div><pre><code data-lang=\"js\"><span>var</span> <span>obj</span> <span>=</span> <span>{</span>\n    <span>// __proto__</span>\n    <span>__proto__</span><span>:</span> <span>theProtoObj</span><span>,</span>\n    <span>// Shorthand for ‘handler: handler’</span>\n    <span>handler</span><span>,</span>\n    <span>// Methods</span>\n    <span>toString</span><span>()</span> <span>{</span>\n     <span>// Super calls</span>\n     <span>return</span> <span>\"d \"</span> <span>+</span> <span>super</span><span>.</span><span>toString</span><span>();</span>\n    <span>},</span>\n    <span>// Computed (dynamic) property names</span>\n    <span>[</span> <span>\"prop_\"</span> <span>+</span> <span>(()</span> <span>=&gt;</span> <span>42</span><span>)()</span> <span>]</span><span>:</span> <span>42</span>\n<span>};</span>\n</code></pre></div>\n<blockquote>\n  <p>\n    <code>__proto__</code> support comes from the JavaScript engine running\n    your program. Although most support the now standard property,\n    <a href=\"http://kangax.github.io/compat-table/es6/#__proto___in_object_literals\">some do not</a>.\n  </p>\n</blockquote>\n\n<h3>Template Strings</h3>\n\n<p>Template strings provide syntactic sugar for constructing strings. This is\nsimilar to string interpolation features in Perl, Python and more. Optionally, a\ntag can be added to allow the string construction to be customized, avoiding\ninjection attacks or constructing higher level data structures from string\ncontents.</p>\n<div><pre><code data-lang=\"js\"><span>// Basic literal string creation</span>\n<span>`</span><span>In</span> <span>JavaScript</span> <span>\"\\n\"</span> <span>is</span> <span>a</span> <span>line</span><span>-</span><span>feed</span><span>.</span><span>`</span>\n\n<span>// Multiline strings</span>\n<span>`</span><span>In</span> <span>JavaScript</span> <span>this</span> <span>is</span>\n <span>not</span> <span>legal</span><span>.</span><span>`</span>\n\n<span>// Interpolate variable bindings</span>\n<span>var</span> <span>name</span> <span>=</span> <span>\"Bob\"</span><span>,</span> <span>time</span> <span>=</span> <span>\"today\"</span><span>;</span>\n<span>`</span><span>Hello</span> <span>$</span><span>{</span><span>name</span><span>},</span> <span>how</span> <span>are</span> <span>you</span> <span>$</span><span>{</span><span>time</span><span>}</span><span>?</span><span>`</span>\n\n<span>// Construct an HTTP request prefix is used to interpret the replacements and construction</span>\n<span>GET</span><span>`</span><span>http</span><span>:</span><span>//foo.org/bar?a=${a}&amp;b=${b}</span>\n    <span>Content</span><span>-</span><span>Type</span><span>:</span> <span>application</span><span>/</span><span>json</span>\n    <span>X</span><span>-</span><span>Credentials</span><span>:</span> <span>$</span><span>{</span><span>credentials</span><span>}</span>\n    <span>{</span> <span>\"foo\"</span><span>:</span> <span>$</span><span>{</span><span>foo</span><span>},</span>\n      <span>\"bar\"</span><span>:</span> <span>$</span><span>{</span><span>bar</span><span>}}</span><span>`</span><span>(</span><span>myOnReadyStateChangeHandler</span><span>);</span>\n</code></pre></div>\n<h3>Destructuring</h3>\n\n<p>Destructuring allows binding using pattern matching, with support for matching\narrays and objects.  Destructuring is fail-soft, similar to standard object\nlookup <code>foo[\"bar\"]</code>, producing <code>undefined</code> values when not found.</p>\n<div><pre><code data-lang=\"js\"><span>// list matching</span>\n<span>var</span> <span>[</span><span>a</span><span>,</span> <span>,</span> <span>b</span><span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>];</span>\n\n<span>// object matching</span>\n<span>var</span> <span>{</span> <span>op</span><span>:</span> <span>a</span><span>,</span> <span>lhs</span><span>:</span> <span>{</span> <span>op</span><span>:</span> <span>b</span> <span>},</span> <span>rhs</span><span>:</span> <span>c</span> <span>}</span>\n       <span>=</span> <span>getASTNode</span><span>()</span>\n\n<span>// object matching shorthand</span>\n<span>// binds `op`, `lhs` and `rhs` in scope</span>\n<span>var</span> <span>{</span><span>op</span><span>,</span> <span>lhs</span><span>,</span> <span>rhs</span><span>}</span> <span>=</span> <span>getASTNode</span><span>()</span>\n\n<span>// Can be used in parameter position</span>\n<span>function</span> <span>g</span><span>({</span><span>name</span><span>:</span> <span>x</span><span>})</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>);</span>\n<span>}</span>\n<span>g</span><span>({</span><span>name</span><span>:</span> <span>5</span><span>})</span>\n\n<span>// Fail-soft destructuring</span>\n<span>var</span> <span>[</span><span>a</span><span>]</span> <span>=</span> <span>[];</span>\n<span>a</span> <span>===</span> <span>undefined</span><span>;</span>\n\n<span>// Fail-soft destructuring with defaults</span>\n<span>var</span> <span>[</span><span>a</span> <span>=</span> <span>1</span><span>]</span> <span>=</span> <span>[];</span>\n<span>a</span> <span>===</span> <span>1</span><span>;</span>\n</code></pre></div>\n<h3>Default + Rest + Spread</h3>\n\n<p>Callee-evaluated default parameter values. Turn an array into consecutive\narguments in a function call. Bind trailing parameters to an array. Rest\nreplaces the need for <code>arguments</code> and addresses common cases more directly.</p>\n<div><pre><code data-lang=\"js\"><span>function</span> <span>f</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>=</span><span>12</span><span>)</span> <span>{</span>\n  <span>// y is 12 if not passed (or passed as undefined)</span>\n  <span>return</span> <span>x</span> <span>+</span> <span>y</span><span>;</span>\n<span>}</span>\n<span>f</span><span>(</span><span>3</span><span>)</span> <span>==</span> <span>15</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>function</span> <span>f</span><span>(</span><span>x</span><span>,</span> <span>...</span><span>y</span><span>)</span> <span>{</span>\n  <span>// y is an Array</span>\n  <span>return</span> <span>x</span> <span>*</span> <span>y</span><span>.</span><span>length</span><span>;</span>\n<span>}</span>\n<span>f</span><span>(</span><span>3</span><span>,</span> <span>\"hello\"</span><span>,</span> <span>true</span><span>)</span> <span>==</span> <span>6</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>function</span> <span>f</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>,</span> <span>z</span><span>)</span> <span>{</span>\n  <span>return</span> <span>x</span> <span>+</span> <span>y</span> <span>+</span> <span>z</span><span>;</span>\n<span>}</span>\n<span>// Pass each elem of array as argument</span>\n<span>f</span><span>(...[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>])</span> <span>==</span> <span>6</span>\n</code></pre></div>\n<h3>Let + Const</h3>\n\n<p>Block-scoped binding constructs. <code>let</code> is the new <code>var</code>. <code>const</code> is\nsingle-assignment. Static restrictions prevent use before assignment.</p>\n<div><pre><code data-lang=\"js\"><span>function</span> <span>f</span><span>()</span> <span>{</span>\n  <span>{</span>\n    <span>let</span> <span>x</span><span>;</span>\n    <span>{</span>\n      <span>// okay, block scoped name</span>\n      <span>const</span> <span>x</span> <span>=</span> <span>\"sneaky\"</span><span>;</span>\n      <span>// error, const</span>\n      <span>x</span> <span>=</span> <span>\"foo\"</span><span>;</span>\n    <span>}</span>\n    <span>// error, already declared in block</span>\n    <span>let</span> <span>x</span> <span>=</span> <span>\"inner\"</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<h3>Iterators + For..Of</h3>\n\n<p>Iterator objects enable custom iteration like CLR IEnumerable or Java\nIterable. Generalize <code>for..in</code> to custom iterator-based iteration with\n<code>for..of</code>. Don’t require realizing an array, enabling lazy design patterns like\nLINQ.</p>\n<div><pre><code data-lang=\"js\"><span>let</span> <span>fibonacci</span> <span>=</span> <span>{</span>\n  <span>[</span><span>Symbol</span><span>.</span><span>iterator</span><span>]()</span> <span>{</span>\n    <span>let</span> <span>pre</span> <span>=</span> <span>0</span><span>,</span> <span>cur</span> <span>=</span> <span>1</span><span>;</span>\n    <span>return</span> <span>{</span>\n      <span>next</span><span>()</span> <span>{</span>\n        <span>[</span><span>pre</span><span>,</span> <span>cur</span><span>]</span> <span>=</span> <span>[</span><span>cur</span><span>,</span> <span>pre</span> <span>+</span> <span>cur</span><span>];</span>\n        <span>return</span> <span>{</span> <span>done</span><span>:</span> <span>false</span><span>,</span> <span>value</span><span>:</span> <span>cur</span> <span>}</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>for</span> <span>(</span><span>var</span> <span>n</span> <span>of</span> <span>fibonacci</span><span>)</span> <span>{</span>\n  <span>// truncate the sequence at 1000</span>\n  <span>if</span> <span>(</span><span>n</span> <span>&gt;</span> <span>1000</span><span>)</span>\n    <span>break</span><span>;</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>n</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<p>Iteration is based on these duck-typed interfaces (using\n<a href=\"http://typescriptlang.org/\">TypeScript</a> type syntax for exposition only):</p>\n<div><pre><code data-lang=\"ts\"><span>interface</span> <span>IteratorResult</span> <span>{</span>\n  <span>done</span>: <span>boolean</span><span>;</span>\n  <span>value</span>: <span>any</span><span>;</span>\n<span>}</span>\n<span>interface</span> <span>Iterator</span> <span>{</span>\n  <span>next</span><span>()</span><span>:</span> <span>IteratorResult</span><span>;</span>\n<span>}</span>\n<span>interface</span> <span>Iterable</span> <span>{</span>\n  <span>[</span><span>Symbol</span><span>.</span><span>iterator</span><span>]()</span><span>:</span> <span>Iterator</span>\n<span>}</span>\n</code></pre></div>\n<h3>Generators</h3>\n\n<p>Generators simplify iterator-authoring using <code>function*</code> and <code>yield</code>. A function\ndeclared as function* returns a Generator instance. Generators are subtypes of\niterators which include additional <code>next</code> and <code>throw</code>. These enable values to\nflow back into the generator, so <code>yield</code> is an expression form which returns a\nvalue (or throws).</p>\n\n<p>Note: Can also be used to enable ‘await’-like async programming, see also ES7\n<code>await</code> proposal.</p>\n<div><pre><code data-lang=\"js\"><span>var</span> <span>fibonacci</span> <span>=</span> <span>{</span>\n  <span>[</span><span>Symbol</span><span>.</span><span>iterator</span><span>]</span><span>:</span> <span>function</span><span>*</span><span>()</span> <span>{</span>\n    <span>var</span> <span>pre</span> <span>=</span> <span>0</span><span>,</span> <span>cur</span> <span>=</span> <span>1</span><span>;</span>\n    <span>for</span> <span>(;;)</span> <span>{</span>\n      <span>var</span> <span>temp</span> <span>=</span> <span>pre</span><span>;</span>\n      <span>pre</span> <span>=</span> <span>cur</span><span>;</span>\n      <span>cur</span> <span>+=</span> <span>temp</span><span>;</span>\n      <span>yield</span> <span>cur</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>for</span> <span>(</span><span>var</span> <span>n</span> <span>of</span> <span>fibonacci</span><span>)</span> <span>{</span>\n  <span>// truncate the sequence at 1000</span>\n  <span>if</span> <span>(</span><span>n</span> <span>&gt;</span> <span>1000</span><span>)</span>\n    <span>break</span><span>;</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>n</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<p>The generator interface is (using <a href=\"http://typescriptlang.org/\">TypeScript</a> type\nsyntax for exposition only):</p>\n<div><pre><code data-lang=\"ts\"><span>interface</span> <span>Generator</span> <span>extends</span> <span>Iterator</span> <span>{</span>\n    <span>next</span><span>(</span><span>value?</span>: <span>any</span><span>)</span><span>:</span> <span>IteratorResult</span><span>;</span>\n    <span>throw</span><span>(</span><span>exception</span>: <span>any</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<h3>Comprehensions</h3>\n\n<p>Array and generator comprehensions provide simple declarative list processing\nsimilar as used in many functional programming patterns.</p>\n<div><pre><code data-lang=\"js\"><span>// Array comprehensions</span>\n<span>var</span> <span>results</span> <span>=</span> <span>[</span>\n  <span>for</span><span>(</span><span>c</span> <span>of</span> <span>customers</span><span>)</span>\n    <span>if</span> <span>(</span><span>c</span><span>.</span><span>city</span> <span>==</span> <span>\"Seattle\"</span><span>)</span>\n      <span>{</span> <span>name</span><span>:</span> <span>c</span><span>.</span><span>name</span><span>,</span> <span>age</span><span>:</span> <span>c</span><span>.</span><span>age</span> <span>}</span>\n<span>]</span>\n\n<span>// Generator comprehensions</span>\n<span>var</span> <span>results</span> <span>=</span> <span>(</span>\n  <span>for</span><span>(</span><span>c</span> <span>of</span> <span>customers</span><span>)</span>\n    <span>if</span> <span>(</span><span>c</span><span>.</span><span>city</span> <span>==</span> <span>\"Seattle\"</span><span>)</span>\n      <span>{</span> <span>name</span><span>:</span> <span>c</span><span>.</span><span>name</span><span>,</span> <span>age</span><span>:</span> <span>c</span><span>.</span><span>age</span> <span>}</span>\n<span>)</span>\n</code></pre></div>\n<blockquote>\n  <h4>Disabled by default</h4>\n  <p>\n    These are only available if you enable experimental support. See <a href=\"https://babeljs.io/docs/usage/experimental\">experimental usage</a> for more information.\n  </p>\n</blockquote>\n\n<h3>Unicode</h3>\n\n<p>Non-breaking additions to support full Unicode, including new unicode literal\nform in strings and new RegExp <code>u</code> mode to handle code points, as well as new\nAPIs to process strings at the 21bit code points level.  These additions support\nbuilding global apps in JavaScript.</p>\n<div><pre><code data-lang=\"js\"><span>// same as ES5.1</span>\n<span>\"𠮷\"</span><span>.</span><span>length</span> <span>==</span> <span>2</span>\n\n<span>// new RegExp behaviour, opt-in ‘u’</span>\n<span>\"𠮷\"</span><span>.</span><span>match</span><span>(</span><span>/./u)[0].length == 2</span>\n\n<span>// new form</span>\n<span>\"\\u{20BB7}\"</span><span>==</span><span>\"𠮷\"</span> <span>==</span> <span>\"\\uD842\\uDFB7\"</span>\n\n<span>// new String ops</span>\n<span>\"𠮷\"</span><span>.</span><span>codePointAt</span><span>(</span><span>0</span><span>)</span> <span>==</span> <span>0x20BB7</span>\n\n<span>// for-of iterates code points</span>\n<span>for</span><span>(</span><span>var</span> <span>c</span> <span>of</span> <span>\"𠮷\"</span><span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>c</span><span>);</span>\n<span>}</span>\n</code></pre></div>\n<h3>Modules</h3>\n\n<p>Language-level support for modules for component definition. Codifies patterns\nfrom popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour\ndefined by a host-defined default loader. Implicitly async model – no code\nexecutes until requested modules are available and processed.</p>\n<div><pre><code data-lang=\"js\"><span>// lib/math.js</span>\n<span>export</span> <span>function</span> <span>sum</span><span>(</span><span>x</span><span>,</span> <span>y</span><span>)</span> <span>{</span>\n  <span>return</span> <span>x</span> <span>+</span> <span>y</span><span>;</span>\n<span>}</span>\n<span>export</span> <span>var</span> <span>pi</span> <span>=</span> <span>3.141593</span><span>;</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>// app.js</span>\n<span>import</span> <span>*</span> <span>as</span> <span>math</span> <span>from</span> <span>\"lib/math\"</span><span>;</span>\n<span>alert</span><span>(</span><span>\"2π = \"</span> <span>+</span> <span>math</span><span>.</span><span>sum</span><span>(</span><span>math</span><span>.</span><span>pi</span><span>,</span> <span>math</span><span>.</span><span>pi</span><span>));</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>// otherApp.js</span>\n<span>import</span> <span>{</span><span>sum</span><span>,</span> <span>pi</span><span>}</span> <span>from</span> <span>\"lib/math\"</span><span>;</span>\n<span>alert</span><span>(</span><span>\"2π = \"</span> <span>+</span> <span>sum</span><span>(</span><span>pi</span><span>,</span> <span>pi</span><span>));</span>\n</code></pre></div>\n<p>Some additional features include <code>export default</code> and <code>export *</code>:</p>\n<div><pre><code data-lang=\"js\"><span>// lib/mathplusplus.js</span>\n<span>export</span> <span>*</span> <span>from</span> <span>\"lib/math\"</span><span>;</span>\n<span>export</span> <span>var</span> <span>e</span> <span>=</span> <span>2.71828182846</span><span>;</span>\n<span>export</span> <span>default</span> <span>function</span><span>(</span><span>x</span><span>)</span> <span>{</span>\n    <span>return</span> <span>Math</span><span>.</span><span>exp</span><span>(</span><span>x</span><span>);</span>\n<span>}</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>// app.js</span>\n<span>import</span> <span>exp</span><span>,</span> <span>{</span><span>pi</span><span>,</span> <span>e</span><span>}</span> <span>from</span> <span>\"lib/mathplusplus\"</span><span>;</span>\n<span>alert</span><span>(</span><span>\"2π = \"</span> <span>+</span> <span>exp</span><span>(</span><span>pi</span><span>,</span> <span>e</span><span>));</span>\n</code></pre></div>\n<blockquote>\n  <h4>Module Formatters</h4>\n  <p>\n    babel can transpile ES6 Modules to several different formats including\n    Common.js, AMD, System, and UMD. You can even create your own. For more\n    details see the <a href=\"https://babeljs.io/docs/usage/modules\">modules docs</a>.\n  </p>\n</blockquote>\n\n<h3>Module Loaders</h3>\n\n<p>Module loaders support:\n- Dynamic loading\n- State isolation\n- Global namespace isolation\n- Compilation hooks\n- Nested virtualization</p>\n\n<p>The default module loader can be configured, and new loaders can be constructed\nto evaluated and load code in isolated or constrained contexts.</p>\n<div><pre><code data-lang=\"js\"><span>// Dynamic loading – ‘System’ is default loader</span>\n<span>System</span><span>.</span><span>import</span><span>(</span><span>\"lib/math\"</span><span>).</span><span>then</span><span>(</span><span>function</span><span>(</span><span>m</span><span>)</span> <span>{</span>\n  <span>alert</span><span>(</span><span>\"2π = \"</span> <span>+</span> <span>m</span><span>.</span><span>sum</span><span>(</span><span>m</span><span>.</span><span>pi</span><span>,</span> <span>m</span><span>.</span><span>pi</span><span>));</span>\n<span>});</span>\n\n<span>// Create execution sandboxes – new Loaders</span>\n<span>var</span> <span>loader</span> <span>=</span> <span>new</span> <span>Loader</span><span>({</span>\n  <span>global</span><span>:</span> <span>fixup</span><span>(</span><span>window</span><span>)</span> <span>// replace ‘console.log’</span>\n<span>});</span>\n<span>loader</span><span>.</span><span>eval</span><span>(</span><span>\"console.log(\\\"hello world!\\\");\"</span><span>);</span>\n\n<span>// Directly manipulate module cache</span>\n<span>System</span><span>.</span><span>get</span><span>(</span><span>\"jquery\"</span><span>);</span>\n<span>System</span><span>.</span><span>set</span><span>(</span><span>\"jquery\"</span><span>,</span> <span>Module</span><span>({</span><span>$</span><span>:</span> <span>$</span><span>}));</span> <span>// WARNING: not yet finalized</span>\n</code></pre></div>\n<blockquote>\n  <h4>Additional polyfill needed</h4>\n  <p>\n    Since babel defaults to using common.js modules, it does not include the\n    polyfill for the module loader api. Get it\n    <a href=\"https://github.com/ModuleLoader/es6-module-loader\">here</a>.\n  </p>\n</blockquote>\n\n<blockquote>\n  <h4>Using Module Loader</h4>\n  <p>\n    In order to use this, you'll need to tell babel to use the\n    <code>system</code> module formatter. Also be sure to check out\n    <a href=\"https://github.com/systemjs/systemjs\">System.js</a>\n  </p>\n</blockquote>\n\n<h3>Map + Set + WeakMap + WeakSet</h3>\n\n<p>Efficient data structures for common algorithms.  WeakMaps provides leak-free\nobject-key’d side tables.</p>\n<div><pre><code data-lang=\"js\"><span>// Sets</span>\n<span>var</span> <span>s</span> <span>=</span> <span>new</span> <span>Set</span><span>();</span>\n<span>s</span><span>.</span><span>add</span><span>(</span><span>\"hello\"</span><span>).</span><span>add</span><span>(</span><span>\"goodbye\"</span><span>).</span><span>add</span><span>(</span><span>\"hello\"</span><span>);</span>\n<span>s</span><span>.</span><span>size</span> <span>===</span> <span>2</span><span>;</span>\n<span>s</span><span>.</span><span>has</span><span>(</span><span>\"hello\"</span><span>)</span> <span>===</span> <span>true</span><span>;</span>\n\n<span>// Maps</span>\n<span>var</span> <span>m</span> <span>=</span> <span>new</span> <span>Map</span><span>();</span>\n<span>m</span><span>.</span><span>set</span><span>(</span><span>\"hello\"</span><span>,</span> <span>42</span><span>);</span>\n<span>m</span><span>.</span><span>set</span><span>(</span><span>s</span><span>,</span> <span>34</span><span>);</span>\n<span>m</span><span>.</span><span>get</span><span>(</span><span>s</span><span>)</span> <span>==</span> <span>34</span><span>;</span>\n\n<span>// Weak Maps</span>\n<span>var</span> <span>wm</span> <span>=</span> <span>new</span> <span>WeakMap</span><span>();</span>\n<span>wm</span><span>.</span><span>set</span><span>(</span><span>s</span><span>,</span> <span>{</span> <span>extra</span><span>:</span> <span>42</span> <span>});</span>\n<span>wm</span><span>.</span><span>size</span> <span>===</span> <span>undefined</span>\n\n<span>// Weak Sets</span>\n<span>var</span> <span>ws</span> <span>=</span> <span>new</span> <span>WeakSet</span><span>();</span>\n<span>ws</span><span>.</span><span>add</span><span>({</span> <span>data</span><span>:</span> <span>42</span> <span>});</span>\n<span>// Because the added object has no other references, it will not be held in the set</span>\n</code></pre></div>\n<blockquote>\n  <h4>Support via polyfill</h4>\n  <p>\n    In order to support WeakMaps you must include the babel Polyfill.\n  </p>\n</blockquote>\n\n<h3>Proxies</h3>\n\n<p>Proxies enable creation of objects with the full range of behaviors available to\nhost objects.  Can be used for interception, object virtualization,\nlogging/profiling, etc.</p>\n<div><pre><code data-lang=\"js\"><span>// Proxying a normal object</span>\n<span>var</span> <span>target</span> <span>=</span> <span>{};</span>\u000b\n<span>var</span> <span>handler</span> <span>=</span> <span>{</span>\u000b\n  <span>get</span><span>:</span> <span>function</span> <span>(</span><span>receiver</span><span>,</span> <span>name</span><span>)</span> <span>{</span>\u000b\n    <span>return</span> <span>`</span><span>Hello</span><span>,</span> <span>$</span><span>{</span><span>name</span><span>}</span><span>!</span><span>`</span><span>;</span>\n  <span>}</span>\u000b\n<span>};</span>\u000b\u000b\n\n<span>var</span> <span>p</span> <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>target</span><span>,</span> <span>handler</span><span>);</span>\u000b\n<span>p</span><span>.</span><span>world</span> <span>===</span> <span>\"Hello, world!\"</span><span>;</span>\n</code></pre></div><div><pre><code data-lang=\"js\"><span>// Proxying a function object</span>\n<span>var</span> <span>target</span> <span>=</span> <span>function</span> <span>()</span> <span>{</span> <span>return</span> <span>\"I am the target\"</span><span>;</span> <span>};</span>\u000b\n<span>var</span> <span>handler</span> <span>=</span> <span>{</span>\n  <span>apply</span><span>:</span> <span>function</span> <span>(</span><span>receiver</span><span>,</span> <span>...</span><span>args</span><span>)</span> <span>{</span>\n    <span>return</span> <span>\"I am the proxy\"</span><span>;</span>\n  <span>}</span>\u000b\n<span>};</span>\u000b\u000b\n\n<span>var</span> <span>p</span> <span>=</span> <span>new</span> <span>Proxy</span><span>(</span><span>target</span><span>,</span> <span>handler</span><span>);</span>\n<span>p</span><span>()</span> <span>===</span> <span>\"I am the proxy\"</span><span>;</span>\n</code></pre></div>\n<p>There are traps available for all of the runtime-level meta-operations:</p>\n<div><pre><code data-lang=\"js\"><span>var</span> <span>handler</span> <span>=</span>\n<span>{</span>\n  <span>get</span><span>:</span><span>...,</span>\n  <span>set</span><span>:</span><span>...,</span>\n  <span>has</span><span>:</span><span>...,</span>\n  <span>deleteProperty</span><span>:</span><span>...,</span>\n  <span>apply</span><span>:</span><span>...,</span>\n  <span>construct</span><span>:</span><span>...,</span>\n  <span>getOwnPropertyDescriptor</span><span>:</span><span>...,</span>\n  <span>defineProperty</span><span>:</span><span>...,</span>\n  <span>getPrototypeOf</span><span>:</span><span>...,</span>\n  <span>setPrototypeOf</span><span>:</span><span>...,</span>\n  <span>enumerate</span><span>:</span><span>...,</span>\n  <span>ownKeys</span><span>:</span><span>...,</span>\n  <span>preventExtensions</span><span>:</span><span>...,</span>\n  <span>isExtensible</span><span>:</span><span>...</span>\n<span>}</span>\n</code></pre></div>\n<blockquote>\n  <h4>Unsupported feature</h4>\n  <p>\n    Due to the limitations of ES5, Proxies cannot be transpiled or polyfilled.\n    See support from various\n    <a href=\"http://kangax.github.io/compat-table/es6/#Proxy\">JavaScript\n    engines</a>.\n  </p>\n</blockquote>\n\n<h3>Symbols</h3>\n\n<p>Symbols enable access control for object state. Symbols allow properties to be\nkeyed by either <code>string</code> (as in ES5) or <code>symbol</code>. Symbols are a new primitive\ntype. Optional <code>name</code> parameter used in debugging - but is not part of identity.\nSymbols are unique (like gensym), but not private since they are exposed via\nreflection features like <code>Object.getOwnPropertySymbols</code>.</p>\n<div><pre><code data-lang=\"js\"><span>(</span><span>function</span><span>()</span> <span>{</span>\n\n  <span>// module scoped symbol</span>\n  <span>var</span> <span>key</span> <span>=</span> <span>Symbol</span><span>(</span><span>\"key\"</span><span>);</span>\n\n  <span>function</span> <span>MyClass</span><span>(</span><span>privateData</span><span>)</span> <span>{</span>\n    <span>this</span><span>[</span><span>key</span><span>]</span> <span>=</span> <span>privateData</span><span>;</span>\n  <span>}</span>\n\n  <span>MyClass</span><span>.</span><span>prototype</span> <span>=</span> <span>{</span>\n    <span>doStuff</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n      <span>...</span> <span>this</span><span>[</span><span>key</span><span>]</span> <span>...</span>\n    <span>}</span>\n  <span>};</span>\n\n<span>})();</span>\n\n<span>var</span> <span>c</span> <span>=</span> <span>new</span> <span>MyClass</span><span>(</span><span>\"hello\"</span><span>)</span>\n<span>c</span><span>[</span><span>\"key\"</span><span>]</span> <span>===</span> <span>undefined</span>\n</code></pre></div>\n<blockquote>\n  <h4>Support via polyfill</h4>\n  <p>\n    In order to support Symbols you must include the babel Polyfill.\n  </p>\n</blockquote>\n\n<h3>Subclassable Built-ins</h3>\n\n<p>In ES6, built-ins like <code>Array</code>, <code>Date</code> and DOM <code>Element</code>s can be subclassed.</p>\n<div><pre><code data-lang=\"js\"><span>// User code of Array subclass</span>\n<span>class</span> <span>MyArray</span> <span>extends</span> <span>Array</span> <span>{</span>\n    <span>constructor</span><span>(...</span><span>args</span><span>)</span> <span>{</span> <span>super</span><span>(...</span><span>args</span><span>);</span> <span>}</span>\n<span>}</span>\n\n<span>var</span> <span>arr</span> <span>=</span> <span>new</span> <span>MyArray</span><span>();</span>\n<span>arr</span><span>[</span><span>1</span><span>]</span> <span>=</span> <span>12</span><span>;</span>\n<span>arr</span><span>.</span><span>length</span> <span>==</span> <span>2</span>\n</code></pre></div>\n<h3>Math + Number + String + Object APIs</h3>\n\n<p>Many new library additions, including core Math libraries, Array conversion\nhelpers, and Object.assign for copying.</p>\n<div><pre><code data-lang=\"js\"><span>Number</span><span>.</span><span>EPSILON</span>\n<span>Number</span><span>.</span><span>isInteger</span><span>(</span><span>Infinity</span><span>)</span> <span>// false</span>\n<span>Number</span><span>.</span><span>isNaN</span><span>(</span><span>\"NaN\"</span><span>)</span> <span>// false</span>\n\n<span>Math</span><span>.</span><span>acosh</span><span>(</span><span>3</span><span>)</span> <span>// 1.762747174039086</span>\n<span>Math</span><span>.</span><span>hypot</span><span>(</span><span>3</span><span>,</span> <span>4</span><span>)</span> <span>// 5</span>\n<span>Math</span><span>.</span><span>imul</span><span>(</span><span>Math</span><span>.</span><span>pow</span><span>(</span><span>2</span><span>,</span> <span>32</span><span>)</span> <span>-</span> <span>1</span><span>,</span> <span>Math</span><span>.</span><span>pow</span><span>(</span><span>2</span><span>,</span> <span>32</span><span>)</span> <span>-</span> <span>2</span><span>)</span> <span>// 2</span>\n\n<span>\"abcde\"</span><span>.</span><span>includes</span><span>(</span><span>\"cd\"</span><span>)</span> <span>// true</span>\n<span>\"abc\"</span><span>.</span><span>repeat</span><span>(</span><span>3</span><span>)</span> <span>// \"abcabcabc\"</span>\n\n<span>Array</span><span>.</span><span>from</span><span>(</span><span>document</span><span>.</span><span>querySelectorAll</span><span>(</span><span>\"*\"</span><span>))</span> <span>// Returns a real Array</span>\n<span>Array</span><span>.</span><span>of</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span> <span>// Similar to new Array(...), but without special one-arg behavior</span>\n<span>[</span><span>0</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>].</span><span>fill</span><span>(</span><span>7</span><span>,</span> <span>1</span><span>)</span> <span>// [0,7,7]</span>\n<span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>].</span><span>findIndex</span><span>(</span><span>x</span> <span>=&gt;</span> <span>x</span> <span>==</span> <span>2</span><span>)</span> <span>// 1</span>\n<span>[</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>].</span><span>entries</span><span>()</span> <span>// iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]</span>\n<span>[</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>].</span><span>keys</span><span>()</span> <span>// iterator 0, 1, 2</span>\n<span>[</span><span>\"a\"</span><span>,</span> <span>\"b\"</span><span>,</span> <span>\"c\"</span><span>].</span><span>values</span><span>()</span> <span>// iterator \"a\", \"b\", \"c\"</span>\n\n<span>Object</span><span>.</span><span>assign</span><span>(</span><span>Point</span><span>,</span> <span>{</span> <span>origin</span><span>:</span> <span>new</span> <span>Point</span><span>(</span><span>0</span><span>,</span><span>0</span><span>)</span> <span>})</span>\n</code></pre></div>\n<blockquote>\n  <h4>Limited support from polyfill</h4>\n  <p>\n    Most of these APIs are supported by the babel Polyfill. However, certain\n    features are omitted for various reasons (ie.\n    <code>String.prototype.normalize</code> needs a lot of additional code to\n    support). You can find more polyfills\n    <a href=\"https://github.com/addyosmani/es6-tools#polyfills\">here</a>.\n  </p>\n</blockquote>\n\n<h3>Binary and Octal Literals</h3>\n\n<p>Two new numeric literal forms are added for binary (<code>b</code>) and octal (<code>o</code>).</p>\n<div><pre><code data-lang=\"js\"><span>0</span><span>b111110111</span> <span>===</span> <span>503</span> <span>// true</span>\n<span>0</span><span>o767</span> <span>===</span> <span>503</span> <span>// true</span>\n</code></pre></div>\n<blockquote>\n  <h4>Only supports literal form</h4>\n  <p>\n    babel is only able to transform <code>0o767</code> and not\n    <code>Number(\"0o767\")</code>.\n  </p>\n</blockquote>\n\n<h3>Promises</h3>\n\n<p>Promises are a library for asynchronous programming. Promises are a first class\nrepresentation of a value that may be made available in the future. Promises are\nused in many existing JavaScript libraries.</p>\n<div><pre><code data-lang=\"js\"><span>function</span> <span>timeout</span><span>(</span><span>duration</span> <span>=</span> <span>0</span><span>)</span> <span>{</span>\n    <span>return</span> <span>new</span> <span>Promise</span><span>((</span><span>resolve</span><span>,</span> <span>reject</span><span>)</span> <span>=&gt;</span> <span>{</span>\n        <span>setTimeout</span><span>(</span><span>resolve</span><span>,</span> <span>duration</span><span>);</span>\n    <span>})</span>\n<span>}</span>\n\n<span>var</span> <span>p</span> <span>=</span> <span>timeout</span><span>(</span><span>1000</span><span>).</span><span>then</span><span>(()</span> <span>=&gt;</span> <span>{</span>\n    <span>return</span> <span>timeout</span><span>(</span><span>2000</span><span>);</span>\n<span>}).</span><span>then</span><span>(()</span> <span>=&gt;</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"hmm\"</span><span>);</span>\n<span>}).</span><span>catch</span><span>(</span><span>err</span> <span>=&gt;</span> <span>{</span>\n    <span>return</span> <span>Promise</span><span>.</span><span>all</span><span>([</span><span>timeout</span><span>(</span><span>100</span><span>),</span> <span>timeout</span><span>(</span><span>200</span><span>)]);</span>\n<span>})</span>\n</code></pre></div>\n<blockquote>\n  <h4>Support via polyfill</h4>\n  <p>\n    In order to support Promises you must include the babel Polyfill.\n  </p>\n</blockquote>\n\n<h3>Reflect API</h3>\n\n<p>Full reflection API exposing the runtime-level meta-operations on objects. This\nis effectively the inverse of the Proxy API, and allows making calls\ncorresponding to the same meta-operations as the proxy traps. Especially useful\nfor implementing proxies.</p>\n<div><pre><code data-lang=\"js\"><span>var</span> <span>O</span> <span>=</span> <span>{</span><span>a</span><span>:</span> <span>1</span><span>};</span>\n<span>Object</span><span>.</span><span>defineProperty</span><span>(</span><span>O</span><span>,</span> <span>'b'</span><span>,</span> <span>{</span><span>value</span><span>:</span> <span>2</span><span>});</span>\n<span>O</span><span>[</span><span>Symbol</span><span>(</span><span>'c'</span><span>)]</span> <span>=</span> <span>3</span><span>;</span>\n\n<span>Reflect</span><span>.</span><span>ownKeys</span><span>(</span><span>O</span><span>);</span> <span>// ['a', 'b', Symbol(c)]</span>\n\n<span>function</span> <span>C</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>){</span>\n  <span>this</span><span>.</span><span>c</span> <span>=</span> <span>a</span> <span>+</span> <span>b</span><span>;</span>\n<span>}</span>\n<span>var</span> <span>instance</span> <span>=</span> <span>Reflect</span><span>.</span><span>construct</span><span>(</span><span>C</span><span>,</span> <span>[</span><span>20</span><span>,</span> <span>22</span><span>]);</span>\n<span>instance</span><span>.</span><span>c</span><span>;</span> <span>// 42</span>\n</code></pre></div>\n<h3>Tail Calls</h3>\n\n<p>Calls in tail-position are guaranteed to not grow the stack unboundedly. Makes\nrecursive algorithms safe in the face of unbounded inputs.</p>\n<div><pre><code data-lang=\"js\"><span>function</span> <span>factorial</span><span>(</span><span>n</span><span>,</span> <span>acc</span> <span>=</span> <span>1</span><span>)</span> <span>{</span>\n    <span>\"use strict\"</span><span>;</span>\n    <span>if</span> <span>(</span><span>n</span> <span>&lt;=</span> <span>1</span><span>)</span> <span>return</span> <span>acc</span><span>;</span>\n    <span>return</span> <span>factorial</span><span>(</span><span>n</span> <span>-</span> <span>1</span><span>,</span> <span>n</span> <span>*</span> <span>acc</span><span>);</span>\n<span>}</span>\n\n<span>// Stack overflow in most implementations today,</span>\n<span>// but safe on arbitrary inputs in eS6</span>\n<span>factorial</span><span>(</span><span>100000</span><span>)</span>\n</code></pre></div>\n<blockquote>\n  <h4>Partial support</h4>\n  <p>\n    Currently only self referencing tail recursion is supported due to the\n    complexity of supporting tail calls globally. &nbsp;&nbsp;</p></blockquote>","tags":"javascript,ECMAScript 6","isStarred":"false","note":"","dateCreated":"Tue Feb 24 2015 20:51:57 GMT+0530 (India Standard Time)","dateModified":"Tue Feb 24 2015 20:51:57 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"pGn1bDZJNSzrQeco"}
{"id":"0","category":"scss","categoryId":"57","title":"Understanding placeholder selectors","refSite":"http://thesassway.com/intermediate/understanding-placeholder-selectors","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Sass provides a number of different ways to share code between CSS rules. You can use <a href=\"http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code\">mixins</a> to insert new CSS properties and/or rules into your CSS and you can use <code>@extend</code> to share CSS properties between selectors. Sass 3.2 introduces a new concept called \"placeholders\" to make <code>@extend</code> generate more efficient output.</p>\n\n<p>But before we get into that, let's talk about how extend works…</p>\n\n<h2>How extend works</h2>\n\n<p>The <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend\"><code>@extend</code></a> directive allows us to easily share styles between selectors. This is best illustrated with an example:</p>\n\n<div>\n<pre><span>.icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2</span><span>s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5</span><span>em</span><span>;</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>@extend</span> <span>.icon</span><span>;</span>\n  <span>/*</span> <span>error</span> <span>specific</span> <span>styles</span><span>...</span> <span>*/</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>@extend</span> <span>.icon</span><span>;</span>\n  <span>/*</span> <span>info</span> <span>specific</span> <span>styles</span><span>...</span> <span>*/</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Which will generate the following output:</p>\n\n<div>\n<pre><span>.icon</span><span>,</span> <span>.error-icon</span><span>,</span> <span>.info-icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5em</span><span>;</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>/* error specific styles... */</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>/* info specific styles... */</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>What's going on here? The <code>@extend</code> directive allows us to declare that <code>.error-icon</code> and <code>.info-icon</code> should inherit the properties of the <code>.icon</code> selector. It does this by modifying the <code>.icon</code> selector to also include <code>.error-icon</code> and <code>.info-icon</code>. Pretty nifty, right?</p>\n\n<p>Now here comes the interesting part. What if we never use the <code>icon</code>\n class in our markup and its only purpose is to be there to extend? The \nresulting CSS will be slightly larger than it really needs to be because\n we'll have a style that will never be used. We can get around this with\n placeholder selectors.</p>\n\n<h2>Enter placeholder selectors</h2>\n\n<p>Placeholder selectors were introduced to solve this exact problem. \nThey are very similar to class selectors, but instead of using a period (<code>.</code>) at the start, the percent character (<code>%</code>) is used. Placeholder selectors have the additional property that they <em>will not</em> show up in the generated CSS, only the selectors that extend them will be included in the output.</p>\n\n<p>Going back to our initial example, if our icon styles are defined like so:</p>\n\n<div>\n<pre><span>%</span><span>icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2</span><span>s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5</span><span>em</span><span>;</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n  <span>/*</span> <span>error</span> <span>specific</span> <span>styles</span><span>...</span> <span>*/</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n  <span>/*</span> <span>info</span> <span>specific</span> <span>styles</span><span>...</span> <span>*/</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>The following CSS will be generated:</p>\n\n<div>\n<pre><span>.error-icon</span><span>,</span> <span>.info-icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5em</span><span>;</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>/* error specific styles... */</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>/* info specific styles... */</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Notice how <code>.icon</code> is no longer present in the compiled CSS!</p>\n\n<h2>Extend vs. include</h2>\n\n<p>At first glance it may look like placeholder selectors are the same as parameterless mixins. While this is almost true from a <em>functional</em> perspective (it will achieve nearly identical results in the browser), the CSS that is generated differs drastically.</p>\n\n<p>Consider the implementation of the icon example using mixins:</p>\n\n<div>\n<pre><span>@mixin</span><span> icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2</span><span>s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5</span><span>em</span><span>;</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>@include</span><span> icon</span><span>;</span>\n  <span>/* error specific styles... */</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>@include</span><span> icon</span><span>;</span>\n  <span>/* info specific styles... */</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>This will generate the following CSS:</p>\n\n<div>\n<pre><span>.error-icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5em</span><span>;</span>\n  <span>/* error specific styles... */</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5em</span><span>;</span>\n  <span>/* info specific styles... */</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>From a maintenance perspective this is just as good as the <code>@extend</code>\n example, but if you are concerned about the CSS output, this is much \nworse because the properties are duplicated between rules instead of \nsharing the same selector.</p>\n\n<h2>Limitations</h2>\n\n<p>One limitation with <code>@extend</code> that applies to placeholder selectors as well is that it doesn't work between rules in different <code>@media</code> blocks.</p>\n\n<p>Consider the following:</p>\n\n<div>\n<pre><span>%</span><span>icon</span> <span>{</span>\n  <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2</span><span>s</span><span>;</span>\n  <span>margin</span><span>:</span> <span>0</span> <span>.5</span><span>em</span><span>;</span>\n<span>}</span>\n\n<span>@media</span> <span>screen</span> <span>{</span>\n  <span>.error-icon</span> <span>{</span>\n    <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n  <span>}</span>\n  \n  <span>.info-icon</span> <span>{</span>\n    <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>This will actually result in a compile error:</p>\n\n<pre>You may not @extend an outer selector from within @media.\nYou may only @extend selectors within the same directive.\nFrom \"@extend %icon\" on line 8 of icons.scss\n</pre>\n\n<p>When I first ran into this limitation I thought it was a bug. \nHowever, there is a very good reason for why it works this way in Sass.</p>\n\n<p>Since <code>@extend</code> works by adding a selector to another \nselector without duplicating any of the properties it's actually \nimpossible to join selectors in different <code>@media</code> blocks.</p>\n\n<p>It does work the other way though. Any media queries surrounding the \nplaceholder selector will be applied to the selectors extending it \nproviding they are not in an <code>@media</code> block:</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>{</span>\n  <span>%</span><span>icon</span> <span>{</span>\n    <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2</span><span>s</span><span>;</span>\n    <span>margin</span><span>:</span> <span>0</span> <span>.5</span><span>em</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>.error-icon</span> <span>{</span>\n  <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n<span>}</span>\n\n<span>.info-icon</span> <span>{</span>\n  <span>@extend</span> <span>%</span><span>icon</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>This will compile to:</p>\n\n<div>\n<pre><span>@media</span> <span>screen</span> <span>{</span>\n  <span>.error-icon</span><span>,</span> <span>.info-icon</span> <span>{</span>\n    <span>transition</span><span>:</span> <span>background-color</span> <span>ease</span> <span>.2s</span><span>;</span>\n    <span>margin</span><span>:</span> <span>0</span> <span>.5em</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Final words</h2>\n\n<p>The <code>@extend</code> and <code>@include</code> directives are \nboth very powerful features with some subtle differences. When \napproaching a style reuse problem you may want to ask yourself if the \ngenerated CSS is important to you. In some cases <code>@extend</code> can greatly simplify the output and significantly improve the performance of your CSS.</p>\n\n<p>Of course, nothing is stopping you from <a target=\"_blank\" href=\"http://sassmeister.com/gist/8893261\">mixing and matching</a> <code>@extend</code> and <code>@include</code> if the situation calls for it. However, I generally try to err on the side of easy-to-understand and maintain source code.</p>","tags":"css,SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:03:46 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:03:46 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"peLIbHl8vFOTU1vR"}
{"id":"qQxBSMtWWadQLpxP","category":"","categoryId":"","title":"ffadfaf","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"tt1,tt2,tt3,tt4,tt5","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 22:06:46 GMT+0530 (India Standard Time)","dateModified":{"$$date":1423327631638},"mode":"add","comments":[],"images":[],"_id":"qQxBSMtWWadQLpxP"}
{"id":"0","category":"express.js","categoryId":"62","title":"Serving static files in Express","refSite":"http://expressjs.com/starter/static-files.html","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Serving files, such as images, CSS, JavaScript and other static files\n is accomplished with the help of a built-in middleware in Express - <code>express.static</code>.</p>\n<p>Pass the name of the directory, which is to be marked as the location of static assets, to the <code>express.static</code>\n middleware to start serving the files directly. For example, if you \nkeep your images, CSS, and JavaScript files in a directory named <code>public</code>, you can do this:</p>\n<pre><code>app<span>.</span><span>use<span>(</span></span>express<span>.</span><span>static</span><span>(</span><span>'public'</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<p>Now, you will be able to load the files under the <code>public</code> directory:</p>\n<pre><code>http://localhost:3000/images/kitten.jpg\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/js/app.js\nhttp://localhost:3000/images/bg.png\nhttp://localhost:3000/hello.html\n</code></pre>\n<div>\nThe files are looked up relative to the static directory, therefore, the name of the static directory is not a part of the URL.\n</div>\n<p>If you want to use multiple directories as static assets directories, you can call the <code>express.static</code> middleware multiple times:</p>\n<pre><code>app<span>.</span><span>use<span>(</span></span>express<span>.</span><span>static</span><span>(</span><span>'public'</span><span>)</span><span>)</span><span>;</span>\napp<span>.</span><span>use<span>(</span></span>express<span>.</span><span>static</span><span>(</span><span>'files'</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<p>The files will be looked up in the order the static directories were set using the <code>express.static</code> middleware.</p>\n<p>If you want to create a “virtual” (since the path does not actually \nexists in the file system) path prefix for the files served by <code>express.static</code>, you can <a href=\"http://expressjs.com/4x/api.html#app.use\">specify a mount path</a> for the static directory, as shown below:</p>\n<pre><code>app<span>.</span><span>use<span>(</span></span><span>'/static'</span><span>,</span> express<span>.</span><span>static</span><span>(</span><span>'public'</span><span>)</span><span>)</span><span>;</span>\n</code></pre>\n<p>Now, you will be able to load the files under the <code>public</code> directory, from the path prefix “/static”.</p>\n<pre><code>http://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css\nhttp://localhost:3000/static/js/app.js\nhttp://localhost:3000/static/images/bg.png\nhttp://localhost:3000/static/hello.html\n</code></pre>","tags":"javascript,Express.js","isStarred":"false","note":"","dateCreated":"Sat Mar 21 2015 19:11:53 GMT+0530 (India Standard Time)","dateModified":"Sat Mar 21 2015 19:11:53 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"qabcWngwgHGfxAB7"}
{"id":"rYhCYASMeVX5E0ZY","category":"jquery","categoryId":"50","title":"Promise & Deferred Objects in JavaScript Pt.2: in Practice","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h1>Introduction</h1>\n\n<p>In <a href=\"http://blog.mediumequalsmessage.com/promise-deferred-objects-in-javascript-pt1-theory-and-semantics\" title=\"Promise and Deferred Objects in JavaScript Pt.1: Semantics and Theory\" rel=\"nofollow\">part 1 of this post</a>,\n I spent a lot of time looking at the theory of promises and deferreds: \nwhat promises are and how they behave. Now it’s time to actually explore\n some ways to use promises and deferreds in JavaScript and dive into \nsome best practices. I’ll start with some basic uses and examples of \npromises and then will dive into a number of specifics pertaining to \nusing promises in jQuery. While the exact specifics of the API may vary \nfrom your chosen library, there is enough overlap in concepts to \nillustrate the use of promises.</p>\n\n<p><strong>Note</strong>: The code samples will use jQuery in spite of \njQuery’s deviations from the Promise/A proposal, which is particularly \nnoticeable in the case of error handling and when working with other \npromise libraries. Since part 1 discussed and included links to in-depth\n articles on the topic, I will refrain from saying anything else about \nit in this post. The use of jQuery is still wide-spread and their \nimplementation serves as an introduction for many to the use of promises\n both of which lead me to believe that it is valuable to have an \nunderstanding of working with promises in jQuery. </p>\n\n<h1>Sequencing Patterns</h1>\n\n<p>A deferred is an object representing work that is not yet done and a \npromise is an object representing a value that is not yet known. In \nother words, promises / deferreds allow us to represent ‘simple’ tasks \nand can be easily combined to represent complex tasks and their flows, \nallowing for fine-grained control over sequencing. This means we can \nwrite asynchronous JavaScript parallel to how we write synchronous code.\n Additionally, promises make it relatively simple to abstract small \npieces of functionality shared across multiple asynchronous tasks — \nconsider as an example loading animations, progress animations etc.</p>\n\n<p>Let’s begin with a global view of three common sequencing patterns \nthat promises make possible: stacked, parallel and sequential.</p>\n\n<ul>\n<li>\n<p><strong>Stacked</strong>: bind multiple handlers anywhere in the application to the same promise event.  </p>\n\n<pre><code><span>  </span><span>var</span><span> request </span><span>=</span><span> $</span><span>.</span><span>ajax</span><span>(</span><span>url</span><span>);</span><span>\n\n  request</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n      console</span><span>.</span><span>log</span><span>(</span><span>'Request completed'</span><span>);</span><span>\n  </span><span>});</span><span>\n\n  </span><span>// Somewhere else in the application</span><span>\n  request</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>(</span><span>retrievedData</span><span>)</span><span> </span><span>{</span><span>\n      $</span><span>(</span><span>'#contentPlaceholder'</span><span>).</span><span>html</span><span>(</span><span>retrievedData</span><span>);</span><span>\n  </span><span>});</span></code></pre>\n</li>\n<li>\n<p><strong>Parallel tasks</strong>: ask multiple promises to return a promise which alerts of their mutual completion.</p>\n\n<pre><code><span>  $</span><span>.</span><span>when</span><span>(</span><span>taskOne</span><span>,</span><span> taskTwo</span><span>).</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n      console</span><span>.</span><span>log</span><span>(</span><span>'taskOne and taskTwo are finished'</span><span>);</span><span>\n  </span><span>});</span></code></pre>\n</li>\n<li>\n<p><strong>Sequential tasks</strong>: execute tasks in sequential order.</p>\n\n<pre><code><span>var</span><span> step1</span><span>,</span><span> step2</span><span>,</span><span> url</span><span>;</span><span>\n\nurl </span><span>=</span><span> </span><span>'http://fiddle.jshell.net'</span><span>;</span><span>\n\n  step1 </span><span>=</span><span> $</span><span>.</span><span>ajax</span><span>(</span><span>url</span><span>);</span><span>\n\n  step2 </span><span>=</span><span> step1</span><span>.</span><span>then</span><span>(</span><span>\n    </span><span>function</span><span> </span><span>(</span><span>data</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>var</span><span> </span><span>def</span><span> </span><span>=</span><span> </span><span>new</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\n        setTimeout</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'Request completed'</span><span>);</span><span>\n            </span><span>def</span><span>.</span><span>resolve</span><span>();</span><span>\n        </span><span>},</span><span>2000</span><span>);</span><span>\n\n      </span><span>return</span><span> </span><span>def</span><span>.</span><span>promise</span><span>();</span><span>\n\n  </span><span>},</span><span>\n    </span><span>function</span><span> </span><span>(</span><span>err</span><span>)</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'Step1 failed: Ajax request'</span><span>);</span><span>\n    </span><span>}</span><span>\n  </span><span>);</span><span>\n  step2</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n      console</span><span>.</span><span>log</span><span>(</span><span>'Sequence completed'</span><span>)</span><span>\n      setTimeout</span><span>(</span><span>\"console.log('end')\"</span><span>,</span><span>1000</span><span>);</span><span>\n  </span><span>});</span></code></pre>\n</li>\n</ul>\n\n<p>These patterns can be combined or used separately building up complex tasks and workflows.</p>\n\n<h1>Common Use Cases</h1>\n\n<p>Many examples of promise use cases pertain to Ajax requests and UI \nanimations. In fact jQuery even returns promises by default from Ajax \nrequests. This makes sense given that promises are ideal for \nasynchronous tasks whose completion needs to be handled in a unique way.\n However, that doesn’t mean that the use of promises should be limited \nto these use case. In fact, promises tend to be a tool worth considering\n anytime you might otherwise reach for a callback. That said, let’s have\n a look at some ways we can use promises.</p>\n\n<ul>\n<li>Ajax</li>\n</ul>\n\n<p>Examples of using promises with Ajax requests can be found throughout this post, so I will skip an example here.</p>\n\n<ul>\n<li>Timing</li>\n</ul>\n\n<p>We can create a promise based timeout function.</p>\n\n<pre><code><span>  </span><span>function</span><span> wait</span><span>(</span><span>ms</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>var</span><span> deferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n      setTimeout</span><span>(</span><span>deferred</span><span>.</span><span>resolve</span><span>,</span><span> ms</span><span>);</span><span>\n\n     </span><span>// We just need to return the promise not the whole deferred.</span><span>\n     </span><span>return</span><span> deferred</span><span>.</span><span>promise</span><span>();</span><span>\n  </span><span>}</span><span>\n\n  </span><span>// Use it</span><span>\n  wait</span><span>(</span><span>1500</span><span>).</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n      </span><span>// Do something brilliant here!</span><span>\n  </span><span>});</span></code></pre>\n\n<ul>\n<li>Animation </li>\n</ul>\n\n<p>Obviously the following animation is completely useless, but it \nserves as an example of how promises and animations can be used \ntogether.</p>\n\n<pre><code><span>  </span><span>var</span><span> fadeIn </span><span>=</span><span> </span><span>function</span><span> </span><span>(</span><span>el</span><span>)</span><span> </span><span>{</span><span>\n\n      </span><span>var</span><span> promise </span><span>=</span><span> $</span><span>(</span><span>el</span><span>).</span><span>animate</span><span>({</span><span>\n          opacity</span><span>:</span><span> </span><span>1</span><span>\n      </span><span>},</span><span> </span><span>1500</span><span>);</span><span>\n\n      </span><span>// Dynamically create and return an observable promise object which will be resolved when the animation completes.</span><span>\n     </span><span>return</span><span> promise</span><span>.</span><span>promise</span><span>();</span><span>\n  </span><span>};</span><span>\n\n</span><span>var</span><span> fadeOut </span><span>=</span><span> </span><span>function</span><span>(</span><span>el</span><span>)</span><span> </span><span>{</span><span>\n\n    </span><span>var</span><span> promise </span><span>=</span><span> $</span><span>(</span><span>el</span><span>).</span><span>animate</span><span>({</span><span>\n        opacity</span><span>:</span><span> </span><span>0</span><span>\n    </span><span>},</span><span> </span><span>1500</span><span>);</span><span>\n\n    </span><span>// Dynamically create and return an observable promise object</span><span>\n      </span><span>return</span><span> promise</span><span>.</span><span>promise</span><span>();</span><span>\n</span><span>};</span><span>\n\n</span><span>// With the setup out of the way, we can now do one of the following.</span><span>\n\n</span><span>// Parallel</span><span>\n$</span><span>.</span><span>when</span><span>(</span><span>\n    fadeOut</span><span>(</span><span>'div'</span><span>),</span><span> \n    fadeIn</span><span>(</span><span>'div'</span><span>)</span><span>\n</span><span>).</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'Animation finished'</span><span>);</span><span>\n    $</span><span>(</span><span>'p'</span><span>).</span><span>css</span><span>(</span><span>'color'</span><span>,</span><span> </span><span>'red'</span><span>);</span><span>\n</span><span>});</span><span>\n\n</span><span>// OR</span><span>\n</span><span>// Chained</span><span>\nfadeOut</span><span>(</span><span>'div'</span><span>).</span><span>then</span><span>(</span><span>function</span><span> </span><span>(</span><span>el</span><span>)</span><span> </span><span>{</span><span>\n    fadeIn</span><span>(</span><span>el</span><span>);</span><span> </span><span>// returns a promise</span><span>\n</span><span>}).</span><span>then</span><span>(</span><span>function</span><span> </span><span>(</span><span>el</span><span>)</span><span> </span><span>{</span><span>\n    fadeOut</span><span>(</span><span>el</span><span>);</span><span> </span><span>// returns a promise</span><span>\n</span><span>});</span></code></pre>\n\n<ul>\n<li>Synchronizing parallel tasks with $.when()</li>\n</ul>\n\n<pre><code><span>\n      </span><span>var</span><span> promiseOne</span><span>,</span><span> promiseTwo</span><span>,</span><span> handleSuccess</span><span>,</span><span> handleFailure</span><span>;</span><span>\n      \n        </span><span>// Promises</span><span>\n        promiseOne </span><span>=</span><span> $</span><span>.</span><span>ajax</span><span>({</span><span> url</span><span>:</span><span> </span><span>'../test.html'</span><span> </span><span>});</span><span>\n        promiseTwo </span><span>=</span><span> $</span><span>.</span><span>ajax</span><span>({</span><span> url</span><span>:</span><span> </span><span>'../test.html'</span><span> </span><span>});</span><span>\n          \n          \n        </span><span>// Success callbacks</span><span>\n        </span><span>// .done() will only run if the promise is successfully resolved</span><span>\n        promiseOne</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'PromiseOne Done'</span><span>);</span><span>\n        </span><span>});</span><span>\n        \n        promiseTwo</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'PromiseTwo Done'</span><span>);</span><span>\n        </span><span>});</span><span>\n      \n        </span><span>// $.when() creates a new promise which will be:</span><span>\n        </span><span>// resolved if both promises inside are resolved</span><span>\n        </span><span>// rejected if one of the promises fails</span><span>\n        $</span><span>.</span><span>when</span><span>(</span><span>\n            promiseOne</span><span>,</span><span>\n            promiseTwo\n        </span><span>)</span><span>\n        </span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'promiseOne and promiseTwo are done'</span><span>);</span><span>\n        </span><span>})</span><span>\n        </span><span>.</span><span>fail</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'One of our promises failed'</span><span>);</span><span>\n        </span><span>});</span></code>\n</pre>\n\n<ul>\n<li>Decoupling events and application logic</li>\n</ul>\n\n<p>We can also use events to trigger resolution / failure of promises, \npassing values through at the same time which allows us to decouple \napplication, DOM and event logic ( <em><a href=\"http://jsfiddle.net/cwebbdesign/NEssP/2/\" rel=\"nofollow\">jsfiddle here</a></em> ).</p>\n\n<pre><code><span>var</span><span> </span><span>def</span><span>,</span><span> getData</span><span>,</span><span> updateUI</span><span>,</span><span> resolvePromise</span><span>;</span><span>\n\n</span><span>// The Promise and handler</span><span>\n</span><span>def</span><span> </span><span>=</span><span> </span><span>new</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\nupdateUI </span><span>=</span><span> </span><span>function</span><span> </span><span>(</span><span>data</span><span>)</span><span> </span><span>{</span><span>\n    $</span><span>(</span><span>'p'</span><span>).</span><span>html</span><span>(</span><span>'I got the data!'</span><span>);</span><span>\n    $</span><span>(</span><span>'div'</span><span>).</span><span>html</span><span>(</span><span>data</span><span>);</span><span>\n</span><span>};</span><span>\ngetData </span><span>=</span><span> $</span><span>.</span><span>ajax</span><span>({</span><span>\n          url</span><span>:</span><span> </span><span>'/echo/html/'</span><span>,</span><span> \n          data</span><span>:</span><span> </span><span>{</span><span>\n              html</span><span>:</span><span> </span><span>'testhtml'</span><span>,</span><span> \n              delay</span><span>:</span><span> </span><span>3</span><span>\n          </span><span>},</span><span> \n          type</span><span>:</span><span> </span><span>'post'</span><span>\n    </span><span>})</span><span>\n    </span><span>.</span><span>done</span><span>(</span><span>function</span><span>(</span><span>resp</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>return</span><span> resp</span><span>;</span><span>\n    </span><span>})</span><span>\n    </span><span>.</span><span>fail</span><span>(</span><span>function</span><span> </span><span>(</span><span>error</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>throw</span><span> </span><span>new</span><span> </span><span>Error</span><span>(</span><span>\"Error getting the data\"</span><span>);</span><span>\n    </span><span>});</span><span>\n\n\n</span><span>// Event Handler</span><span>\nresolvePromise </span><span>=</span><span> </span><span>function</span><span> </span><span>(</span><span>ev</span><span>)</span><span> </span><span>{</span><span>\n    ev</span><span>.</span><span>preventDefault</span><span>();</span><span>\n    </span><span>def</span><span>.</span><span>resolve</span><span>(</span><span>ev</span><span>.</span><span>type</span><span>,</span><span> </span><span>this</span><span>);</span><span>\n    </span><span>return</span><span> </span><span>def</span><span>.</span><span>promise</span><span>();</span><span>\n</span><span>};</span><span>\n\n</span><span>// Bind the Event</span><span>\n$</span><span>(</span><span>document</span><span>).</span><span>on</span><span>(</span><span>'click'</span><span>,</span><span> </span><span>'button'</span><span>,</span><span> resolvePromise</span><span>);</span><span>\n\n</span><span>def</span><span>.</span><span>then</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    </span><span>return</span><span> getData</span><span>;</span><span>   \n</span><span>})</span><span>\n</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>data</span><span>)</span><span> </span><span>{</span><span>\n    updateUI</span><span>(</span><span>data</span><span>);</span><span>\n</span><span>})</span><span>\n</span><span>.</span><span>done</span><span>(</span><span>function</span><span>(</span><span>promiseValue</span><span>,</span><span> el</span><span>)</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'The promise was resolved by: '</span><span>,</span><span> promiseValue</span><span>,</span><span> </span><span>' on '</span><span>,</span><span> el</span><span>);</span><span>\n</span><span>});</span><span>\n\n\n</span><span>// Console output: The promise was resolved by: click on &lt;button&gt; &lt;/button&gt;</span></code></pre>\n\n<h1>Gotcha’s: understanding .then() in jQuery</h1>\n\n<p>In order to demonstrate a couple “gotcha’s”, these final examples \nwill walk through part of my learning process when I first started \nplaying with promises.</p>\n\n<p>Let’s assume the following two utility functions for the following examples:</p>\n\n<pre><code><span>// Utility Functions</span><span>\n</span><span>function</span><span> wait</span><span>(</span><span>ms</span><span>)</span><span> </span><span>{</span><span>\n      </span><span>var</span><span> deferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n      setTimeout</span><span>(</span><span>deferred</span><span>.</span><span>resolve</span><span>,</span><span> ms</span><span>);</span><span>\n      </span><span>return</span><span> deferred</span><span>.</span><span>promise</span><span>();</span><span>\n</span><span>}</span><span>\n</span><span>function</span><span> notifyOfProgress</span><span>(</span><span>message</span><span>,</span><span> promise</span><span>)</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>message </span><span>+</span><span> promise</span><span>.</span><span>state</span><span>());</span><span>\n</span><span>}</span></code></pre>\n\n<p>My first attempt at chaining promises together looked something like this:</p>\n\n<pre><code><span>// Naive attempt at working with .then()</span><span>\n\n</span><span>// Create two new deferred objects</span><span>\n</span><span>var</span><span> aManualDeferred </span><span>=</span><span> </span><span>new</span><span> $</span><span>.</span><span>Deferred</span><span>(),</span><span>\n    secondManualDeferred </span><span>=</span><span> aManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'1 started'</span><span>);</span><span>\n\n        wait</span><span>(</span><span>3500</span><span>).</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'1 ended'</span><span>);</span><span>\n        </span><span>});</span><span>\n    </span><span>});</span><span>\n\n</span><span>// After secondManualDeferred is resolved</span><span>\nsecondManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'2 started'</span><span>);</span><span>\n\n    wait</span><span>(</span><span>2500</span><span>).</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'2 ended'</span><span>);</span><span>\n    </span><span>});</span><span>\n</span><span>});</span><span>\n\n</span><span>// Resolve the first promise</span><span>\naManualDeferred</span><span>.</span><span>resolve</span><span>();</span></code></pre>\n\n<p>Upon executing this, the console output is what I would have expected had I not used promises.</p>\n\n<pre><code><span>1</span><span> started\n</span><span>2</span><span> started\n</span><span>2</span><span> ended\n</span><span>1</span><span> ended</span></code></pre>\n\n<p>The jQuery API says that .then() is chainable and returns a new \npromise, so my expectation was that whatever I wrapped in .then() and \nchained together would occur sequentially and wait for any tasks to \nfinish before moving to the next. Clearly that’s not what happened. Why \nnot?</p>\n\n<h3>How does .then() actually work?</h3>\n\n<p>Looking in the jQuery source code, we find that:</p>\n\n<ul>\n<li>.then() always returns a new promise</li>\n<li>.then() must be passed a function</li>\n</ul>\n\n<p>If .then() is not passed a function:</p>\n\n<ul>\n<li>the new promise will have the same behaviour as the original promise ( <em>which means it is immediately resolved/rejected</em> ),</li>\n<li>the input inside .then() will be executed but is ignored by .then()</li>\n</ul>\n\n<p>if .then() is passed a function which returns a promise object:</p>\n\n<ul>\n<li>the new promise will have the same behaviour as the returned promise</li>\n</ul>\n\n<pre><code><span>\n    </span><span>var</span><span> deferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>(),</span><span>\n        secondDeferred </span><span>=</span><span> deferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n          </span><span>return</span><span> $</span><span>.</span><span>Deferred</span><span>(</span><span>function</span><span> </span><span>(</span><span>newDeferred</span><span>)</span><span> </span><span>{</span><span>\n            setTimeout</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>\n              console</span><span>.</span><span>log</span><span>(</span><span>'timeout complete'</span><span>);</span><span>\n            newDeferred</span><span>.</span><span>resolve</span><span>();</span><span>\n          </span><span>},</span><span> </span><span>3000</span><span>);</span><span>\n        </span><span>});</span><span>\n      </span><span>}),</span><span>\n      thirdDeferred </span><span>=</span><span> secondDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n          console</span><span>.</span><span>log</span><span>(</span><span>'thirdDeferred'</span><span>);</span><span>\n      </span><span>});</span><span>\n\n    secondDeferred</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'secondDeferred.done'</span><span>);</span><span>\n    </span><span>});</span><span>\n    deferred</span><span>.</span><span>resolve</span><span>();</span></code>\n</pre>\n\n<ul>\n<li>if .then() is passed a function which returns a value, the value becomes the value of the new object</li>\n</ul>\n\n<pre><code><span>\n    </span><span>var</span><span> deferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>(),</span><span>\n        filteredValue </span><span>=</span><span> deferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>(</span><span>value</span><span>)</span><span> </span><span>{</span><span>\n          </span><span>return</span><span> value </span><span>*</span><span> value</span><span>;</span><span>\n        </span><span>});</span><span>\n\n    filteredValue</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>(</span><span>value</span><span>)</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>value</span><span>);</span><span>\n    </span><span>});</span><span>\n\n    deferred</span><span>.</span><span>resolve</span><span>(</span><span>2</span><span>);</span><span> </span><span>// 4</span></code>\n</pre>\n\n<p>You probably already see ( <em>if you didn’t see it right away</em> )\n why my version didn’t work.\nI didn’t explicitly return a promise from .then() so the new promise \ncreated by .then() had the same values as the promise it was chained to.</p>\n\n<h3>Avoiding the descent into callback hell</h3>\n\n<p>We know we need to pass .then() a function for it to be able to do \nit’s job and we know we need to return a promise from .then(). So we \ncould do the following:</p>\n\n<pre><code><span>// Anti-pattern - Return to callback hell</span><span>\n\n</span><span>var</span><span> aManualDeferred </span><span>=</span><span> </span><span>new</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\naManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'1 started'</span><span>);</span><span>\n\n    </span><span>return</span><span> wait</span><span>(</span><span>3500</span><span>).</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'1 ended'</span><span>);</span><span>\n    </span><span>}).</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'2 started'</span><span>);</span><span>\n\n        </span><span>return</span><span> wait</span><span>(</span><span>2500</span><span>).</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n            console</span><span>.</span><span>log</span><span>(</span><span>'2 ended'</span><span>);</span><span>\n        </span><span>});</span><span>\n    </span><span>});</span><span>\n</span><span>});</span><span>\n\n</span><span>// Resolve the first promise</span><span>\naManualDeferred</span><span>.</span><span>resolve</span><span>();</span></code></pre>\n\n<p>This works. Unfortunately, it’s starting the decent back into \ncallback hell which is one of the things that promises are supposed to \nhelp us avoid. Luckily, there are a number of ways to handle this \nwithout decending into the territory of deeply nested functions. How we \nchoose to solve it, is of course dependent on our particular situation.</p>\n\n<h3>Avoiding extensive use of unnamed promises</h3>\n\n<p>We could for example do the following:</p>\n\n<pre><code><span>// A chain</span><span>\n</span><span>// Create new deferred objects</span><span>\n</span><span>var</span><span> aManualDeferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\naManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'1 started'</span><span>);</span><span>\n\n    </span><span>// We need to return this, we return a new promise which is resolved upon completion.</span><span>\n    </span><span>return</span><span> wait</span><span>(</span><span>3500</span><span>);</span><span>\n</span><span>})</span><span>\n\n</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'1 ended'</span><span>);</span><span>\n</span><span>})</span><span>\n\n</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'2 started'</span><span>);</span><span>\n    </span><span>return</span><span> wait</span><span>(</span><span>2500</span><span>);</span><span>\n</span><span>})</span><span>\n\n</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'2 ended'</span><span>);</span><span>\n</span><span>});</span><span>\n\n</span><span>// Resolve the first promise</span><span>\naManualDeferred</span><span>.</span><span>resolve</span><span>();</span></code></pre>\n\n<p>This version admittedly reads very nicely but has the disadvantage of\n only one named promise which doesn’t really give us the fine-grained \ncontrol over each step in the process that is desirable in many \nsituations.</p>\n\n<h3>Unwinding promises and their handlers</h3>\n\n<p>Assuming we want to avoid deeply nested functions and that we should \nname our promises to give us access to each step of the process, here is\n a final version:</p>\n\n<p>&nbsp;</p>\n\n<pre><code><span>var</span><span> aManualDeferred</span><span>,</span><span> secondManualDeferred</span><span>,</span><span> thirdManualDeferred</span><span>;</span><span>\n\n</span><span>// Create two new deferred objects</span><span>\naManualDeferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\nsecondManualDeferred </span><span>=</span><span> aManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'1 started'</span><span>);</span><span>\n\n    </span><span>// We need to return this, we return a new promise which is resolved upon completion.</span><span>\n    </span><span>return</span><span> wait</span><span>(</span><span>3500</span><span>);</span><span>\n</span><span>})</span><span>\n</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'1 ended'</span><span>);</span><span>\n</span><span>});</span><span>\n\nthirdManualDeferred </span><span>=</span><span> secondManualDeferred</span><span>.</span><span>then</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'2 started'</span><span>);</span><span>\n    </span><span>return</span><span> wait</span><span>(</span><span>2500</span><span>);</span><span>\n</span><span>})</span><span>\n</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>'2 ended'</span><span>);</span><span>\n</span><span>});</span><span>\n\n</span><span>// Check current state</span><span>\nthirdManualDeferred</span><span>.</span><span>notify</span><span>(</span><span>\n    notifyOfProgress</span><span>(</span><span>'thirdManualDeferred '</span><span>,</span><span> thirdManualDeferred</span><span>)</span><span>\n</span><span>);</span><span>\n\n</span><span>// Resolve the first promise</span><span>\naManualDeferred</span><span>.</span><span>resolve</span><span>();</span><span>\n\n</span><span>// Console output</span><span>\n</span><span>// aManualDeferred pending</span><span>\n</span><span>// secondManualDeferred pending</span><span>\n</span><span>// 1 started</span><span>\n</span><span>// 1 ended</span><span>\n</span><span>// 2 started</span><span>\n</span><span>// 2 ended</span></code></pre>\n\n<p>The advantage gained by this version is that we now have 3 steps \nwhich we can clearly refer to giving the advantage of being able to ask \neach promise for it’s state to send notifications of progress, or later \nmanage our sequencing as needed without having to re-write the code.</p>\n\n<h1>Context and passing data</h1>\n\n<p>In the Ajax example earlier, we saw that we can pass a value to \n.resolve() and .fail(). If a promise is resolved with a value, it \nreturns that value as itself. </p>\n\n<pre><code><span>var</span><span> passingData </span><span>=</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    </span><span>var</span><span> </span><span>def</span><span> </span><span>=</span><span> </span><span>new</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\n    setTimeout</span><span>(</span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n        </span><span>def</span><span>.</span><span>resolve</span><span>(</span><span>'50'</span><span>);</span><span>\n    </span><span>},</span><span> </span><span>2000</span><span>);</span><span>\n\n   </span><span>return</span><span> </span><span>def</span><span>.</span><span>promise</span><span>();</span><span>               \n</span><span>};</span><span>\n\npassingData</span><span>().</span><span>done</span><span>(</span><span>function</span><span> </span><span>(</span><span>value</span><span>)</span><span> </span><span>{</span><span>\n      console</span><span>.</span><span>log</span><span>(</span><span>value</span><span>);</span><span>\n</span><span>});</span></code></pre>\n\n<p>We can also set 'this’ when we resolve a promise.</p>\n\n<pre><code><span>// Create an object</span><span>\n</span><span>var</span><span> myObject </span><span>=</span><span> </span><span>{</span><span>\n    myMethod</span><span>:</span><span> </span><span>function</span><span> </span><span>(</span><span>myString</span><span>)</span><span> </span><span>{</span><span>\n        console</span><span>.</span><span>log</span><span>(</span><span>'myString was passed from'</span><span>,</span><span> myString</span><span>);</span><span>\n    </span><span>}</span><span>\n</span><span>};</span><span>\n\n</span><span>// Create deferred</span><span>\n</span><span>var</span><span> deferred </span><span>=</span><span> $</span><span>.</span><span>Deferred</span><span>();</span><span>\n\n</span><span>// deferred.done(doneCallbacks [, doneCallbacks ])</span><span>\ndeferred</span><span>.</span><span>done</span><span>(</span><span>function</span><span> </span><span>(</span><span>method</span><span>,</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span><span>\n    console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>);</span><span> </span><span>// myObject</span><span>\n\n    </span><span>// myObject.myMethod(myString);</span><span>\n    </span><span>this</span><span>[</span><span>method</span><span>](</span><span>string</span><span>);</span><span>\n</span><span>});</span><span>\n\ndeferred</span><span>.</span><span>resolve</span><span>.</span><span>call</span><span>(</span><span>myObject</span><span>,</span><span> </span><span>'myMethod'</span><span>,</span><span> </span><span>'the context'</span><span>);</span><span>\n\n</span><span>=&gt;</span><span> myString was passed </span><span>from</span><span> the context\n\n</span><span>// We could also do this:</span><span>\n</span><span>// deferred.resolveWith(myObject, ['myMethod', 'resolveWith']);</span><span>\n</span><span>// but it's somewhat annoying to pass an array of arguments.</span><span>\n\n</span><span>// =&gt; myString was passed from resolveWith</span></code></pre>\n\n<h1>Best Practices</h1>\n\n<p>I’ve attempted to illustrate some best practices along the way but \nfor the sake of clarity, allow me to recap them under one heading. Quite\n frankly most of these amount to applying other best-practices when \nusing promises: in particular: DRY and the Single Responsibility \nPrinciple. In </p>\n\n<ul>\n<li>\n<p>name your promises</p>\n\n<pre><code><span>var</span><span> step2 </span><span>=</span><span> step1</span><span>.</span><span>then</span><span>()</span></code></pre>\n</li>\n<li>\n<p>separate handler functions from the promise logic by calling a named \nfunction from .then() and separate functionality into reusable bits</p>\n\n<pre><code><span>var</span><span> someReusableFunctionality </span><span>=</span><span> </span><span>function</span><span> </span><span>()</span><span> </span><span>{</span><span>\n    </span><span>// do something</span><span>\n</span><span>};</span><span>\n\nstep2</span><span>.</span><span>then</span><span>(</span><span>someReusableFunctionality</span><span>);</span></code></pre>\n</li>\n<li>\n<p>when it’s logical, return a promise instead of a deferred so that nobody else can inadvertantly resolve/reject the promise</p>\n\n<pre><code><span>step2</span><span>.</span><span>then</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    </span><span>// we don't want to give resolution / rejection powers </span><span>\n    </span><span>// to the wrong parties, so we just return the promise.</span><span>\n    </span><span>return</span><span> deferred</span><span>.</span><span>promise</span><span>();</span><span>\n</span><span>});</span></code></pre>\n</li>\n<li><p>don’t descend into nested callback hell or nested promise hell</p></li>\n</ul>\n\n<p>By following these best practices, we can reap the most benefit from \npromises. We can craft decoupled applications with readable code, gain \nfine-gained control over asynchronous event sequencing, handle values \nthat don’t exist yet as if they do and operations that haven’t completed\n yet as if they have.  </p>\n\n<h1>jQuery Reference</h1>\n\n<p>I’d like to wrap-up with an overview of the jQuery API since my code \nexamples have focused on jQuery’s implementation of promises. If you’re \nusing a different implementation of promises, you may want to skip to \nthe end.</p>\n\n<p><strong>Notes</strong> </p>\n\n<ul>\n<li>deferred.always(), deferred.done(), deferred.fail() return the deferred object.</li>\n<li>deferred.then(), deferred.when(), .promise() return a promise.</li>\n<li>$.ajax() and $.get() return promise objects</li>\n<li>instead of using .resolveWith() and .rejectWith(), you can call resolve with the context you want it to inherit</li>\n<li>pass the deferred.promise() around instead of the deferred itself as\n the deferred object itself cannot be resolved or rejected through it.</li>\n</ul>\n\n<p><strong><a href=\"http://api.jquery.com/jQuery.Deferred/\" title=\"jQuery documentation .Deferred()\" rel=\"nofollow\">$.Deferred()</a></strong><br>\nA constructor that creates a new deferred object. Accepts an optional \ninit function which will be executed immediately after the deferred is \ncreated.</p>\n\n<p><strong>deferred.always()</strong><br>\nReturns the deferred object and executes attached functions upon resolution or rejection.</p>\n\n<pre><code><span>$</span><span>.</span><span>get</span><span>(</span><span>\"test.php\"</span><span>)</span><span>\n\n</span><span>// Execute regardless of resolution or success</span><span>\n</span><span>.</span><span>always</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    alertCompletedRequest</span><span>();</span><span>\n</span><span>});</span></code></pre>\n\n<p><strong>deferred.then()</strong><br>\nAdds handlers which will be called on resolved, rejected or in progress and returns a promise.</p>\n\n<pre><code><span>$</span><span>.</span><span>get</span><span>(</span><span>\"test.php\"</span><span>)</span><span>\n\n</span><span>// Execute regardless of resolution or success</span><span>\n</span><span>.</span><span>then</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>\n    alertSuccess</span><span>(),</span><span>\n    alertFailure</span><span>(),</span><span>\n    alertProgress</span><span>();</span><span>\n</span><span>});</span></code></pre>\n\n<p><strong>deferred.when()</strong><br>\nReturns a new promise based on the completion of multiple promises. If \nany promise is rejected, .when() is rejected and if all promises are \nresolved, it is resolved. It is noteworthy that a non-promise can be \npassed to .when() and it will be treated as a resolved promise. Also of \nnote is that it will return a single value only if all other promises \nresolve to a single value or an array, otherwise it resolves to an \narray.</p>\n\n<p><strong>deferred.resolve(optionalArgs)</strong> or <strong>deferred.reject(optionalArgs)</strong><br>\nResolve or reject the deferred object and call handler functions ( <em>.done(), .fail(), .always(), .then()</em> ) with any supplied arguments and pass their context to the handler they call.</p>\n\n<pre><code><span>$</span><span>(</span><span>'body'</span><span>).</span><span>on</span><span>(</span><span>'button'</span><span>,</span><span> </span><span>'click'</span><span>,</span><span> </span><span>function</span><span>()</span><span> </span><span>{</span><span>\n\n    </span><span>// Can be passed a value which will be given to handlers</span><span>\n    deferred</span><span>.</span><span>resolve</span><span>();</span><span>\n</span><span>});</span></code></pre>\n\n<p><strong>deferred.promise()</strong><br>\nReturns the promise object of the deferred. If passed a target, \n.promise() will attach promise methods to the target instead of creating\n a new object.</p>\n\n<p><strong>deferred.state()</strong><br>\nUseful for debugging and querying the state the deferred object is in. Returns: pending, resolved or rejected.</p>\n\n<p><strong>deferred.always()</strong><br>\nFunctions or an array of functions called regardless of reject and failure.\n<strong>deferred.done()</strong><br>\nFunctions or array of functions called upon resolution of the deferred object.</p>\n\n<p><strong>deferred.fail()</strong><br>\nFunctions or array of functions called upon rejection of the deferred object.</p>\n\n<p><strong>$.ajax()</strong><br>Performs an Ajax request and returns a promise.</p>\n\n<h1>Conclusion</h1>\n\n<p>Managing asynchronous JavaScript and writing decoupled applications \ncan be challenging. I hope by now you have a better understanding of \nwhat promises are, how you can use them and how to avoid some of the \ncommon pitfalls. There’s still a lot of ground I haven’t covered in \nthese two posts and for that I refer you to your libraries docs and the \nresources mentioned at the end of both posts. Of course, if you have \nquestions or feedback feel free to get in touch on <a href=\"https://alpha.app.net/cwebbdesign\" rel=\"nofollow\">app.net</a> or <a href=\"https://www.twitter.com/cwebbdesign\" rel=\"nofollow\">twitter</a>!</p>\n\n<p><strong>Author’s note</strong>:<br>\nIn putting together these two posts, I am deeply indebted to the work of others. @dominic’s article <a href=\"https://gist.github.com/domenic/3889970\" rel=\"nofollow\">You’re Missing the Point of Promises</a> and the exchange between @dominic and @rwaldron on <a href=\"http://bugs.jquery.com/ticket/11010\" rel=\"nofollow\">jQuery’s .then()</a> really fueled my deep dive into how promises work. Trevor Burnham’s book <a href=\"http://www.amazon.com/gp/product/B00AKM4RVG/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00AKM4RVG&amp;linkCode=as2&amp;tag=mediumequalsm-20\" title=\"Async JavaScript\" rel=\"nofollow\">Async JavaScript</a>, Brian Cavalier’s <a href=\"http://blog.briancavalier.com/\" title=\"Async Programming\" rel=\"nofollow\">Async Programming</a>, Jesse Hallet’s <a href=\"http://sitr.us/2012/07/31/promise-pipelines-in-javascript.html\" title=\"Promise Pipeline in JavaScript\" rel=\"nofollow\">Promise Pipeline in JavaScript</a>, and of course the <a href=\"http://wiki.commonjs.org/wiki/Promises/A\" title=\"Promises/A\" rel=\"nofollow\">Promises/A</a> and <a href=\"http://promises-aplus.github.com/promises-spec/\" title=\"Promises/A+\" rel=\"nofollow\">Promises/A+</a> proposals were also invaluable resources. Finally, special thanks to <a href=\"http://weblog.bocoup.com/\" title=\"Rick Waldron\" rel=\"nofollow\">Rick Waldron</a> and the author of jQuery’s .then() implementation <a href=\"http://jaubourg.net/\" title=\"Julian Aubourg\" rel=\"nofollow\">Julian Aubourg</a> for answering my questions in preparing this article.</p>\n\n<h1>Further Resources</h1>\n\n<p><strong>Books</strong></p>\n\n<ul>\n<li><a href=\"http://www.amazon.com/gp/product/B00AKM4RVG/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00AKM4RVG&amp;linkCode=as2&amp;tag=mediumequalsm-20\" title=\"Async JavaScript\" rel=\"nofollow\">Async JavaScript</a></li>\n</ul>\n\n<p><strong>Articles</strong></p>\n\n<ul>\n<li><a href=\"http://blog.briancavalier.com/async-programming-part-1-its-messy\" title=\"Async Programming Part 1: It's messy\" rel=\"nofollow\">Async Programming Part 1: It’s messy</a></li>\n<li><a href=\"http://blog.briancavalier.com/?sort=&amp;search=async%20programming%20part%202-\" title=\"Async programming part 2: Promises\" rel=\"nofollow\">Async Programming Part 2: Promises</a></li>\n<li><a href=\"http://sitr.us/2012/07/31/promise-pipelines-in-javascript.html\" rel=\"nofollow\">Promise Pipelines in JavaScript</a></li>\n<li><a href=\"http://www.kendoui.com/blogs/teamblog/posts/13-03-28/what-is-the-point-of-promises.aspx\" title=\"Whats the point of promises?\" rel=\"nofollow\">What’s the point of promises</a></li>\n<li><a href=\"http://api.jquery.com/category/deferred-object/\" title=\"jQuery Documentation: Deferred Object\" rel=\"nofollow\">jQuery Documentation: Deferred Object</a></li>\n<li><a href=\"https://github.com/jquery/jquery/blob/master/test/unit/deferred.js\" rel=\"nofollow\">jQuery - deferred.js test suite</a></li></ul>","tags":"javascript,jQuery,Deferred and Promise,Promise & Deferred","isStarred":"false","note":"","dateCreated":"Tue Feb 17 2015 20:42:15 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424186534854},"mode":"add","comments":[],"images":[],"_id":"rYhCYASMeVX5E0ZY"}
{"id":"s6cgIzGRVBrKuSSu","category":"css","categoryId":"29","title":"CSS Transitions, Transforms & Animations – Perspective","refSite":"http://callmenick.com/2014/12/30/css-transitions-transforms-animations-perspective/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div><p>In this part of the CSS3 \ntransitions, transforms and animations series, we look at the CSS3 \nperspective property with examples including a 3D cube.</p>\n              </div>\n      <div>\n        <p><img src=\"http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/perspective-featured.png\" alt=\"perspective-featured\" height=\"280\" width=\"690\" data-src=\"../database/uploads/images/article_images/perspective-featured_25_3_2015.png\"></p>\n<p><a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/2-perspective-source.zip\">Get Source</a> <a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/\">View Demo</a></p>\n<p>This is part 2 of a series of tutorials about practical use cases of \nCSS transitions, transforms, and animations. In this tutorial, we’re \ngoing to take an in-depth look into CSS3 perspective, and some use-cases\n where it can give users more natural and cool experiences.</p>\n<h2>What Is Perspective?</h2>\n<p>In the context of the two-dimensional world, perspective gives users \nthe illusion of an object’s depth, width, height, and position in \nrelation to another object, when viewed from a particular point. \nPerspective allows artists to create scenes that look like they are \ngoing “into” the paper, or draw buildings of different sizes on a street\n moving away from our position. Objects will also have a <em>vanishing point</em>, which is the point in the 2-D plane where an object’s depth vanishes. Let’s illustrate this with a simple diagram:</p>\n<p><img src=\"http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/vanishing-point.png\" alt=\"vanishing-point\" height=\"280\" width=\"690\" data-src=\"../database/uploads/images/article_images/vanishing-point_25_3_2015.png\"></p>\n<p>The above diagram depicts three objects, all rectangles, in a 2-D \nplane. When they are moved around the plane, lines of perspective can be\n drawn towards the vanishing point, and 3-dimensional objects can be \nextrapolated. </p>\n<p>Since the web is viewed on two-dimensional surfaces (i.e. device \nscreens), perspective can play a part in helping to create some similar \ndepth. In the world of web and CSS3 transforms, perspective is defined \nlike this (taken from the MDN):</p>\n<blockquote>\n<p>The perspective CSS property determines the distance between the z = 0\n plane and the user in order to give to the 3D-positioned element some \nperspective. Each 3D element with z &gt; 0 becomes larger; each \n3D-element with z &lt; 0 becomes smaller. The strength of the effect is \ndetermined by the value of this property.</p>\n</blockquote>\n<p>The vanishing point is placed by default at the center of the element, but we can reposition it with the <code>perspective-origin</code> property. Let’s look at a basic example.</p>\n<h2>Demo 1 – A Basic Perspective Example</h2>\n<p>Let’s take a very primitive shape – a square – and use the \nperspective properties to give it a bit of depth. For the first sequence\n of demos, i’ll use some helper classes to show-off the following \nperspective ranges:</p>\n<ul>\n<li>no <code>perspective</code></li>\n<li>100px <code>perspective</code></li>\n<li>200px <code>perspective</code></li>\n<li><code>perspective-origin</code> at [0, 0]</li>\n</ul>\n<p>Note that perspective properties must exist on the parent container \nof the element we want affected. With that in mind, the markup for the \nthree demos will be really simple:</p>\n<pre><code data-language=\"markup\"><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--none<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface square<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--200<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface square<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--100 perspective-origin--00<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface square<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n</code></pre>\n<p>Let’s now apply the necessary CSS perspective properties:</p>\n<pre><code data-language=\"css\"><span><span>.perspective-container</span> </span><span>{</span>\n  <span>background-color</span><span>:</span> #eee<span>;</span>\n<span>}</span>\n\n<span><span>.perspective--none</span> </span><span>{</span>\n  <span spellcheck=\"true\">/**/</span>\n<span>}</span>\n\n<span><span>.perspective--100</span> </span><span>{</span>\n  <span>perspective</span><span>:</span> 100px<span>;</span>\n<span>}</span>\n\n<span><span>.perspective--200</span> </span><span>{</span>\n  <span>perspective</span><span>:</span> 200px<span>;</span>\n<span>}</span>\n\n<span><span>.perspective-origin--00</span> </span><span>{</span>\n  <span>perspective-origin</span><span>:</span> 0 0<span>;</span>\n<span>}</span>\n\n<span><span>.surface</span> </span><span>{</span>\n  <span>display</span><span>:</span> block<span>;</span>\n  <span>text-align</span><span>:</span> center<span>;</span>\n  <span>width</span><span>:</span> 100%<span>;</span>\n  <span>height</span><span>:</span> 100%<span>;</span>\n  <span>color</span><span>:</span> #fff<span>;</span>\n  <span>background-color</span><span>:</span> <span>rgb</span>(55,124,255)<span>;</span>\n  <span>font-size</span><span>:</span> 18px<span>;</span>\n  <span>line-height</span><span>:</span> 200px<span>;</span>\n<span>}</span>\n</code></pre>\n<p>If we refresh our browser, we will see three identical squares. Why? \nBecause none of our objects have actually moved in the perspective \nplane. To see how the perspective properties affect our objects, let’s \ntranslate them along the z-axis into the plane using <code>transform</code>. We’ll add the following CSS to our <code>.surface</code> class that governs our objects:</p>\n<pre><code data-language=\"css\"><span><span>.surface</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateZ</span>(-50px)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Now, we can see three different results:</p>\n<ol>\n<li>The first remains unchanged, because without any perspective rules \nin place, translating along the z-axis (i.e. in and out of the screen) \ncauses no change in depth.</li>\n<li>The second appears to have moved into the screen a bit, because we set the <code>perspective</code> to <code>200px</code>. Remember from the definition above that the perspective property determines the distance between the z=0 plane and the user.</li>\n<li>The third appears even smaller still, and has moved to the top-left corner of our perspective container. This is because of the <code>perspective-origin</code> property set on the parent container.</li>\n</ol>\n<p>In the <a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/index.html\">demo</a>, you can see all three in action.</p>\n<h2>Demo 2 – Rotating Shapes With Perspective</h2>\n<p>At this point, the above effects could’ve just been achieved by \nsimply scaling the elements. That’s a fair point, but in that case, we’d\n lose all perspective properties. Visualizing the perspective in the \nfirst demo might also be a bit difficult because ultimately, it’s just a\n smaller square. Let’s look at a slightly more advanced implementation, \nand paint a clearer picture.</p>\n<p>This time, we’ll have the same three squares, but we will rotate them\n about the y-axis, making them rotate “into” the screen. We will use a \nCSS transition effect coupled with the <code>:hover</code> pseudo-class to animate how perspective properties affects the rotation. Here’s the markup:</p>\n<pre><code data-language=\"markup\"><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--none<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface-2<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--400<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface-2<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>perspective-container perspective--400 perspective-origin--00<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>surface-2<span>\"</span></span><span>&gt;</span></span>\n    square\n  <span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n</code></pre>\n<p>This time, I added a perspective helper class at 400px also like this:</p>\n<pre><code data-language=\"css\"><span><span>.perspective--400</span> </span><span>{</span>\n  <span>perspective</span><span>:</span> 400px<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Finally, let’s take a look at the CSS for our new shape, governed by the class <code>surface-2</code>:</p>\n<pre><code data-language=\"css\"><span><span>.surface-2</span> </span><span>{</span>\n  <span>display</span><span>:</span> block<span>;</span>\n  <span>text-align</span><span>:</span> center<span>;</span>\n  <span>width</span><span>:</span> 100%<span>;</span>\n  <span>height</span><span>:</span> 100%<span>;</span>\n  <span>color</span><span>:</span> #fff<span>;</span>\n  <span>background-color</span><span>:</span> <span>rgb</span>(55,124,255)<span>;</span>\n  <span>font-size</span><span>:</span> 24px<span>;</span>\n  <span>line-height</span><span>:</span> 200px<span>;</span>\n  <span>transition</span><span>:</span> transform 1s<span>;</span>\n<span>}</span>\n\n<span><span>.surface-2</span><span>:hover</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>rotateY</span>(180deg)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Hovering over the three different implementations results in three different outcomes:</p>\n<ol>\n<li>With no perspective set, the object rotates about the z-axis in a \nvery flat manner. Nothing seems to pop in our out of the screen.</li>\n<li>When we set perspective to 400px, we can see that the object now \nlooks like it is spinning out and back into the screen. This is because \nof perspective.</li>\n<li>With the perspective set to 400px and the perspective origin moved \nto [0 0], a similar effect to number 2 is achieved, but this time viewed\n from the perspective origin.</li>\n</ol>\n<p>Be sure to <a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/index2.html\">check out the demo</a> to see them in action. Now, we’re starting to see the power of CSS3 perspectives! If we go ahead and apply this to the <a href=\"http://callmenick.com/2014/11/19/css-transitions-transforms-animations-flipping-card/\">flipping card demo</a>, we’ll achieve an even more real-world scenario. Let’s keep on moving.</p>\n<h2>Demo 3 – 3D Cube With Variable Perspective Origins</h2>\n<p>Now, we’re going to get a little funky. We’re going to create a cube \n(with 6 faces) using CSS3 transforms, and give that cube some depth \nusing perspective. We will also set up a controller system so that we \ncan edit the perspective and perspective origin on the fly, giving us a \nsuperior grasp on how perspective really affects everything.</p>\n<p>We’ll set up our cube using 6 different <code>span</code>s inside a parent <code>div</code> with the class of <code>cube</code>. Each <code>span</code> will represent a different face of the cube. The cube itself will now reside inside a perspective div, called <code>wrap</code>. Here’s the markup:</p>\n<pre><code data-language=\"markup\"><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>wrap<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>wrap<span>\"</span></span><span>&gt;</span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>cube<span>\"</span></span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face front<span>\"</span></span><span>&gt;</span></span>front<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face back<span>\"</span></span><span>&gt;</span></span>back<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face top<span>\"</span></span><span>&gt;</span></span>top<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face bottom<span>\"</span></span><span>&gt;</span></span>bottom<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face left<span>\"</span></span><span>&gt;</span></span>left<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n    <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>face right<span>\"</span></span><span>&gt;</span></span>right<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>\n  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n</code></pre>\n<p>We’ll set up some defaults for the perspective wrapping container, \nand the cube container will have relative positioning so that each of \nthe cube faces can be absolutely positioned inside, and transformed \naccordingly. Assuming we want a cube where each side is 200px in length,\n our CSS will look like this:</p>\n<pre><code data-language=\"css\"><span><span>.wrap</span> </span><span>{</span>\n  <span>perspective</span><span>:</span> 500px<span>;</span>\n  <span>perspective-origin</span><span>:</span> 50% 50%<span>;</span>\n<span>}</span>\n\n<span><span>.cube</span> </span><span>{</span>\n  <span>position</span><span>:</span> relative<span>;</span>\n  <span>margin</span><span>:</span> 100px auto<span>;</span>\n  <span>width</span><span>:</span> 200px<span>;</span>\n  <span>height</span><span>:</span> 200px<span>;</span>\n  <span>transform-style</span><span>:</span> preserve-3d<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Notice that I initially set the <code>perspective</code> to be <code>500px</code>, and the <code>perspective-origin</code> to be <code>50% 50%</code>.\n This will give us some depth to work with initially so we can see \ntransformed objects moving into and out of the plane. Remember, without \nperspective, transformed objects would not achieve that \nthird-dimensional depth that we’re after. The <code>perspective-origin</code>\n isn’t required as I’ve set it to the browser default (which is center \nof the container), but I entered it here just for repetition.</p>\n<p>Let’s examine the faces of the cube now. First of all, each face \nneeds to be absolutely positioned and have a width and height of 200px. \nI’ll apply some inner shadows to each face also, for visualization \npurposes. Here’s the common CSS for the faces:</p>\n<pre><code data-language=\"css\"><span><span>.face</span> </span><span>{</span>\n  <span>display</span><span>:</span> block<span>;</span>\n  <span>position</span><span>:</span> absolute<span>;</span>\n  <span>top</span><span>:</span> 0<span>;</span> <span>left</span><span>:</span> 0<span>;</span>\n  <span>width</span><span>:</span> 200px<span>;</span>\n  <span>height</span><span>:</span> 200px<span>;</span>\n  <span>color</span><span>:</span> #666<span>;</span>\n  <span>font-size</span><span>:</span> 18px<span>;</span>\n  <span>text-align</span><span>:</span> center<span>;</span>\n  <span>line-height</span><span>:</span> 200px<span>;</span>\n  <span>box-shadow</span><span>:</span> inset 0 0 4px <span>rgba</span>(0,0,0,0.5)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Now, let’s look at each individual face. We set up our cube to be 200\n x 200 x 200. But we want to give some depth in general. So let’s pull \nthe front face towards us by 100px and push the back face away from us \nby 100px, leaving us with that perfect 200px square as the center plane \nof our cube on the x-y axis. The back face should also be rotated \n180deg, so that it is facing outwards. So we’re translating each face \nfirst, then rotating where necessary. Here’s the CSS:</p>\n<pre><code data-language=\"css\"><span><span>.front</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateZ</span>(100px)<span>;</span>\n<span>}</span>\n\n<span><span>.back</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateZ</span>(-100px) <span>rotateY</span>(-180deg)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Now, let’s look at the left and right faces. The left face needs to \nbe translated to the left by 100px, then rotated by –90 degrees about \nthe y-axis. The right face does the opposite. These rules will get them \ninto position:</p>\n<pre><code data-language=\"css\"><span><span>.left</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateX</span>(-100px) <span>rotateY</span>(-90deg)<span>;</span>\n<span>}</span>\n\n<span><span>.right</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateX</span>(100px) <span>rotateY</span>(90deg)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Now, let’s take a look at the top and bottom faces. The top face \nneeds to move upwards 100px, and rotate about the x-axis by 90 degrees, \nwhile the bottom needs to to the opposite. These rules place them in \nposition:</p>\n<pre><code data-language=\"css\"><span><span>.top</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateY</span>(-100px) <span>rotateX</span>(90deg)<span>;</span>\n<span>}</span>\n\n<span><span>.bottom</span> </span><span>{</span>\n  <span>transform</span><span>:</span> <span>translateY</span>(100px) <span>rotateX</span>(-90deg)<span>;</span>\n<span>}</span>\n</code></pre>\n<p>And voila, now we have our CSS cube, using transforms and perspective! Make sure to <a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/index3.html\">check out the demo</a> to see the full thing in action.</p>\n<p>Let’s add some controls now that will allow us to change perspective and perspective-origins on the fly. I’ll use the <code>range</code> input, and wire up three of them to handle the respective properties. Here’s the markup:</p>\n<pre><code data-language=\"markup\"><span><span><span>&lt;</span>h3</span> <span>class</span><span><span>=</span><span>\"</span>sub-title<span>\"</span></span><span>&gt;</span></span>Perspective<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span>\n0 <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>p<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>range<span>\"</span></span> <span>min</span><span><span>=</span><span>\"</span>0<span>\"</span></span> <span>max</span><span><span>=</span><span>\"</span>1000<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>500<span>\"</span></span> <span>step</span><span><span>=</span><span>\"</span>1<span>\"</span></span><span>&gt;</span></span> 1000px\n        \n<span><span><span>&lt;</span>h3</span> <span>class</span><span><span>=</span><span>\"</span>sub-title<span>\"</span></span><span>&gt;</span></span>Perspective Origin X<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span>\n-1000px <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>pX<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>range<span>\"</span></span> <span>min</span><span><span>=</span><span>\"</span>-1000<span>\"</span></span> <span>max</span><span><span>=</span><span>\"</span>1000<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>step</span><span><span>=</span><span>\"</span>1<span>\"</span></span><span>&gt;</span></span> 1000px\n\n<span><span><span>&lt;</span>h3</span> <span>class</span><span><span>=</span><span>\"</span>sub-title<span>\"</span></span><span>&gt;</span></span>Perspective Origin Y<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span>\n-1000px <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>pY<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>range<span>\"</span></span> <span>min</span><span><span>=</span><span>\"</span>-1000<span>\"</span></span> <span>max</span><span><span>=</span><span>\"</span>1000<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>100<span>\"</span></span> <span>step</span><span><span>=</span><span>\"</span>1<span>\"</span></span><span>&gt;</span></span> 1000px\n</code></pre>\n<p>And here’s some JavaScript to give us a playful little demo:</p>\n<pre><code data-language=\"javascript\"><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n\n  <span>\"use strict\"</span><span>;</span>\n\n  <span>var</span> wrap <span>=</span> document<span>.</span><span>getElementById<span>(</span></span><span>\"wrap\"</span><span>)</span><span>;</span>\n  <span>var</span> p <span>=</span> document<span>.</span><span>getElementById<span>(</span></span><span>\"p\"</span><span>)</span><span>;</span>\n  <span>var</span> pX <span>=</span> document<span>.</span><span>getElementById<span>(</span></span><span>\"pX\"</span><span>)</span><span>;</span>\n  <span>var</span> pY <span>=</span> document<span>.</span><span>getElementById<span>(</span></span><span>\"pY\"</span><span>)</span><span>;</span>\n  <span>var</span> pVal<span>;</span>\n  <span>var</span> xVal<span>;</span>\n  <span>var</span> yVal<span>;</span>\n\n  p<span>.</span><span>addEventListener<span>(</span></span> <span>\"input\"</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n    pVal <span>=</span> p<span>.</span>value <span>+</span> <span>\"px\"</span><span>;</span>\n    wrap<span>.</span>style<span>.</span>perspective <span>=</span> pVal<span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  pX<span>.</span><span>addEventListener<span>(</span></span> <span>\"input\"</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n    xVal <span>=</span> pX<span>.</span>value <span>+</span> <span>\"px\"</span><span>;</span>\n    yVal <span>=</span> pY<span>.</span>value <span>+</span> <span>\"px\"</span><span>;</span>\n    wrap<span>.</span>style<span>.</span>perspectiveOrigin <span>=</span> xVal <span>+</span> <span>\" \"</span> <span>+</span> yVal<span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n\n  pY<span>.</span><span>addEventListener<span>(</span></span> <span>\"input\"</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n    xVal <span>=</span> pX<span>.</span>value <span>+</span> <span>\"px\"</span><span>;</span>\n    yVal <span>=</span> pY<span>.</span>value <span>+</span> <span>\"px\"</span><span>;</span>\n    wrap<span>.</span>style<span>.</span>perspectiveOrigin <span>=</span> xVal <span>+</span> <span>\" \"</span> <span>+</span> yVal<span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n\n<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n<p>And now, we have an interactive demo of a 3D cube, creating using CSS3 transforms and perspectives. <a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/index3.html\">The demo</a> should truly give you a grasp on how perspective is handled in the browser!</p>\n<h2>Demo 4 – Spinning Cubes</h2>\n<p>This one is kind of a bonus, but will give us further visual insight \ninto how perspective works and is handled by the browser. Let’s set up \nsome animations to spin our cubes about the x- and y-axis on an infinite\n loop, so we can visualize how perspective affects it. The helper \nclasses and respective animations would be as follows:</p>\n<pre><code data-language=\"css\"><span><span>.rotate-x</span> </span><span>{</span>\n  <span>animation</span><span>:</span> spinX 4s infinite linear<span>;</span>\n<span>}</span>\n\n<span><span>.rotate-y</span> </span><span>{</span>\n  <span>animation</span><span>:</span> spinY 4s infinite linear<span>;</span>\n<span>}</span>\n\n<span>@keyframes spinX</span> <span>{</span>\n  <span>from </span><span>{</span> <span>transform</span><span>:</span> <span>rotateX</span>(0)<span>;</span> <span>}</span>\n  <span>to </span><span>{</span> <span>transform</span><span>:</span> <span>rotateX</span>(360deg)<span>;</span> <span>}</span>\n<span>}</span>\n\n<span>@keyframes spinY</span> <span>{</span>\n  <span>from </span><span>{</span> <span>transform</span><span>:</span> <span>rotateY</span>(0)<span>;</span> <span>}</span>\n  <span>to </span><span>{</span> <span>transform</span><span>:</span> <span>rotateY</span>(360deg)<span>;</span> <span>}</span>\n<span>}</span>\n</code></pre>\n<p>And we can add the classes to our cubes as follows:</p>\n<pre><code data-language=\"markup\"><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>cube<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>cube rotate-x<span>\"</span></span><span>&gt;</span></span>\n  ...\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>cube<span>\"</span></span> <span>class</span><span><span>=</span><span>\"</span>cube rotate-y<span>\"</span></span><span>&gt;</span></span>\n  ...\n<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>\n</code></pre>\n<p><a href=\"http://callmenick.com/development/transitions-transforms-animations/2-perspective/index4.html\">Check out the demo</a> to see the two spinning cubes in action! Also note the importance of the <code>transform-style: preserve-3d</code> property set on the cube. This ensures that the cube faces stay stacked in 3D space, and aren’t flattened out when transformed.</p>\n<h2>Browser Support</h2>\n<p>Perspective, transitions, and animations are supported in IE10 and \nup, whereas transforms are supported in IE9 and up. Fallbacks should be \neasy to implement as a result of this. I tested all the code above in \nnew versions of Chrome, Safari, and Firefox, so you’re safe there. Make \nsure to add all then necessary vendor prefixes though! The zipped up \nsource code (available from the link below) has the fully prefixed CSS.</p>\n<h2>Wrap Up</h2>\n<p>And that’s a wrap! We’ve just taken an in depth look at CSS3 \nperspective, and some of the possibilities available when combining \nperspective with transforms, transitions, and animations. Don’t forget, \nyou can view the demo and download the source by clicking the links \nbelow, and if you have and questions, comments, or feedback, you can \nalso leave them below.</p></div>","tags":"css,Animation","isStarred":"false","articleImages":["http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/perspective-featured.png","http://369ua4hadd83hd6wi2pza696.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/vanishing-point.png"],"note":"","dateCreated":"Wed Mar 25 2015 19:07:48 GMT+0530 (India Standard Time)","dateModified":{"$$date":1427290721003},"mode":"add","comments":[],"images":[],"_id":"s6cgIzGRVBrKuSSu"}
{"id":"0","category":"scss","categoryId":"57","title":"How to structure a Sass project","refSite":"http://thesassway.com/beginner/how-to-structure-a-sass-project","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>One of the most useful features of Sass is being able to separate your stylesheets into separate files. You can then use the <code>@import</code> directive to include the source of your individual files into one master stylesheet.</p>\n\n<p>But how should you structure your Sass projects? Is there a standard way of separating out your CSS files?</p>\n\n<h2>Basic directory structure</h2>\n\n<p>I like to layout my Sass projects like this:</p>\n\n<div>\n<pre>stylesheets/\n|\n|-- modules/              # Common modules\n|   |-- _all.scss         # Include to get all modules\n|   |-- _utility.scss     # Module name\n|   |-- _colors.scss      # Etc...\n|   ...\n|\n|-- partials/             # Partials\n|   |-- _base.sass        # imports for all mixins + global project variables\n|   |-- _buttons.scss     # buttons\n|   |-- _figures.scss     # figures\n|   |-- _grids.scss       # grids\n|   |-- _typography.scss  # typography\n|   |-- _reset.scss       # reset\n|   ...\n|\n|-- vendor/               # CSS or Sass from other projects\n|   |-- _colorpicker.scss\n|   |-- _jquery.ui.core.scss\n|   ...\n|\n`-- main.scss            # primary Sass file\n</pre>\n</div>\n\n\n<h2>Primary stylesheet</h2>\n\n<p>This allows me to keep my primary Sass file extremely clean:</p>\n\n<div>\n<pre><span>// Modules and Variables</span>\n<span>@import</span> <span>\"partials/base\"</span><span>;</span>\n\n<span>// Partials</span>\n<span>@import</span> <span>\"partials/reset\"</span><span>;</span>\n<span>@import</span> <span>\"partials/typography\"</span><span>;</span>\n<span>@import</span> <span>\"partials/buttons\"</span><span>;</span>\n<span>@import</span> <span>\"partials/figures\"</span><span>;</span>\n<span>@import</span> <span>\"partials/grids\"</span><span>;</span>\n<span>// ...</span>\n\n<span>// Third-party</span>\n<span>@import</span> <span>\"vendor/colorpicker\"</span><span>;</span>\n<span>@import</span> <span>\"vendor/jquery.ui.core\"</span><span>;</span>\n</pre>\n</div>\n\n\n<h2>Modules, partials, and vendor</h2>\n\n<p>As you can see this divides my project into three basic types of files. Modules, partials, and vendored stylesheets.</p>\n\n<ul>\n<li>\n    <p>The <strong>modules</strong> directory is reserved for Sass code \nthat doesn't cause Sass to actually output CSS. Things like mixin \ndeclarations, functions, and variables.</p>\n  </li>\n  <li>\n    <p>The <strong>partials</strong> directory is where the meat of my \nCSS is constructed. A lot of folks like to break their stylesheets into \nheader, content, sidebar, and footer components (and a few others). As \nI'm more of a <a target=\"_blank\" href=\"http://smacss.com/\">SMACSS</a> guy myself, I like to break things down into much finer categories (typography, buttons, textboxes, selectboxes, etc…).</p>\n  </li>\n  <li>\n    <p>The <strong>vendor</strong> directory is for third-party CSS. \nThis is handy when using prepackaged components developed by other \npeople (or for your own components that are maintained in another \nproject). jQuery UI and a color picker are examples of CSS that you \nmight want to place in the vendor directory. As a general rule I make it\n a point not to modify files in my vendor directory. If I need to make \nmodifications I add those after the vendored files are included in my \nprimary stylesheet. This should make it easy for me to update my \nthird-party stylesheets to more current versions in the future.</p>\n  </li>\n</ul>\n<h2>Using a base partial</h2>\n\n<p>In my partials directory you will also notice that I have a base \npartial. The purpose of this partial is to load up my Sass environment \nso that it's easy to construct a stylesheet.</p>\n\n<p>It might look something like this:</p>\n\n<div>\n<pre><span>// Use Compass ('cause it rocks!)</span>\n<span>@import</span> <span>\"compass\"</span><span>;</span>\n\n<span>// Font weights</span>\n<span>$light</span><span>:</span> <span>100</span><span>;</span>\n<span>$regular</span><span>:</span> <span>400</span><span>;</span>\n<span>$bold</span><span>:</span> <span>600</span><span>;</span>\n\n<span>// Base Font</span>\n<span>$base-font-family</span><span>:</span> <span>sans-serif</span><span>;</span>\n<span>$base-font-weight</span><span>:</span> <span>$regular</span><span>;</span>\n<span>$base-font-size</span><span>:</span> <span>13</span><span>px</span><span>;</span>\n<span>$base-line-height</span><span>:</span> <span>1</span><span>.4</span><span>;</span>\n\n<span>// Fixed Font</span>\n<span>$fixed-font-family</span><span>:</span> <span>monospace</span><span>;</span>\n<span>$fixed-font-size</span><span>:</span> <span>85</span><span>%</span><span>;</span>\n<span>$fixed-line-height</span><span>:</span> <span>$base-line-height</span><span>;</span>\n\n<span>// Headings</span>\n<span>$header-font-weight</span><span>:</span> <span>$bold</span><span>;</span>\n\n<span>@import</span> <span>\"modules/all\"</span><span>;</span>\n</pre>\n</div>\n\n\n<p>The base stylesheet sets a couple of global variables and loads up \nall of my Sass modules. Again modules are not allowed to contain \nanything that would cause CSS output when importing. Tying all of my \nvariables and modules up into a base partial gives me access to my \nentire Sass environment whenever I'm setting up a new stylesheet with a \nsingle import statement. This allows me to build multiple stylesheets by\n importing different partials. Multiple stylesheets are handy once a \nproject grows to a certain size.</p>\n\n<h2>One step further</h2>\n\n<p>At <a target=\"_blank\" href=\"http://uservoice.com/\">UserVoice</a>\n we take this pattern one step further. Since we have multiple \nsub-projects all bundled together in a single Rails app, we bundle each \nsub-project into a separate top-level directory. Our stylesheet \ndirectory looks more like this:</p>\n\n<div>\n<pre>stylesheets/\n|\n|-- admin/           # Admin sub-project\n|   |-- modules/\n|   |-- partials/\n|   `-- _base.scss\n|\n|-- account/         # Account sub-project\n|   |-- modules/\n|   |-- partials/\n|   `-- _base.scss\n|\n|-- site/            # Site sub-project\n|   |-- modules/\n|   |-- partials/\n|   `-- _base.scss\n|\n|-- vendor/          # CSS or Sass from other projects\n|   |-- _colorpicker-1.1.scss\n|   |-- _jquery.ui.core-1.9.1.scss\n|   ...\n|\n|-- admin.scss       # Primary stylesheets for each project\n|-- account.scss\n`-- site.scss\n</pre>\n</div>\n\n\n<p>As you can see each sub-project has it's own primary stylesheet, \nmodules, partials, and base. Vendored stylesheets are typically \nversioned and have their own top-level directory. This is a handy \npattern to use on very large Sass projects.</p>\n\n<h2>Further exploration</h2>\n\n<p>Now that I've laid out my own method for this, you may want to \nexplore how other people have structured their Sass projects. There's \nactually a lot of variation in what you can do here. And some methods \nmay work better on different projects:</p>\n\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/chriseppstein/compass/tree/stable/frameworks\">Compass</a></li>\n  <li><a target=\"_blank\" href=\"https://github.com/lesjames/breakpoint/tree/master/breakpoint\">Breakpoint</a></li>\n  <li><a target=\"_blank\" href=\"https://github.com/imathis/octopress/tree/master/.themes/classic/sass\">Octopress</a></li>\n  <li><a target=\"_blank\" href=\"https://github.com/jlong/sass-twitter-bootstrap/tree/master/lib\">Sass Twitter Bootstrap</a></li>\n</ul>\n<p>Also check out Dale Sande's excellent article, <a target=\"_blank\" href=\"http://gist.io/4436524\"><em>Clean out your Sass junk drawer</em></a>.</p>","tags":"SCSS,css","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 14:01:55 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 14:01:55 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"t0JkCbSjVbRMbUXA"}
{"id":"0","category":"regex","categoryId":"52","title":"Mastering Lookahead and Lookbehind","refSite":"http://www.rexegg.com/regex-lookarounds.html","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"Lookarounds often cause confusion to the regex apprentice. I believe \nthis confusion promptly disappears if one simple point is firmly \ngrasped. It is that at the end of a lookahead or a lookbehind, the regex\n engine hasn't moved on the string. You can chain three more lookaheads \nafter the first, and the regex engine still won't move. In fact, that's a\n useful technique. \n<br><br>\n\n\n<b>A quick syntax reminder</b><br>\n\nThis page digs deep into the details of lookahead and lookbehind and \nassumes you've already become familiar with the basic syntax, perhaps by\n reading the <a href=\"http://www.rexegg.com/regex-disambiguation.html#lookarounds\">lookaround section</a> of the reference on <span>(? … )</span> syntax. As a quick reminder before we dive in, here are the four lookarounds.<br><br>\n\n<table border=\"0\" width=\"600\"><tbody><tr><th scope=\"col\" width=\"100\"><b>Lookaround</b></th><th scope=\"col\" width=\"180\"><b>Name</b></th><th scope=\"col\" width=\"320\"><b>What it Does</b></th></tr><tr><td><span>(?=foo)</span></td><td>Lookahead</td><td>Asserts that what immediately follows the current position in the string is <i>foo</i></td></tr><tr><td><span>(?&lt;=foo)</span></td><td>Lookbehind</td><td>Asserts that what immediately precedes the current position in the string is <i>foo</i></td></tr><tr><td><span>(?!foo)</span></td><td>Negative Lookahead</td><td>Asserts that what immediately follows the current position in the string is not <i>foo</i></td></tr><tr><td><span>(?&lt;!foo)</span></td><td>Negative Lookbehind</td><td>Asserts that what immediately precedes the current position in the string is not <i>foo</i></td></tr></tbody></table>\n<br><br>\n\n<a name=\"nav\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#nav\">(direct link)</a></span><br>\n<b>Jumping Points</b><br>\nFor easy navigation, here are some jumping points to various sections of the page:<br><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">Lookahead Example: Simple Password Validation</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#order\">The Order of Lookaheads Doesn't Matter… Almost</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#stand_their_ground\">Lookarounds Stand their Ground</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#uses\">Various Uses for Lookarounds</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#zero_width\">Zero-Width Matches</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#position\">Positioning the Lookaround Before or After the Characters to be Matched</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#back_to_the_future\">Lookarounds that Look on Both Sides: Back to the Future</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#compound\">Compound Lookahead and Compound Lookbehind</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#atomic\">The Engine Doesn't Backtrack into Lookarounds (They're Atomic)</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#width\">Fixed-Width, Constrained-Width and Infinite-Width Lookbehind</a><br>\n✽ <a href=\"http://www.rexegg.com/regex-lookarounds.html#anchor\">Lookarounds (Usually) Want to be Anchored</a><br>\n\n\n<br><br>\n\n<a name=\"password\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">(direct link)</a></span><br>\n<h2>Lookahead Example: Simple Password Validation</h2>\nLet's get our feet wet right away with an expression that validates a \npassword. The technique shown here will be useful for all kinds of other\n data you might want to validate (such as email addresses or phone \nnumbers). <br>\nOur password must meet four conditions:<br><br>\n1. The password must have between six and ten word characters <span>\\w</span><br>\n2. It must include at least one lowercase character <span>[a-z]</span><br>\n3. It must include at least <b>three</b> uppercase characters <span>[A-Z]</span><br>\n4. It must include at least one digit <span>\\d</span><br>\n<br>\n\nWe'll assume we're working in a regex flavor where <span>\\d</span> only matches ASCII digits 0 through 9, unlike .NET and Python where that token can match any Unicode digit.<br><br>\n\n\n<div>\nWith lookarounds, your feet stay planted on the string. You're just looking, not moving!\n</div>\n\nOur initial strategy (which we'll later tweak) will be to stand at the beginning of the string and <b>look ahead</b>\n four times—once for each condition. We'll look to check we have the \nright number of characters, then we'll look for a lowercase letter, and \nso on. If all the lookaheads are successful, we'll know the string is a \nvalid password… And we'll simply gobble it all up with a plain <span>.*</span>\n<br><br>\n\n<b>Let's start with condition 1</b><br>\nA string that is made of six-to-ten word characters can be written like this: <span>\\A\\w{6,10}\\z</span><br>\nThe <a href=\"http://www.rexegg.com/regex-anchors.html#A\"><span>\\A</span> anchor</a> asserts that the current position is the beginning of the string. After matching the six to ten word characters, the <a href=\"http://www.rexegg.com/regex-anchors.html#z\"><span>\\z</span> anchor</a> asserts that the current position is the end of the string.\n<br><br>\nWithin a lookahead, this pattern becomes <span>(?=\\A\\w{6,10}\\z)</span>.\n This lookahead asserts: at the current position in the string, what \nfollows is the beginning of the string, six to ten word characters, and \nthe very end of the string.\n<br><br>\n\nWe want to make this assertion at the very beginning of the string. \nTherefore, to continue building our pattern, we want to anchor the \nlookahead with an <span>\\A</span>. There is no need to duplicate the <span>\\A</span>, so we can take it out of the lookahead. Our pattern becomes:<br>\n<code>\\A(?=\\w{6,10}\\z)</code><br>\n\nSo far, we have an expression that validates that a string is entirely \ncomposed of six to ten word characters. Note that we haven't matched any\n of these characters yet: we have only looked ahead. The current \nposition after the lookahead is still the beginning of the string. To \ncheck the other conditions, we just add lookaheads.<br><br>\n\n\n<b>Condition 2</b><br>\n For our second condition, we need to check that the password contains \none lowercase letter. To find one lowercase letter, the simplest idea is\n to use <span>.*[a-z]</span>. That works, but the \ndot-star first shoots down to the end of the string, so we will always \nneed to backtrack. Just for the sport, can we think of something more \nefficient? You might think of making the star quantifier reluctant by \nadding a <span>?</span>, giving us <span>.*?[a-z]</span>, but that too requires backtracking as a <a href=\"http://www.rexegg.com/regex-quantifiers.html#lazy_expensive\">lazy quantifier requires backtracking at each step</a>.<br><br>\n \n For this type of situation, I recommend you use something like <span>[^a-z]*[a-z]</span> (or even better, depending on your engine, the <a href=\"http://www.rexegg.com/regex-disambiguation.html#atomic\">atomic</a> <span>(?&gt;[^a-z]*)[a-z]</span> or <a href=\"http://www.rexegg.com/regex-quantifiers.html#possessive\">possessive</a> version <span>[^a-z]*+[a-z]</span>—but we'll discuss that in the <a href=\"http://www.rexegg.com/regex-lookarounds.html#atomictweak\">footnotes</a>). The negated character class <span>[^a-z]</span> is the <i>counterclass</i> of the lowercase letter <span>[a-z]</span> we are looking for: it matches one character that is not a lowercase letter, and the <span>*</span> quantifier makes us match zero or more such characters. The pattern  <span>[^a-z]*[a-z]</span> is a good example of the principle of <a href=\"http://www.rexegg.com/regex-style.html#contrast\">contrast</a> recommended by the regex style guide.\n <br><br> \n\n\nLet's use this pattern inside a lookahead: <span>(?=[^a-z]*[a-z])</span> <br>\nThe lookahead asserts: at this position in the string (i.e., the \nbeginning of the string), we can match zero or more characters that are \nnot lowercase letters, then we can match one lowercase letter: <span>[a-z]</span><br>\nOur pattern becomes:\n<br>\n<code>\\A(?=\\w{6,10}\\z)(?=[^a-z]*[a-z])</code><br>\n\nAt this stage, we have asserted that we are at the beginning of the \nstring, and we have looked ahead twice. We still haven't matched any \ncharacters. Note that on a logical level it doesn't matter which \ncondition we check first. If we swapped the order of the lookaheads, the\n result would be the same. <br><br>\n\nWe have two more conditions to satisfy: two more lookaheads.\n<br><br>\n\n<b>Condition 3</b><br>\n For our third condition, we need to check that the password contains at\n least three uppercase letters. The logic is similar to condition 2: we \nlook for an optional number of non-uppercase letters, then one uppercase\n letter… But we need to repeat that three times, for which we'll use the\n quantifier <span>{3}</span>. <br>\n We'll use this lookahead: <span>(?=(?:[^A-Z]*[A-Z]){3})</span> <br><br>\nThe lookahead asserts: at this position in the string (i.e., the \nbeginning of the string), we can do the following three times: match \nzero or more characters that are not uppercase letters (the job of the \nnegated character class <span>[^A-Z]</span> with the quantifier <span>*</span>), then match one uppercase letter: <span>[A-Z]</span><br>\nOur pattern becomes:\n<br>\n<code>\\A(?=\\w{6,10}\\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})</code><br>\n\nAt this stage, we have asserted that we are at the beginning of the \nstring, and we have looked ahead three times. We still haven't matched \nany characters.\n<br><br>\n\n<b>Condition 4</b><br>\nTo check that the string contains at least one digit, we use this lookahead: <span>(?=\\D*\\d)</span>. Opposing <span>\\d</span> to its counterclass <span>\\D</span> makes good use of the <a href=\"http://www.rexegg.com/regex-style.html#contrast\">regex principle of contrast</a>.\n<br><br>\nThe lookahead asserts: at this position in the string (i.e., the \nbeginning of the string), we can match zero or more characters that are \nnot digits (the job of the \"not-a-digit\" character class <span>\\D</span> and the <span>*</span> quantifier), then we can match one digit: <span>\\d</span><br>\nOur pattern becomes:\n<br>\n<code>\\A(?=\\w{6,10}\\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\\D*\\d)</code><br>\n\nAt this stage, we have asserted that we are at the beginning of the \nstring, and we have looked ahead four times to check our four \nconditions. We still haven't matched any characters, but we have \nvalidated our string: we know that it is a valid password.\n<br><br>\n\nIf all we wanted was to validate the password, we could stop right \nthere. But if for any reason we also need to match and return the entire\n string—perhaps because we ran the regex on the output of a function and\n the password's characters haven't yet been assigned to a variable—we \ncan easily do so now.\n<br><br>\n\n\n<b>Matching the Validated String</b><br>\nAfter checking that the string conforms to all four conditions, we are \nstill standing at the beginning of the string. The five assertions we \nhave made (the anchor <span>\\A</span> and the four lookaheads) have not changed our position.\n\n\nAt this stage, we can use a simple <span>.*</span> to \ngobble up the string: we know that whatever characters are matched by \nthe dot-star, the string is a valid password. The pattern becomes:<br>\n<code>\\A(?=\\w{6,10}\\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\\D*\\d).*</code><br>\n\n<a name=\"n-1conds\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#n-1conds\">(direct link)</a></span><br>\n<b>Fine-Tuning: Removing One Condition</b><br>\n<div>\nFor n conditions,<br>\nuse n-1 lookaheads\n</div>\n\n\nIf you examine our lookaheads, you may notice that the pattern <span>\\w{6,10}\\z</span>\n inside the first one examines all the characters in the string. \nTherefore, we could have used this pattern to match the whole string \ninstead of the dot-star <span>.*</span> <br><br>\n\nThis allows us to remove one lookahead and to simplify the pattern to this:<br><br>\n\n<code>\\A(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\\D*\\d)\\w{6,10}\\z</code><br>\n\nThe pattern <span>\\w{6,10}\\z</span> now serves the double\n purpose of matching the whole string and of ensuring that the string is\n entirely composed of six to ten word characters. <br><br>\n\nGeneralizing this result, if you must check for n conditions, your \npattern only needs to include n-1 lookaheads at the most. Often, you are\n even able to combine several conditions into a single lookahead. \n<br><br>\n\nYou may object that we were able to use <span>\\w{6,10}\\z</span>\n because it happened to match the whole string. Indeed that was the \ncase. But we could also have converted any of the other three lookaheads\n to match the entire string. For instance, taking the lookahead <span>(?=\\D*\\d)</span> which checks for the presence of one digit, we can add a simple <span>.*\\z</span> to get us to the end of the string.<br><br>\n\nThe pattern would have become:<br>\n<code>\\A(?=\\w{6,10}\\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})\\D*\\d.*\\z</code><br>\n\nBy the way, you may wonder why I bother using the <span>\\z</span> after the <span>.*</span>: shouldn't it get me to the end of the string? In general, not so: unless we're in <a href=\"http://www.rexegg.com/regex-modifiers.html#dotall\">DOTALL mode</a>, the dot doesn't match line breaks. Therefore, the <span>.*</span> only gets you to the end of the first line. After this, the string may have line breaks and many more line. A <span>\\z</span> anchor ensures that after the <span>.*</span> we have reached not only the end of the line, but also the end of the string.\n<br><br>\nIn this particular pattern, the first lookaround <span>(?=\\w{6,10}\\z)</span> already ensures that there cannot be any line breaks in the string, so the final <span>\\z</span> is not strictly necessary.\n<br><br><br>\n\n\n<a name=\"order\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#order\">(direct link)</a></span><br>\n<h2>The Order of Lookaheads Doesn't Matter… Almost</h2>\nIn our password validation pattern, since the three lookaheads don't \nchange our position in the string, we can rearrange them in any order \nwithout affecting the overall logic.\n<br><br>\n\nWhile the order of lookaheads doesn't matter on a logical level, keep in\n mind that it may matter for matching speed. If one lookahead is more \nlikely to fail than the other two, it makes little sense to place it in \nthird position and expend a lot of energy checking the first two \nconditions. Make it first, so that if we're going to fail, we fail \nearly—an application of the <a href=\"http://www.rexegg.com/regex-style.html#design_to_fail\"><i>design to fail</i> principle</a> from the regex style guide.\n<br><br>\n\n\nIn fact, this is what we do by placing the anchor <span>\\A</span>\n in first position. Since it is an assertion that doesn't consume \ncharacters, it too could swap positions with any of the lookaheads. \nWe'll see why this is a bad idea, but first…\n<br><br>\n\nIn passing, consider that <span>\\A</span> can be written with lookarounds: in <a href=\"http://www.rexegg.com/regex-modifiers.html#dotall\">DOTALL mode</a>, where the dot matches any character including line breaks, the negative lookbehind <span>(?&lt;!.)</span> asserts that what precedes the current position is not <i>any character</i>—therefore the position must be the beginning of the string. Without DOTALL mode, the negative lookbehind <span>(?&lt;![\\D\\d])</span> asserts the same, since <span>[\\D\\d]</span> matches one character that is either a digit or a non-digit—in other words, any character.\n<br><br>\n\nNow imagine we set <span>\\A</span> in fourth position, \nafter the three lookaheads. The resulting match would be the same, but \nit could take a lot more time. For instance, suppose the third lookahead\n (whose job it is to assert that the string contains at least one digit)\n fails. After failing to find a match at the first position in the \nstring, the engine advances to the second position and tries the \nlookaheads again, one after the other. Once more, the third lookahead is\n bound to fail to find a digit. After each failure, the engine will \nstart a new match attempt starting at the next position in the string. \nEven when the two first lookaheads succeed (and they may fail, as the \nuppercase or lowercase letter they check for may have been the lone one \nin the string, and at a position already passed), the third lookahead \nwill always fail to find a digit. Therefore the anchor <span>\\A</span> is never even attempted: the pattern fails before the engine reaches that token. <br><br>\n\nIn contrast, when <span>\\A</span> is first, it can only \nmatch at the first position in the string. The third lookahead still \nfails, but when the engine tries to match at further positions, the <span>\\A</span> immediately fails, so the engine doesn't need to waste any more time with the lookaheads.\n<br>\n\n\n<br><br>\n\n<a name=\"stand_their_ground\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#stand_their_ground\">(direct link)</a></span><br>\n<h2>Lookarounds Stand their Ground</h2>\n\nIf I seem to be flogging a dead horse here, it's only because this point\n is the most common source of confusion with lookarounds. As the \npassword validation example made clear, lookarounds stand their ground. \nThey look immediately to the left or right of the engine's current \nposition on the string—but do not alter that position. <br><br>\n\nTherefore, do not expect the pattern <span>A(?=5)</span> to match the <i>A</i> in the string <i>AB25</i>. Many beginners assume that the lookahead says that \"there is a <i>5</i> somewhere to the right\", but that is not so. After the engine matches the <i>A</i>, the lookahead <span>(?=5)</span> asserts that at the current position in the string, what immediately follows is a <i>5</i>. If you want to check if there is a <i>5</i> somewhere (anywhere) to the right, you can use <span>(?=[^5]*5)</span>.\n<br><br>\n\nMoreover, don't expect the pattern <span>A(?=5)(?=[A-Z])</span> to match the <i>A</i> in the string <i>A5B</i>.\n Many beginners assume that the second lookahead looks to the right of \nthe first lookahead. It is not so. At the end of the first lookahead, \nthe engine is still planted at the very same spot in the string, after \nthe <i>A</i>. When the lookahead <span>(?=[A-Z])</span> \ntries to assert that what immediately follows the current position is an\n uppercase letter, it fails because the next character is still the <i>5</i>. If you want to check that the 5 is followed by an uppercase letter, just state it in the first lookahead: <span>(?=5[A-Z])</span>\n<br><br>\n\n\nSo <i>lookahead</i> and <i>lookbehind</i> don't mean \"look way ahead \ninto the distance\". They mean \"look at the text immediately to the left \nor to the right\". If you want to inspect a piece of string further down,\n you will need to insert \"binoculars\" inside the lookahead to get you to\n the part of the string you want to inspect—for instance a <span>.*</span>, or, ideally, more specific tokens.<br>\n<br><br>\n\n\n\n<a name=\"uses\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#uses\">(direct link)</a></span><br>\n<h2>Various Uses for Lookarounds</h2>\nBefore we dive into interesting but sometimes terse details, let's get \nexcited about lookarounds by surveying some of their terrific uses.\n<br><br>\n\n<b>Validation</b><br>\nThe <a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">password validation</a>\n section showed how the combination of several lookaheads can impose a \nnumber of conditions on the string to be matched, allowing us to \nvalidate it with a single pattern.\n<br><br>\n\n<b>Restricting a Character Range (Subtraction, Intersection)</b><br>\nSuppose you want to match one word character <span>\\w</span> as long as it is not the letter <i>Q</i>. There are several ways to do it without lookarounds:<br>\n✽ In engines that support <a href=\"http://www.rexegg.com/regex-class-operations.html#subtraction\">character class subtraction</a>, you can use <span>[\\w-[Q]]</span> (.NET), <span>[\\w&amp;&amp;[^Q]]</span> (Java and Ruby 1.9+) or <span>[\\w--Q]</span> (Python with the alternate <i>regex</i> module)<br>\n✽ You can build a character class such as <span>[_0-9a-zA-PR-Z]</span><br>\n✽ You can use <span>[^\\WQ]</span>—an example of an <a href=\"http://www.rexegg.com/regex-interesting-character-classes.html#obnoxious\">obnoxious double-negative character range</a>.\n<br><br>\n\nIf your engine doesn't support character class subtraction, the simplest may be to use the <a href=\"http://www.rexegg.com/regex-class-operations.html#subtraction_workaround\">workaround</a> shown on the page about class operations. This uses a lookahead to restrict the character class <span>\\w</span>:<br>\n<code>(?!Q)\\w</code>\nAfter the negative lookahead asserts that what follows the current position is not a <i>Q</i>, the <span>\\w</span> matches a word character.\n<br><br>\nNot only is this solution easy to read, it is also easy to maintain if we ever decide to exclude the letter <i>K</i> instead of <i>Q</i>, or to exclude both: <span>(?![QK])\\w</span><br><br>\n\nNote that we can also perform the same exclusion task with a negative lookbehind:<br>\n<code>\\w(?&lt;!Q)</code>\nAfter the <span>\\w</span> matches a word character, the negative lookbehind asserts that what precedes the current position is not a <i>Q</i>.\n<br><br>\n\nUsing the same idea, if we wanted to match one character in the Arabic \nscript as long as it is not a number, we could use this pattern:<br>\n<code>(?!\\p{N})\\p{Arabic}</code>\nThis would work in Perl, PCRE (C, PHP, R…) and Ruby 2+. In .NET and Java, you would use <span>(?!\\p{N})\\p{IsArabic}</span>\n<br><br>\n\nLikewise, we can use this technique to perform a DIY <a href=\"http://www.rexegg.com/regex-class-operations.html#intersection\">character class intersection</a>.\n For instance, to match one character in the Arabic script as long as it\n is a number, we transform the negative lookahead above to a positive \nlookahead. In the Perl / PCRE / Ruby version, this gives us:<br>\n<code>(?=\\p{N})\\p{Arabic}</code>\n<br>\n\nThis is basically the <a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">password validation technique</a> with two conditions applied to a single character.\n\n<br><br>\nNeedless to say, you can interchange the content of the lookahead with the token to be matched:\n<code>(?=\\p{Arabic})\\p{N}</code>\n<br>\n\n\n<b>Tempering the scope of a token</b><br>\nThis use is similar to the last. Instead of removing characters from a \nclass, it restricts the scope within which a token is allowed to match.<br><br>\n\nFor instance, suppose we want to match any character as long as it is not followed by <i>{END}</i>. Using a negative lookahead, we can use:<br>\n<code>(?:(?!{END}).)*</code>\nEach <span>.</span> token is tempered by <span>(?!{END})</span>, which specifies that the dot cannot be the beginning of <i>{END}</i>. This technique is called <a href=\"http://www.rexegg.com/regex-quantifiers.html#tempered_greed\"><i>tempered greedy token</i></a> on the <i>Quantifiers page</i>.<br><br>\n\nAnother technique is:<br>\n<code>(?:[^{]++|{(?!END}))*+</code>\nOn the left side of the alternation, <span>[^{]++</span> matches characters that are not an opening brace. On the right side, <span>{(?!END})</span> matches an opening brace that is not followed by <i>END}</i>.  This technique appears in the <a href=\"http://www.rexegg.com/regex-quantifiers.html#explicit_greed\"><i>Explicit Greedy Alternation</i></a> section of the <i>Quantifiers page</i>.<br><br>\n\n\n<b>Delimiter</b><br>\nDo you have a string where you want to start matching all characters once the first instance of <i>#START#</i> is passed? No problem, just use a lookbehind to make a delimiter:<br>\n<code>(?&lt;=#START#).*</code>\nAfter the lookbehind asserts that what immediately precedes the current position is <i>#START#</i>, the dot-star <span>.*</span> matches all the characters to the right.\n<br><br>\n\nOr would you like to match all characters in a string up to, but not including the characters <i>#END#</i>? Make a delimiter using a lookahead:<br>\n<code>.*?(?=#END#)</code><br>\n\nYou can, of course, combine the two:<br>\n<code>(?&lt;=#START#).*?(?=#END#)</code><br>\n\nSee the page on boundaries for advice on building fancy <a href=\"http://www.rexegg.com/regex-boundaries.html#diy\">DIY delimiters</a>.\n<br>\n<br>\n\n<a name=\"camelinsert\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#camelinsert\">(direct link)</a></span><br>\n<b>Inserting Text at a Position</b><br>\nSomeone gave you a file full of film titles in CamelCase, such as <i>HaroldAndKumarGoToWhiteCastle</i>.\n To make it easier to read, you want to insert a space at each position \nbetween a lowercase letter and an uppercase letter. This regex matches \nthese exact positions:\n<br>\n<code>(?&lt;=[a-z])(?=[A-Z])</code><br>\n\nIn your text editor's regex replacement function, all you have to do is \nreplace the matches space characters, and spaces be inserted in the \nright spot.\n<br><br>\n\nThis regex is what's known as a \"zero-width match\" because it matches a \nposition without matching any actual characters. How does it work? The \nlookbehind asserts that what immediately precedes the current position \nis a lowercase letter. And the lookahead asserts that what immediately \nfollows the current position is an uppercase letter.\n<br><br>\n\n\n<a name=\"camelsplit\"></a>\n   <span><a href=\"http://www.rexegg.com/regex-lookarounds.html#camelsplit\">(direct link)</a></span><br>\n<b>Splitting a String at a Position</b><br>\nWe can use the exact same regex from the previous example to split the string <i>AppleOrangeBananaStrawberryPeach</i> into a list of fruits. Once again, the regex<br>\n<code>(?&lt;=[a-z])(?=[A-Z])</code>\nmatches the positions between a lowercase letter and an uppercase letter.\n<br><br>\n\nIn most languages, when you feed this regex to the function that uses a \nregex pattern to split strings, it returns an array of words.\n<br><br>\n\nNote that Python's <i>re</i> module does not split on zero-width matches—but the far superior <i>regex</i> module does.\n<br><br>\n\n\n<a name=\"overlapping\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#overlapping\">(direct link)</a></span><br>\n<b>Finding Overlapping Matches</b><br>\nSometimes, you need several matches within the same word. For instance, suppose that from a string such as <i>ABCD</i> you want to extract <i>ABCD</i>, <i>BCD</i>, <i>CD</i> and <i>D</i>. You can do it with this single regex:<br>\n<code>(?=(\\w+))</code>\nWhen you allow the engine to find all matches, all the substrings will be captured to Group 1<br><br>\n\nHow does this work?<br><br>\n\nAt the first position in the string (before the <i>A</i>), the engine \nstarts the first match attempt. The lookahead asserts that what \nimmediately follows the current position is one or more word characters,\n and captures these characters to Group 1. The lookahead succeeds, and \nso does the match attempt. Since the pattern didn't match any actual \ncharacters (the lookahead only looks), the engine returns a zero-width \nmatch (the empty string). It also returns what was captured by Group 1: <i>ABCD</i><br><br>\n\nThe engine then moves to the next position in the string and starts the \nnext match attempt. Again, the lookahead asserts that what immediately \nfollows that position is word characters, and captures these characters \nto Group 1. The match succeeds, and Group 1 contains <i>BCD</i>.\n<br><br>\n\nThe engine moves to the next position in the string, and the process repeats itself for <i>CD</i> then <i>D</i>.\n<br><br>\n\nIn .NET, which has infinite lookbehind, you can find overlapping matches\n from the other side of the string. For instance, on the same string <i>ABCD</i>, consider this pattern:<br>\n<code>(?&lt;=(\\w+))</code><br>\nIt will capture <i>A</i>, <i>AB</i>, <i>ABC</i> and <i>ABCD</i>. To \nachieve the same in an engine that doesn't support infinite lookbehind, \nyou would have to reverse the string, use the lookahead version <code>(?=(\\w+))</code> then reverse the captures.<br>\n\n\n<br><br>\n\n\n\n<a name=\"zero_width\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#zero_width\">(direct link)</a></span><br>\n<h2>Zero-Width Matches</h2>\nAs we've seen, a lookaround looks left or right but it doesn't add any \ncharacters to the match to be returned by the regex engine. Likewise, an\n anchor such as <span>^</span> and a boundary such as <span>\\b</span> can match at a given position in the string, but they do not add any characters to the match.<br><br>\n\nUsually, lookaheads, lookbehinds, anchors and boundaries appear in \npatterns that contain tokens that do match characters, allowing the \nengine to return a matched string. For instance, in <span>(?&lt;=start_)\\d+</span>, the engine matches and returns some digits, but not the prefix <i>start_</i>\n<br><br>\n\nHowever, if a pattern only contains lookarounds, anchors and boundaries,\n the engine may be able to match the pattern without matching any \ncharacters. The resulting match is called a <i>zero-width match</i> because it contains no characters.<br><br>\n\nThis can be a useful technique, and we have already seen some applications of zero-width matches in the section on <a href=\"http://www.rexegg.com/regex-lookarounds.html#uses\">uses for lookarounds</a>. To bring them together under one heading, here are some of their main uses.\n<br><br>\n\n<b>Validation</b><br>\nIf you string several lookarounds in a row, you can validate that a string conforms to a set of rules, as in the <a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">password validation technique</a>.\n<br><br>\n\nWe saw that when you have n conditions, if you also want to match the string, you usually need n-1 lookarounds at the most as <a href=\"http://www.rexegg.com/regex-lookarounds.html#n-1conds\">one condition can be removed</a>\n and used in the matching section of the pattern. But if all you want to\n do is validate, all the conditions can stay inside lookarounds, giving \nyou a zero-width match. \n<br><br>\n\n<b>Inserting</b><br>\nYou can use a zero-width match regex to match a position in a string and\n insert text at that position. For instance, by matching <span>(?m)^</span> (the beginning of a line in multiline mode) and replacing the match with <span>// </span>, you can add a prefix to every line of a file.<br><br>\n\nLikewise, we saw how the zero-width pattern <span>(?&lt;=[a-z])(?=[A-Z])</span> allows you to <a href=\"http://www.rexegg.com/regex-lookarounds.html#camelinsert\">insert characters in a CamelCase word</a>.\n<br><br>\n\n<b>Splitting</b><br>\nWe saw how the same zero-width pattern <span>(?&lt;=[a-z])(?=[A-Z])</span> allows you to <a href=\"http://www.rexegg.com/regex-lookarounds.html#camelsplit\">split a CamelCase word</a> into its components.\n<br><br>\n\n<b>Overlapping Matches</b><br>\n\nWe saw how an unanchored lookaround that contains capture groups—such as <span>(?=(\\w+))</span>—allows you to <a href=\"http://www.rexegg.com/regex-lookarounds.html#overlapping\">match overlapping string segments</a>.\n<br><br><br>\n\n\n\n<a name=\"position\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#position\">(direct link)</a></span><br>\n<h2>Positioning the Lookaround</h2>\n\nOften, you have two options for positioning a lookaround: before the \ntext to be matched, or after. Usually, one of the options is more \nefficient because it requires less work of the engine.<br><br>\n\nTo illustrate this, here are examples for each kind of lookaround. I borrowed them from the <a href=\"http://www.rexegg.com/regex-disambiguation.html#lookarounds\">lookarounds section</a> of the main syntax page, where they are discussed in greater detail.\n<br><br>\n\n<b>Lookahead</b><br>\n<span>\\d+(?= dollars)</span> and <span>(?=\\d+ dollars)\\d+</span> both match <i>100</i> in <span>100 dollars</span>, but the first is more efficient because the engine needs to match <span>\\d+</span> only once.\n<br><br>\n\n<b>Negative Lookahead</b><br>\n<span>\\d+(?! dollars)</span> and <span>(?!\\d+ dollars)\\d+</span> both match <i>100</i> in <span>100 pesos</span>, but the first is more efficient because the engine needs to match <span>\\d+</span> only once.\n<br><br>\n\n<b>Lookbehind</b><br>\n<span>(?&lt;=USD)\\d{3}</span> and <span>\\d{3}(?&lt;=USD\\d{3})</span> both match <i>100</i> in <span>USD100</span>, but the first is more efficient because the engine needs to match <span>\\d{3}</span> only once.\n<br><br>\n\n<b>Negative Lookbehind</b><br>\n<span>(?&lt;!USD)\\d{3}</span> and <span>\\d{3}(?&lt;!USD\\d{3})</span> both match <i>100</i> in <span>JPY100</span>, but the first is more efficient because the engine needs to match <span>\\d{3}</span> only once.\n<br><br>\n\n\nWhat may not be so clear is that each of these lookarounds can be used \nin two main ways: before the expression to be matched, or after it. \nThese two ways have a slightly different feel. Please don't obsess over \nthe differences; rather, just cruise through these simple examples to \nbecome familiar with the types of effects you can achieve.\n<br><br>\n\n\nWhen you compare each pair, the two methods have a different <i>feel</i>.\n The point of the examples is not to make you memorize \"the right \nposition\", but to expose you to those two basic feels. Once you're \nfamiliar with them, you will naturally think of rewriting a lookaround \nthat feels too heavy. With a bit of practice, the efficient way of \npositioning your lookarounds will probably come to you naturally. \n<br><br>\n<br>\n\n\n\n\n<a name=\"back_to_the_future\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#back_to_the_future\">(direct link)</a></span><br>\n<h2>Lookarounds that Look on Both Sides: Back to the Future</h2>\nSuppose you want to match a two-digit number surrounded by underscores as in <span>_12_</span> but not the underscores.\n<br><br>\n\nWe have already seen three ways to do this:<br>\n✽ You can match everything and capture the digits to Group 1: <span>_(\\d{2})_</span><br>\n✽  You can use a lookbehind and a lookahead: <span>(?&lt;=_)\\d{2}(?=_)</span><br>\n✽ You can use <span>\\K</span> to drop the first underscore from the match: <span>_\\K\\d{2}(?=_)</span><br>\n<br>\n\nThere is a fourth technique I'd like to introduce you to. I call it the \n\"back to the future lookbehind.\" There shouldn't be any reason to use it\n on its own, but sometimes within an intricate pattern it may just what \nyou need, so it's nice to be familiar with it and add it to your \nrepertoire.<br><br>\n\nWe can position our back-to-the-future lookbehind before or after the digits. Let's start with the <i>before</i> version:<br>\n<code>(?&lt;=_(?=\\d{2}_))\\d+</code><br>\n\nWowzy, what does this do? The lookbehind asserts that what immediately \nprecedes the current position in the string is an underscore, then a \nposition where the lookahead <span>(?=\\d{2}_)</span> can assert that what immediately follows is two digits and an underscore.<br><br>\n\nThis is interesting for several reasons. First, we have a lookahead \nwithin a lookbehind, and even though we were supposed to look backwards,\n this lookahead jumps over the current position by matching the two \ndigits and the trailing underscore. That's acrobatic.\n<br><br>\n\nSecond, note that even though it looks complex, this is a fixed-width \nlookbehind (the width is one character, the underscore), so it should \nwork in all flavors of lookbehind. (However, it does not work in Ruby as\n Ruby does not allow lookaheads and negative lookbehinds inside \nlookbehind.)\n\n<br><br>\nAnother interesting feature is how the notion of \"current position in \nthe string\" is not the same for the lookbehind and for the lookahead. \nYou'll remember that <a href=\"http://www.rexegg.com/regex-lookarounds.html#stand_their_ground\">lookarounds stand their ground</a>, so that after checking the assertion made by a lookaround, the engine hasn't moved in the string. Are we breaking that rule?<br><br>\n\nWe're not. In the string <i>10 _16_ 20</i>, let's say the engine has reached the position between the underscore and the <i>1</i> in <i>16</i>.\n The lookbehind makes an assertion about what can be matched at that \nposition. When the engine exits the lookbehind, it is still standing in \nthat same spot, and the token <span>\\d{2}</span> can proceed to match the characters <i>16</i>.\n<br><br>\n\nBut within the lookbehind itself, we enter a different little world. You\n can imagine that outside that world the engine is red, and inside the \nlittle world of the lookbehind, there is another little engine which is \nyellow. That yellow engine keeps track of its own position in the \nstring. In most engines (.NET proceeds differently), the yellow engine \nis initially dropped at a position in the string that is found by taking\n the red engine's position and subtracting the width of the lookbehind, \nwhich is 1. The yellow engine therefore starts its work before the \nleading underscore. Within the lookbehind's little world, after matching\n the underscore token, the yellow engine's position in the string is \nbetween the underscore and the <i>1</i>. It is that position that the \nlookahead refers to when it asserts that at the current position in the \nstring (according to the little world of the lookbehind and its yellow \nengine), what immediately follows is two digits and an underscore.<br><br>\n\n<b>After the digits</b><br>\nHere is a second version where the \"back-to-the-future lookbehind\" comes after the digits:<br>\n<code>\\d+(?&lt;=_\\d{2}(?=_))</code><br>\n\nThe lookbehind states: what immediately precedes this position in the \nstring is an underscore and two digits, then a position where the \nlookahead <span>(?=_)</span> can assert that what \nimmediately follows the current position in the string (according to the\n yellow engine and the lookbehind's little world) is an underscore.\n<br><br>\n\nThis too is a fixed-width lookbehind (the width is three character, i.e.\n the leading underscore and the two digits), so it should work in all \nflavors of lookbehind except Ruby.\n<br><br><br>\n\n\n\n<a name=\"compound\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#compound\">(direct link)</a></span><br>\n<h2>Compound Lookahead and Compound Lookbehind</h2>\nThe <a href=\"http://www.rexegg.com/regex-lookarounds.html#back_to_the_future\">back-to-the-future lookbehind</a> introduced us to what I call <i>compound lookarounds</i>, i.e., lookarounds that contain other lookarounds. You could also call them <i>nested lookarounds</i>, but for me the idea of compounding captures something more about the feel of working with these constructs.\n<br><br>\n\nLet's look at some examples.<br><br>\n\n<b>Token followed by one character, but not more</b><br>\n How can you match a number that is followed by one underscore, but not more?<br><br>\n\nYou can use this:<br>\n<code>\\d+(?=_(?!_))</code>\nThe lookahead asserts: what follows the current position in the string \nis one underscore, then a position where the negative lookahead <span>(?!_)</span> can assert that what follows is not an underscore. A less elegant variation would be <span>\\d+(?=(?!__)_)</span>\n<br><br>\n\n<b>Token preceded by one character, but not more</b><br>\n How can you match a number that is preceded by one underscore, but not more?<br><br>\n\nYou can use this:<br>\n<code>(?&lt;=(?&lt;!_)_)\\d+</code>\nThe lookbehind asserts: what precedes the current position in the string is a position where the negative lookbehind <span>(?&lt;!_)</span> can assert that what immediately precedes is not an underscore, then an underscore. A variation would be <span>(?&lt;=_(?&lt;!__))\\d+</span>\n<br><br>\n\n<b>Multiple Compounding</b><br>\nNeedless to say, it won't be long until you find occasions to add levels\n of compounding beyond the two we've just seen. But that quickly becomes\n obnoxious, and it becomes simpler to rearrange the regex. For instance,\n building on the previous pattern,<br>\n<code>(?&lt;=(?&lt;!(?&lt;!X)_)_)\\d+</code>\nmatches a number that is precede by an underscore that is not preceded \nby an underscore unless that underscore is preceded by an <i>X</i>.\n<br><br>\nIn .NET, PCRE, Java and Ruby, this could be simplified to <span>(?&lt;=(?&lt;!_)_|X__)\\d+</span> <br>\nIn Perl and Python, you could use <span>(?:(?&lt;=(?&lt;!_)_)|(?&lt;=X__))\\d+</span>\n\n\n<br><br><br>\n\n\n\n<a name=\"atomic\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#atomic\">(direct link)</a></span><br>\n<h2>The Engine Doesn't Backtrack into Lookarounds…<br><br>\n…because they're atomic</h2>\n<br>\nHere's a fun regex task. You have a string like this:<br>\n<span>_rabbit _dog _mouse DIC:cat:dog:mouse</span><br>\n\nThe <i>DIC</i> section at the end contains a list of allowed animals. Our job is to match all the <i>_tokens</i> named after an allowed animal. Therefore, we expect to match <i>_dog</i> and <i>_mouse</i>. A lookaround helps us do this:<br><br>\n<code>_(\\w+)\\b(?=.*:\\1\\b)</code><br>\n\nAfter matching the underscore, we capture a word to Group 1. Then the lookahead <span>(?=.*:\\1\\b)</span>\n asserts what follows the current position in the string is zero or more\n characters, then a colon, then the word captured to Group 1. As hoped, \nthis matches both <i>_dog</i> and <i>_mouse</i>.<br><br>\n\nNow suppose we try a \"reversed\" approach:<br><br>\n\n<code>_(?=.*:(\\w+)\\b)\\1\\b</code><br>\n\nThis only matches <i>_mouse</i>. Why?<br><br>\n\nFirst let's try to understand what this regex hopes to accomplish. It \nmay not be that obvious, but it illustrates an important feature of \nlookarounds.\n<br><br>\nAfter the engine matches the underscore, the lookahead <span>(?=.*:(\\w+)\\b)</span>\n asserts that what follows the current position in the string is any \nnumber of characters, then a colon, then a word (captured to Group 1). \nAfter passing that assertion, the back-reference <span>\\1</span> matches what was captured into Group 1.\n<br><br>\n\nLet's see how this works out. Remember that our string is <br>\n<span>_rabbit _dog _mouse DIC:cat:dog:mouse</span><br>\n\nAfter the underscore that precedes <i>rabbit</i>, we expect the lookahead to fail because there is no <i>rabbit</i> in the <i>DIC</i> section—and it does. The next time we match an underscore is before <i>dog</i>. At that stage, inside the lookahead <span>(?=.*:(\\w+)\\b)</span>,\n the dot-star shoots down to the end of the string, then backtracks just\n far enough to allow the colon to match, after which the word <i>mouse</i> is matched and captured to Group 1. The lookahead succeeds. The next token <span>\\1</span> tries to match <i>mouse</i>, but the next character in the string is the <i>d</i> from <i>dog</i>,\n so the token fails. At this stage, having learned everything about \nbacktracking, we might assume that the regex engine allows the dot-star \nto backtrack even more inside the lookahead, up to the previous colon, \nwhich would then allow <span>(\\w+)</span> to match and capture <i>mouse</i>. Then the back-reference <span>\\1</span> would match <i>mouse</i>, and the engine would return a successful match.<br><br>\n\nHowever, it does not work that way. Once the regex engine has left a \nlookaround, it will not backtrack into it if something fails somewhere \ndown the pattern. On a logical level, that is because the official point\n of a lookaround is to return one of two values: <span>true</span> or <span>false</span>. Once a lookahead evaluates to <span>true</span>\n at a given position in the string, it is always true. From the engine's\n standpoint, there is nothing to backtrack. What would be the \npoint—since the only other available value is <span>false</span>, and that would fail the pattern?\n<br><br>\n\nThe fact that the engine will not backtrack into a lookaround means that it is an <a href=\"http://www.rexegg.com/regex-disambiguation.html#atomic\">atomic block</a>.\n This property of lookarounds will rarely matter, but if someday, in the\n middle of building an intricate pattern, a lookahead refuses to \ncooperate… This may be the reason.\n<br><br><br>\n\n\n<a name=\"width\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#width\">(direct link)</a></span><br>\n<h2>Fixed-Width, Constrained-Width and Infinite-Width Lookbehind</h2>\n\nIn strings such as <i>123456_ORANGE abc12_APPLE</i>, \nsuppose you are interested in matching uppercase words, provided they \nare preceded by a prefix composed of digits and an underscore character.\n Therefore, in this string, you want to match <i>ORANGE</i> but not <i>APPLE</i>.\n<br><br>\n\nIt's worth remembering that in most regex flavors (.NET is one of the few exceptions), the following pattern is invalid:<br><br>\n\n<code>(?&lt;=\\b\\d+_)[A-Z]+</code><br>\n\nThat is because the width of the text matched by the token <span>\\d+</span> can be anything. Most engines require the width of the subexpression within a lookbehind to be known in advance, as in <span>(?&lt;=\\d{3})</span>\n<br><br>\n\nSome engines allow the width of the subexpression within a lookbehind to\n take various pre-determined values found on the various sides of an \nalternation, as in <span>(?&lt;=0|128|\\d{6})</span>. Yet others allow the width to vary within a pre-determined range, as in <span>(?&lt;=d{2,6})</span>\n<br><br>\n\nFor details of what kinds of widths various engines allow in a lookbehind, see the <a href=\"http://www.rexegg.com/regex-disambiguation.html#lookbehind_width\">Lookbehind: Fixed-Width / Constrained Width / Infinite Width</a>\n section of the main syntax page. To honor the winners, I'll just repeat\n here that the only two programming-language flavors that support \ninfinite-width lookbehind are .NET (C#, VB.NET, …) and Matthew Barnett's\n <a href=\"https://pypi.python.org/pypi/regex\" target=\"_blank\"><i>regex</i> module</a> for Python.\n<br><br>\n\n<b>Capture Group Inside Variable Lookbehind: Difference between Java and .NET</b><br>\nBoth Java and .NET allow this pattern: <br>\n<code>(?&lt;=(\\d{1,5}))Z</code><br>\n\n.NET allows it because it supports infinite-width lookbehind. Java \nallows it because it supports lookbehind whose width falls within a \ndefined range. However, they operate differently. As a result, against \nthe string <i>123Z</i>, this pattern will return different Group 1 captures in the two engines.<br><br>\n\n✽ Java captures <i>3</i> to Group 1. The engine sees that \nthe width of the string to be matched inside the lookbehind must fall \nbetween one and five characters. Java tries all the possible fixed-width\n patterns in the range, from the shortest to the longest, until one \nsucceeds. The shortest possible fixed-width pattern is <span>(?&lt;=(\\d{1}))</span>. The engine temporarily skips back one character in the string, tries to match <span>\\d{1}</span> and succeeds. The lookaround succeeds, and Group 1 contains <i>3</i>.<br><br>\n\n✽ .NET captures <i>123</i> to Group 1. The .NET engine has a\n far more efficient way of processing variable-width lookbehinds. \nInstead of trying multiple fixed-width patterns starting at points \nfurther and further back in the string, .NET reverses the string as well\n as the pattern inside the lookbehind, then attempts to match that \nsingle pattern on the reversed string. Therefore, in <i>123Z</i>, to try the lookbehind at the point before <i>Z</i>, it reverses the portion of string to be tested from <i>123</i> to <i>321</i>. Likewise, the lookbehind <span>(?&lt;=(\\d{1,5}))</span> is flipped into the lookahead <span>(?=(\\d{1,5}))</span>. <span>\\d{1,5}</span> matches <i>321</i>. Reversing that string, Group 1 contains <i>123</i>. To only capture <i>3</i> as in Java, you would have to make the quantifier lazy: <code>(?&lt;=(\\d{1,5}?))Z</code>\n<br><br>\n\n✽ Like .NET, the <i>regex</i> alternate regular expressions module for Python captures <i>123</i> to Group 1.<br>\n\n\n<br><br>\n\n\n<b>Workarounds</b><br>\n\nThere are two main workarounds to the lack of support for variable-width (or infinite-width) lookbehind:<br><br>\n\n✽ Capture groups.<br>\nInstead of <span>(?&lt;=\\b\\d+_)[A-Z]+</span>\n, you can use <span>\\b\\d+_([A-Z]+)</span>, which matches \nthe digits and underscore you don't want to see, then matches and \ncaptures to Group 1 the uppercase text you want to inspect. This will \nwork in all major regex flavors.<br><br>\n\n✽ The <span>\\K</span> \"keep out\" verb, which is available in Perl, PCRE (C, PHP, R…) and Ruby 2+.<br>\n<span>\\K</span> tells the engine to drop whatever it has matched so far from the match to be returned. Instead of <span>(?&lt;=\\b\\d+_)[A-Z]+</span>, you can therefore use <span>\\b\\d+_\\K[A-Z]+</span><br>\n<br>\n\nCompared with lookbehinds, both the <span>\\K</span> and capture group workarounds have limitations:<br><br>\n\n✽ When you look for multiple matches in a string, at the starting \nposition of each match attempt, a lookbehind can inspect the characters \nbehind the current position in the string. Therefore, against <i>123</i>, the pattern <code>(?&lt;=\\d)\\d</code> (match a digit preceded by a digit) will match both <i>2</i> and <i>3</i>. In contrast, <i>\\d\\K\\d</i> can only match <i>2</i>, as the starting position after the first match is immediately before the <i>3</i>, and there are not enough digits left for a second match. Likewise, <span>\\d(\\d)</span> can only capture <i>2</i>.\n<br><br>\n\n✽ With lookbehinds, you can impose multiple conditions (similar to our <a href=\"http://www.rexegg.com/regex-lookarounds.html#password\">password validation technique</a>) by using multiple lookbehinds. For instance, to match a digit that is preceded by a lower-case Greek letter, you can use <code>(?&lt;=\\p{Ll})(?&lt;=\\p{Greek})\\d</code>. The first lookbehind <span>(?&lt;=\\p{Ll})</span> ensures that the character immediately to the left is a lower-case letter, and the second lookbehind <span>(?&lt;=\\p{Greek})</span> ensures that the character immediately to the left belongs to the Greek script. With the workarounds, you could use <span>\\p{Greek}\\K\\d</span> to match a digit preceded by a character in the Greek script (or <span>\\p{Greek}(\\d)</span>\n to capture it), but you cannot impose a second condition. To get over \nthis limitation, you could capture the Greek character and use a second \nregex to check that it is a lower-case letter. \n<br>\n\n\n<br><br>\n\n\n<a name=\"anchor\"></a>\n<span><a href=\"http://www.rexegg.com/regex-lookarounds.html#anchor\">(direct link)</a></span><br>\n<h2>Lookarounds (Usually) Want to be Anchored</h2>\n\nLet's imagine we want to match a string consisting of one word, provided\n it contains at least one digit. This pattern offers a reasonable \nsolution—one of several:<br>\n<code>\\A(?=\\D*\\d)\\w+\\z</code><br>\n\nThe <a href=\"http://www.rexegg.com/regex-anchors.html#A\"><span>\\A</span> anchor</a> asserts that the current position is the beginning of the string. The lookahead <span>(?=\\D*\\d)</span>\n asserts that at the current position (which is still the beginning of \nthe string), we can match zero or more non-digits, then one digit. Next,\n <span>\\w+</span> matches our word. Finally, the <a href=\"http://www.rexegg.com/regex-anchors.html#z\"><span>\\z</span> anchor</a> asserts that the current position is the end of the string.\n<br><br>\n\nNow consider what happens when we forget the anchor <span>\\A</span> and use <span>(?=\\D*\\d)\\w+\\z</span>.\n To make our oversight seem less severe, let's assume we know that our \nstring always contains an uninterrupted string of word characters. This \nguarantees that if we find a match, it will have to be the right one—at \nthe beginning of the string, as we wanted. So what's the problem?\n<br><br>\n\nSuppose we use our regex on a string composed of one hundred characters <i>V</i>.\n Since the string doesn't contain a single digit, you and I can \nimmediately see that the regex must fail. Let's see how fast the engine \ncomes to the same conclusion. \n<br><br>\n\nAs always, the engine begins by trying to match the pattern at the first position in the string. Starting with the first token <span>(?=\\D*\\d)</span>,\n it tries to assert that at the current position, i.e. the beginning of \nthe string, it can match zero or more non-digits, then one digit. Within\n the subexpression, the <span>\\D*</span> matches all the <i>V</i> characters. The engine then tries to match a digit, but since we have reached the end of the string, that fails.\n<br><br>\n\nIf we're using a smart engine such as PCRE, at this stage the engine \nfails the lookaround for this first match attempt. That's because before\n starting the match attempt, the engine has studied the pattern and \nnoticed that the <span>\\D</span> and <span>\\d</span> tokens are mutually exclusive, and it has turned the <span>*</span> quantifier into a possessive quantifier <span>*+</span>, a process known to PCRE as <i>auto-possessification</i> (see <a href=\"http://www.rexegg.com/regex-lookarounds.html#atomic\">footnote</a>).\n<br><br>\n\nA less clever engine will backtrack, giving up all the <span>\\D</span> characters it has matched one by one, each time attempting to match a <span>\\d</span> after giving up a <span>\\D</span>. Eventually, the engine runs out of characters to backtrack, and the lookahead fails.<br><br>\n\nOnce the engine understands that the lookahead must fail (whether it \ncomes to this conclusion cleverly or clumsily), it gives up on the \nentire first match attempt. Next, as always in such cases, the engine \nmoves to the next position in the string (past the first <i>V</i>) and starts a new match attempt. Again, the <span>\\D*</span> eats up all the <i>V</i>\n characters—although this time, there are only 99 of them. Again, the \nlookahead fails, either fast if the engine is smart, or, more likely, \nafter backtracking all the way back to the starting position.\n<br><br>\n\nAfter failing a second time, the engine moves past the second <i>V</i>, starts a new match attempt, and fails… And so on, all the way to the end of the string.\n<br><br>\n\nBecause the pattern is not anchored at the beginning of the string, at \neach match attempt, the engine checks whether the lookahead matches at \nthe current position. In doing so, in the best case, it matches 100 <i>V</i>\n characters, then 99 on the second attempt, and so on—so it needs about \n5000 steps before it can see that the pattern will never match. In the \nmore usual case, the engine needs to backtrack and try the <span>\\d</span> at each position, adding two steps at each <i>V position</i>. Altogether, it needs about 15,000 steps before it can see that the pattern will never match.\n<br><br>\n\nIn contrast, with the original anchored pattern <span>\\A(?=\\D*\\d)\\w+\\z</span>,\n after the engine fails the first match attempt, each of the following \nmatch attempts at further positions in the string fail instantly, \nbecause the <span>\\A</span> fails before the engine gets \nto the lookahead. In the best case, the engine takes about 200 steps to \nfail (100 steps to match all the <i>V</i> characters, then one step at \neach of the further match attempts.) In the more usual case, the engine \ntakes about 400 steps to fail (300 steps on the first match attempt, \nthen one step at each of the further match attempts.)\n<br><br>\n\nNeedless to say, the ratio of (15,000 / 400) steps is the kind of \nperformance hit we try to avoid in computing. This makes a solid case \nfor helping the engine along by minimizing the number of times \nlookaheads must be attempted, either by using <a href=\"http://www.rexegg.com/regex-anchors.html\">anchors</a> such as <span>^</span>\nand <span>\\A</span>, or by matching literal characters immediately before the lookahead.\n<br><br>\n\n\n<b>One Exception: Overlapping Matches</b><br>\nThere are times when we do want the engine to attempt the lookahead at \nevery single position in the string. Usually, the purpose of such a \nmaneuver is to match a number of overlapping substrings. For instance, \nagainst the string <span>word</span>, if the regex <span>(?=(\\w+))</span> is allowed to match repeatedly, it will match four times, and each match will capture a different string to Group 1: <i>word</i>, <i>ord</i>, <i>rd</i>, then <i>d</i>. The section on <a href=\"http://www.rexegg.com/regex-lookarounds.html#overlapping\">overlapping matches</a> explains how this works.\n\n\n<br><br>\n<br>\n\n\n\n<h2>Footnotes</h2>\n\n<a name=\"atomictweak\"></a>\n<b>Atomic tweak</b><br>\nThe <a href=\"http://www.rexegg.com/regex-disambiguation.html#atomic\">atomic</a> variation <span>(?&gt;[^a-z]*)[a-z]</span> or <a href=\"http://www.rexegg.com/regex-quantifiers.html#possessive\">possessive</a> version <span>[^a-z]*+[a-z]</span>\n are tweaks that ensure that if the engine fails to find the lowercase \nletter, it won't \"stupidly\" backtrack, giving up the non-lowercase \nletters one by one to see if a lowercase letter might fit at that stage.\n<br><br>\nNote that before they start matching, some engines notice the mutually exclusive character of <span>[a-z]</span> and its counterclass and automatically make the <span>*</span> quantifier possessive for you. This optimization is what PCRE calls <i>auto-possessification</i>. It allows you to turn it off with the <a href=\"http://www.rexegg.com/regex-modifiers.html#pcre\">Special Start-of-Pattern Modifier</a> <span>(*NO_AUTO_POSSESS)</span>—but why would you ever want to?&nbsp;","tags":"javascript,Regex","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 21:23:59 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 21:23:59 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"t4D14QAQ86D1xugi"}
{"id":"0","category":"javascript","categoryId":"30","title":"Sorts an array of objects","codes":[{"code":"var arrOfObj = [\n    {\n        \"Name\": \"Zak\",\n        \"Age\": 25\n    },\n    {\n        \"Name\": \"Adel\",\n        \"Age\": 38\n    },\n    {\n        \"Name\": \"Yori\",\n        \"Age\": 28\n    }\n];\n\n// sort an array of objects\n/*\narrOfObj.sort(function (a, b) {\n    return a.Name > b.Name;\n});\n*/\n\nsortArrOfObjectsByParam(arrOfObj, \"Name\");\nalert(\"ASCENDING: \" + arrOfObj[0].Name + \", \" + arrOfObj[1].Name + \", \" + arrOfObj[2].Name);\n\nsortArrOfObjectsByParam(arrOfObj, \"Name\", false);\nalert(\"DECENDING: \" + arrOfObj[0].Name + \", \" + arrOfObj[1].Name + \", \" + arrOfObj[2].Name);\n\n\n/*\n    Sorts an array of objects (note: sorts the original array and returns nothing)\n\n    @arrToSort             array           javascript array of objects\n    @strObjParamToSortBy   string          name of obj param to sort by, and an \n    @sortAsc               bool (optional) sort ascending or decending (defaults to true and sorts in ascending order)\n    returns                void            because the original array that gets passed in is sorted\n*/\nfunction sortArrOfObjectsByParam(arrToSort /* array */, strObjParamToSortBy /* string */, sortAscending /* bool(optional, defaults to true) */) {\n    if(sortAscending == undefined) sortAscending = true;  // default to true\n    \n    if(sortAscending) {\n        arrToSort.sort(function (a, b) {\n            return a[strObjParamToSortBy] > b[strObjParamToSortBy];\n        });\n    }\n    else {\n        arrToSort.sort(function (a, b) {\n            return a[strObjParamToSortBy] < b[strObjParamToSortBy];\n        });\n    }\n}","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"javascript,array,sort","isStarred":"false","note":"","dateCreated":"Mon Feb 23 2015 17:32:15 GMT+0530 (India Standard Time)","dateModified":"Mon Feb 23 2015 17:32:15 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"uOfh9zEkzIe1IWeA"}
{"id":"uOviaj3uhP328HNG","category":"javascript","categoryId":"30","title":"5 Simple JavaScript DOM Performance Tips","codes":[{"code":"\n/* Reduce DOM modifications\n------------------------------------*/\n\n// fail\n\nvar div = document.createElement(\"div\"),\nsection = document.createElement(\"section\")\n\ndocument.body.appendChild(div)\ndocument.body.appendChild(section)\n\n// win\n\nvar fragment = document.createDocumentFragment(),\ndiv = document.createElement(\"div\"),\nsection = document.createElement(\"section\")\n\nfragment.appendChild(div)\nfragment.appendChild(section)\ndocument.body.appendChild(fragment)\n\n\n/* Cache selectors\n------------------------------------*/\n\n// fail\n\ndocument.querySelector(\"img\").src = \"foo.png\"\ndocument.querySelector(\"img\").alt = \"bar\"\n\n// win\n\nvar image = document.querySelector(\"img\")\nimage.src = \"foo.png\"\nimage.alt = \"bar\"\n\n/* Use appropriate selectors\n------------------------------------*/\n\n// fail\n\nvar foo = document.querySelector(\"#foo\"),\ndivs = document.querySelectorAll(\"div\")\n\n// win\n\nvar foo = document.getElementById(\"foo\"),\ndivs = document.getElementsByTagName(\"div\")\n\n/* Prefer property access over attribute methods\n------------------------------------*/\n\n// fail\n\ndocument.querySelector(\"div\").setAttribute(\"id\", \"foo\")\n\n// win\n\ndocument.querySelector(\"div\").id = \"foo\"\n\n\n/* Use native features\n------------------------------------*/\n\n// fail\n\nvar div = document.querySelector(\".foo.bar\")\ndiv.className = div.className.replace(/(?:^|\\s)foo(?!\\S)/g,\"\")\n\n// win\n\nvar div = document.querySelector(\".foo.bar\")\ndiv.classList.remove(\"foo\")","codeLanguage":"javascript"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<p><br></p>","tags":"javascript","isStarred":"false","note":"","dateCreated":"Sat Jan 24 2015 18:45:15 GMT+0530 (India Standard Time)","dateModified":{"$$date":1422108805116},"mode":"add","comments":[],"images":[],"_id":"uOviaj3uhP328HNG"}
{"id":"uxBI6SGVHEzU8vSK","category":"javascript","categoryId":"30","title":"66 CSS effects for notifications using animate.css","refSite":"http://simbyone.com/66-css-effects-you-can-use-for-notifications/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p><span>T</span>his tutorial is aimed to show you some \nvery common CSS transitions used in development. I chose to illustrate \nthis on notifications because i can use the both hidden and visible \nstates of elements to display a broad range of animations.<br>\n&nbsp;<br>\nThe animations where created originally by <a title=\"Daniel Eden\" href=\"http://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"nofollow\">Daniel Eden</a>.<br>\n&nbsp;<br>\nThere are 4 types of notifications i have used: Top, Center, Bottom Center, Bottom Right.<br>\n&nbsp;</p>\n<div><strong>This tutorial</strong> will only work on browsers that supports the most recent CSS3 features and this tutorial is not ready for production.</div>\n<p>&nbsp;</p><p><span>HTML</span></p>\n<p>&nbsp;Everything will stay inside “notifications” element.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications\"</span><span>&gt;&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;<br>\n“notifications-window” is the element that hold the two drop downs, the \nposition of the notification and the effects used. Because there are \nmany effects i won’t include them all here but you will find them in the\n demo or download.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-window\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"notifications-window-row\"</span><span> </span><span>style</span><span>=</span><span>\"</span><span>margin</span><span>-</span><span>top</span><span>:</span><span>85px</span><span>;</span><span>\"</span><span>&gt;</span></li><li><span>&lt;select</span><span> </span><span>class</span><span>=</span><span>\"dropdown\"</span><span> </span><span>id</span><span>=</span><span>\"position\"</span><span>&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"top\"</span><span>&gt;</span><span>Top</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"center\"</span><span>&gt;</span><span>Center</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bottom\"</span><span>&gt;</span><span>Bottom Center</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"botom_right\"</span><span>&gt;</span><span>Bottom Right</span><span>&lt;/option&gt;</span></li><li><span>&lt;/select&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"notifications-window-row\"</span><span>&gt;</span></li><li><span>&lt;select</span><span> </span><span>class</span><span>=</span><span>\"dropdown\"</span><span> </span><span>id</span><span>=</span><span>\"effects\"</span><span>&gt;</span></li><li><span>&lt;optgroup</span><span> </span><span>label</span><span>=</span><span>\"Attention Seekers\"</span><span>&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounce\"</span><span>&gt;</span><span>bounce</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"flash\"</span><span>&gt;</span><span>flash</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"pulse\"</span><span>&gt;</span><span>pulse</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"rubberBand\"</span><span>&gt;</span><span>rubberBand</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"shake\"</span><span>&gt;</span><span>shake</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"swing\"</span><span>&gt;</span><span>swing</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"tada\"</span><span>&gt;</span><span>tada</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"wobble\"</span><span>&gt;</span><span>wobble</span><span>&lt;/option&gt;</span></li><li><span>&lt;/optgroup&gt;</span></li><li><span>&nbsp;</span></li><li><span>&lt;optgroup</span><span> </span><span>label</span><span>=</span><span>\"Bouncing Entrances\"</span><span>&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceIn\"</span><span>&gt;</span><span>bounceIn</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceInDown\"</span><span>&gt;</span><span>bounceInDown</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceInLeft\"</span><span>&gt;</span><span>bounceInLeft</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceInRight\"</span><span>&gt;</span><span>bounceInRight</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceInUp\"</span><span>&gt;</span><span>bounceInUp</span><span>&lt;/option&gt;</span></li><li><span>&lt;/optgroup&gt;</span></li><li><span>&nbsp;</span></li><li><span>&lt;optgroup</span><span> </span><span>label</span><span>=</span><span>\"Bouncing Exits\"</span><span>&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceOut\"</span><span>&gt;</span><span>bounceOut</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceOutDown\"</span><span>&gt;</span><span>bounceOutDown</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceOutLeft\"</span><span>&gt;</span><span>bounceOutLeft</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceOutRight\"</span><span>&gt;</span><span>bounceOutRight</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"bounceOutUp\"</span><span>&gt;</span><span>bounceOutUp</span><span>&lt;/option&gt;</span></li><li><span>&lt;/optgroup&gt;</span></li><li><span>&nbsp;</span></li><li><span>&lt;optgroup</span><span> </span><span>label</span><span>=</span><span>\"Zoom Exits\"</span><span>&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"zoomOut\"</span><span>&gt;</span><span>zoomOut</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"zoomOutDown\"</span><span>&gt;</span><span>zoomOutDown</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"zoomOutLeft\"</span><span>&gt;</span><span>zoomOutLeft</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"zoomOutRight\"</span><span>&gt;</span><span>zoomOutRight</span><span>&lt;/option&gt;</span></li><li><span>&lt;option</span><span> </span><span>value</span><span>=</span><span>\"zoomOutUp\"</span><span>&gt;</span><span>zoomOutUp</span><span>&lt;/option&gt;</span></li><li><span>&lt;/optgroup&gt;</span></li><li><span>&lt;/select&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>class</span><span>=</span><span>\"notifications-window-row\"</span><span> </span><span>style</span><span>=</span><span>\"</span><span>margin</span><span>-</span><span>top</span><span>:</span><span>60px</span><span>;</span><span>\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-window-row-button\"</span><span>&gt;</span><span>Submit</span><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe top element will not be shown in the demo HTML but it will be \navailable in the JavaScript as a variable and it will be inserted when \nthe “Top” option is selected.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-top-center\"</span><span>&gt;</span></li><li><span>&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe20e;\"</span><span>&gt;&lt;/span&gt;</span></li><li><span>Oups something went wrong !</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-top-center-close\"</span><span> </span><span>class</span><span>=</span><span>\"close\"</span><span>&gt;</span></li><li><span>&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe20e;\"</span><span>&gt;&lt;/span&gt;</span></li><li><span>&lt;/div&gt;&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe same can be said for Center, Bottom Center and Bottom Right \nnotifications. They will not show up in HTML but they will be appended \nusing jquery.<br>\n&nbsp;</p>\n<pre><ol><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-full\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-full-close\"</span><span> </span><span>class</span><span>=</span><span>\"close\"</span><span>&gt;&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe20e;\"</span><span>&gt;&lt;/span&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-full-icon\"</span><span>&gt;&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe261;\"</span><span>&gt;&lt;/span&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-full-text\"</span><span>&gt;</span></li><li><span>This is a large notification. You can use this notification to display long warnings. This type of notification is not suited for short warnings. As an added bonus you have a big icon at the top.</span><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>  </span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab-close\"</span><span> </span><span>class</span><span>=</span><span>\"close\"</span><span>&gt;&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe20e;\"</span><span>&gt;&lt;/span&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab-avatar\"</span><span>&gt;&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/avatar.png\"</span><span> </span><span>width</span><span>=</span><span>\"100\"</span><span> </span><span>height</span><span>=</span><span>\"100\"</span><span> </span><span>/&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab-right\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab-right-title\"</span><span>&gt;&lt;span&gt;</span><span>George</span><span>&lt;/span&gt;</span><span> sent you a message</span><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-center-tab-right-text\"</span><span>&gt;</span><span>This is a sample notification that  will appear centered in the bottom .</span><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>  </span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab-close\"</span><span> </span><span>class</span><span>=</span><span>\"close\"</span><span>&gt;&lt;span</span><span> </span><span>class</span><span>=</span><span>\"iconb\"</span><span> </span><span>data-icon</span><span>=</span><span>\"&amp;#xe20e;\"</span><span>&gt;&lt;/span&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab-avatar\"</span><span>&gt;&lt;img</span><span> </span><span>src</span><span>=</span><span>\"_assets/avatar.png\"</span><span> </span><span>width</span><span>=</span><span>\"70\"</span><span> </span><span>height</span><span>=</span><span>\"70\"</span><span> </span><span>/&gt;&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab-right\"</span><span>&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab-right-title\"</span><span>&gt;&lt;span&gt;</span><span>George</span><span>&lt;/span&gt;</span><span> sent you a message</span><span>&lt;/div&gt;</span></li><li><span>&lt;div</span><span> </span><span>id</span><span>=</span><span>\"notifications-bottom-right-tab-right-text\"</span><span>&gt;</span><span>This is a sample notification that  will appear the right bottom corner.</span><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li><li><span>&lt;/div&gt;</span></li></ol></pre>\n<p>&nbsp;</p>\n<h1>CSS</h1>\n<p>&nbsp;<br>\nThere are two main CSS files linked in the document. The first one is \nanimate.css which stores the actual animation classes. The second CSS \nfile attached is animated-notifications.css, this contains the CSS code \nfor this tutorial. If you only want to use a particular effect you will \nhave to go and find the CSS class with the name of the desired effect \ninside animate.css. In order for the notifications to properly be \naligned. I have created a separate div to hold the background and it \nwill freely float inside “notifications” div which is the master div \nelement.<br>\n&nbsp;</p>\n<pre><ol><li><span>#notifications {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\toverflow</span><span>:</span><span> hidden</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tposition</span><span>:</span><span> relative</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-background {</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nThe two select drop downs and the select button are hosted inside \n“#notifications-window”. The position of this div is absolute and is \ncentered using the absolute position with 50% from left and the left \nmargin set to -352px because the total div width is 700px + (2 x 2px ) \nbecause of the borders on each side. Regarding the rest of the css \nstyles for this sections i am going to leave you at this because there \nis nothing special and i don’t want to bother you. So let’s move on to \nbigger and better things.<br>\n&nbsp;</p>\n<pre><ol><li><span>#notifications-window {</span></li><li><span>\theight</span><span>:</span><span> </span><span>400px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>700px</span><span>;</span></li><li><span>\tborder</span><span>:</span><span> </span><span>2px</span><span> solid </span><span>#FFF;</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>50</span><span>%;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>20</span><span>%;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>-</span><span>352px</span><span>;</span></li><li><span>}</span></li><li><span>.</span><span>notifications</span><span>-</span><span>window</span><span>-</span><span>row </span><span>{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\theight</span><span>:</span><span> </span><span>44px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>30px</span><span>;</span></li><li><span>}</span></li><li><span>.</span><span>dropdown </span><span>{</span></li><li><span>\theight</span><span>:</span><span> </span><span>40px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>300px</span><span>;</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>63</span><span>,</span><span>141</span><span>,</span><span>191</span><span>,</span><span>1</span><span>);</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>198px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>16px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>\toutline</span><span>:</span><span> none</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tposition</span><span>:</span><span> relative</span><span>;</span></li><li><span>\tborder</span><span>-</span><span>top</span><span>-</span><span>style</span><span>:</span><span> none</span><span>;</span></li><li><span>\tborder</span><span>-</span><span>right</span><span>-</span><span>style</span><span>:</span><span> none</span><span>;</span></li><li><span>\tborder</span><span>-</span><span>bottom</span><span>-</span><span>style</span><span>:</span><span> none</span><span>;</span></li><li><span>\tborder</span><span>-</span><span>left</span><span>-</span><span>style</span><span>:</span><span> none</span><span>;</span><span>\t</span></li><li><span>}</span></li><li><span>#notifications-window-row-button{</span></li><li><span>\twidth</span><span>:</span><span> </span><span>304px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>right</span><span>:</span><span> </span><span>auto</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>auto</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>44px</span><span>;</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>233</span><span>,</span><span>30</span><span>,</span><span>99</span><span>,</span><span>0.8</span><span>);</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>18px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>44px</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-window-row-button:hover {</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>233</span><span>,</span><span>30</span><span>,</span><span>99</span><span>,</span><span>1</span><span>);</span></li><li><span>\tcursor</span><span>:</span><span> pointer</span><span>;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;<br>\nThe same goes for the rest of the CSS, nothing special here just the \nfact that all notifications div elements have the position set to \nabsolute.<br>\n&nbsp;</p>\n<pre><ol><li><span>#notifications-bottom-right {</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>360px</span><span>;</span></li><li><span>\tright</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tbottom</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab{</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>360px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tposition</span><span>:</span><span> relative</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\tbox</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\t</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-close{</span></li><li><span>\theight</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>40px</span><span>;</span></li><li><span>\tright</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#cccccc;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>18px</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-close:hover {</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>102</span><span>,</span><span>102</span><span>,</span><span>102</span><span>,</span><span>1</span><span>);</span></li><li><span>\tcursor</span><span>:</span><span> pointer</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-avatar{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>70px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-avatar img{</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>border</span><span>-</span><span>radius</span><span>:</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>border</span><span>-</span><span>radius</span><span>:</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%;</span></li><li><span>\tborder</span><span>-</span><span>radius</span><span>:</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%;</span></li><li><span>\t</span><span>-</span><span>khtml</span><span>-</span><span>border</span><span>-</span><span>radius</span><span>:</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%</span><span> </span><span>50</span><span>%;</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>15px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-right{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>210px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-right-title{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#252525;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-right-title span{</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#e91e63;</span></li><li><span>}</span></li><li><span>#notifications-bottom-right-tab-right-text{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>14px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#4c4c4c;</span></li><li><span>\tfont</span><span>-</span><span>style</span><span>:</span><span> italic</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>5px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center{</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>360px</span><span>;</span></li><li><span>\tbottom</span><span>:</span><span> </span><span>90px</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>50</span><span>%;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>-</span><span>180px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab{</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>360px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tposition</span><span>:</span><span> relative</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\tbox</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>10px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-close{</span></li><li><span>\theight</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>40px</span><span>;</span></li><li><span>\tright</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#cccccc;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>18px</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-close:hover {</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>102</span><span>,</span><span>102</span><span>,</span><span>102</span><span>,</span><span>1</span><span>);</span></li><li><span>\tcursor</span><span>:</span><span> pointer</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-avatar{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-avatar img{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-right{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>210px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-right-title{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#252525;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-right-title span{</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#e91e63;</span></li><li><span>}</span></li><li><span>#notifications-bottom-center-tab-right-text{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>14px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#4c4c4c;</span></li><li><span>\tfont</span><span>-</span><span>style</span><span>:</span><span> italic</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>5px</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-top-center {</span></li><li><span>\tposition</span><span>:</span><span> </span><span>fixed</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>0px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\theight</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#404040;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>18px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>600</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-top-center-close {</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>233</span><span>,</span><span>30</span><span>,</span><span>99</span><span>,</span><span>0.6</span><span>);</span></li><li><span>\t</span><span>float</span><span>:</span><span> right</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>30px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tfont</span><span>-</span><span>weight</span><span>:</span><span> </span><span>400</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-top-center-close:hover {</span></li><li><span>\tcursor</span><span>:</span><span> pointer</span><span>;</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>233</span><span>,</span><span>30</span><span>,</span><span>99</span><span>,</span><span>1</span><span>);</span></li><li><span>}</span></li><li><span>#notifications-full{</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>50px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>box</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>50px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\tbox</span><span>-</span><span>shadow</span><span>:</span><span> </span><span>0px</span><span> </span><span>0px</span><span> </span><span>50px</span><span> rgba</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0.1</span><span>);</span></li><li><span>\theight</span><span>:</span><span> </span><span>300px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>530px</span><span>;</span></li><li><span>\tbackground</span><span>-</span><span>color</span><span>:</span><span> rgba</span><span>(</span><span>255</span><span>,</span><span>255</span><span>,</span><span>255</span><span>,</span><span>1</span><span>);</span></li><li><span>\tposition</span><span>:</span><span> </span><span>fixed</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>10</span><span>%;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>-</span><span>265px</span><span>;</span></li><li><span>\tz</span><span>-</span><span>index</span><span>:</span><span> </span><span>2</span><span>;</span></li><li><span>\tleft</span><span>:</span><span> </span><span>50</span><span>%;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>10</span><span>%;</span></li><li><span>}</span></li><li><span>#notifications-full-close{</span></li><li><span>\theight</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tposition</span><span>:</span><span> absolute</span><span>;</span></li><li><span>\ttop</span><span>:</span><span> </span><span>10px</span><span>;</span></li><li><span>\tright</span><span>:</span><span> </span><span>10px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#cccccc;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>20px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\t</span><span>-</span><span>webkit</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>moz</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\t</span><span>-</span><span>o</span><span>-</span><span>transition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>\ttransition</span><span>:</span><span> all </span><span>0.5s</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-full-close:hover {</span></li><li><span>\tcolor</span><span>:</span><span> rgba</span><span>(</span><span>102</span><span>,</span><span>102</span><span>,</span><span>102</span><span>,</span><span>1</span><span>);</span></li><li><span>\tcursor</span><span>:</span><span> pointer</span><span>;</span></li><li><span>}</span></li><li><span>#notifications-full-icon{</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\twidth</span><span>:</span><span> </span><span>100</span><span>%;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>65px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\theight</span><span>:</span><span> </span><span>65px</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>35px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#404040;</span></li><li><span>}</span></li><li><span>#notifications-full-text{</span></li><li><span>\twidth</span><span>:</span><span> </span><span>430px</span><span>;</span></li><li><span>\t</span><span>float</span><span>:</span><span> left</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>left</span><span>:</span><span> </span><span>50px</span><span>;</span></li><li><span>\ttext</span><span>-</span><span>align</span><span>:</span><span> center</span><span>;</span></li><li><span>\tmargin</span><span>-</span><span>top</span><span>:</span><span> </span><span>40px</span><span>;</span></li><li><span>\tfont</span><span>-</span><span>size</span><span>:</span><span> </span><span>16px</span><span>;</span></li><li><span>\tline</span><span>-</span><span>height</span><span>:</span><span> </span><span>24px</span><span>;</span></li><li><span>\tcolor</span><span>:</span><span> </span><span>#404040;</span></li><li><span>}</span></li></ol></pre>\n<p>&nbsp;</p>\n<h1>JavaScript</h1>\n<p>&nbsp;<br>\nFor the #notifications to be the size of the browser window all the time\n and not smaller or bigger I have created a resize function that will be\n activated when the page is loaded and when the window is resized.<br>\n&nbsp;</p>\n<pre><ol><li><span>function</span><span> resize</span><span>(){</span></li><li><span>$</span><span>(</span><span>'#notifications'</span><span>).</span><span>height</span><span>(</span><span>window</span><span>.</span><span>innerHeight </span><span>-</span><span> </span><span>50</span><span>);</span></li><li><span>}</span></li><li><span>&nbsp;</span></li><li><span>$</span><span>(</span><span> window </span><span>).</span><span>resize</span><span>(</span><span>function</span><span>()</span><span> </span><span>{</span><span>resize</span><span>();});</span></li><li><span>&nbsp;</span></li><li><span>resize</span><span>();</span></li></ol></pre>\n<p>&nbsp;<br>\nNext we have to create a universal function that will be applied each time the close button is clicked.<br>\n&nbsp;</p>\n<pre><ol><li><span>function</span><span> refresh_close</span><span>(){</span></li><li><span>$</span><span>(</span><span>'.close'</span><span>).</span><span>click</span><span>(</span><span>function</span><span>(){</span><span>$</span><span>(</span><span>this</span><span>).</span><span>parent</span><span>().</span><span>fadeOut</span><span>(</span><span>200</span><span>);});</span></li><li><span>}</span></li><li><span>refresh_close</span><span>();</span></li></ol></pre>\n<p>&nbsp;<br>\nThe HTML for each notification is written inside each variable that corresponds to each notification.<br>\n&nbsp;</p>\n<pre><ol><li><span>var</span><span> top </span><span>=</span><span> </span><span>'&lt;div id=\"notifications-top-center\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe20e;\"&gt;&lt;/span&gt; Oups something went wrong !&lt;div id=\"notifications-top-center-close\" class=\"close\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe20e;\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;'</span><span>;</span></li><li><span>&nbsp;</span></li><li><span>var</span><span> center </span><span>=</span><span> </span><span>'&lt;div id=\"notifications-full\"&gt;&lt;div id=\"notifications-full-close\" class=\"close\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe20e;\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=\"notifications-full-icon\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe261;\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=\"notifications-full-text\"&gt;This is a large notification. You can use this notification to display long warnings. This type of notification is not suited for short warnings. As an added bonus you have a big icon at the top.&lt;/div&gt;&lt;/div&gt;'</span><span>;</span></li><li><span>&nbsp;</span></li><li><span>var</span><span> bottom </span><span>=</span><span> </span><span>'&lt;div id=\"notifications-bottom-center-tab\"&gt;&lt;div id=\"notifications-bottom-center-tab-close\" class=\"close\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe20e;\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=\"notifications-bottom-center-tab-avatar\"&gt;&lt;img src=\"_assets/avatar.png\" width=\"100\" height=\"100\" /&gt;&lt;/div&gt;&lt;div id=\"notifications-bottom-center-tab-right\"&gt;&lt;div id=\"notifications-bottom-center-tab-right-title\"&gt;&lt;span&gt;George&lt;/span&gt; sent you a message&lt;/div&gt;&lt;div id=\"notifications-bottom-center-tab-right-text\"&gt;This is a sample notification that &lt;br&gt; will appear centered in the bottom .&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span><span>;</span></li><li><span>&nbsp;</span></li><li><span>var</span><span> bottom_center </span><span>=</span><span> </span><span>'&lt;div id=\"notifications-bottom-right-tab\"&gt;&lt;div id=\"notifications-bottom-right-tab-close\" class=\"close\"&gt;&lt;span class=\"iconb\" data-icon=\"&amp;#xe20e;\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=\"notifications-bottom-right-tab-avatar\"&gt;&lt;img src=\"_assets/avatar.png\" width=\"70\" height=\"70\" /&gt;&lt;/div&gt;&lt;div id=\"notifications-bottom-right-tab-right\"&gt;&lt;div id=\"notifications-bottom-right-tab-right-title\"&gt;&lt;span&gt;George&lt;/span&gt; sent you a message&lt;/div&gt;&lt;div id=\"notifications-bottom-right-tab-right-text\"&gt;This is a sample notification that &lt;br&gt; will appear the right bottom corner.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span><span>;</span></li></ol></pre>\n<p>&nbsp;<br>\nThe last thing we have to do is to insert each notification when the \nappropriate effect is selected. All if statements will become active \nonly when the “#notifications-window-row-button” is clicked. After the \nsubmit button is clicked depending on which position has been chosen, \nthe appropriate statement will be activated. If the ‘top’ position is \nselected we will see this by checking the value inside the select field.\n We always have to remove the old content before proceeding to append \nthe new content. I say new content because depending on which effect is \nselected we will have to add the appropriate class, by doing this we \nchange the html content so we can say there is a new and an old content.\n The notification is inserted together with the appropriate animation \nclass. After adding the class the only thing left to do is summoning the\n refresh_close() class once again so that the close button for each \nnotification will work with the new content. The top and center \nnotification work by appending the HTML inside the master div \n“#notifications” meanwhile the bottom and bottom right notifications \nwork by changing the content inside “#notifications-bottom-center” and \n“#notifications-bottom-right”, big difference here.<br>\n&nbsp;</p>\n<pre><ol><li><span>$</span><span>(</span><span>'#notifications-window-row-button'</span><span>).</span><span>click</span><span>(</span><span>function</span><span>(){</span><span>\t</span></li><li><span>&nbsp;</span></li><li><span>if</span><span>(</span><span>$</span><span>(</span><span>'#position'</span><span>).</span><span>val</span><span>()==</span><span>'top'</span><span>){</span></li><li><span>\t</span></li><li><span>    $</span><span>(</span><span>\"#notifications-top-center\"</span><span>).</span><span>remove</span><span>();</span></li><li><span>\t$</span><span>(</span><span>\"#notifications\"</span><span>).</span><span>append</span><span>(</span><span>top</span><span>);</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-top-center\"</span><span>).</span><span>addClass</span><span>(</span><span>'animated '</span><span> </span><span>+</span><span> $</span><span>(</span><span>'#effects'</span><span>).</span><span>val</span><span>());</span></li><li><span>\trefresh_close</span><span>();</span></li><li><span>\t</span></li><li><span>\t</span><span>}</span><span>\t</span></li><li><span>if</span><span>(</span><span>$</span><span>(</span><span>'#position'</span><span>).</span><span>val</span><span>()==</span><span>'center'</span><span>){</span></li><li><span>\t</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-full\"</span><span>).</span><span>remove</span><span>();</span></li><li><span>\t$</span><span>(</span><span>\"#notifications\"</span><span>).</span><span>append</span><span>(</span><span>center</span><span>);</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-full\"</span><span>).</span><span>addClass</span><span>(</span><span>'animated '</span><span> </span><span>+</span><span> $</span><span>(</span><span>'#effects'</span><span>).</span><span>val</span><span>());</span></li><li><span>\trefresh_close</span><span>();</span></li><li><span>\t</span></li><li><span>\t</span><span>}</span></li><li><span>if</span><span>(</span><span>$</span><span>(</span><span>'#position'</span><span>).</span><span>val</span><span>()==</span><span>'bottom'</span><span>){</span></li><li><span>\t</span></li><li><span>    $</span><span>(</span><span>\"#notifications-bottom-center\"</span><span>).</span><span>html</span><span>();</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-bottom-center\"</span><span>).</span><span>html</span><span>(</span><span>bottom</span><span>);</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-bottom-center-tab\"</span><span>).</span><span>addClass</span><span>(</span><span>'animated '</span><span> </span><span>+</span><span> $</span><span>(</span><span>'#effects'</span><span>).</span><span>val</span><span>());</span></li><li><span>\trefresh_close</span><span>();</span></li><li><span>\t</span></li><li><span>\t</span><span>}</span></li><li><span>if</span><span>(</span><span>$</span><span>(</span><span>'#position'</span><span>).</span><span>val</span><span>()==</span><span>'botom_right'</span><span>){</span></li><li><span>\t</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-bottom-right\"</span><span>).</span><span>html</span><span>();</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-bottom-right\"</span><span>).</span><span>html</span><span>(</span><span>bottom_center</span><span>);</span></li><li><span>\t$</span><span>(</span><span>\"#notifications-bottom-right-tab\"</span><span>).</span><span>addClass</span><span>(</span><span>'animated '</span><span> </span><span>+</span><span> $</span><span>(</span><span>'#effects'</span><span>).</span><span>val</span><span>());</span></li><li><span>\trefresh_close</span><span>();</span></li><li><span>\t</span></li><li><span>\t</span><span>}</span><span>\t</span></li><li><span>\t</span></li><li><span>});</span></li><li><span>&nbsp;</span></li><li><span>});</span></li></ol></pre>\n<p>&nbsp;</p>","tags":"javascript,css,Animation","isStarred":"false","note":"","dateCreated":"Thu Mar 19 2015 13:27:05 GMT+0530 (India Standard Time)","dateModified":{"$$date":1426779178680},"mode":"add","comments":[],"images":[],"_id":"uxBI6SGVHEzU8vSK"}
{"id":"vU7UmL5O6QxXi116","category":"css","categoryId":"29","title":"Using Flexbox today","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div class=\"d-container t-graphic-faded t-purple-light\">\n<h1 class=\"heading-wide\">Using Flexbox today</h1>\n\n<img src=\"http://chriswrightdesign.com/experiments/img/experiment_flexbox-today.svg\" alt=\"Using Flexbox today experiment\">\n</div>\n\n<article class=\"article\">\n<p class=\"type-dropcap-first\">\n<span class=\"type-run-in\">Flexbox adds a level of control</span> to our layouts that we didn't really have before, we hacked our floats and clearfixed, we fought whitespace with inline-block, pushed display:table, and even stretched content with position:absolute. We no longer need to rely on these solutions beyond providing something visual to browsers without flex features. Flex's features will add an important set of tools to how we build, not by replacing what was there before, but improving upon how we build today.\n</p>\n\n<p>\nThe major challenge that I see with Flexbox is that there's a distinct gap between what we build today and how we'll approach tomorrow. The prevailing attitude seems to be “Not for another x years”, or “we'll wait for X browser to catch up”, but we don't need to think like this anymore.\n</p>\n\n<p>\nI don't blame people for finding Flexbox difficult to grasp. Most of the tutorials that exist on the web either show you a bunch of boxes that are completely abstract, or jump so far ahead that the only logical thing to do with Flexbox is to work backward from these magically simple layouts, and end up in a mountain of unmaintainable code. My own previous article was the former, I wrote it to understand Flexbox.\n</p>\n\n<p>\nThese tutorials exist for a purpose, either they're trying to show you what the properties are and what they do, or they're trying to excite you about future possibilities. Both of which I believe they succeed at doing, but there's still a gap - we need a logical, pragmatic approach to start using Flexbox today.\n</p>\n\n<h2>Road to Flexbox</h2>\n\n<p>\nIn this experiment, I'm attempting to show the value of Flexbox\nin today's layouts, outline a strategy for adding it and give a few examples of how Flexbox can give current layouts extra powers that we either couldn't achieve, or were difficult to achieve before.\nI'll also be documenting some of the common mistakes that I've made while trying to implement it as I believe being able to troubleshoot any new technology's problems is sometimes one of the harder things in picking up something new. My aim is that more people start using Flexbox so that we can push its limits, and get any bugs ironed out, sooner rather than later.\n</p>\n\n<p>\nIf you're not already familiar with Flexbox, this is a follow up of my previous experiment <a href=\"/experiments/flexbox-adventures/\">Flexbox adventures</a>, where I tried to tackle and understand how it actually calculates space and how it might be used in the future. It's full of helpful links that'll bring you up to speed on Flexbox.\n</p>\n\n<h2>Making layouts better</h2>\n\n<p>\nFlexbox's properties involve a whole array of control over alignment and ordering, and once you get used to how it works, it starts to become clear how little CSS you actually have to write to augment how we're building things today.\n</p>\n\n<p>\nDo I believe we'll completely drop floats, inline block, or display table? No, and I think educators should still teach students these things even if they do get eventually phased out, it's important to know that sometimes with CSS, we bend, and that's where interesting discoveries are made.\n</p>\n\n<p>\nHere are some examples of layouts that I believe we can improve quite easily by adding Flexbox.\n</p>\n\n<h3>Card Layouts</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/flex_card-dropbox.png\" alt=\"Dropbox Docu\">\n<figcaption class=\"caption-below\">Card Pattern: Dropbox documentation </figcaption>\n</figure>\n<p>\nThe card layout is pretty popular, but in order to get equal height columns you have to set minimum heights, or split lists up into rows. If you don't split them into rows, you have to clear after every row. Flexbox gives us the ability to solve these problems with ease.\n</p>\n\n<h3>Split screen layouts</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_atlassian.png\" alt=\"Atlassian\">\n<figcaption class=\"caption-below\">Split Layout pattern: Atlassian </figcaption>\n</figure>\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_khan.png\" alt=\"Khan Academy\">\n<figcaption class=\"caption-below\">Split Layout pattern: Khan academy </figcaption>\n</figure>\n<p>\nOne of the difficulties with split screen is it's reliance on minimum height or position:absolute stretching, making it a pain when moving across screen sizes. Flexbox can just give each item equal height, and then provide you with options for vertical centering with ease.\n</p>\n\n<h3>Pinned Layouts</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_danmall.png\" alt=\"Dan Mall's website\">\n<figcaption class=\"caption-below\">Dan Mall uses a pinned layout on the Crayola case study, as recreated in Flexbox by Zoe Gillenwater in <a href=\"http://zomigi.com/blog/full-width-pinned-layouts-with-flexbox/\">this post</a>.</figcaption>\n</figure>\n<p>\nUsing the space-between property this layout can be achieved with Flexbox, and give options for ordering and alignment.\n</p>\n\n<h3>Newspaper and ad units</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_guardian.png\" alt=\"The Guardian website\">\n<figcaption class=\"caption-below\">Newspaper and ad units, the latest Guardian site uses some Flexbox</figcaption>\n</figure>\n<p>\nThe benefit to newspaper layouts and ad units is the ability to order and align. This is just a conceptual idea, and maybe it's stupid in practice - but imagine a system that detects that you don't ever read the sport section - well it can reorder sport toward the bottom of the page and maybe push world news toward the top.\nBeing able to reorder sections could add simple reader preference reorganization. This is made incredibly simple with Flexbox.\n</p>\n\n<h3>Multi-column layouts</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_googlenow.png\" alt=\"Google now\">\n<figcaption class=\"caption-below\">Google now Multi column layout</figcaption>\n</figure>\n<p>If like me, you thought CSS columns would give you this, and then gave you nothing but broken content blocks - this is one way we can split up a list over multiple columns without having to split up the list in markup.</p>\n\n<h3>Dashboards</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_fitbit.png\" alt=\"Fitbit Dashboard\">\n<figcaption class=\"caption-below\">The Fitbit Dashboard</figcaption>\n</figure>\n<p>Dashboards offer us another case for ordering, but also could benefit from column wrapping, or equal height columns.</p>\n\n<h2>Embracing change</h2>\n\n<p>\nFlexbox aims to solve layout problems that we've hacked to achieve, it allows us to embrace the variable nature of both content and design. It also allows us to accomodate design requests which seem simple to someone who doesn't build, but results in either way too much time, us writing completely unsemantic markup, or way too much code to seem worthwhile. In the future, we'll have more tools like CSS Grid, but for now Flexbox is ready and waiting to be used right now, and we no longer have to bash every layout with the rusty old hammer we've been using for 13+ years.\n</p>\n\n<h3>Content is flexible</h3>\n\n<p>\nContent is inherently flexible, in the past we’ve designed, built and approached fitting the content to the design rather than fitting the design and build to the content. Even today, we impose restrictions based on build constraints, when we should be relying on the content strategists to impose these restrictions, not the developers.\n</p>\n\n<h3>We don't always have control</h3>\n\n<p>\nContent management systems are a prime example of where we cede control on layout flexibility - we are often designing with limited knowledge of what content will be within a space. We can achieve things by all kinds of hackery, or we can impose certain rules - but we lose that flexibility when we do.\nSome of our approaches to achieving things visually cause us to abandon markup that makes sense and when we stop building in way that makes sense we have to work really hard to make them accessible.\n</p>\n\n<h3>More design tools</h3>\n\n<p>\nDesign often informs what we build and how we build, but so do the tools and constraints of development inform the capabilities of what can be designed. Ideally, a more mature understanding of Flexbox will have us creating better quality, and more varied designs.\n</p>\n\n<h3>Bend and break</h3>\n\n<p>\nIt's not until we fully understand something that we can start to bend it beyond its original purpose to achieve something greater, how we break it influences how we make it.\n</p>\n\n<p>\nToday, we know the basic rules of Flexbox and what that can do to today's layouts, with education we can influence entirely new layouts, and it won't be until we see Flexbox used in combination with some of the other lesser used, or newer features that we will really start to see the possibilities appear.\n</p>\n\n<h2>Strategy for Flexbox</h2>\n\n<p>\nTo make Flexbox easier to adopt, I decided to look at some of the key criteria in which would make it easy to do so.\n</p>\n\n<h3>Build the way we always did</h3>\n\n<p>\nWe should be able to look at just about any project that we’ve done in the past year and add a piece of code and reap the benefits of Flexbox. We should be able to build a new project tomorrow the way we always did, then add some code that will make Flexbox work and make layouts better.\n</p>\n\n<p>\nUsing a library like Modernizr we can put the new flexbox code behind .flexbox, and optionally put any layout specific to floats (float:left, width:33% etc) behind .no-flexbox so that we can one day phase it out.\n</p>\n\n<h3>Minimize code</h3>\n\n<p>\nManaging 3 syntaxes plus float layouts just to enable Flexbox is madness. Using an autoprefixer is an integral part of the Flexbox adoption strategy.\n</p>\n\n<h3>Make it worthwhile</h3>\n\n<p>\nWe need our layouts to benefit from Flexbox otherwise we're throwing unnecessary code at a layout for the sake of it. The obvious ones of these involve vertical centering, columns matching their ends, and ordering.\n</p>\n\n<h3>Cut the mustard: Flex-wrap</h3>\n\n<p>\nFlex-wrap is the point at which Flexbox often becomes useful, it's not necessary for all of these enhancements, but it's the point at which I choose to enhance Flexbox from to prevent layout issues. Fortunately, the Modernizr library's ‘.flexbox’ has flex-wrap as part of its detection, so if you use .flexbox you'll be cutting out browsers which don't support flex-wrap.\n</p>\n\n<p>\nI've seen talk of people using @supports here, but that cuts out way too many browsers, either write your own feature detection or just use Modernizr.\n</p>\n\n<h2>Enhancing with Flexbox</h2>\n\n<p>\nTo better explain how easy it is to modify existing layouts to flexbox here are two experimental layout enhancements - one with the Card Pattern and one with the Split screen pattern.\n</p>\n\n<div class=\"demo-container t-purple-dark js-demo switch-flexbox\">\n<div class=\"demo-control\">\n<div class=\"demo-heading\">\n<h2 class=\"subheading\" id=\"feature-example\">\nExample 1: Card layout with list\n</h2>\n\n</div>\n\n<div class=\"demo-feature-menu\">\n<form class=\"demo-feature-menu-form\" autocomplete=\"off\">\n<fieldset class=\"demo-property-switch\">\n<label class=\"feature-select-label\">Align Items on horizontal axis</label>\n<div class=\"demo-select-wrapper\">\n<select id=\"flex-selector\" name=\"flex-selector\" class=\"js-flex-card-justify\">\n<option value=\"flex-card-justify-flex-start\">Flex-start</option>\n<option value=\"flex-card-justify-flex-center\">Center</option>\n<option value=\"flex-card-justify-flex-end\">Flex-end</option>\n<option value=\"flex-card-justify-flex-space-around\">Space-around</option>\n<option value=\"flex-card-justify-flex-space-between\">Space-between</option>\n</select>\n</div>\n\n</fieldset>\n<fieldset class=\"demo-property-switch\">\n<label class=\"feature-select-label\">Grow items</label>\n<div class=\"demo-select-wrapper\">\n<select id=\"flex-selector\" name=\"flex-selector\" class=\"js-flex-card-flexy\">\n<option value=\"flex-card-flexy-no\">Grow no items</option>\n<option value=\"flex-card-flexy-odd\">Grow every odd item</option>\n<option value=\"flex-card-flexy-all\">Grow all items</option>\n</select>\n</div>\n\n</fieldset>\n<fieldset class=\"demo-feature-switch\">\n<legend class=\"feature-select-label\">Pick a Layout</legend>\n<ul class=\"demo-feature-switcher\">\n\n<li>\n<input class=\"js-switcher radio-switch-input\" id=\"radio_float\" type=\"radio\" name=\"layout\" value=\"no-flexbox\" label=\"Float\">\n<label class=\"radio-switch-label\" for=\"radio_float\">Float</label>\n</li>\n\n<li>\n<input class=\"js-switcher radio-switch-input\" id=\"radio_flexbox\" type=\"radio\" name=\"layout\" value=\"flexbox\" label=\"Flexbox\" checked=\"true\">\n<label class=\"radio-switch-label\" for=\"radio_flexbox\">Flexbox</label>\n</li>\n\n</ul>\n\n</fieldset>\n</form>\n</div>\n\n</div>\n\n<figure class=\"demo-display l-fullheight\">\n<ul class=\"d-flex-card-list js-flex-card-list js-flex-card-justify-flex-start js-flex-card-flexy-no\">\n\n<li>\n<div class=\"d-flex-card\">\n<div class=\"d-flex-card-image\">\n<img src=\"/img/placeholder.jpg\">\n</div>\n\n<div class=\"d-flex-card-content\">\n<h3>First</h3>\n\n<p>I'm a card and I'm first.</p>\n\n<a href=\"javascript:;\" class=\"d-flex-card-button\">\nButton\n</a>\n</div>\n\n</div>\n\n</li>\n\n<li>\n<div class=\"d-flex-card\">\n<div class=\"d-flex-card-image\">\n<img src=\"/img/placeholder.jpg\">\n</div>\n\n<div class=\"d-flex-card-content\">\n<h3>Second</h3>\n\n<p>I'm a card</p>\n\n<p>I'm some extra content put here to make life more difficult, because I can.</p>\n\n<a href=\"javascript:;\" class=\"d-flex-card-button\">\nButton\n</a>\n</div>\n\n</div>\n\n</li>\n\n<li>\n<div class=\"d-flex-card\">\n<div class=\"d-flex-card-image\">\n<img src=\"/img/placeholder.jpg\">\n</div>\n\n<div class=\"d-flex-card-content\">\n<h3>Third</h3>\n\n<p>I'm a card</p>\n\n<a href=\"javascript:;\" class=\"d-flex-card-button\">\nButton\n</a>\n</div>\n\n</div>\n\n</li>\n\n<li>\n<div class=\"d-flex-card\">\n<div class=\"d-flex-card-image\">\n<img src=\"/img/placeholder.jpg\">\n</div>\n\n<div class=\"d-flex-card-content\">\n<h3>Fourth</h3>\n\n<p>Dreamcatcher PBR iPhone seitan viral, DIY Truffaut biodiesel slow-carb. Health goth twee migas, messenger bag irony tilde chillwave cold-pressed listicle bespoke Schlitz readymade.</p>\n\n<a href=\"javascript:;\" class=\"d-flex-card-button\">\nButton\n</a>\n</div>\n\n</div>\n\n</li>\n\n<li>\n<div class=\"d-flex-card\">\n<div class=\"d-flex-card-image\">\n<img src=\"/img/placeholder.jpg\">\n</div>\n\n<div class=\"d-flex-card-content\">\n<h3>Fifth</h3>\n\n<p>Shabby chic put a bird on it normcore, irony Shoreditch street art hella post-ironic 3 wolf moon fashion axe flexitarian semiotics tote bag. Artisan sriracha aesthetic, Vice Odd Future flannel quinoa disrupt letterpress Banksy selvage.</p>\n\n<a href=\"javascript:;\" class=\"d-flex-card-button\">\nButton\n</a>\n</div>\n\n</div>\n\n</li>\n\n</ul>\n\n</figure>\n</div>\n\n<h3>How flexbox makes it better</h3>\n\n<p>\nWe've had a way to layout something like this using floats, but every item is going to appear a different height, so you have to impose a minimum or fixed height to every item to achieve equal height columns, and having the button anchor to the bottom you'd have to make it position absolute, and then pad out the card at the bottom.\n</p>\n\n<p>\nOnce you've done all this, all you have to do is change your screen width to something more narrow where you need the collapse to happen to feel the pain of the monster you've just created. Lots of changing min-heights or your fixed height, and all someone needs to do is add a bit more content than you designed for and you're in a world of hurt.\n</p>\n\n<p>\nFlexbox solves this, we build the layout how we would have without setting those restrictions (so the columns aren't equal height), add Flexbox and we get all the alignment goodness in just about every modern browser.\n</p>\n\n<h3>Step 1: Markup structure</h3>\n\n<p>\nI look at this pattern as an unordered list of cards, a card is its own module that lives within a list item.\n</p>\n\n<p>\nInside that card are several items of content (image, heading, paragraphs, button). By personal preference of how I might like to stretch the content horizontally on different screens I seperate the content from the image so they can live side by side on float layouts.\n</p>\n\n<p>\nAs I mentioned previously, I'm building how I would've built without Flexbox, it shouldn't really affect my markup structure.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-markup\">\n&lt;!-- card list --&gt;\n&lt;ul class=\"flex-card-list\"&gt;\n\t&lt;!-- card list item --&gt;\n\t&lt;li class=\"flex-card-listitem\"&gt;\n\t\t&lt;!-- card module --&gt;\n\t\t&lt;div class=\"flex-card\"&gt;\n\t\t\t&lt;!-- image container --&gt;\n\t\t\t&lt;div class=\"flex-card-image\"&gt;\n\t\t\t\t&lt;img src=\"/img/placeholder.jpg\" /&gt;\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;!-- content container --&gt;\n\t\t\t&lt;div class=\"flex-card-content\"&gt;\n\t\t\t\t&lt;h3 class=\"flex-card-heading\"&gt;First&lt;/h3&gt;\n\t\t\t\t&lt;p&gt;I'm a card and I'm first.&lt;/p&gt;\n\t\t\t\t&lt;a href=\"javascript:;\" class=\"flex-card-button\"&gt;Button&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<h3>Step 2: Styling the list</h3>\n\n<p>\nOn the unordered list we add display:flex, any time we use display:flex we're saying we want to do something with the child elements of that element, in this case our aim is to get the list items to be the same height. Flex will by default stretch items vertically, and lay out on a row. Stretching the list items is the first step to getting the nested items to stretch to the same size.\n</p>\n\n<p>\nOur list of cards is going to exist on more than one line/row, so we need to use flex-wrap to tell the items to wrap to the next line when they hit the edge of the container.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n/* Put behind .flexbox for Feature detection with Modernizr */\n.flexbox .flex-card-list {\n\t\t\t\t\t\t\t\n\tdisplay:flex;\n\tflex-wrap:wrap;\n\n}\n</code>\n\t\t\t\t\t</pre>\n\n<h3>Step 3: Styling the list items</h3>\n\n<p>\nWe add display:flex to the list items because we want the card modules to be controllable with flexbox.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n\n.flexbox .flex-card-listitem {\n\t\t\t\t\t\t\t\n\tdisplay:flex;\n\t\t\t\t\t\t\t\n}</code></pre>\n\n<h3>Step 4: Media queries</h3>\n\n<p>\nAt this point, we add media queries for different screen widths. My layout will go three cards per row, two cards per row, then one card per row.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n/* Code to adjust the layout to 2 cards per row */\n@media all and (min-width:40em) {\n\n\t/* Float layout */\n\t.flex-card-list li {\n\t\twidth:50%;\n\t}\n\t.no-flexbox .flex-card-list li {\n\t\tfloat:left;\n\t\t\n\t}\n\t\n}\n/* Code to adjust the layout to 3 cards per row */\n@media all and (min-width:40em) and (max-width:60em) {\n\n\t/* Clears the row for 2 item per row layout */\n\t.no-flexbox .flex-card-list li:nth-child(2n+1) {\n\t\tclear:both;\n\t}\n}\n@media all and (min-width:60em) {\n\t\n\t//common\n\t.flex-card-list li {\n\t\twidth:33.33%;\n\t}\n\t\n\t/* Float specific: Clear after every third item */\n\t.no-flexbox .d-flex-card-list li:nth-child(3n+1) {\n\t\tclear:both;\n\t}\n\t\n\n}</code></pre>\n\n<h3>Step 5: The card module</h3>\n\n<p>\nWe now have a list of objects that change their layout based on media queries, and each item is stretching to the height of the list items. Equal height columns are here, but our buttons are anchored to the paragraph, not to the bottom of the card modules. By adding display flex to the card module we can now use flex to control the image and the content block. We'll also add flex-direction column, since we want to treat it as a full height column.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n.flexbox .flex-card {\n\t\n\tdisplay:flex;\n\tflex-direction:column;\n\n}</code></pre>\n\n<h3>Step 6: The card content</h3>\n\n<p>\nWe need to put display:flex on one more item, the card content div, this is so we can control its elements, set its direction to column to let it know we want to use a tube of content and add flex:1 0 auto (thw grow is the important part) to it to let it know to grow to fill the remaining space left behind.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n.flexbox .flex-card-content {\n\n\tdisplay:flex;\n\tflex:1 0 auto; /* We have to add a basis for IE10/11 */\n\tflex-direction:column;\n\n}</code></pre>\n\n<h3>Step 7: Flexible paragraphs</h3>\n\n<p>\nIt's up to you what you choose to make flexible within the content block, I would use the most variable item, the paragraphs, to grow to fill (add flex:1 0 auto). This will now stretch the bottom of the paragraph and pin the button to the bottom of the card.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n.flexbox .flex-card-content p {\n\n\tflex:1 0 auto; /* We have to add a basis for IE10/11 */\n\n}</code></pre>\n\n<div class=\"demo-container t-purple-dark js-demo switch-flexbox\" id=\"example2\">\n<div class=\"demo-control\">\n<div class=\"demo-heading\">\n<h2 class=\"subheading\">\nExample 2: Split Layout\n</h2>\n\n</div>\n\n<div class=\"demo-feature-menu\">\n<form class=\"demo-feature-menu-form\" autocomplete=\"off\">\n<fieldset class=\"demo-property-switch\">\n<label class=\"feature-select-label\" for=\"flex-split-control-alignment\">\nVertical Align\n</label>\n<div class=\"demo-select-wrapper\">\n<select name=\"flex-split-control-alignment\" id=\"flex-split-control-alignment\" class=\"js-flex-split-alignment\">\n<option value=\"flex-align-center\">Center</option>\n<option value=\"flex-align-top\">Top</option>\n<option value=\"flex-align-bottom\">Bottom</option>\n<option value=\"flex-align-distributed\">Distributed evenly</option>\n</select>\n</div>\n\n</fieldset>\n<fieldset class=\"demo-property-switch\">\n<label class=\"feature-select-label\" for=\"flex-split-control-order\">\nWho should come first:\n</label>\n<div class=\"demo-select-wrapper\">\n<select id=\"flex-split-control-order\" class=\"js-flex-split-order\">\n<option value=\"order-finn\">Finn</option>\n<option value=\"order-jake\">Jake</option>\n</select>\n</div>\n\n</fieldset>\n<fieldset class=\"demo-feature-switch\">\n<legend class=\"feature-select-label\">Pick a Layout</legend>\n<ul class=\"demo-feature-switcher\">\n\n<li>\n<input class=\"js-switcher radio-switch-input\" id=\"radio_float2\" type=\"radio\" name=\"layout2\" value=\"no-flexbox\" label=\"Float\">\n<label class=\"radio-switch-label\" for=\"radio_float2\">Float</label>\n</li>\n\n<li>\n<input class=\"js-switcher radio-switch-input\" id=\"radio_flexbox2\" type=\"radio\" name=\"layout2\" value=\"flexbox\" label=\"Flexbox\" checked=\"true\">\n<label class=\"radio-switch-label\" for=\"radio_flexbox2\">Flexbox</label>\n</li>\n\n</ul>\n\n</fieldset>\n</form>\n</div>\n\n</div>\n\n<figure class=\"demo-display l-fullheight l-fullwidth\">\n<div class=\"d-flex-split js-flex-split js-flex-align-center js-order-finn\">\n<div class=\"d-flex-split-left\">\n<div class=\"d-flex-split-image\">\n<img src=\"http://chriswrightdesign.com/experiments/img/adventure1.png\">\n</div>\n\n<h3>Finn the human</h3>\n\n<p>Finn (full title: Finn the Human, or Finn Mertens, and formerly known as Pen in the original short), is the main protagonist of the series Adventure Time.\n</p>\n\n<a class=\"d-flex-split-link\" href=\"http://adventuretime.wikia.com/wiki/Finn\">Learn more</a>\n</div>\n\n<div class=\"d-flex-split-right js-flex-split-jake\">\n<div class=\"d-flex-split-image\">\n<img src=\"http://chriswrightdesign.com/experiments/img/adventure2.png\">\n</div>\n\n<h3>Jake the dog</h3>\n\n<p>Jake (full title: Jake the Dog), the deuteragonist of Adventure Time, is a magical dog and Finn's constant companion, best friend, and adoptive brother.</p>\n\n<a class=\"d-flex-split-link\" href=\"http://adventuretime.wikia.com/wiki/Jake\">Learn More</a>\n</div>\n\n</div>\n\n</figure>\n</div>\n\n<h3>How flexbox makes it better</h3>\n\n<p>\nThere are a number of approaches one could take to make the split screen layout work - once again we could rely upon a grid row, we could give a minimum height to both items, or we could use the position absolute approach and hook the items to their respective directions (left:0, bottom:0, top:0 etc). Or we could just say be 100vh high, and 50vw wide and ignore how much content there is and throw another div around that content and try to center position that div within its box.\n</p>\n\n<p>\nThe problem to all of these approaches is that we need to dictate a height at some point. Like the previous layout problem - setting minimum heights is problematic across screen sizes (although not such a problem when your layout becomes single column).\n</p>\n\n<p>\nAdding flexbox solves this and gives us some tools to align all of the content within the container, while allowing the content to dictate the size of the container. You can align it vertically or horizontally any way you like - including the centering it vertically.\n</p>\n\n<p>\nIf we wanted to reorder the children, we can do that too without having to move the items in the DOM.\n</p>\n\n<p>\nNote: Keyboard control can be an issue when you go down the order path, so i’d say do it sparingly, and probably for larger items that don’t create too much of a jarring experience rather than on smaller items that need lots of tab key presses to get through so your users aren’t jumping all over the screen with the tab key. Consider keyboard users.\n</p>\n\n<h3>Step 1: Markup</h3>\n\n<p>\nThe structure of this experiment is one div (parent), with two divs (children), if there were more than two I'd probably consider this an unordered list - but as there are only two divs will suffice.\n</p>\n\n<p>\nInside of each content panel we have an image, a heading, a paragraph, and a link, which we'll use Flexbox to align.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-markup\">\n&lt;!-- Split layout parent --&gt;\n&lt;div class=\"flex-split\"&gt;\n\t&lt;!-- Child divs --&gt;\n\t&lt;div class=\"flex-split-left\"&gt;\n\t\t&lt;!-- Putting the image in a div here is totally optional --&gt;\n\t\t&lt;div class=\"flex-split-image\"&gt;\n\t\t\t&lt;img src=\"jake.png\" /&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;h3&gt;Jake the dog&lt;/h3&gt;\n\t\t&lt;p&gt;Etc etc etc&lt;/p&gt;\n\t\t&lt;a href=\"link.html\"&gt;Read more&lt;/a&gt;\n\t&lt;/div&gt;\n\t&lt;div class=\"flex-split-right\"&gt;\n\t\t&lt;!-- Etc, etc etc --&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n\n\t</code></pre>\n\n<h3>Step 2: Parent div</h3>\n\n<p>\nFor the non-flexbox layout I'm using a minimum VH height (this won't work in IE8, so if you want it to work in IE8 you'll probably need to set a height with a unit which works in IE8). For this float layout, you're going to have to micromanage media queries as the screen gets narrower to deal with the content. We'll also need position:relative, so that we can absolutely position the child elements.\n</p>\n\n<p>\nFor flexbox we add display:flex, once again indicating that we will use Flexbox to work with the child elements. You won't need to micromanage media queries here as Flexbox will just modify the container as the screen narrows.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n/* No flexbox layout with position relative and a minimum height */\n.no-flexbox .flex-split {\n\tposition:relative;\n\tmin-height:80vh;\n}\n\n/* Adding Flexbox, switch to rows and wrap at 48em */\n.flexbox .flex-split {\n\tdisplay:flex;\n\tflex-direction:column;\n}\n@media all and (min-width:48em) {\n\t.flexbox .flex-split {\n\t\tflex-flow:row wrap;\n\t}\n}\n</code></pre>\n\n<h3>Step 3: Child elements</h3>\n\n<p>\nFor our non-flexbox layout we'll float the two child divs, give them a width of 50%, position them absolutely and anchor them to their sides.\n</p>\n\n<p>\nFor our flexbox layout we'll just add a flex-basis of 50%, and pick a point where they collapse on a smaller screen and make that flex-basis 100% (and if you don't really need flexbox on the small screen you could just allow it to be displayed as a stacking block element).\n</p>\n\n<p>\nWe need to change the flex-direction here to column to let Flexbox know to lay it out like a tube of vertical content. (although alternatively you could also use row with wrap, but it seemed to require more code to make work so I stuck with column). We also add display:flex to this element because we want to use Flexbox to position each of the content elements.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n/* \n\tFor no flexbox - give the child elements a minimum height and position them top and bottom \n\tat 48ems make them float, otherwise just let the content fill the blocks on a small screen\n*/\n\n@media all and (min-width:48em) {\n\t/* Common to both */\n\t.flex-split &gt; div {\n\t\twidth:50%;\n\t}\n\t.no-flexbox .flex-split &gt; div {\n\t\tmin-height:50vh;\n\t\ttop:0;\n\t\tbottom:0;\n\t\tfloat:left;\n\t\tposition:absolute;\n\t\t\n\n\t}\n\t/* Anchor to their respective sides\t */\n\t.no-flexbox .flex-split-left {\n\t\tleft:0;\n\t}\n\t.no-flexbox .flex-split-right {\n\t\tright:0;\n\t}\n\n}\n\n/* For Flexbox - make the direct descendant divs content displayed in columns */\n.flexbox .flex-split &gt; div {\n\t\n\tdisplay:flex;\t\n\tflex-direction:column;\n\n\n}\n</code></pre>\n\n<h3>Step 4: Aligning the content with Flexbox</h3>\n\n<p>\nIf, like me, you thought at this point that align-items: center would make the content center vertically, you'd be wrong. When you change the axis that Flexbox works off, the property you use to work with the vertical axis changes. The property that works now is justify-content.\n</p>\n\n<p>\nTo center the content within the child divs, just add justify-content:center, and if you wanted you could also reorder, or align the content in any way you saw fit.\n</p>\n\n<div class=\"codereveal-block\">\n<a href=\"javascript:;\" class=\"btn-codereveal js-reveal-codeblock\">Show code</a>\n</div>\n\n<pre class=\"codeblock js-code-is-hidden\"><code class=\"language-css\">\n/* Use flexbox to vertically center align */\n.flex-split &gt; div {\n\n\tjustify-content:center;\n\t\t/* I needed to do this in IE10/11 to get it to horizontally center */\n\talign-items:center; \n\n\n}</code></pre>\n\n<h2>Troubleshooting Flexbox</h2>\n\n<h3>\nAxis direction (flex direction)\n</h3>\n\n<p>\nWhen alignment doesn't seem to be doing anything, it's probably because you switched axis flex-direction from row to column. Align-items and Justify-content both rotate with the flex-direction. It took me putting borders around everything to discover this.\n</p>\n\n<h3>Flex items horizontal off the page</h3>\n\n<figure class=\"figure-contained\">\n<img src=\"http://chriswrightdesign.com/experiments/img/screenshot_flexbox-overflowing.png\" alt=\"Flexbox overflowing problem\">\n<figcaption class=\"caption-below\">Flex items horizontal off page</figcaption>\n</figure>\n<p>\nWhen items are horizontally overflowing the page, you probably need to add flex-wrap:wrap, or you're looking at the responsive imagery problem again.\n</p>\n\n<p>\nWhen I first started using Flexbox I was throwing Autoprefixer at things assuming that if Flexbox wasn't present that would be okay, it wasn't until I started testing on my older Android devices that I realized that even if a device was Flexbox capable, it didn't make it Flex-wrap capable - which was another reason I encountered this issue.\n</p>\n\n<h3>Inflexible imagery</h3>\n\n<p>\nOne of the problems I came across when practicing flexbox was what happens when you use a flexible image within a flexbox container. This had to be my number one gripe - and it seemed to happen in EVERY browser.\n</p>\n\n<p>\nYou might see this if you were setting your flex values in a row to something like flex:0 0 25%, and for some reason your rows are clearing on every 3rd item instead of every 4th item. Or worse your items are just flying off the page. It's because the image won't shrink. Applying flex-shrink won't help anything either.\n</p>\n\n<p>\nThe problem is that while Flexbox seems to honor Max-width's maximum width, it doesn't recognize that a maximum-width:100% image is flexible and can scale down in size. That isn't entirely true. It's not that it doesn't recognize the image is scalable. This is actually because a block element will dictate the size of the image within. A flex element will try to resize itself to the size of the maximum image size.\n</p>\n\n<h4>The workaround</h4>\n\n<p>\nThe workarounds for this are to either set the maximum width that you are okay with the image being in a unit other than a percentage. Or if you want it to be completely flexible - set it to 100%, with the obvious drawback of that image having the capability of going way too large.\n</p>\n\n<h3>Understanding space-around and space-between</h3>\n\n<p>\nI'm hoping my experiment has cleared it up a bit, it was a common one that got me. These are both calculated automatically, so if you want control don't use them.\nSpace-around pins items from the centre and gives an even amount of spacing around any item within a flex container. So if there are two items, they'll both be equal distance from the sides and from each other. Think of it as inside-out.\n</p>\n\n<p>\nSpace-between makes items pin to the outside of the container, then calculates an even amount of space between every item, think of it as outside-in.\nIf you wanted that to be a fixed amount of padding or margin, then space-between isn't your choice, you should use flex-start.\n</p>\n\n<h3>\nHow grow and shrink work\n</h3>\n\n<p>\nThis one's a more basic mistake, I imagine most people wouldn't run into - if you don't want your flex items to become huge, don't grow them. The nth-child selector can help you organize this a bit better if you only want to grow the last item on every row.\n</p>\n\n<p>\nMy basic rule is: I use grow if I want something to fill the space of a missing item, I use shrink if I want items to collapse to make way for new items.\n</p>\n\n<h3>\nItems become many tiny columns\n</h3>\n\n<p>\nAnother fairly common one, you're looking at a row without row-wrap. Either make the container a column, or a row with row-wrap.\n</p>\n\n<h3>\nIE 10/11 only: Wrapping too early, items too big\n</h3>\n\n<p>\nThanks to the Flex-bugs git repo I was able to debug this one pretty quick, I thought I'd mention it here because it was a HUGE spanner in the works for me. This is caused by using Flex-basis and Padding together. Flexbox won't accept the border-box box model properly, so to avoid this, use flex-basis auto and just use a standard width. The plus side of this is less code between floats and flexbox.\n</p>\n\n<h3>IE10/11 only: the heights are oddly collapsed</h3>\n\n<p>\nWhen I was creating my card pattern, I found the button was collapsing into the paragraphs - this is another bug documented on flexbox which caused me pain. As good as it feels to flex:1, just don't do it. Instead save yourself the panic by writing the full shorthand Flex:1 0 auto or flex:1 0 0.\n</p>\n\n<h3>FF: column-reverse and overflow-y</h3>\n\n<p>\nThanks to Sean Curtis for helping me discover this one, it turns out it's already logged as a bug with Mozilla. If you use flex-direction:column-reverse with an element that uses overflow-y:auto, you won't see a scrollbar appear at all. It looks like this is in the process of being resolved.\n</p>\n\n<h3>\nWell documented cross-browser bugs\n</h3>\n\n<p>\nIf you come across bugs that aren't listed here, it might be worthwhile checking out Philip Walton's <a href=\"http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/\">normalizing cross-browser flexbox bugs</a> which points out a whole bunch that he came across that are specific to certain browsers. Or just check out the <a href=\"https://github.com/philipwalton/flexbugs\">Git repo</a> which lists two of the bugs I mentioned here earlier. I constantly clashed with bugs 4, 5, and 7 from that list.\n</p>\n\n<h2>Add flexbox to your layouts</h2>\n\n<p>\nI'm keen to see how people add Flexbox to improve their layouts,\nI am using Flexbox on production projects without the fear I used to have. I use it in small parts, testing small scale modules and working my way up. This strategy allows me to be certain that I'm not trashing a site for browsers that don't support it.\n</p>\n\n<p>\nHaving a strategy to approaching and implementing Flexbox is fairly crucial in successfully including it. Without a clear strategy going, starting from Flexbox and working backwards is akin to trying to dig yourself out of a hole.\n</p>\n\n<p>\nIf you're not all that confident with Flexbox, I'd recommend just having a play with recreating existing components - look at interesting layouts on gallery sites like <a href=\"http://www.dribbble.com\">Dribbble</a>, <a href=\"http://www.paterntap.com\">Pattern Tap</a>, or <a href=\"http://www.awwwards.com\">Awwwards</a> and see how Flexbox can improve them. After the initial hours of headbutting your keyboard repeatedly, you'll see that it's actually pretty easy. Hopefully what I've written here will save you from the keyboard imprint on your face.\n</p>\n\n<p>\nGot any great new applications of Flexbox that you're able to enhance from your standard layouts? Or are you already using Flexbox on your site? let me know! I'm interested in what people are doing with it.\n</p>\n\n</article>\n<section class=\"article-footer\">\n<h2>Some further reading</h2>\n\n<ul>\n\n<li>\n<a href=\"http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/\">Normalizing Cross browser flexbox bugs</a>\n</li>\n\n<li>\n<a href=\"https://github.com/philipwalton/flexbugs\">\nFlexbugs: Flexbox bugs and their workarounds\n</a>\n</li>\n\n<li>\n<a href=\"http://zomigi.com/blog/full-width-pinned-layouts-with-flexbox/\">\nFull width pinned layouts with flexbox - Zoe Gillenwater\n</a>\n</li>\n<li>\n<a href=\"/experiments/flexbox-adventures/\">Experiment: Flexbox Adventures</a>\n</li>\n\n<li>\n<a href=\"http://philipwalton.github.io/solved-by-flexbox/\">Solved by Flexbox - Philip Walton</a>\n</li>\n\n<li>\n<a href=\"http://www.slideshare.net/zomigi/leveling-up-with-flexbox-smashing-conference\">Levelling up with Flexbox - Zoe Gillenwater</a>\n</li>\n\n<li>\n<a href=\"http://www.w3.org/WAI/PF/aria-practices/#kbd_focus\">ARIA - providing keyboard focus</a>\n</li>\n\n<li>\n<a href=\"http://webaim.org/techniques/keyboard/\">WEBAIM - Keyboard accessibility</a>\n</li>\n\n</ul>\n\n<h2>Tools</h2>\n\n<ul>\n\n<li>\n<a href=\"https://github.com/nDmitry/grunt-autoprefixer\">Grunt autoprefixer</a> - A handy tool for prefixing, also available are a Gulp version\n</li>\n\n<li>\n<a href=\"http://modernizr.com/\">Modernizr</a> - Best damn feature detection library on the web\n</li>\n\n<li>\n<a href=\"http://chriswrightdesign.github.io/tooflexy/\">Too Flexy</a> - a bookmarklet for switching between Flexbox and No-flexbox classes with Modernizr\n</li>\n\n</ul>\n\n</section>\n<style>.d-btn-primary{background:#7a7a7a;color:#fff;width:12em;text-align:center;-webkit-transition:background 0.4s ease-in-out;transition:background 0.4s ease-in-out;}.d-btn-primary:hover{background:#919393;}.d-btn-primary.t-purple{background:#484281;}.d-btn-primary.t-purple:hover{background:#2a2749;}.d-btn-primary.t-blue{background:#38ABCC;}.d-btn-primary.t-blue:hover{background:#2f8199;}.d-btn-secondary{background:transparent;border:1px solid #111;color:#111;}.btn-codereveal{background:#f7f7f7;background:url(\"/img/icon_view.svg\") no-repeat 10px 50%;border:1px solid #b6b6b6;border-radius:5px;color:#111;display:inline-block;font-size:0.9em;padding:0.75em 2em 0.75em 4em;font-family:\"brandon-grotesque\",sans-serif;text-transform:uppercase;text-decoration:none;text-align:left;-webkit-transition:background 0.4s ease;transition:background 0.4s ease;}.btn-codereveal:hover{background-color:#ddd;}.d-container:first-child{margin-top:0;}.d-container{background:#f7f7f7;border-bottom:1px solid #EEE;font-family:\"brandon-grotesque\",sans-serif;margin:2em auto;padding:2em 5% 2em 5%;width:100%;}.d-container:after{content:\"\";clear:both;display:table;}\n\t/*.codeblock+.d-container{margin:0 auto 2em auto;}\n\t.codeblock{background:#222;color:#fff;display:block;line-height:1.4;margin:2em 2.5em;padding:2.5em;position:relative;white-space:pre-wrap;}\n\t*/\n\t@media all and (min-width: 40em) {.codeblock{margin:2em auto 0 auto;padding:1em;}}.codeblock code{display:block;max-width:660px;margin:0 auto;}.codereveal-block{display:block;max-width:650px;margin:2em auto;}\n\t.codeblock.js-code-is-hidden{display:block;}\n\t.codeblock.js-code-is-visible{-webkit-animation:reveal 0.5s 0.1s ease-in-out both;animation:reveal 0.5s 0.1s ease-in-out both;display:block;}\n\t.d-container>h1{color:#333;font-size:3.5em;line-height:1.2;margin:0 0 0.5em 0;text-align:center;}.d-frame{background:#333;border:1px solid #ddd;clear:both;margin:0 auto;max-width:30em;max-height:30em;overflow:hidden;}.d-navigation{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;margin:2em auto 0em auto;}.d-navigation li{float:left;}.d-navigation li a{border-radius:10px;display:block;margin:1em;padding:0.75em 1em;text-decoration:none;}.l-fullwidth{padding-right:0;padding-left:0;}.t-graphic-faded{position:relative;min-height:70vh;}.d-container.t-purple-light{background:#a075cd;color:#271735;}.t-purple-light .heading-wide{color:#fff;text-shadow:0px 1px 0px rgba(0,0,0,0.1);margin:3.75em 0 0 0;z-index:10;position:relative;}.t-graphic-faded img{display:block;height:auto;margin:0 auto;max-width:100%;opacity:0.2;position:absolute;top:50%;left:50%;-webkit-transform:translateY(-50%) translateX(-50%);-ms-transform:translateY(-50%) translateX(-50%);transform:translateY(-50%) translateX(-50%);z-index:5;}.l-fullheight{min-height:100vh;}.l-fullheight .heading-wide{font-size:5em;margin-top:1em;}.subheading{text-align:center;margin:1em 0 2em 0;}.demo-heading{text-align:center;width:100%;}.demo-heading h2{font-weight:900;padding:1em;text-transform:uppercase;letter-spacing:0.01em;font-size:1.2em;}.demo-control{margin:3em 0 0 0;padding:0 0 2em 0;-moz-osx-font-smoothing:grayscale;}.demo-display{font-family:\"brandon-grotesque\",sans-serif;margin:0 auto;padding:1em 5% 2em 5%;width:100%;}.demo-display:after{clear:both;content:\"\";display:table;}.demo-select-wrapper{background:none;background:#fff url(\"/img/arrow_down.svg\") no-repeat 97% 50%;border-radius:5px;border:1px solid #2A1244;float:left;font-size:1em;line-height:1em;margin:0 0 0 0;overflow:hidden;position:relative;-webkit-transition:background-color 0.4s ease-in-out;transition:background-color 0.4s ease-in-out;width:100%;}.demo-select-wrapper:hover,.demo-select-wrapper:focus,.demo-select-wrapper:active{background-color:#fff;cursor:pointer;}.demo-feature-menu-form fieldset{padding:1em;}@media all and (min-width: 48em) {.demo-feature-menu-form fieldset{padding:0 0 0 0.5em;}}.demo-feature-menu label{font-family:\"Brandon Grotesque\",sans-serif;}.demo-feature-menu select{font-family:\"Brandon Grotesque\",sans-serif;color:#697070;width:115%;font-size:0.9em;padding:1em;border:none;-webkit-box-shadow:none;box-shadow:none;background-color:transparent;background-image:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;}.demo-feature-menu select:hover{cursor:pointer;}.no-flexbox .demo-feature-menu{max-width:800px;margin:0 auto;}.flexbox .demo-feature-menu{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}.flexbox .demo-feature-menu-form{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}@media all and (min-width: 48em) {.flexbox .demo-feature-menu-form{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}}.demo-feature-menu h3{text-align:center;}.demo-feature-menu:after{content:\"\";clear:both;display:table;}.feature-select-label{font-family:\"Brandon Grotesque\";}.demo-feature-menu li{float:left;list-style:none;}.demo-feature-menu-form fieldset{display:block;width:100%;}.demo-feature-switcher li:first-child .radio-switch-label{border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:5px;border-bottom-left-radius:5px;}.radio-switch-label{cursor:pointer;border-top-right-radius:5px;border-bottom-right-radius:5px;padding:0.5em 0.75em;width:5em;display:block;background:#eee;border:1px solid #2a1244;font-family:\"Brandon Grotesque\";color:#111;text-align:center;text-decoration:none;-webkit-transition:background 0.3s ease,color 0.3s ease;transition:background 0.3s ease,color 0.3s ease;}@media all and (min-width: 40em) {.radio-switch-label{padding:0.75em;}}.radio-switch-label:hover,.radio-switch-label:focus,.radio-switch-label:active{background:#7b5a9e;color:#fff;}.radio-switch-input{position:absolute;visibility:none;opacity:0;}.switch-no-flexbox .demo-feature-menu-form,.no-flexbox .demo-feature-menu-form{position:relative;}.switch-no-flexbox .demo-feature-menu-form:before,.no-flexbox .demo-feature-menu-form:before{content:\"Controls disabled while Flexbox is turned off\";position:absolute;font-family:\"brandon-grotesque\",sans-serif;left:0;top:50%;color:#fff;}.demo-property-switch{opacity:1;-webkit-transition:opacity 0.5s ease;transition:opacity 0.5s ease;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.switch-no-flexbox .demo-property-switch,.no-flexbox .demo-property-switch{opacity:0;visibility:none;pointer-events:none;}.no-flexbox .demo-property-switch{display:none;}.no-flexbox .demo-feature-switch{width:12em;float:right;}.t-purple-dark .demo-heading{background:#3e174e;color:#fff;}.t-purple-dark .demo-heading h2{color:#fff;}.t-purple-dark .demo-control{background:#331c3c;}.t-purple-dark .demo-feature-switcher input[type=\"radio\"]:checked+label{background:#240531;color:#fff;}.t-purple-dark .feature-select-label{color:#fff;}.t-purple-dark .demo-feature-menu select{color:#697070;}.t-purple-dark .demo-select-wrapper{background:none;background:#fff url(\"/img/arrow_down.svg\") no-repeat 97% 50%;border:1px solid #2A1244;}.t-purple-dark .demo-display{background:#f7f7f7;border-bottom:1px solid #EEE;}.article figure .d-flex-split-image img{border:none;border:5px solid rgba(0,0,0,0.2);}.d-flex-card h3{margin:1em 0 1em 0;}.d-flex-card{background:#fff;border-radius:5px;padding:1em;margin-bottom:1em;}.d-flex-card-image img{width:100%;max-width:100%;height:auto;margin:0 auto;display:block;}.d-flex-card-list{margin:3em 0 3em 0;}.d-flex-card-list li{list-style:none;}.switch-flexbox .d-flex-card-list{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;max-width:100%;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}.switch-flexbox .d-flex-card-list li{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.switch-flexbox .d-flex-card{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}.switch-flexbox .d-flex-card-content{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.switch-flexbox .d-flex-card-content p{-webkit-box-flex:1;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;}.d-flex-card-content p{margin:0 0 1em 0;}.d-flex-card-button{background:#7b5a9e;border-radius:5px;color:#fff;display:block;padding:1em 0.75em;text-align:center;text-decoration:none;-webkit-transition:background 0.3s ease;transition:background 0.3s ease;}.d-flex-card-button:hover{background:#654586;}.d-flex-card-list li{width:100%;}@media all and (min-width: 40em) {.no-flexbox .d-flex-card-list,.switch-no-flexbox .d-flex-card-list{margin-left:-1em;}.d-flex-card-list li{padding-left:1em;width:50%;}.no-flexbox .d-flex-card-list li,.switch-no-flexbox .d-flex-card-list li{float:left;}}@media all and (max-width: 60em) {.no-flexbox .d-flex-card-list li:nth-child(2n+1),.switch-no-flexbox .d-flex-card-list li:nth-child(2n+1){clear:both;}}@media all and (min-width: 60em) {.d-flex-card-list li{width:33.33%;}.flexbox .d-flex-card-list li{-webkit-transition:width 0.4s ease-in-out,-webkit-box-flex 0.4s ease-in-out;-webkit-transition:width 0.4s ease-in-out,-webkit-flex 0.4s ease-in-out;transition:width 0.4s ease-in-out,-webkit-box-flex 0.4s ease-in-out;transition:width 0.4s ease-in-out,-ms-flex 0.4s ease-in-out;transition:width 0.4s ease-in-out,flex 0.4s ease-in-out;}.no-flexbox .d-flex-card-list li:nth-child(3n+1),.switch-no-flexbox .d-flex-card-list li:nth-child(3n+1){clear:both;}}.switch-flexbox .d-flex-card-list.js-flex-card-justify-flex-start{-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}.switch-flexbox .d-flex-card-list.js-flex-card-justify-flex-end{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}.switch-flexbox .d-flex-card-list.js-flex-card-justify-flex-center{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.switch-flexbox .d-flex-card-list.js-flex-card-justify-flex-space-around{-webkit-justify-content:space-around;-ms-flex-pack:distribute;justify-content:space-around;}.switch-flexbox .d-flex-card-list.js-flex-card-justify-flex-space-between{-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.switch-flexbox .js-flex-card-flexy-no li{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;}.switch-flexbox .js-flex-card-flexy-all li{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}.switch-flexbox .js-flex-card-flexy-odd li:nth-child(odd){-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}.d-flex-split-control{display:block;margin:1em auto;}.l-fieldset-half{display:block;}@media all and (min-width: 30em) {.l-fieldset-half{padding:1em;width:50%;float:left;}}.switch-flexbox .d-flex-split-feature-order{-webkit-box-ordinal-group:0;-webkit-order:-1;-ms-flex-order:-1;order:-1;}.switch-flexbox .js-flex-split-feature-stretch{-webkit-justify-content:space-around;-ms-flex-pack:distribute;justify-content:space-around;}.switch-flexbox .js-flex-split-feature-vcenter{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.d-flex-split{position:relative;margin:2em 0 0 0;min-height:100vh;}.no-flexbox .d-flex-split:after{content:\"\";clear:both;display:table;}.d-flex-split h3{text-align:center;margin:0 0 2em 0;}.d-flex-split p{text-align:center;margin:0 auto;max-width:500px;}.d-flex-split-link{color:currentColor;display:block;text-align:center;margin:1em 0 0 0;width:100%;}.switch-no-flexbox .d-flex-split-image{width:100%;position:relative;}.d-flex-split img{width:100%;height:auto;margin:2em auto;border-radius:50%;max-width:100px;display:block;}.d-flex-split>div{padding:3em 5em;min-height:100vh;}@media all and (min-width: 48em) {.d-flex-split>div{padding:3em 5em 6em 5em;}}.switch-flexbox .d-flex-split{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}@media all and (min-width: 48em) {.switch-flexbox .d-flex-split{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}@media all and (min-width: 48em) {.d-flex-split>div{width:50%;}}.switch-flexbox .d-flex-split>div{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}.switch-no-flexbox .d-flex-split>div{min-height:50vh;top:0;bottom:0;}@media all and (min-width: 48em) {.switch-no-flexbox .d-flex-split>div{float:left;position:absolute;width:50%;}}.d-flex-split-left{left:0;color:#7b5a9e;background:#fff;}.d-flex-split-right{right:0;background:#7b5a9e;color:#fff;}.switch-flexbox .d-flex-split.js-flex-align-center>div{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.switch-flexbox .d-flex-split.js-flex-align-top>div{-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}.switch-flexbox .d-flex-split.js-flex-align-bottom>div{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}.switch-flexbox .d-flex-split.js-flex-align-distributed>div{-webkit-justify-content:space-around;-ms-flex-pack:distribute;justify-content:space-around;}.switch-flexbox .d-flex-split.js-order-jake>.d-flex-split-right{-webkit-box-ordinal-group:0;-webkit-order:-1;-ms-flex-order:-1;order:-1;}.switch-flexbox .d-flex-split.js-order-finn>.d-flex-split-left{-webkit-box-ordinal-group:0;-webkit-order:-1;-ms-flex-order:-1;order:-1;}</style>\n<script type=\"text/javascript\">\n(function (window) {\n\t'use strict';\n\tfunction classReg(className) {\n\t\treturn new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\");\n\t}\n\tvar hasClass,\n\taddClass,\n\tremoveClass;\n\tif ('classList' in document.documentElement) {\n\t\thasClass = function (elem, c) {\n\t\t\treturn elem.classList.contains(c);\n\t\t};\n\t\taddClass = function (elem, c) {\n\t\t\telem.classList.add(c);\n\t\t};\n\t\tremoveClass = function (elem, c) {\n\t\t\telem.classList.remove(c);\n\t\t};\n\t} else {\n\t\thasClass = function (elem, c) {\n\t\t\treturn classReg(c).test(elem.className);\n\t\t};\n\t\taddClass = function (elem, c) {\n\t\t\tif (!hasClass(elem, c)) {\n\t\t\t\telem.className = elem.className + ' ' + c;\n\t\t\t}\n\t\t};\n\t\tremoveClass = function (elem, c) {\n\t\t\telem.className = elem.className.replace(classReg(c), ' ');\n\t\t};\n\t}\n\tfunction toggleClass(elem, c) {\n\t\tvar fn = hasClass(elem, c) ? removeClass : addClass;\n\t\tfn(elem, c);\n\t}\n\tvar classie = {\n\t\thasClass : hasClass,\n\t\taddClass : addClass,\n\t\tremoveClass : removeClass,\n\t\ttoggleClass : toggleClass,\n\t\thas : hasClass,\n\t\tadd : addClass,\n\t\tremove : removeClass,\n\t\ttoggle : toggleClass\n\t};\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(classie);\n\t} else {\n\t\twindow.classie = classie;\n\t}\n})(window);\n\n(function () {\n\tvar d = document,\n\tqs,\n\tqa,\n\tclassPosition,\n\tjsSwitcher,\n\tfeatureSwitcher,\n\tdemoContainer,\n\tpropertyChange;\n\tqs = function (selector) {\n\t\treturn d.querySelector(selector);\n\t}\n\tqa = function (selector) {\n\t\treturn d.querySelectorAll(selector);\n\t}\n\tdemoContainer = qa('.js-demo');\n\tjsSwitcher = qa('.js-switcher');\n\tclassPosition = function (cList, str) {\n\t\tfor (var i = 0, len = cList.length; i < len; i++) {\n\t\t\tif (cList[i].toString().indexOf(str) > 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\tpropertyChange = function (theTarget, cList, stringMatch) {\n\t\tvar tmpValueChange = theTarget.value.toString();\n\t\tvar tmpClass = \"js-\";\n\t\tvar currentClasses = cList.classList;\n\t\tvar classMatch;\n\t\tclassMatch = classPosition(currentClasses, stringMatch);\n\t\tcList.classList.remove(currentClasses[classMatch]);\n\t\ttmpClass += tmpValueChange;\n\t\tcList.classList.add(tmpClass);\n\t}\n\tfeatureSwitcher = function (theTarget, featureName) {\n\t\tfor (var i = 0, len = demoContainer.length; i < len; i++) {\n\t\t\tif (demoContainer[i].contains(theTarget)) {\n\t\t\t\tdemoContainer[i].classList.toggle('switch-' + featureName);\n\t\t\t\tdemoContainer[i].classList.toggle('switch-no-' + featureName);\n\t\t\t}\n\t\t}\n\t}\n\tvar flexControlSplitAlign,\n\tflexControlSplitOrder,\n\tflexCardList,\n\tflexCardListJustify,\n\tflexCardListFlexy;\n\tflexCardList = qs('.js-flex-card-list');\n\tflexControlSplitAlign = qs('.js-flex-split-alignment');\n\tflexControlSplitOrder = qs('.js-flex-split-order');\n\tflexSplitContainer = qs('.js-flex-split');\n\tflexCardListJustify = qs('.js-flex-card-justify');\n\tflexCardListFlexy = qs('.js-flex-card-flexy');\n\tfor (var i = 0, len = jsSwitcher.length; i < len; i++) {\n\t\tjsSwitcher[i].addEventListener('change', function (e) {\n\t\t\tfeatureSwitcher(e.target, 'flexbox');\n\t\t}, false);\n\t}\n\tflexControlSplitOrder.addEventListener('change', function (e) {\n\t\tpropertyChange(e.target, flexSplitContainer, 'order');\n\t}, false);\n\tflexControlSplitAlign.addEventListener('change', function (e) {\n\t\tpropertyChange(e.target, flexSplitContainer, 'align');\n\t}, false);\n\tflexCardListJustify.addEventListener('change', function (e) {\n\t\tpropertyChange(e.target, flexCardList, 'justify');\n\t}, false);\n\tflexCardListFlexy.addEventListener('change', function (e) {\n\t\tpropertyChange(e.target, flexCardList, 'flexy');\n\t}, false);\n})();\n/*\n(function () {\n\tvar btnRevealCodeblock,\n\trevealNextCodeBlock;\n\trevealNextCodeBlock = function (e) {\n\t\tconsole.log(\"TEST\");\n\t\te.preventDefault();\n\t\tvar tmpBlock = e.target.parentNode.nextElementSibling;\n\t\tclassie.toggle(tmpBlock, 'js-code-is-hidden');\n\t\tclassie.toggle(tmpBlock, 'js-code-is-visible');\n\t}\n\tbtnRevealCodeblock = document.querySelectorAll('.js-reveal-codeblock');\n\tfor (var i = 0, len = btnRevealCodeblock.length; i < len; i++) {\n\t\tbtnRevealCodeblock[i].addEventListener('click', revealNextCodeBlock, false);\n\t}\n})()\n*/\n\t\t</script>","tags":"css,Flexbox","isStarred":"false","note":"","dateCreated":"Fri Feb 20 2015 19:38:27 GMT+0530 (India Standard Time)","dateModified":{"$$date":1424447025233},"mode":"add","comments":[],"images":[],"_id":"vU7UmL5O6QxXi116"}
{"id":"0","category":"javascript","categoryId":"30","title":"Load Multiple Javascript Files ","codes":[{"code":"(function(doc, script) {\n\tvar js, \n\tfjs = doc.getElementsByTagName(script)[0],\n\tfrag = doc.createDocumentFragment(),\n\tadd = function(url, id) {\n\t\tif (doc.getElementById(id)) {return;}\n\t\tjs = doc.createElement(script);\n\t\tjs.src = url;\n\t\tid && (js.id = id);\n\t\tfrag.appendChild( js );\n\t};\n\t\n\t// Google+ button\n\tadd('http://apis.google.com/js/plusone.js');\n\t// Facebook SDK\n\tadd('//connect.facebook.net/en_US/all.js#xfbml=1&appId=200103733347528', 'facebook-jssdk');\n\t// Twitter SDK\n\tadd('//platform.twitter.com/widgets.js');\n\tconsole.log(\"FJS :: \", frag , fjs, fjs.parentNode);\n\t\n\tfjs.parentNode.insertBefore(frag, fjs);\n}(document, 'script'));","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"javascript","isStarred":"false","note":"","dateCreated":"Thu Feb 05 2015 19:04:53 GMT+0530 (India Standard Time)","dateModified":"Thu Feb 05 2015 19:04:53 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"w8G6dUrCdePkBbk6"}
{"id":"0","category":"node.js","categoryId":"31","title":"Interface Design Patterns for Node.js Modules","codes":[{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"css"}],"description":"<div><p>When you require a module in Node, what are you getting back? When you write a module, what options do you have for designing its interface?</p><p>When I was first learning to work in Node I found the sheer number of ways to do things to be a bit overwhelming. JavaScript is extremely flexible and the community of developers contributing to open source seem to have different styles for implementing the same thing.</p><p>On my journey with Node I've been keeping an eye out the Good Way to do things and adopting them for use in my own work and in our work at Good Eggs.</p><p>In this post I'll share my observations of the Node module system and the ways in which you can use it to encapsulate and share code. My goal is to identify and illustrate useful patterns for module interface design and to help you understand when and how to use them in your own work.</p><p>I discuss seven patterns below, many of which can be used in combination. They are:</p><ul><li><a href=\"/posts/export-this/#namespace\">Exports a Namespace</a></li><li><a href=\"/posts/export-this/#function\">Exports a Function</a></li><li><a href=\"/posts/export-this/#higher_order_function\">Exports a Higher Order Function</a></li><li><a href=\"/posts/export-this/#constructor\">Exports a Constructor</a></li><li><a href=\"/posts/export-this/#singleton\">Exports a Singleton</a></li><li><a href=\"/posts/export-this/#global_object\">Extends a Global Object</a></li><li><a href=\"/posts/export-this/#monkey_patch\">Applies a Monkey Patch</a></li></ul><!-- more --><h2>require, exports and module.exports</h2><p>First some fundamentals.</p><p>In Node requiring a file is requiring the module it defines. All modules have a reference to an implicit <code>module</code> object whose property <code>module.exports</code> is what is returned when you call <code>require</code>. A reference to <code>module.exports</code> is also available as <code>exports</code>.</p><p>It's as if there were an implicit line at the beginning of each module that reads:</p><pre><code><span>var</span> <span>exports</span> = module.<span>exports</span> = <span>{}</span>;</code></pre><p>If you want to export a function, you have to assign it to <code>module.exports</code>. Assigning a function to <code>exports</code> would just reassign the <code>exports</code> reference but <code>module.exports</code> would still point at the original empty object.</p><p>So we can define a module <code>function.js</code> that exports a function:</p><pre><code><span>module</span>.exports = <span><span>function</span> <span>()</span> </span>{  <span>return</span> {name: <span>'Jane'</span>};};</code></pre><p>and require it with:</p><pre><code><span>var</span> func = <span>require</span>(<span>'./function'</span>);</code></pre><p>An important behavior of <code>require</code> is that it caches the value of <code>module.exports</code> and returns that same value for all future calls to <code>require</code>. It caches based on the absolute file path of the required file. So if you want your module to be able to return different values, you should have it export a function that can then be invoked to return a new value.</p><p>To demonstrate with the Node REPL:</p><pre><code><span><span>$ node&gt;</span> f1 = require(<span>'/Users/alon/Projects/export_this/function'</span>);[<span>Function</span>]</span>&gt; f2 = <span>require</span>(<span>'./function'</span>); <span>//</span> <span>Same</span> location<span><span>[Function]&gt;</span> f1 === f2</span><span><span>true&gt;</span> f1() === f2()</span><span>false</span></code></pre><p>You can see that <code>require</code> is returning the same function instance but that the objects returned by that function are different instances for each call.</p><p>For more detail on Node's module system <a href=\"http://nodejs.org/api/modules.html\">the core docs</a> provide good detail and are worth a read.</p><p>And now on to the interface patterns.</p><p><a name=\"namespace\"></a></p><h2>Exports a Namespace</h2><p>A simple and common pattern is to export an object with a number of properties, primarily but not limited to functions. This allows the code requiring the module to pull in a collection of related functionality under a single namespace.</p><p>When you require a module that exports a namespace, you'll usually either assign the entire namespace to a variable and use its members through that reference, or assign members directly to local variables:</p><pre><code><span>var</span> fs = <span>require</span>(<span>'fs'</span>),    readFile = fs.readFile,    ReadStream = fs.ReadStream;readFile(<span>'./file.txt'</span>, <span><span>function</span><span>(err, data)</span> </span>{  <span>console</span>.log(<span>\"readFile contents: '%s'\"</span>, data);});<span>new</span> ReadStream(<span>'./file.txt'</span>).on(<span>'data'</span>, <span><span>function</span><span>(data)</span> </span>{  <span>console</span>.log(<span>\"ReadStream contents: '%s'\"</span>, data);});</code></pre><p>Here's what the <a href=\"https://github.com/joyent/node/blob/e5346932bcbc523489c9418b82fde31cb666ee99/lib/fs.js#L33\"><code>fs</code> core module</a> is doing:</p><pre><code><span>var</span> fs = <span>exports</span>;</code></pre><p>It first assigns the local variable <code>fs</code> to the implicit exports object and then assigns function references to properties of <code>fs</code>. Because <code>fs</code> references <code>exports</code> and exports is the object you get when you call <code>require('fs')</code> anything assigned to <code>fs</code> will be available on the object you get from <code>require</code>.</p><pre><code>fs.readFile = <span>function</span>(path, options, callback_) {  // <span>...</span>};</code></pre><p>Anything is fair game. It then exports a constructor:</p><pre><code>fs.ReadStream = ReadStream;<span>function</span> ReadStream(path, options) {  // <span>...</span>}ReadStream.prototype.open = <span>function</span>() {  // <span>...</span>}</code></pre><p>When exporting a namespace, you can assign properties to <code>exports</code> as the <code>fs</code> module does above, or assign a new object to <code>module.exports</code>.</p><pre><code>module.exports = {  version: <span>'1.0'</span>,  doSomething: <span>function</span>() {    //<span>...</span>  }}</code></pre><p>A common use of exporting a namespace is to export the root of another module so that one require statement gives the caller access to a number of other modules. At Good Eggs, we implement each of our domain models in a separate module that exports the model constructor (see <a href=\"#constructor\">Exports a Constructor</a> below) and then have an index file in the directory where the models live that exports all of the models. This allows us to pull in our models under a <code>models</code> namespace.</p><pre><code><span>var</span> models = <span>require</span>(<span>'./models'</span>),    User = models.User,    Product = models.Product;</code></pre><p>For CoffeeScript users, <a href=\"http://coffeescript.org/#destructuring\">destructuring assignment</a> make this even cleaner.</p><pre><code>{<span>User</span>, <span>Product</span>} = <span>require</span> <span>'./models'</span></code></pre><p><code>index.js</code> might look like:</p><pre><code>exports.<span>User</span> = <span>require</span>(<span>'./user'</span>);exports.<span>Person</span> = <span>require</span>(<span>'./person'</span>);</code></pre><p>In reality, we use a small library that requires all sibling files and exports their modules with CamelCase names so the <code>index.js</code> file in our models directory actually reads:</p><pre><code><span>module</span>.exports = <span>require</span>(<span>'../lib/require_siblings'</span>)(__filename);</code></pre><p><a name=\"function\"></a></p><h2>Exports a Function</h2><p>Another pattern is to export a function as the interface to a module. A common use of this pattern is to export a factory function that returns an object when invoked. We see this when using <a href=\"http://expressjs.com\">Express.js</a>:</p><pre><code><span>var</span> express = <span>require</span>(<span>'express'</span>);<span>var</span> app = express();app.get(<span>'/hello'</span>, <span><span>function</span> <span>(req, res)</span> </span>{  res.send <span>\"Hi there! We're using Express v\"</span> + express.version;});</code></pre><p>The function exported by Express is used to create a new Express application. In your own use of this pattern, your factory function may take arguments used to configure or initialize the object returned.</p><p>To export a function, you must assign your function to module.exports. <a href=\"https://github.com/visionmedia/express/blob/2e68ddbae9cec2d0b22f48f35ef4da964f51949e/lib/express.js#L18\">Express does</a> :</p><pre><code>exports = module.exports = createApplication;<span>...</span><span>function</span> createApplication () {  <span>...</span>}</code></pre><p>It's assigning the <code>createApplication</code> function to <code>module.exports</code> and then to the implicit <code>exports</code> variable. Now <code>exports</code> is the function that the module exports.</p><p>Express also uses this exported function as a namespace:</p><pre><code>exports.<span>version</span> = <span>'3.1.1'</span>;</code></pre><p>Note that there's nothing to stop us from using the exported function as a namespace that can expose references to other functions, constructors or objects serving as namespaces themselves.</p><p>When exporting a function, it is good practice to name the function so that it will show up in stack traces. Note the stack trace differences in these two examples:</p><pre><code><span>// bomb1.js</span><span>module</span>.exports = <span><span>function</span> <span>()</span> </span>{  <span>throw</span> <span>new</span> <span>Error</span>(<span>'boom'</span>);};</code></pre><pre><code><span>// bomb2.js</span><span>module</span>.exports = <span><span>function</span> <span>bomb</span><span>()</span> </span>{  <span>throw</span> <span>new</span> <span>Error</span>(<span>'boom'</span>);};</code></pre><pre><code>$ node&gt; bomb = <span>require</span>(<span>'./bomb1'</span>);[Function]&gt; bomb()Error: boom    at module.exports (/Users/alon/Projects/export_this/bomb1.js:<span>2</span>:<span>9</span>)    at repl:<span>1</span>:<span>2</span>    <span>...</span>&gt; bomb = <span>require</span>(<span>'./bomb2'</span>);[Function: bomb]&gt; bomb()Error: boom    at bomb (/Users/alon/Projects/export_this/bomb2.js:<span>2</span>:<span>9</span>)    at repl:<span>1</span>:<span>2</span>    <span>...</span></code></pre><p>There are a couple specific cases of exporting a function that are worth calling out as distinct patterns.</p><p><a name=\"higher_order_function\"></a></p><h2>Exports a Higher Order Function</h2><p>A higher-order function, or functor, is a function that  takes one or more functions as an input and/or outputs a function. We're talking about the latter case - a function that returns a function.</p><p>Exporting a higher order function is a useful pattern when you want to return a function from your module but need to take input that controls the behavior of that function.</p><p><a href=\"http://www.senchalabs.org/connect/\">Connect middleware</a> provide a lot of pluggable functionality for Express and other web frameworks. A middleware is a function that takes three arguments - <code>(req, res, next)</code>. The convention in connect middleware is to export a function that when called returns the middleware function. This allows the exported function to take arguments that can be used to configure the middleware and are available through closure scope to the middleware when it is handling a request.</p><p>For example, here's the connect <a href=\"http://www.senchalabs.org/connect/query.html\"><code>query</code> middleware</a> used internally by Express to parse query string parameters into a an object available as <code>req.query</code>.</p><pre><code><span>var</span> connect = <span>require</span>(<span>'connect'</span>),    query = <span>require</span>(<span>'connect/lib/middleware/query'</span>);<span>var</span> app = connect();app.<span>use</span>(query({maxKeys: <span>100</span>}));</code></pre><p>The <code>query</code> source looks like:</p><pre><code><span>var</span> qs = <span>require</span>(<span>'qs'</span>)  , parse = <span>require</span>(<span>'../utils'</span>).parseUrl;<span>module</span>.exports = <span><span>function</span> <span>query</span><span>(options)</span></span>{  <span>return</span> <span><span>function</span> <span>query</span><span>(req, res, next)</span></span>{    <span>if</span> (!req.query) {      req.query = ~req.url.indexOf(<span>'?'</span>)        ? qs.parse(parse(req).query, options)        : {};    }    next();  };};</code></pre><p>For every request handled by the <code>query</code> middleware, the <code>options</code> argument available through closure scope is passed along to Node's core <code>qs</code> (query string) module.</p><p>This is a common and very flexible pattern for module design and one you are likely to find very useful in your own work.</p><p><a name=\"constructor\"></a></p><h2>Exports a Constructor</h2><p>We define classes in JavaScript with constructor functions and create instances of classes with the <code>new</code> keyword.</p><pre><code><span><span>function</span> <span>Person</span><span>(name)</span> </span>{  <span>this</span>.name = name;}Person.prototype.greet = <span><span>function</span><span>()</span> </span>{  <span>return</span> <span>\"Hi, I'm Jane.\"</span>;};<span>var</span> person = <span>new</span> Person(<span>'Jane'</span>);<span>console</span>.log(person.greet()); <span>// prints: Hi, I'm Jane</span></code></pre><p>For this pattern implement a class-per-file and export the constructor to make your project organization clear and to make it easy for other developers to find the implementation of a class. At Good Eggs, we implement classes in files with underscore_names and assign them to CamelCase names.</p><pre><code><span>var</span> Person = <span>require</span>(<span>'./person'</span>);<span>var</span> person = <span>new</span> Person(<span>'Jane'</span>);</code></pre><p>The implementation might look like:</p><pre><code><span><span>function</span> <span>Person</span><span>(name)</span> </span>{  <span>this</span>.name = name;}Person.prototype.greet = <span><span>function</span><span>()</span> </span>{  <span>return</span> <span>\"Hi, I'm \"</span> + <span>this</span>.name;};<span>module</span>.exports = Person;</code></pre><p><a name=\"singleton\"></a></p><h2>Exports a Singleton</h2><p>Export a <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">singleton</a> when you want all users of your module to share the state and behavior of a single class instance.</p><p><a href=\"http://mongoosejs.com\">Mongoose</a> is an object-document mapping library used to create rich domain models persisted in MongoDB.</p><pre><code>var mongoose = <span>require</span>(<span>'mongoose'</span>);mongoose.connect(<span>'mongodb://localhost/test'</span>);var Cat = mongoose.model(<span>'Cat'</span>, { name: String });var kitty = new Cat({ name: <span>'Zildjian'</span> });kitty.save(<span>function</span> (err) {  <span>if</span> (err) // <span>...</span>  console.log(<span>'meow'</span>);});</code></pre><p>What is that <code>mongoose</code> object we get back when we require Mongoose? Internally, the <code>mongoose</code> module is doing:</p><pre><code><span>function</span> Mongoose() {  //<span>...</span>}module.exports = exports = new Mongoose();</code></pre><p>Because <code>require</code> caches the value assigned to <code>module.exports</code>, all calls to <code>require('mongoose')</code> will return this same instance ensuring that it is a singleton in our application. Mongoose uses an object-oriented design to encapsulate and decouple functionality, maintain state and support readability and comprehension, but creates a simple interface to users by creating and exporting an instance of the Mongoose class.</p><p>It also uses this singleton instance as a namespace to make other constructors available if needed by the user, including the Mongoose constructor itself. You might use the <code>Mongoose</code> constructor to create additional instances of mongoose connecting to additional MongoDB databases.</p><p>Internally, Mongoose does:</p><pre><code><span>Mongoose.prototype.Mongoose </span>=<span> Mongoose;</span></code></pre><p>So that you can do:</p><pre><code><span>var</span> mongoose = <span>require</span>(<span>'mongoose'</span>),    Mongoose = mongoose.Mongoose;<span>var</span> myMongoose = <span>new</span> Mongoose();myMongoose.connect(<span>'mongodb://localhost/test'</span>);</code></pre><p><a name=\"global_object\"></a></p><h2>Extends a Global Object</h2><p>A required module can do more than just export a value. It can also modify global objects or objects returned when requiring other modules. It can define new global objects. It can just do this or do this in addition to exporting something useful.</p><p>Use this pattern when you need to extend or alter the behavior of global objects to provide the behavior delivered by your module. While certainly controversial and to be used judiciously (especially in open source work), this pattern can also be indispensable.</p><p><a href=\"https://github.com/visionmedia/should.js\">Should.js</a> is an assertion library designed to be used in unit testing:</p><pre><code><span>require</span>(<span>'should'</span>);<span>var</span> user = {    name: <span>'Jane'</span>};user.name.should.equal(<span>'Jane'</span>);</code></pre><p>Should.js <a href=\"https://github.com/visionmedia/should.js/blob/68000f47d01408cacb80441a1d9bf10ba423e54c/lib/should.js#L107-L113\">extends Object with a non-enumerable property <code>should</code></a> to provide a clean syntax for writing unit test asserts. Internally, <code>should.js</code> does:</p><pre><code>var should = <span>function</span>(obj) {  <span>return</span> new Assertion(util.isWrapperType(obj) ? obj.valueOf(): obj);};//<span>...</span>exports = module.exports = should;//<span>...</span>Object.defineProperty(Object.prototype, <span>'should'</span>, {  set: <span>function</span>(){},  get: <span>function</span>(){    <span>return</span> should(this);  },  configurable: true});</code></pre><p>Note that while Should.js exports the <code>should</code> function its primary use is through the <code>should</code> function it has added to <code>Object</code>.</p><p><a name=\"monkey_patch\"></a></p><h2>Applies a Monkey Patch</h2><p>By <a href=\"http://en.wikipedia.org/wiki/Monkey_patch\">monkey patch</a> I'm referring to \"the dynamic modifications of a class or module at runtime, motivated by the intent to patch existing third-party code as a workaround to a bug or feature which does not act as desired.\"</p><p>Implement a module to patch an existing module when it doesn't provide an interface to customizing its behavior in the way you need. This pattern is a variant of the previous. Instead of modifying a global object, we are relying on the caching behavior of Node's module system to patch the same instance of a module that other code gets when it requires that module.</p><p>By default Mongoose names MongoDB collections by lowercasing and pluralizing the model name. For a model named <code>CreditCardAccountEntry</code> we'd end up with a collection named <code>creditcardaccountentries</code>. I prefer <code>credit_card_account_entries</code> and I want this behavior universally.</p><p>Here's the source for a module that patches <code>mongoose.model</code> when the module is required:</p><pre><code><span>var</span> Mongoose = <span>require</span>(<span>'mongoose'</span>).Mongoose;<span>var</span> _ = <span>require</span>(<span>'underscore'</span>);<span>var</span> model = Mongoose.prototype.model;<span>var</span> modelWithUnderScoreCollectionName = <span><span>function</span><span>(name, schema, collection, skipInit)</span> </span>{  collection = collection || _(name).chain().underscore().pluralize().value();  model.call(<span>this</span>, name, schema, collection, skipInit);};Mongoose.prototype.model = modelWithUnderScoreCollectionName;</code></pre><p>When this module is required for the first time, it requires <code>mongoose</code>, redefines <code>Mongoose.prototype.model</code> and delegates back to the original implementation of <code>model</code>. Now all instances of <code>Mongoose</code> will have this new behavior. Note that it does not modify <code>exports</code> so the value returned to <code>require</code> will be the default empty <code>exports</code> object.</p><p>As a side note, if you do choose to monkey patch existing code, use a chaining technique similar to my example above. Add your behavior then delegate back to the original implementation. While not foolproof, it is the safest way to patch third party code allowing you to take advantage of future updates to the library and minimizing conflict with other patches that may be applied.</p><h2>Export Away!</h2><p>The Node module system provides a simple mechanism for encapsulating functionality and creating clear interfaces to your code. I hope the seven patterns here are a useful breakdown of different strategies available to you.</p><p>I haven't been exhaustive and there are certainly other options available but I have attempted to describe the most common and useful. Have I missed anything that should be included here?</p><p><em>Thanks to the incredibly prolific Node developer community for all the open source work from which I have done most of my learning. I encourage you to read the code of the libraries you are using and to find the great developers out there with clear, consistent and readable styles that can inspire your own. Special shout out to <a href=\"https://github.com/visionmedia\">TJ Holowaychuk</a> whose work on Express.js, Connect and Should.js are referenced above.</em></p></div>","tags":"node.js,javascript","isStarred":"false","note":"","dateCreated":"Thu Jan 29 2015 20:16:10 GMT+0530 (India Standard Time)","dateModified":"Thu Jan 29 2015 20:16:10 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"wWl2K2BCD8h2hMaK"}
{"id":"0","category":"scss","categoryId":"57","title":"Sass control directives: @if, @for, @each and @while","refSite":"http://thesassway.com/intermediate/if-for-each-while","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Sass control directives are the cornerstone of creating libraries for\n reuse and distribution, and need to be among the very first items on \nyour list of things to learn when taking your Sass skills to the next \nlevel.</p>\n\n<h2>A crash course to Sass control directives</h2>\n\n<p><a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#control_directives\">Sass control directives</a> provide flow and logic and give you a finite level of decision making required by mixins and functions.</p>\n\n<p>In this guide, we will be covering: <a href=\"http://thesassway.com/intermediate/if-for-each-while#if\">@if</a>, <a href=\"http://thesassway.com/intermediate/if-for-each-while#for\">@for</a>, <a href=\"http://thesassway.com/intermediate/if-for-each-while#each\">@each</a> and <a href=\"http://thesassway.com/intermediate/if-for-each-while#while\">@while</a>.</p>\n\n<h3>Working Code</h3>\n\n<p>If you'd like to follow along using the compass project used to create this guide, check out <a target=\"_blank\" href=\"https://github.com/thesassway/if-for-each-while\">the working code</a> on GitHub.</p>\n\n<h3>@if</h3>\n\n<p>The <code>@if</code> control directive takes a <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#sassscript\">SassScript</a> expression and processes its block of styles if the expression returns anything other than <code>false</code>.</p>\n\n<p>Here's a fairly simple example of an <code>@if</code> control directive. I've simplified this example to be more readable, rather than usable.</p>\n\n<div>\n<pre><span>// Set a variable to run the if statement against</span>\n<span>$boolean</span><span>:</span> <span>true</span> <span>!default</span>\n\n<span>=simple-mixin</span>\n  <span>@if</span> <span>$boolean</span>\n    <span>@debug</span> <span>\"$boolean is </span><span>#{</span><span>$boolean</span><span>}</span><span>\"</span>\n    <span>display</span><span>:</span> <span>block</span>\n  <span>@else</span>\n    <span>@debug</span> <span>\"$boolean is </span><span>#{</span><span>$boolean</span><span>}</span><span>\"</span>\n    <span>display</span><span>:</span> <span>none</span>\n\n<span>.some-selector</span>\n  <span>+simple-mixin</span>\n</pre>\n</div>\n\n\n<p>Which emits this CSS:</p>\n\n<div>\n<pre><span>.some-selector</span> <span>{</span>\n  <span>display</span><span>:</span> <span>block</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>Also notice that I've added <code>@debug</code> followed by a string \nin each flow option. This isn't core to this guide, but I've added this \nto show you how you can output a message to the command-line output log \nto let users know about certain events such as a <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id9\">@warn</a> or a <a target=\"_blank\" href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id8\">@debug</a>\n as your code gets executed. For complex mixins and functions, this \ncould come in handy to provide a better user experience and make it \neasier to spot and track down issues.</p>\n\n<p>For example, if you ran this code this is what you would see in the command-line output.</p>\n\n<div>\n<pre>/Users/.../screen.sass:8 DEBUG: <span>$boolean</span> is <span>true</span>\n</pre>\n</div>\n\n\n<h3>@for</h3>\n\n<p>The <code>@for</code> directive comes in two forms.</p>\n\n<p>The first option is <code>@for $var from &lt;start&gt; through &lt;end&gt;</code> which starts at <code>&lt;start&gt;</code> and loops \"through\" each iteration and ends at <code>&lt;end&gt;</code>. Pretty straight forward.</p>\n\n<p>The second option is <code>@for $var from &lt;start&gt; to &lt;end&gt;</code> which starts at <code>&lt;start&gt;</code> and loops through each iteration \"to\" <code>&lt;end&gt;</code> and stops. Once the directive hits the <code>&lt;end&gt;</code>\n it stops the looping process and does not evaluate the loop that one \nlast time. Using the values mentioned in the example below, it's like \nsaying \"go from 1 to 4 and then stop\".</p>\n\n<p>In either case, the <code>$var</code> can be any variable name. Because this directive is often used to increment <code>$i</code> is often the name you will see as the <code>$var</code>.</p>\n\n<p>Here's a fairly simple example of a <code>@for</code> control directive.</p>\n\n<div>\n<pre><span>$class-slug</span><span>:</span> <span>for</span> <span>!default</span>\n\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>through</span> <span>4</span>\n  <span>.</span><span>#{</span><span>$class-slug</span><span>}</span><span>-</span><span>#{</span><span>$i</span><span>}</span>\n    <span>width</span><span>:</span> <span>60</span><span>px</span> <span>+</span> <span>$i</span>\n</pre>\n</div>\n\n\n<p>Which emits this CSS:</p>\n\n<div>\n<pre><span>.for-1</span> <span>{</span>\n  <span>width</span><span>:</span> <span>61px</span><span>;</span>\n<span>}</span>\n\n<span>.for-2</span> <span>{</span>\n  <span>width</span><span>:</span> <span>62px</span><span>;</span>\n<span>}</span>\n\n<span>.for-3</span> <span>{</span>\n  <span>width</span><span>:</span> <span>63px</span><span>;</span>\n<span>}</span>\n\n<span>.for-4</span> <span>{</span>\n  <span>width</span><span>:</span> <span>64px</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<p>If you want to see a real world example of a <code>@for</code> directive, check out how I've used it in <a target=\"_blank\" href=\"https://github.com/adamstac/grid-coordinates/blob/master/stylesheets/partials/_grid-coordinates-mixin.scss\">Grid Coordinates</a> to create a range of classes on lines 37-53.</p>\n\n<p>Here's a sample of the code you'll see in that file.</p>\n\n<div>\n<pre><span>// Loops to enumerate the classes</span>\n<span>// Yep, this saves us tons of typing (if this were CSS)</span>\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>through</span> <span>$grid-columns</span> <span>{</span>\n  <span>.grid-</span><span>#{</span><span>$i</span><span>}</span> <span>{</span> <span>@include</span><span> grid-base</span><span>(</span><span>$i</span><span>);</span> <span>@extend</span> <span>.grid-block</span><span>;</span> <span>}</span>\n<span>}</span>\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>to</span> <span>$grid-columns</span> <span>{</span>\n  <span>.grid-prefix-</span><span>#{</span><span>$i</span><span>}</span> <span>{</span> <span>@include</span><span> grid-prefix</span><span>(</span><span>$i</span><span>);</span> <span>}</span>\n<span>}</span>\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>to</span> <span>$grid-columns</span> <span>{</span>\n  <span>.grid-suffix-</span><span>#{</span><span>$i</span><span>}</span> <span>{</span> <span>@include</span><span> grid-suffix</span><span>(</span><span>$i</span><span>);</span> <span>}</span>\n<span>}</span>\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>to</span> <span>$grid-columns</span> <span>{</span>\n  <span>.grid-push-</span><span>#{</span><span>$i</span><span>}</span> <span>{</span> <span>@include</span><span> grid-push</span><span>(</span><span>$i</span><span>);</span> <span>}</span>\n<span>}</span>\n<span>@for</span> <span>$i</span> <span>from</span> <span>1</span> <span>to</span> <span>$grid-columns</span> <span>{</span>\n  <span>.grid-pull-</span><span>#{</span><span>$i</span><span>}</span> <span>{</span> <span>@include</span><span> grid-pull</span><span>(</span><span>$i</span><span>);</span> <span>}</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h3>@each</h3>\n\n<p>The <code>@each</code> directive takes the form <code>@each $var in &lt;list&gt;</code>. If you haven't played with lists yet, get ready because this has just turned into a 2 in 1 lesson.</p>\n\n<p>As you can see in the example below, <code>$var</code> can be any variable name, and <code>&lt;list&gt;</code> is a SassScript expression that returns a list. When processed, <code>$var</code> is set to each item in the list, and processes its block of styles using that value of <code>$var</code>.</p>\n\n<p>Here's a fairly simple example of an <code>@each</code> control directive.</p>\n\n<div>\n<pre><span>$list</span><span>:</span> <span>adam</span> <span>john</span> <span>wynn</span> <span>mason</span> <span>kuroir</span>\n\n<span>=author-images</span>\n  <span>@each</span> <span>$</span><span>author</span> <span>in</span> <span>$</span><span>list</span>\n    <span>.photo-</span><span>#{</span><span>$author</span><span>}</span>\n      <span>background</span><span>:</span> <span>image-url</span><span>(</span><span>\"avatars/</span><span>#{</span><span>$author</span><span>}</span><span>.png\"</span><span>)</span> <span>no-repeat</span>\n\n<span>.author-bio</span>\n  <span>+author-images</span>\n</pre>\n</div>\n\n\n<p>Which emits this CSS:</p>\n\n<div>\n<pre><span>.author-bio</span> <span>.photo-adam</span> <span>{</span>\n  <span>background</span><span>:</span> <span>url('/images/avatars/adam.png')</span> <span>no-repeat</span><span>;</span>\n<span>}</span>\n<span>.author-bio</span> <span>.photo-john</span> <span>{</span>\n  <span>background</span><span>:</span> <span>url('/images/avatars/john.png')</span> <span>no-repeat</span><span>;</span>\n<span>}</span>\n<span>.author-bio</span> <span>.photo-wynn</span> <span>{</span>\n  <span>background</span><span>:</span> <span>url('/images/avatars/wynn.png')</span> <span>no-repeat</span><span>;</span>\n<span>}</span>\n<span>.author-bio</span> <span>.photo-mason</span> <span>{</span>\n  <span>background</span><span>:</span> <span>url('/images/avatars/mason.png')</span> <span>no-repeat</span><span>;</span>\n<span>}</span>\n<span>.author-bio</span> <span>.photo-kuroir</span> <span>{</span>\n  <span>background</span><span>:</span> <span>url('/images/avatars/kuroir.png')</span> <span>no-repeat</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h3>@while</h3>\n\n<p>The <code>@while</code> directive takes a SassScript expression (just\n like the other control directives) and repeatedly emits the nested \nblock of styles until the statement evaluates to <code>false</code>. Much like the <code>@for</code> control directive, you are able to create very complex looping statements \"while\" a specific condition evaluates to <code>true</code>.</p>\n\n<p>Here's a fairly simple example of a <code>@while</code> control directive.</p>\n\n<div>\n<pre><span>$types</span><span>:</span> <span>4</span>\n<span>$type-width</span><span>:</span> <span>20</span><span>px</span>\n\n<span>@while</span> <span>$types</span> <span>&gt;</span> <span>0</span>\n  <span>.while-</span><span>#{</span><span>$types</span><span>}</span>\n    <span>width</span><span>:</span> <span>$type-width</span> <span>+</span> <span>$types</span>\n  <span>$types</span><span>:</span> <span>$types</span> <span>-</span> <span>1</span>\n</pre>\n</div>\n\n\n<p>Which emits this CSS:</p>\n\n<div>\n<pre><span>.while-4</span> <span>{</span>\n  <span>width</span><span>:</span> <span>24px</span><span>;</span>\n<span>}</span>\n\n<span>.while-3</span> <span>{</span>\n  <span>width</span><span>:</span> <span>23px</span><span>;</span>\n<span>}</span>\n\n<span>.while-2</span> <span>{</span>\n  <span>width</span><span>:</span> <span>22px</span><span>;</span>\n<span>}</span>\n\n<span>.while-1</span> <span>{</span>\n  <span>width</span><span>:</span> <span>21px</span><span>;</span>\n<span>}</span>\n</pre>\n</div>\n\n\n<h2>Conclussion</h2>\n\n<p>As you can see, Sass control directives will super-charge your mixins\n and functions to give you all the tools you need to make decisions, \nloop through and to, and provide the flow and control required to create\n awesome libraries.</p>\n\n<p>Be sure to browse <a target=\"_blank\" href=\"https://github.com/thesassway/if-for-each-while\">the working code for this guide</a> on GitHub.</p>","tags":"css,SCSS","isStarred":"false","note":"","dateCreated":"Tue Mar 03 2015 15:22:39 GMT+0530 (India Standard Time)","dateModified":"Tue Mar 03 2015 15:22:39 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"ze7Cn2oGRfuZIxgF"}
{"id":"0","category":"svg","categoryId":"54","title":"SVG Circular progress 2","codes":[{"code":"<div class=\"demo\">\n  <svg width=\"184.9px\" height=\"184.9px\" viewBox=\"0 0 184.9 184.9\" class=\"circle\">\n    <circle fill=\"none\" stroke=\"#ccc\" stroke-width=\"5\" stroke-miterlimit=\"5\" cx=\"92.5\" cy=\"92.5\" r=\"77\" class=\"circle-path\"></circle>\n    <circle fill=\"none\" stroke=\"red\" stroke-width=\"5\" stroke-miterlimit=\"5\" cx=\"92.5\" cy=\"92.5\" r=\"77\" class=\"circle-fill\"></circle>\n  </svg>\n  <ul class=\"circle-actions\">\n    <li>\n      <button class=\"circle-action circle-action--fill\">fill</button>\n    </li>\n    <li>\n      <button class=\"circle-action circle-action--empty\">empty</button>\n    </li>\n  </ul>\n</div>","codeLanguage":"html"},{"code":"@-webkit-keyframes fill {\n  from {\n    stroke-dashoffset: 484;\n    stroke: #ccc;\n  }\n  to {\n    stroke-dashoffset: 0;\n    stroke: teal;\n  }\n}\n@keyframes fill {\n  from {\n    stroke-dashoffset: 484;\n    stroke: #ccc;\n  }\n  to {\n    stroke-dashoffset: 0;\n    stroke: teal;\n  }\n}\n@-webkit-keyframes empty {\n  from {\n    stroke-dashoffset: 0;\n    stroke: teal;\n  }\n  to {\n    stroke-dashoffset: 484;\n    stroke: #ccc;\n  }\n}\n@keyframes empty {\n  from {\n    stroke-dashoffset: 0;\n    stroke: teal;\n  }\n  to {\n    stroke-dashoffset: 484;\n    stroke: #ccc;\n  }\n}\nhtml,\nbody {\n  height: 100%;\n}\n\nbody {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.demo {\n  width: 300px;\n  margin: auto;\n}\n\n.circle {\n  display: block;\n  width: 300px;\n  height: 300px;\n  border-radius: 100%;\n  -webkit-transform: rotate(-90deg);\n      -ms-transform: rotate(-90deg);\n          transform: rotate(-90deg);\n}\n.circle-fill {\n  stroke-dasharray: 484;\n  stroke-dashoffset: 484;\n  stroke: #ccc;\n}\n.circle--fill .circle-fill {\n  -webkit-animation: fill 5s 1 linear forwards;\n          animation: fill 5s 1 linear forwards;\n}\n.circle--empty .circle-fill {\n  -webkit-animation: empty 5s 1 linear forwards;\n          animation: empty 5s 1 linear forwards;\n}\n\n.circle-actions {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  text-align: center;\n}\n.circle-actions li {\n  -webkit-box-flex: 1;\n  -webkit-flex: 1 1;\n      -ms-flex: 1 1;\n          flex: 1 1;\n  margin: 0;\n  padding: 0;\n}\n\n.circle-action {\n  box-sizing: border-box;\n  display: block;\n  width: 100%;\n  padding: 1em 0;\n  border: none;\n  background: teal;\n  color: white;\n  font: bold 1em/1.5em sans-serif;\n  text-transform: uppercase;\n  text-align: center;\n  cursor: pointer;\n}\n.circle-action:focus {\n  outline: none;\n}\n.circle-action--fill {\n  background: orange;\n}\n.circle-action--empty {\n  background: teal;\n}","codeLanguage":"css"},{"code":"$('.circle-action--fill').click(function(){\n  $('.circle').attr('class','circle circle--fill')\n});\n$('.circle-action--empty').click(function(){\n  $('.circle').attr('class','circle circle--empty')\n});","codeLanguage":"javascript"}],"description":"","tags":"SVG,Circular Progress","isStarred":"false","note":"","dateCreated":"Sat Feb 07 2015 13:09:51 GMT+0530 (India Standard Time)","dateModified":"Sat Feb 07 2015 13:09:51 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"zjukBkI2KFdPyckZ"}
{"id":"0","category":"javascript","categoryId":"30","title":"Javascript Trigger and Callback list Object","codes":[{"code":"var mod, modFn = {\n\tsettings : {\n\t\tonDropdownOpen : onDropdownOpen\n\t},\n\tsetupCallbacks: function() {\n\t\tvar key, fn, callbacks = {\n\t\t\t'initialize'     : 'onInitialize',\n\t\t\t'change'         : 'onChange',\n\t\t\t'item_add'       : 'onItemAdd',\n\t\t\t'item_remove'    : 'onItemRemove',\n\t\t\t'clear'          : 'onClear',\n\t\t\t'option_add'     : 'onOptionAdd',\n\t\t\t'option_remove'  : 'onOptionRemove',\n\t\t\t'option_clear'   : 'onOptionClear',\n\t\t\t'dropdown_open'  : 'onDropdownOpen',\n\t\t\t'dropdown_close' : 'onDropdownClose',\n\t\t\t'type'           : 'onType',\n\t\t\t'load'           : 'onLoad'\n\t\t};\n\t\t\n\t\tfor (key in callbacks) {\n\t\t\tif (callbacks.hasOwnProperty(key)) {\n\t\t\t\tfn = this.settings[callbacks[key]];\n\t\t\t\tconsole.log(\"Selectize :\",window, fn, key, callbacks[key]);\n\t\t\t\tif (fn) $('body').on(key, fn);\n\t\t\t}\n\t\t}\n\t\t\n\t},\n}\n\nfunction onDropdownOpen(msg) {\n\tconsole.log(\"Dropdown Is open \", msg);\n}\n\nmodFn.setupCallbacks();\n\n$('body').on('click', 'pre', function(e) {\t\n\t$('body').trigger('dropdown_open', \"This is test\");\n});","codeLanguage":"javascript"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"","tags":"javascript,callback","isStarred":"false","note":"","dateCreated":"Thu Feb 12 2015 16:11:04 GMT+0530 (India Standard Time)","dateModified":"Thu Feb 12 2015 16:11:04 GMT+0530 (India Standard Time)","mode":"add","comments":[{"snippetID":"zqTVrkVfchSwb4cW","commentId":"1","description":"<pre><code>\nvar person2 = {name: 'Marvin', age: 42, size: '2xM'};\n\nvar update = function(name, age, size){\n    this.name = name;\n    this.age = age;\n    this.size = size;\n  console.log(name, age, size);\n};\n\nvar dispatch = function(person, method, args){\n    method.apply(person, args);\n};\n\ndispatch(person2, update, ['Slarty', 200, '1xM']);\n</code></pre>","author":"Jignesh Raval","authorImage":"","dateCreated":{"$$date":1423737727179}}],"images":[],"_id":"zqTVrkVfchSwb4cW"}
{"$$indexCreated":{"fieldName":"dateCreated","unique":true,"sparse":true}}
{"id":"0","category":"","categoryId":"","title":"Grouping related classes in your markup","refSite":"","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>A few weeks back, <a href=\"https://twitter.com/csswizardry/status/439383832920604672\">I put out a\nTweet</a> to <a href=\"http://jsfiddle.net/csswizardry/m2qa9/\">a\njsFiddle</a> describing an idea I’d had in\nwhich I grouped two or more related class attributes to make them easier to\nnotice when scanning an HTML file, and—coincidentally—trivial to manipulate very\neffectively with Vim, my text editor of choice.</p>\n<p>I was grouping them by enclosing them in square brackets, and that looks\nsomething like this:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n</code></pre>\n<p>Since sharing the demo, I’ve used this method on a few builds, and people on\n<a href=\"https://twitter.com/csswizardry\">Twitter</a> have asked me about the presence of\nthe brackets, so I thought I’d write it up into a full article. Before we get\ninto things too far though, there are a couple of things I’d like to say up\nfront.</p>\n<p>Firstly, after I shared the link to the jsFiddle, I got a few replies about a\nmuch earlier method <a href=\"http://beneverard.co.uk/blog/using-slashes-within-the-html-class-attribute/\">along similar\nlines</a>\nfrom <a href=\"https://twitter.com/_beneverard\">Ben Everard</a>, so the idea of visually\n<em>separating</em> classes isn’t all that new. Where this method differs, however, is\nthe concept of <em>grouping</em> them, as opposed to just delimiting them. More on that\nlater.</p>\n<p>Secondly, and more importantly, <strong>this article is not a direct endorsement of,\nor recommendation for, this method</strong>, this is just a writeup of an idea. It has\nbenefits and drawbacks—as do most things—so your mileage <em>may</em> vary. I will\ndiscuss relative merits and pitfalls later in the article so that you can decide\nwhether this is a good thing <em>for you</em>, rather than it being a good or bad thing\n<em>in and of itself</em>.</p>\n<h2 id=\"how-it-works\">How it works</h2>\n<p>There is no hard and fast rule as to how and when to begin grouping your\nclasses, but the guidelines I’ve set for myself are:</p>\n<ul>\n  <li>There must be more than one ‘set’ of classes.</li>\n  <li>One ‘set’ must contain more than one class.</li>\n</ul>\n<p>This basically just ringfences any groups that <em>need</em> it, for example:</p>\n<pre><code><span class=\"code-comment\">&lt;!-- Only one set. Nothing needs grouping. --&gt;</span>\n&lt;div class=\"foo  foo--bar\"&gt;\n<span class=\"code-comment\">&lt;!-- Two sets, but only one class in each. Nothing needs grouping. --&gt;</span>\n&lt;div class=\"foo  bar\"&gt;\n<span class=\"code-comment\">&lt;!-- Two sets, one of which contains more than one class. This set needs grouping. --&gt;</span>\n&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n<span class=\"code-comment\">&lt;!-- Two sets, both of which contain more than one class. These sets needs grouping. --&gt;</span>\n&lt;div class=\"[ foo  foo--bar ]  [ baz  baz--foo ]\"&gt;\n</code></pre>\n<p>If these rules seem a little convoluted—and they might—feel free to experiment\nwith your own. You could simplify it right down to ‘any groups always need\nenclosing’, like so:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]\"&gt;\n&lt;div class=\"[ foo ]  [ bar ]\"&gt;\n&lt;div class=\"[ foo  foo--bar ]  [ baz ]\"&gt;\n&lt;div class=\"[ foo  foo--bar ]  [ baz  baz--foo ]\"&gt;\n</code></pre>\n<p>How you group them can be entirely your choice, the concept here just deals with\nthe fact that we’re grouping things <em>at all</em>.</p>\n<p>It’s important to note here that I’m using <a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">BEM-style\nnaming</a>,\nwhich already starts to group classes anyway. If you’re not using BEM, your HTML\nmight look like this:</p>\n<pre><code>&lt;div class=\"[ box  promo-box ]  sign-up\"&gt;\n</code></pre>\n<p>We can see here that the classes <code>.box</code> and <code>.promo-box</code> are related, and\n<code>.sign-up</code> is an orphan, for want of a better word.</p>\n<p>I’ve long been a vocal advocate of using <a href=\"http://csswizardry.com/2012/10/a-classless-class-on-using-more-classes-in-your-html/\">more classes in your\nmarkup</a>:\nit just makes for more pragmatic, manageable, scalable development. It does,\nhowever, make your markup a little heavier. This is a small price to pay for the\nadvantages that a nicely decoupled, <a href=\"http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/\">single\nresponsibility</a>\nUI, built on a well-abstracted, highly composable codebase brings, but it’s\nalways nice to try and mitigate the effects of more verbose HTML. I feel that it\nwould be nice to have the best of both worlds (hence my proposal for\n<a href=\"http://csswizardry.com/2014/03/naming-ui-components-in-oocss/\"><cite>Naming UI components in\nOOCSS</cite></a>),\nso I’m constantly looking for ways to try and keep an even balance.</p>\n<p><a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">BEM</a>\nis already an incredibly solid start in making your HTML a lot more transparent:\nhaving namespaces in your classes paints a really clear picture of which classes\nare related to one another, if at all. It leaves you with highly descriptive\nmarkup that is simple to work with and debug.</p>\n<p>One of BEM’s key strengths is its <em>scannability</em>, and, to my mind, there are two\nlevels of reading code: the first is actually reading it, taking it in, learning\nwhat it is doing; the second is <em>scanning</em> it, which is a really high-level look\nover some code, perhaps to find something, perhaps to just give it a once-over\nto check its general sanity, or just poking around. I often feel we put a lot of\nweight on the former—<em>reading</em> code—and nowhere near enough on the\nlatter—<em>scanning</em> it.</p>\n<p>What I find the square brackets offer me is a very visual way of absorbing (i.e.\nscanning) an HTML page. The square brackets become <em>very</em> apparent—very\nnoticeable—when giving some code a very high-level read, so I can very easily\nspot composed patterns without having to get too involved in the code itself.</p>\n<h2 id=\"vim\">Vim</h2>\n<p>Another absolutely <em>huge</em> benefit of grouping classes inside something (rather\nthan just delimiting them with something like slashes or pipes) is that you can\nbegin to manipulate them with certain text editors (my editor of choice being\nVim).</p>\n<p>Using commands like <code>ya[</code> (yank around square-brackets), <code>ci[</code> (change inside\nsquare brackets), <code>da[</code> (delete around square brackets), we can, respectively:\ncopy everything inside the square brackets, including the brackets themselves;\nchange everything inside of the square brackets, leaving the square brackets\nintact; delete everything inside of the square brackets, and delete the square\nbrackets as well. Once we’ve done this, we can then go and <code>p</code>ut (paste) the\ncopied groups elsewhere.</p>\n<p>This means that I can modify, duplicate, move, delete, and generally manipulate\nentire groups of classes very rapidly. Powerful stuff, particularly if—like\nme—you like to work by composing UIs and patterns in your HTML (think grid\nsystems, OOCSS, etc.).</p>\n<p>I made a very crude screencast of this in action—all commands are done without\nneeding to reach for a mouse, or nudging around text-selections whilst holding\nthe <code>Shift</code> key.</p>\n<figure>\n  <iframe name=\"quickcast\" src=\"http://quick.as/embed/vdwjhl2j\" scrolling=\"no\" allowfullscreen=\"\" frameborder=\"0\" height=\"497.6px\" width=\"100%\"></iframe>\n  <figcaption>Working with grouped classes inside of Vim.</figcaption>\n</figure>\n<p>However, this feature is a combination of Vim’s power <em>and</em> us leaving handy\nmarkers for Vim to work with. If you aren’t using Vim, or a similarly powerful\ntext editor, then these benefits will not be quite so apparent. If you fancy\nlearning Vim—and I really would recommend it—simply open your terminal and run:</p>\n<pre><code>$ vimtutor\n</code></pre>\n<p>This will give you a really easy-to-follow, well-paced introduction to Vim.</p>\n<h2 id=\"validity\">Validity</h2>\n<p>Using square brackets in HTML’s <code>class</code> attribute is completely valid. In fact,\nwhere HTML is concerned, <code>class</code> attributes can legally contain <em>any</em> character\nat all. From the HTML5 spec:</p>\n<blockquote>\n  <p>There are no […] restrictions on the tokens authors can use in the class\nattribute…</p>\n</blockquote>\n<p>In CSS, however, the <code>[</code> and <code>]</code> characters are <em>invalid</em> in a class, unless it\nis escaped. That is to say, this will <em>not</em> work:</p>\n<pre><code>.[ {\n    color: red;\n}\n</code></pre>\n<p>However, this will:</p>\n<pre><code>.\\[ {\n    color: red;\n}\n</code></pre>\n<p>Using square brackets in your class attributes is valid, and won’t trip browsers\nup (I’ve tested this personally in browsers as far back as IE7–8).</p>\n<p>As we shall see next, though, this being valid does not free us from the chance\nof errors occurring.</p>\n<h2 id=\"errors\">Errors</h2>\n<p>As I mentioned previously, however, this method is not without its drawbacks, so\nplease take these—and <a href=\"http://csswizardry.com/2013/01/you-know-your-context-on-critical-thinking-and-thinking-for-yourself/\">your own\ncontext</a>—into\naccount when considering adopting it.</p>\n<p>The first possible pitfall with this method of using square brackets to group\nyour classes is that it becomes a lot more easy to introduce errors. Traditional\nclasses are pretty difficult to get wrong. In fact, nine-times-out-of-ten, the\nonly way you could get a non-matching class would be a simple typo.</p>\n<p>When introducing these square brackets, however, we are also introducing a huge\npotential for error. Whilst the following is perfectly valid, and will work just\nfine:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n</code></pre>\n<p>Making a mistake by writing the following will invalidate things completely:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar]  baz\"&gt;\n</code></pre>\n<p>This is something to be wary of, because <code>.foo--bar</code> and <code>.foo--bar]</code> are two\n<em>very</em> different things. This becomes even more of a problem in situations\nwhere:</p>\n<ul>\n  <li><strong>You’re writing classes to the view dynamically.</strong> If you have templating\nlogic in your markup, it can often be hard to see where these errors might\noccur, and they also become harder to debug.</li>\n  <li><strong>You have team members unfamiliar with the convention.</strong> Seeing something\nlike this may well be confusing to a developer who’s never used it before, so\nit is possible that they won’t understand the caveats required for it to work.</li>\n</ul>\n<h2 id=\"extra-bytes\">Extra bytes</h2>\n<p>One response I’ve had more than once is the concern with more bytes over the\nwire. This is something of a non-discussion, but I’ll address it anyway: if\nyou really care about class-attribute bytes over the wire, you should be using a\nCSS obfuscater like <a href=\"https://code.google.com/p/closure-stylesheets/#Renaming\">Google’s Closure\nStylesheets</a>.</p>\n<p><strong>Crunching raw HTML bytes is a job for a tool, not a developer.</strong></p>\n<h2 id=\"teams\">Teams</h2>\n<p>One of the main drawbacks of this method is its use in team environments, which\nis quite ironic considering my work centres a <em>lot</em> around managing codebases in\nteams.</p>\n<p>The first and foremost—and most obvious—issue is the fact that it needs\nexplaining at all. The fact I’ve managed to get a few-hundred-word article out\nof this <em>may</em> be testament to its unusual and potentially confusing nature.</p>\n<p>This will always the case when adopting new methodologies—like BEM, for\ninstance—but it <em>is</em> an overhead that cannot be ignored. The existing team will\nneed to learn and be on board with this grouping methodology, and any new hires\nwill also need teaching. It’s another hurdle; a small one, but definitely\n<em>another</em>.</p>\n<h2 id=\"javascript\">JavaScript</h2>\n<p>As <a href=\"https://twitter.com/toddmotto\">Todd Motto</a> pointed out <a href=\"https://twitter.com/toddmotto/status/469145603747106816\">over\nTwitter</a>, this method\n<em>may</em> have some impact on JavaScript interacting with your classes. I only\never bind onto <code>.js-*</code> classes, so these would typically never get grouped, but\nyou may hit problems elsewhere. Again, your mileage may vary.</p>\n<p>Todd did follow up with:</p>\n<blockquote>\n  <p>Adding classes is okay, even with ‘nested’ grouping […] if you’re using\n<code>.js-*</code> then you’ll be fine.</p>\n</blockquote>\n<h2 id=\"to-use-or-not-to-use\">To use, or not to use?</h2>\n<p>This is entirely up to you. I’ve been using it on all builds recently, and I’m\nreally liking it. It has been alien to other developers I’ve been working with,\nbut I’ve been able to explain it, and I have had <em>one</em> incident of\ndynamically-generated classes breaking.</p>\n<p>Because I use Vim, I really do get a lot of use out of this, and because I’m a\nvocal advocate of using more classes, it helps me spot and manage them in my\nmarkup.</p>","tags":"","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:15:52 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:15:52 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"7yjjOPXS4WZdtufi"}
{"id":"7yjjOPXS4WZdtufi","category":"css","categoryId":"29","title":"Grouping related classes in your markup","refSite":"http://csswizardry.com/2014/05/grouping-related-classes-in-your-markup/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>A few weeks back, <a href=\"https://twitter.com/csswizardry/status/439383832920604672\">I put out a\nTweet</a> to <a href=\"http://jsfiddle.net/csswizardry/m2qa9/\">a\njsFiddle</a> describing an idea I’d had in\nwhich I grouped two or more related class attributes to make them easier to\nnotice when scanning an HTML file, and—coincidentally—trivial to manipulate very\neffectively with Vim, my text editor of choice.</p>\n<p>I was grouping them by enclosing them in square brackets, and that looks\nsomething like this:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n</code></pre>\n<p>Since sharing the demo, I’ve used this method on a few builds, and people on\n<a href=\"https://twitter.com/csswizardry\">Twitter</a> have asked me about the presence of\nthe brackets, so I thought I’d write it up into a full article. Before we get\ninto things too far though, there are a couple of things I’d like to say up\nfront.</p>\n<p>Firstly, after I shared the link to the jsFiddle, I got a few replies about a\nmuch earlier method <a href=\"http://beneverard.co.uk/blog/using-slashes-within-the-html-class-attribute/\">along similar\nlines</a>\nfrom <a href=\"https://twitter.com/_beneverard\">Ben Everard</a>, so the idea of visually\n<em>separating</em> classes isn’t all that new. Where this method differs, however, is\nthe concept of <em>grouping</em> them, as opposed to just delimiting them. More on that\nlater.</p>\n<p>Secondly, and more importantly, <strong>this article is not a direct endorsement of,\nor recommendation for, this method</strong>, this is just a writeup of an idea. It has\nbenefits and drawbacks—as do most things—so your mileage <em>may</em> vary. I will\ndiscuss relative merits and pitfalls later in the article so that you can decide\nwhether this is a good thing <em>for you</em>, rather than it being a good or bad thing\n<em>in and of itself</em>.</p>\n<h2>How it works</h2>\n<p>There is no hard and fast rule as to how and when to begin grouping your\nclasses, but the guidelines I’ve set for myself are:</p>\n<ul>\n  <li>There must be more than one ‘set’ of classes.</li>\n  <li>One ‘set’ must contain more than one class.</li>\n</ul>\n<p>This basically just ringfences any groups that <em>need</em> it, for example:</p>\n<pre><code><span>&lt;!-- Only one set. Nothing needs grouping. --&gt;</span>\n&lt;div class=\"foo  foo--bar\"&gt;\n<span>&lt;!-- Two sets, but only one class in each. Nothing needs grouping. --&gt;</span>\n&lt;div class=\"foo  bar\"&gt;\n<span>&lt;!-- Two sets, one of which contains more than one class. This set needs grouping. --&gt;</span>\n&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n<span>&lt;!-- Two sets, both of which contain more than one class. These sets needs grouping. --&gt;</span>\n&lt;div class=\"[ foo  foo--bar ]  [ baz  baz--foo ]\"&gt;\n</code></pre>\n<p>If these rules seem a little convoluted—and they might—feel free to experiment\nwith your own. You could simplify it right down to ‘any groups always need\nenclosing’, like so:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]\"&gt;\n&lt;div class=\"[ foo ]  [ bar ]\"&gt;\n&lt;div class=\"[ foo  foo--bar ]  [ baz ]\"&gt;\n&lt;div class=\"[ foo  foo--bar ]  [ baz  baz--foo ]\"&gt;\n</code></pre>\n<p>How you group them can be entirely your choice, the concept here just deals with\nthe fact that we’re grouping things <em>at all</em>.</p>\n<p>It’s important to note here that I’m using <a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">BEM-style\nnaming</a>,\nwhich already starts to group classes anyway. If you’re not using BEM, your HTML\nmight look like this:</p>\n<pre><code>&lt;div class=\"[ box  promo-box ]  sign-up\"&gt;\n</code></pre>\n<p>We can see here that the classes <code>.box</code> and <code>.promo-box</code> are related, and\n<code>.sign-up</code> is an orphan, for want of a better word.</p>\n<p>I’ve long been a vocal advocate of using <a href=\"http://csswizardry.com/2012/10/a-classless-class-on-using-more-classes-in-your-html/\">more classes in your\nmarkup</a>:\nit just makes for more pragmatic, manageable, scalable development. It does,\nhowever, make your markup a little heavier. This is a small price to pay for the\nadvantages that a nicely decoupled, <a href=\"http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/\">single\nresponsibility</a>\nUI, built on a well-abstracted, highly composable codebase brings, but it’s\nalways nice to try and mitigate the effects of more verbose HTML. I feel that it\nwould be nice to have the best of both worlds (hence my proposal for\n<a href=\"http://csswizardry.com/2014/03/naming-ui-components-in-oocss/\"><cite>Naming UI components in\nOOCSS</cite></a>),\nso I’m constantly looking for ways to try and keep an even balance.</p>\n<p><a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">BEM</a>\nis already an incredibly solid start in making your HTML a lot more transparent:\nhaving namespaces in your classes paints a really clear picture of which classes\nare related to one another, if at all. It leaves you with highly descriptive\nmarkup that is simple to work with and debug.</p>\n<p>One of BEM’s key strengths is its <em>scannability</em>, and, to my mind, there are two\nlevels of reading code: the first is actually reading it, taking it in, learning\nwhat it is doing; the second is <em>scanning</em> it, which is a really high-level look\nover some code, perhaps to find something, perhaps to just give it a once-over\nto check its general sanity, or just poking around. I often feel we put a lot of\nweight on the former—<em>reading</em> code—and nowhere near enough on the\nlatter—<em>scanning</em> it.</p>\n<p>What I find the square brackets offer me is a very visual way of absorbing (i.e.\nscanning) an HTML page. The square brackets become <em>very</em> apparent—very\nnoticeable—when giving some code a very high-level read, so I can very easily\nspot composed patterns without having to get too involved in the code itself.</p>\n<h2>Vim</h2>\n<p>Another absolutely <em>huge</em> benefit of grouping classes inside something (rather\nthan just delimiting them with something like slashes or pipes) is that you can\nbegin to manipulate them with certain text editors (my editor of choice being\nVim).</p>\n<p>Using commands like <code>ya[</code> (yank around square-brackets), <code>ci[</code> (change inside\nsquare brackets), <code>da[</code> (delete around square brackets), we can, respectively:\ncopy everything inside the square brackets, including the brackets themselves;\nchange everything inside of the square brackets, leaving the square brackets\nintact; delete everything inside of the square brackets, and delete the square\nbrackets as well. Once we’ve done this, we can then go and <code>p</code>ut (paste) the\ncopied groups elsewhere.</p>\n<p>This means that I can modify, duplicate, move, delete, and generally manipulate\nentire groups of classes very rapidly. Powerful stuff, particularly if—like\nme—you like to work by composing UIs and patterns in your HTML (think grid\nsystems, OOCSS, etc.).</p>\n<p>I made a very crude screencast of this in action—all commands are done without\nneeding to reach for a mouse, or nudging around text-selections whilst holding\nthe <code>Shift</code> key.</p>\n<figure>\n  <iframe name=\"quickcast\" src=\"http://quick.as/embed/vdwjhl2j\" scrolling=\"no\" allowfullscreen=\"\" frameborder=\"0\" height=\"497.6px\" width=\"100%\"></iframe>\n  <figcaption>Working with grouped classes inside of Vim.</figcaption>\n</figure>\n<p>However, this feature is a combination of Vim’s power <em>and</em> us leaving handy\nmarkers for Vim to work with. If you aren’t using Vim, or a similarly powerful\ntext editor, then these benefits will not be quite so apparent. If you fancy\nlearning Vim—and I really would recommend it—simply open your terminal and run:</p>\n<pre><code>$ vimtutor\n</code></pre>\n<p>This will give you a really easy-to-follow, well-paced introduction to Vim.</p>\n<h2>Validity</h2>\n<p>Using square brackets in HTML’s <code>class</code> attribute is completely valid. In fact,\nwhere HTML is concerned, <code>class</code> attributes can legally contain <em>any</em> character\nat all. From the HTML5 spec:</p>\n<blockquote>\n  <p>There are no […] restrictions on the tokens authors can use in the class\nattribute…</p>\n</blockquote>\n<p>In CSS, however, the <code>[</code> and <code>]</code> characters are <em>invalid</em> in a class, unless it\nis escaped. That is to say, this will <em>not</em> work:</p>\n<pre><code>.[ {\n    color: red;\n}\n</code></pre>\n<p>However, this will:</p>\n<pre><code>.\\[ {\n    color: red;\n}\n</code></pre>\n<p>Using square brackets in your class attributes is valid, and won’t trip browsers\nup (I’ve tested this personally in browsers as far back as IE7–8).</p>\n<p>As we shall see next, though, this being valid does not free us from the chance\nof errors occurring.</p>\n<h2>Errors</h2>\n<p>As I mentioned previously, however, this method is not without its drawbacks, so\nplease take these—and <a href=\"http://csswizardry.com/2013/01/you-know-your-context-on-critical-thinking-and-thinking-for-yourself/\">your own\ncontext</a>—into\naccount when considering adopting it.</p>\n<p>The first possible pitfall with this method of using square brackets to group\nyour classes is that it becomes a lot more easy to introduce errors. Traditional\nclasses are pretty difficult to get wrong. In fact, nine-times-out-of-ten, the\nonly way you could get a non-matching class would be a simple typo.</p>\n<p>When introducing these square brackets, however, we are also introducing a huge\npotential for error. Whilst the following is perfectly valid, and will work just\nfine:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar ]  baz\"&gt;\n</code></pre>\n<p>Making a mistake by writing the following will invalidate things completely:</p>\n<pre><code>&lt;div class=\"[ foo  foo--bar]  baz\"&gt;\n</code></pre>\n<p>This is something to be wary of, because <code>.foo--bar</code> and <code>.foo--bar]</code> are two\n<em>very</em> different things. This becomes even more of a problem in situations\nwhere:</p>\n<ul>\n  <li><strong>You’re writing classes to the view dynamically.</strong> If you have templating\nlogic in your markup, it can often be hard to see where these errors might\noccur, and they also become harder to debug.</li>\n  <li><strong>You have team members unfamiliar with the convention.</strong> Seeing something\nlike this may well be confusing to a developer who’s never used it before, so\nit is possible that they won’t understand the caveats required for it to work.</li>\n</ul>\n<h2>Extra bytes</h2>\n<p>One response I’ve had more than once is the concern with more bytes over the\nwire. This is something of a non-discussion, but I’ll address it anyway: if\nyou really care about class-attribute bytes over the wire, you should be using a\nCSS obfuscater like <a href=\"https://code.google.com/p/closure-stylesheets/#Renaming\">Google’s Closure\nStylesheets</a>.</p>\n<p><strong>Crunching raw HTML bytes is a job for a tool, not a developer.</strong></p>\n<h2>Teams</h2>\n<p>One of the main drawbacks of this method is its use in team environments, which\nis quite ironic considering my work centres a <em>lot</em> around managing codebases in\nteams.</p>\n<p>The first and foremost—and most obvious—issue is the fact that it needs\nexplaining at all. The fact I’ve managed to get a few-hundred-word article out\nof this <em>may</em> be testament to its unusual and potentially confusing nature.</p>\n<p>This will always the case when adopting new methodologies—like BEM, for\ninstance—but it <em>is</em> an overhead that cannot be ignored. The existing team will\nneed to learn and be on board with this grouping methodology, and any new hires\nwill also need teaching. It’s another hurdle; a small one, but definitely\n<em>another</em>.</p>\n<h2>JavaScript</h2>\n<p>As <a href=\"https://twitter.com/toddmotto\">Todd Motto</a> pointed out <a href=\"https://twitter.com/toddmotto/status/469145603747106816\">over\nTwitter</a>, this method\n<em>may</em> have some impact on JavaScript interacting with your classes. I only\never bind onto <code>.js-*</code> classes, so these would typically never get grouped, but\nyou may hit problems elsewhere. Again, your mileage may vary.</p>\n<p>Todd did follow up with:</p>\n<blockquote>\n  <p>Adding classes is okay, even with ‘nested’ grouping […] if you’re using\n<code>.js-*</code> then you’ll be fine.</p>\n</blockquote>\n<h2>To use, or not to use?</h2>\n<p>This is entirely up to you. I’ve been using it on all builds recently, and I’m\nreally liking it. It has been alien to other developers I’ve been working with,\nbut I’ve been able to explain it, and I have had <em>one</em> incident of\ndynamically-generated classes breaking.</p>\n<p>Because I use Vim, I really do get a lot of use out of this, and because I’m a\nvocal advocate of using more classes, it helps me spot and manage them in my\nmarkup.</p>","tags":"css,CSS Methods","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:15:52 GMT+0530 (India Standard Time)","dateModified":{"$$date":1427986500377},"mode":"add","comments":[],"images":[],"_id":"7yjjOPXS4WZdtufi"}
{"id":"7yjjOPXS4WZdtufi","category":"css","categoryId":"29","title":"MindBEMding – getting your head ’round BEM syntax","refSite":"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>One of the questions I get asked most frequently is <q>what do <code>--</code> and <code>__</code>mean in your classes?</q></p>\n<p>The answer is thanks to <a href=\"http://bem.info/\">BEM</a> and<a href=\"http://twitter.com/necolas\">Nicolas Gallagher</a>…</p>\n<hr>\n<p>BEM – meaning <i>block</i>, <i>element</i>, <i>modifier</i> – is a front-endnaming methodology thought up by the guys at <a href=\"http://yandex.ru/\">Yandex</a>. It is asmart way of naming your CSS classes to give them more transparency and meaningto other developers. They are far more strict and informative, which makes theBEM naming convention ideal for teams of developers on larger projects thatmight last a while.</p>\n<p>It is important to note that I use a naming scheme <em>based</em> on BEM, but <a href=\"http://nicolasgallagher.com/about-html-semantics-front-end-architecture/\">honed byNicolas Gallagher</a>.The naming techniques covered in this post are not the original BEM ones, butare improved versions that I much prefer. Whatever the actual notation used,they are all based on the same BEM principles.</p>\n<p>The naming convention follows this pattern:</p>\n<pre><code>.block {}.block__element {}.block--modifier {}</code></pre>\n<ul>\n  <li><code>.block</code> represents the higher level of an abstraction or component.</li>\n  <li><code>.block__element</code> represents a descendent of <code>.block</code> that helps form <code>.block</code>as a whole.</li>\n  <li><code>.block--modifier</code> represents a different state or version of <code>.block</code>.</li>\n</ul>\n<p>The reason for double rather than single hyphens and underscores is so that yourblock itself can be hyphen delimited, for example:</p>\n<pre><code>.site-search {} <span class=\"code-comment\">/* Block */</span>.site-search__field {} <span class=\"code-comment\">/* Element */</span>.site-search--full {} <span class=\"code-comment\">/* Modifier */</span></code></pre>\n<p>The point of BEM is to tell other developers more about what a piece of markupis doing from its name alone. By reading some HTML with some classes in, you cansee how – if at all – the chunks are related; something might just be acomponent, something might be a child, or <i>element</i>, of that component, andsomething might be a variation or <i>modifier</i> of that component. To use ananalogy/model, think how the following things and elements are related:</p>\n<pre><code>.person {}.person__hand {}.person--female {}.person--female__hand {}.person__hand--left {}</code></pre>\n<p>The top-level block is a ‘person’ which has elements, for example, ‘hand’. Aperson also has variations, such as female, and that variation in turn haselements. This again, but written in ‘normal’ CSS:</p>\n<pre><code>.person {}.hand {}.female {}.female-hand {}.left-hand {}</code></pre>\n<p>These all make sense, but are somewhat disconnected. Take <code>.female</code> for example;female what? What about <code>.hand</code>; a hand of a clock? A hand in a game of cards?By using BEM we can be more descriptive but also a lot more explicit; we tieconcrete links to other elements of our code through naming alone. Powerfulstuff.</p>\n<p>Taking the previous <code>.site-search</code> example again, with ‘regular’ naming:</p>\n<pre><code>&lt;form class=\"site-search  full\"&gt;    &lt;input type=\"text\" class=\"field\"&gt;    &lt;input type=\"Submit\" value =\"Search\" class=\"button\"&gt;&lt;/form&gt;</code></pre>\n<p>These classes are fairly loose, and don’t tell us much. Even though we can workit out, they’re very inexplicit. With BEM notation we would now have:</p>\n<pre><code>&lt;form class=\"site-search  site-search--full\"&gt;    &lt;input type=\"text\" class=\"site-search__field\"&gt;    &lt;input type=\"Submit\" value =\"Search\" class=\"site-search__button\"&gt;&lt;/form&gt;</code></pre>\n<p>We can see that we have a block called <code>.site-search</code> which has an element whichlives inside it called <code>.site-search__field</code>. We can also see that there is avariation of the <code>.site-search</code> called <code>.site-search--full</code>.</p>\n<p>Let’s take another example…</p>\n<p>If you are familiar with OOCSS then you will no doubt be familiar with<a href=\"http://stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code\">the media object</a>.In BEM form, the media object would now read:</p>\n<pre><code>.media {}.media__img {}.media__img--rev {}.media__body {}</code></pre>\n<p>From the way this CSS is written we can already glean that <code>.media__img</code> and<code>.media__body</code> must live inside <code>.media</code> and that <code>.media__img--rev</code> is a slightvariation on <code>.media__img</code>. All that information gathered from the names of ourCSS selectors alone!</p>\n<p>Another benefit is the combatting of the following situation. If we take themedia object again:</p>\n<pre><code>&lt;div class=\"media\"&gt;    &lt;img src=\"logo.png\" alt=\"Foo Corp logo\" class=\"img-rev\"&gt;    &lt;div class=\"body\"&gt;        &lt;h3 class=\"alpha\"&gt;Welcome to Foo Corp&lt;/h3&gt;        &lt;p class=\"lede\"&gt;Foo Corp is the best, seriously!&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre>\n<p>From looking at this, we can’t see how the classes <code>.media</code> and <code>.alpha</code> arerelated to each other? Are they? What about <code>.body</code> and <code>.lede</code> or <code>.img-rev</code>and <code>.media</code>? From that HTML (unless we’re very familiar with the media object)we have no idea what makes up that component and what else is optional.If we were to rework it with BEM:</p>\n<pre><code>&lt;div class=\"media\"&gt;    &lt;img src=\"logo.png\" alt=\"Foo Corp logo\" class=\"media__img--rev\"&gt;    &lt;div class=\"media__body\"&gt;        &lt;h3 class=\"alpha\"&gt;Welcome to Foo Corp&lt;/h3&gt;        &lt;p class=\"lede\"&gt;Foo Corp is the best, seriously!&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre>\n<p>We can now instantly see that <code>.media</code> is the block, <code>.media__img--rev</code> is anelement of <code>.media</code> that has a modifier applied and <code>.media__body</code> is anunmodified element of <code>.media</code>. All through the names of their classes. That is<strong>incredibly</strong> useful.</p>\n<h2 id=\"uuuugly\">Uuuugly!</h2>\n<p>A common argument against BEM is that it’s ugly; I dare say that if you shy awayfrom code based <em>purely</em> on its looks then you’re often missing the point.Unless the code becomes unnecessarily  difficult to maintain, or genuinely moredifficult to read, then perhaps you <em>do</em> need to think twice before using it,but if it ‘just looks odd’ but has a valid purpose, then it should definitely befully considered before writing it off.</p>\n<p>I agree that BEM does look weird, but the power it brings <em>far</em> outweighs anynegatives to do with its appearance by an order of magnitude…</p>\n<p>BEM may look a little funny – and it might require more typing (most texteditors have autocomplete, and gzip will negate any differences in filesize) –but it is <strong>so</strong> powerful.</p>\n<h2 id=\"to-bem-or-not-to-bem\">To BEM or not to BEM?</h2>\n<p>I use BEM notation on everything I build now as its usefulness has proved itselfover and over. I’d strongly encourage others to consider adopting it as wellbecause it just makes everything a lot tighter and more connected, making codeeasier to maintain by teams, or even just by yourself a few months down theline.</p>\n<p>When you are using BEM, though, it is important to remember that you don’t needto use it for everything. Take for example:</p>\n<pre><code>.caps { text-transform: uppercase; }</code></pre>\n<p>This CSS would never fall into any BEM category, it’s merely a standalone rule.</p>\n<p>Another example of code which isn’t BEM:</p>\n<pre><code>.site-logo {}</code></pre>\n<p>Here we have our logo; it could be BEMmed up like so:</p>\n<pre><code>.header {}.header__logo {}</code></pre>\n<p>But that is unecessary. The trick with BEM is knowing when something falls intoa relevant category. Just because something happens to live inside a block itdoesn’t always mean is is actually a BEM element. In the case of our site logo it lives in the <code>.header</code> purely coincidentally; it could just as easily be inour sidebar or footer. An element’s scope can start in any context, so you needto make sure you only apply BEM as far as you need to. Another example:</p>\n<pre><code>&lt;div class=\"content\"&gt;    &lt;h1 class=\"content__headline\"&gt;Lorem ipsum dolor...&lt;/h1&gt;&lt;/div&gt;</code></pre>\n<p>Here we might be able to just call the second class <code>.headline</code>; it depends on ifit is styled that way <strong>because</strong> it’s in <code>.content</code>, or whether it just<em>happens</em> to live in <code>.content</code>. If it is the latter then we do not need BEM.</p>\n<p>Everything is potentially open to moving into BEM territory, though. Taking our<code>.site-logo</code> example again, imagine that we want to have a festive version ofthe logo for our Christmassy site design. We could have:</p>\n<pre><code>.site-logo {}.site-logo--xmas {}</code></pre>\n<p>We can quickly build variations of things by using the <code>--</code> modifier notation.</p>\n<p>One of the hardest parts of BEM is deciding when to start and stop scope, andwhen (or not) to use it. It’s a case of ‘you’ll just know when you know’.</p>\n<h2 id=\"final-word\">Final word</h2>\n<p>So that’s BEM (or a slight variation thereof); a highly useful, powerful andsimple naming convention to make your front-end code easier to read andunderstand, easier to work with, easier to scale, more robust and explicit and alot more strict.</p>\n<p></p>\n<p>For all BEM looks a little odd, it as a hugely valuable addition to thefront-end developer’s toolbox, no matter the project.</p>","tags":"css,CSS Methods,BEM Methodology","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:30:45 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:30:45 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"sUu0mDbdoZBThHh2"}
{"id":"0","category":"css","categoryId":"29","title":"Naming UI components in OOCSS","refSite":"http://csswizardry.com/2014/03/naming-ui-components-in-oocss/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>One of the biggest—if not most common—complaints about OOCSS is its use of\n‘insemantic classes’. Unfortunately, the idea that classes are semantic (in the\nHTML sense of the term) is something of a fallacy; classes aren’t understood by\nmachines, they’re simply read and/or matched—machines cannot glean any meaning\nfrom something whose content is entirely subjective.</p>\n\n<p>If you are still on the fence about <i>semantic classes</i>, I would recommend\nreading <a href=\"https://twitter.com/necolas\">Nicolas Gallagher</a>’s <em>excellent</em> article,\n<a href=\"http://nicolasgallagher.com/about-html-semantics-front-end-architecture/\"><cite>About HTML semantics and front-end architecture</cite></a>.\nIn it, he discusses what we mean when we talk about semantics, and how HTML\nsemantics differs from <i>developer semantics</i>. The short version is that we\nshould write classes that are useful for developers; classes that are highly\nreusable, that don’t couple themselves to specific types of content, and classes\nthat describe the <em>styling’s</em> function rather than the <em>content’s</em> function.\nTraditionally we would refer to these as insemantic classes, but Nicolas does a\ngreat job of debunking that. Having a solid grasp of (and, ideally, being in\nagreement with) his article will really make this one make more sense.</p>\n\n<p><strong>tl;dr</strong> Keep using agnostic, abstract, OOCSS classes in your markup, but add\nany desired meaning to your HTML via a <code>data-ui-component</code> attribute, e.g.:\n<code>&lt;ul class=\"ui-list\" data-ui-component=\"users-list\"&gt;</code>.</p>\n\n<hr>\n\n<p>One of the best things about OOCSS, and ‘insemantic’ classes, is that we have\nmany design patterns tied to highly reusable names—we have very recyclable CSS\nthat we can apply over and over again, keeping our codebase small, neat, and\nconsistent.</p>\n\n<p>One of the <em>cited</em> downsides of OOCSS is that these classes don’t tell you\nanything about the content. Nicolas explains why this isn’t that important\n(basically <i>classes shouldn’t describe content when content describes\nitself</i>), but when you have a series of objects and abstractions that come\ntogether to form one complex UI component, it is often advantageous to be able\nto refer to that component by a unique name.</p>\n\n<p>I firmly believe that classes <strong>should not</strong> describe content, because it\ninhibits their reusability, and that there is no such thing as an insemantic\nclass, but <strong>I don’t see any harm in having the best of both worlds</strong>. To this\nend, I came up with something of a solution: highly abstracted, reusable\nclasses, along with a method of giving distinct names to particular UI\ncomponents. Let’s take an example…</p>\n\n<p>Imagine we have some abstractions:</p>\n\n<ul>\n  <li><strong><a href=\"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/\">The media object</a></strong>\nwhich places some text next to an image.</li>\n  <li><strong>The bare-list object</strong> which removes the indents and bullets from a list.</li>\n  <li><strong>The UI-list object</strong> which takes the indents and bullets off of a list,\ngives the list items some padding, and places a small border between each list\nitem.</li>\n</ul>\n\n<p>We combine these three abstractions to have a UI-list; each list item in the\nUI-list contains a media object; each media object contains a picture of a user\nand their bio; each bio contains a bare-list of their Twitter and website URLs.\nThree individual UI objects which combine to create a list of users and their\nbio information:</p>\n\n<pre><code>&lt;ul class=\"ui-list\"&gt;\n\n    &lt;li class=\"ui-list__item\"&gt;\n        &lt;div class=\"media\"&gt;\n            &lt;img src=\"\" alt=\"\" class=\"media__img\" /&gt;\n            &lt;div class=\"media__body\"&gt;\n                &lt;p&gt;...&lt;/p&gt;\n                &lt;ul class=\"bare-list\"&gt;\n                    &lt;li&gt;...&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/li&gt;\n\n    ...\n\n&lt;/ul&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/csswizardry/f9hvs\">Take a look on jsFiddle</a></p>\n\n<p>Of course, the beauty of these classes is that they could be rearranged in any\norder or combination to make another complex UI component that is entirely\ndifferent.  But, when a client wants to duplicate a piece of content, they won’t\nask you to <q>copy the UI-list and media object and bare-list component</q>,\nthey’ll probably ask you to <q>duplicate the user-list</q>. When you ask a\nsoftware engineer to write a loop to populate that list, you’ll probably also\nwant to refer to it as a <i>user-list</i> to them. What we need is a way of\nassigning useful names to these composites for when we have discussions about\nthem; <strong>there is no harm in having meaningful names as long as they don’t impact\nour ability to reuse things.</strong></p>\n\n<h2>Using Sass’ <code>@extend</code></h2>\n\n<p>One method, obviously, would be to wrap all these classes up into one unique one\nusing Sass’ <code>@extend</code> directive, but there are problems with <code>@extend</code> that both\n<a href=\"http://oliverjash.me/2012/09/07/methods-for-modifying-objects-in-oocss.html\">Oliver J Ash</a>\nand I have <a href=\"http://csswizardry.com/2014/01/extending-silent-classes-in-sass/\">already covered</a>:\nchiefly, that <code>@extend</code> is very greedy, and can cause serious bloat if you’re\nnot careful.</p>\n\n<article data-ui-component=\"Cross-sell promo\">\n    <div>\n        <svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\"><path d=\"M19.138 14.087l-13.202-13.292c-.466-.49-1.134-.776-1.822-.776-.688 0-1.357.286-1.822.776l-1.539 1.531c-.466.47-.749 1.143-.749 1.838 0 .694.283 1.368.749 1.858l9.841 9.903-9.841 9.923c-.466.47-.749 1.143-.749 1.838 0 .694.283 1.368.749 1.858l1.539 1.531c.466.47 1.134.755 1.822.755.688 0 1.357-.286 1.822-.755l13.202-13.292c.466-.49.749-1.164.749-1.858 0-.694-.283-1.368-.749-1.838z\" fill=\"#0072C6\"></path><path d=\"M25.909 31.064c.994 1.021 2.658 1.021 3.673 0l1.522-1.532c.994-1.001.994-2.676 0-3.697l-9.861-9.907 9.861-9.928c.994-1.001.994-2.676 0-3.697l-1.522-1.532c-1.015-1.001-2.678-1.001-3.673 0l-13.229 13.298c-.994 1.021-.994 2.696 0 3.697l13.229 13.298z\" fill=\"#6F5AA2\"></path></g></svg>\n    </div>\n    <div>\n        <h1>Featured case study: NHS</h1>\n        <p>How I helped the NHS rapidly build a brand new product.</p>\n        <p><a href=\"http://csswizardry.com/case-studies/nhs-nhsx-elearning-platform/\">Read case study…</a></p>\n    </div>\n</article>\n\n<p>The other downside to wrapping these objects up into a more meaningful class is\nthat you have to pop open your Sass file(s), think up a brand new name,\npotentially create a new partial, and add some more code to replicate\nfunctionality that already existed free of charge. You have to do this every\ntime you want to reuse that object/abstraction anywhere new. This is just\nincreasing the amount of CSS you output for no real, tangible gains.</p>\n\n<h2><code>data-*</code> attributes</h2>\n\n<p>This desire to give UI components meaningful names is one that has been around\nfor a long time, and one that I frequently get asked about in workshops, etc. I\nrecently began to give it a little more thought, and it hit me: data attributes\nare the <em>perfect</em> candidate. This, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\">from\nMDN</a>:</p>\n\n<blockquote>\n  <p>HTML5 is designed with extensibility for data that should be in the HTML, but\nnot visible. <code>data-*</code> attributes allow us to store extra information on\nstandard, semantic HTML elements without polluting the class name.</p>\n</blockquote>\n\n<p>We can now attach our meaningful names via a <code>data-ui-component</code> attribute, for\nexample:</p>\n\n<pre><code>&lt;ul class=\"ui-list\" data-ui-component=\"users-list\"&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/csswizardry/f9hvs/1\">Take a look on jsFiddle</a></p>\n\n<p>When this list gets repurposed as something else, we can keep using the same,\nagnostic, decoupled classes but we can <em>also</em> give it a name that describes how\nand where that component might get used:</p>\n\n<pre><code>&lt;ul class=\"ui-list\" data-ui-component=\"articles-list\"&gt;\n</code></pre>\n\n<p>Reusable classes <em>and</em> meaningful names!</p>\n\n<p><a href=\"http://jsfiddle.net/csswizardry/f9hvs/2\">Take a look on jsFiddle</a></p>\n\n<p>Now we can use as many nicely abstracted, agnostic classes as we like, but still\nneatly give useful names to complex UI composites:</p>\n\n<pre><code>&lt;div class=\"media\" data-ui-component=\"mini-bio\"&gt;\n    ...\n&lt;/div&gt;\n\n&lt;div class=\"media  media--large\" data-ui-component=\"album-info\"&gt;\n    ...\n&lt;/div&gt;\n\n&lt;ul class=\"inline-list\" data-ui-component=\"site-nav\"&gt;\n    ...\n&lt;/ul&gt;\n\n&lt;div class=\"box  box--promo\" data-ui-component=\"promo-area\"&gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n\n<p>It’s the best of both worlds: you can still keep your CSS super-lean,\nabstracted, recyclable, and reusable, but you can also give specific chunks of\nmarkup meaningful names which can be used in discussions (e.g. referring to the\narticles-list rather than any given UI-list).</p>\n\n<p>Another really handy thing that this allows us to do—when in a debugging mode—is\nto quickly view any parts of a site that we deem components (the kinds of thing\nthat you’d have in your pattern library or UI toolkit):</p>\n\n<pre><code>[data-ui-component] {\n    outline: 5px solid yellow;\n}\n</code></pre>\n\n<p>This will quickly put an outline around any explicitly named parts of the UI.</p>\n\n<p>It’s important to note that although we <em>can</em> style HTML via its <code>data-*</code>\nattributes, we probably shouldn’t. <code>data-*</code> attributes are meant for holding\ndata in markup, <em>not</em> for selecting on. This, from <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#custom-data-attribute\">the HTML Living\nStandard</a>\n(emphasis mine):</p>\n\n<blockquote>\n  <p>Custom data attributes are intended to store custom data private to the page\nor application, <strong>for which there are no more appropriate attributes or\nelements</strong>.</p>\n</blockquote>\n\n<p>I’ve been using this on a client project recently, and it’s proved very useful\nin encapsulating and discussing UI components, whilst also allowing me to keep\nmy CSS as abstracted and OO as usual. My client doesn’t need to know—or even\ncare—that the <i>share with friends</i> component is actually a combination of a\n<code>.box</code>, <code>.media</code>, and <code>.btn</code> object, they just need to refer to is at the same\nthing everyone else does—the <i>share with friends</i> component!</p>\n\n<p><strong>I would strongly recommend trying it out.</strong></p>","tags":"css,CSS Methods,Guide","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:45:59 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:45:59 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"KuLX3IQkwxgYUCzV"}
{"id":"0","category":"html","categoryId":"49","title":"About HTML semantics and front-end architecture","refSite":"http://nicolasgallagher.com/about-html-semantics-front-end-architecture/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div>\n      <p>A collection of thoughts, experiences, ideas that I like, and ideas that I have\nbeen experimenting with over the last year. It covers HTML semantics,\ncomponents and approaches to front-end architecture, class naming patterns, and\nHTTP compression.</p>\n<blockquote>\n<p>We shall not cease from exploration<br>\nAnd the end of all our exploring<br>\nWill be to arrive where we started<br>\nAnd know the place for the first time.</p>\n</blockquote>\n<p>T.S. Eliot – “Little Gidding”</p>\n<h2>About semantics</h2>\n<p>Semantics is the study of the relationships between signs and symbols and what\nthey represent. In linguistics, this is primarily the study of the meaning of\nsigns (such as words, phrases, or sounds) in language. In the context of\nfront-end web development, semantics are largely concerned with the agreed\nmeaning of HTML elements, attributes, and attribute values (including\nextensions like Microdata). These agreed semantics, which are usually\n<em>formalised</em> in specifications, can be used to help programmes (and\nsubsequently humans) better understand aspects of the information on a website.\nHowever, even after formalisation, the semantics of elements, attributes, and\nattribute values are subject to adaptation and co-option by developers. This\ncan lead to subsequent modifications of the formally agreed semantics (and is\nan <a href=\"http://www.w3.org/TR/html-design-principles/#pave-the-cowpaths\">HTML design\nprinciple</a>).</p>\n<h2>Distinguishing between different types of HTML semantics</h2>\n<p>The principle of writing “semantic HTML” is one of the foundations of modern,\nprofessional front-end development. Most semantics are related to aspects of\nthe nature of the existing or expected content (e.g. <code>h1</code> element, <code>lang</code>\nattribute, <code>email</code> value of the <code>type</code> attribute, Microdata).</p>\n<p>However, <strong>not all semantics need to be content-derived</strong>. Class names cannot\nbe “unsemantic”. Whatever names are being used: they have meaning, they have\npurpose. Class name semantics can be different to those of HTML elements. We\ncan leverage the agreed “global” semantics of HTML elements, certain HTML\nattributes, Microdata, etc., without confusing their purpose with those of the\n“local” website/application-specific semantics that are usually contained in\nthe values of attributes like the <code>class</code> attribute.</p>\n<p>Despite the <a href=\"http://dev.w3.org/html5/spec/global-attributes.html#classes\">HTML5 specification section on\nclasses</a> repeating\nthe assumed “best practice” that…</p>\n<blockquote>\n<p>…authors are encouraged to use [class attribute] values that describe the\nnature of the content, rather than values that describe the desired\npresentation of the content.</p>\n</blockquote>\n<p>…there is no inherent reason to do this. In fact, it’s often a hindrance when\nworking on large websites or applications.</p>\n<ul>\n<li><strong>Content-layer semantics are already served by HTML elements</strong> and other\nattributes.</li>\n<li><strong>Class names impart little or no useful semantic information to machines</strong>\nor human visitors unless it is part of a small set of agreed upon (and\nmachine readable) names – Microformats.</li>\n<li><strong>The primary purpose of a class name is to be a hook for CSS and\nJavaScript.</strong> If you don’t need to add presentation and behaviour to your web\ndocuments, then you probably don’t need classes in your HTML.</li>\n<li><strong>Class names should communicate <em>useful</em> information to <em>developers</em>.</strong> It’s\nhelpful to understand what a specific class name is going to do when you read\na DOM snippet, especially in multi-developer teams where front-enders won’t be\nthe only people working with HTML components.</li>\n</ul>\n<p>Take this very simple example:</p>\n<pre><code>&lt;div class=\"news\"&gt;\n    &lt;h2&gt;News&lt;/h2&gt;\n    [news content]\n&lt;/div&gt;</code></pre>\n<p>The class name <code>news</code> doesn’t tell you anything that is not already obvious\nfrom the content. It gives you no information about the architectural structure\nof the component, and it cannot be used with content that isn’t “news”. Tying\nyour class name semantics tightly to the nature of the content has already\nreduced the ability of your architecture to scale or be easily put to use by\nother developers.</p>\n<h2>Content-independent class names</h2>\n<p>An alternative is to derive class name semantics from repeating structural and\nfunctional patterns in a design. <strong>The most reusable components are those with\nclass names that are independent of the content</strong>.</p>\n<p>We shouldn’t be afraid of making the connections between layers clear and\nexplicit rather than having class names rigidly reflect specific content. Doing\nthis doesn’t make classes “unsemantic”, it just means that their semantics are\nnot derived from the content. We shouldn’t be afraid to include additional HTML\nelements if they help create more robust, flexible, and reusable components.\nDoing so does not make the HTML “unsemantic”, it just means that you use\nelements beyond the bare minimum needed to markup the content.</p>\n<h2>Front-end architecture</h2>\n<p>The aim of a component/template/object-oriented architecture is to be able to\ndevelop a limited number of reusable components that can contain a range of\ndifferent content types. The important thing for class name semantics in\nnon-trivial applications is that they be driven by pragmatism and best serve\ntheir primary purpose – providing meaningful, flexible, and reusable\npresentational/behavioural hooks for <em>developers</em> to use.</p>\n<h3>Reusable and combinable components</h3>\n<p>Scalable HTML/CSS must, by and large, rely on classes within the HTML to allow\nfor the creation of reusable components. A flexible and reusable component is\none which neither relies on existing within a certain part of the DOM tree, nor\nrequires the use of specific element types. It should be able to adapt to\ndifferent containers and be easily themed. If necessary, extra HTML elements\n(beyond those needed just to markup the content) and can be used to make the\ncomponent more robust. A good example is what <a href=\"http://www.stubbornella.org/\">Nicole\nSullivan</a> calls the <a href=\"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/\">media\nobject</a>.</p>\n<p>Components that can be easily combined benefit from the avoidance of <a href=\"http://www.w3.org/TR/CSS2/selector.html#type-selectors\">type\nselectors</a> in favour of\nclasses. The following example prevents the easy combination of the <code>btn</code>\ncomponent with the <code>uilist</code> component. The problems are that the specificity of\n<code>.btn</code> is less than that of <code>.uilist a</code> (which will override any shared\nproperties), and the <code>uilist</code> component requires anchors as child nodes.</p>\n<pre><code><span>.btn</span> <span>{ <span>/* styles */</span> <span>}</span></span>\n<span>.uilist</span> <span>{ <span>/* styles */</span> <span>}</span></span>\n<span>.uilist</span> <span>a</span> <span>{ <span>/* styles */</span> <span>}</span></span></code></pre>\n<pre><code>&lt;nav class=\"uilist\"&gt;\n    &lt;a href=\"#\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"#\"&gt;About&lt;/a&gt;\n    &lt;a class=\"btn\" href=\"#\"&gt;Login&lt;/a&gt;\n&lt;/nav&gt;</code></pre>\n<p>An approach that improves the ease with which you can combine other components\nwith <code>uilist</code> is to use classes to style the child DOM elements. Although this\nhelps to reduce the specificity of the rule, the main benefit is that it gives\nyou the option to apply the structural styles to any type of child node.</p>\n<pre><code>.btn { /* styles */ }\n.uilist { /* styles */ }\n<mark>.uilist-item { /* styles */ }</mark></code></pre>\n\n<pre><code>&lt;nav class=\"uilist\"&gt;\n    &lt;a class=\"uilist-item\" href=\"#\"&gt;Home&lt;/a&gt;\n    &lt;a class=\"uilist-item\" href=\"#\"&gt;About&lt;/a&gt;\n    <mark>&lt;span class=\"uilist-item\"&gt;</mark>\n        &lt;a class=\"btn\" href=\"#\"&gt;Login&lt;/a&gt;\n    <mark>&lt;/span&gt;</mark>\n&lt;/nav&gt;</code></pre>\n\n<h3>JavaScript-specific classes</h3>\n<p>Using some form of JavaScript-specific classes can help to reduce the risk that\nthematic or structural changes to components will break any JavaScript that is\nalso applied. An approach that I’ve found helpful is to use certain classes\n<em>only</em> for JavaScript hooks – <code>js-*</code> – and not to hang any presentation off\nthem.</p>\n<pre><code>&lt;a href=\"/login\" class=\"btn btn-primary <mark>js-login</mark>\"&gt;&lt;/a&gt;</code></pre>\n\n<p>This way, you can reduce the chance that changing the structure or theme of\ncomponents will inadvertently affect any required JavaScript behaviour and\ncomplex functionality.</p>\n<h3>Component modifiers</h3>\n<p>Components often have variants with slightly different presentations from the\nbase component, e.g., a different coloured background or border. There are two\nmains patterns used to create these component variants. I’m going to call them\nthe “single-class” and “multi-class” patterns.</p>\n<h4>The “single-class” pattern</h4>\n<pre><code>.btn, .btn-primary { /* button template styles */ }\n.btn-primary { /* styles specific to save button */ }\n\n&lt;button class=\"btn\"&gt;Default&lt;/button&gt;\n&lt;button class=\"btn-primary\"&gt;Login&lt;/button&gt;</code></pre>\n<h4>The “multi-class” pattern</h4>\n<pre><code>.btn { /* button template styles */ }\n.btn-primary { /* styles specific to primary button */ }\n\n&lt;button class=\"btn\"&gt;Default&lt;/button&gt;\n&lt;button class=\"btn btn-primary\"&gt;Login&lt;/button&gt;</code></pre>\n<p>If you use a pre-processor, you might use Sass’s <code>@extend</code> functionality to\nreduce some of the maintenance work involved in using the “single-class”\npattern. However, even with the help of a pre-processor, my preference is to\nuse the “multi-class” pattern and add modifier classes in the HTML.</p>\n<p>I’ve found it to be a more scalable pattern. For example, take the base <code>btn</code>\ncomponent and add a further 5 types of button and 3 additional sizes. Using a\n“multi-class” pattern you end up with 9 classes that can be mixed-and-matched.\nUsing a “single-class” pattern you end up with 24 classes.</p>\n<p>It is also easier to make contextual tweaks to a component, if absolutely\nnecessary. You might want to make small adjustments to <em>any</em> <code>btn</code> that appears\nwithin another component.</p>\n<pre><code><span>/* \"multi-class\" adjustment */</span>\n<span>.thing</span> <span>.btn</span> <span>{ <span>/* adjustments */</span> <span>}</span></span>\n\n<span>/* \"single-class\" adjustment */</span>\n<span>.thing</span> <span>.btn</span>,\n<span>.thing</span> <span>.btn-primary</span>,\n<span>.thing</span> <span>.btn-danger</span>,\n<span>.thing</span> <span>.btn-etc</span> <span>{ <span>/* adjustments */</span> <span>}</span></span></code></pre>\n<p>A “multi-class” pattern means you only need a single intra-component selector\nto target any type of <code>btn</code>-styled element within the component. A\n“single-class” pattern would mean that you may have to account for any possible\nbutton type, and adjust the selector whenever a new button variant is created.</p>\n<h2>Structured class names</h2>\n<p>When creating components – and “themes” that build upon them – some classes are\nused as component boundaries, some are used as component modifiers, and others\nare used to associate a collection of DOM nodes into a larger abstract\npresentational component.</p>\n<p>It’s hard to deduce the relationship between <code>btn</code> (component), <code>btn-primary</code>\n(modifier), <code>btn-group</code> (component), and <code>btn-group-item</code> (component\nsub-object) because the names don’t clearly surface the purpose of the class.\nThere is no consistent pattern.</p>\n<p>In early 2011, I started experimenting with <a href=\"https://gist.github.com/1309546\">naming\npatterns</a> that help me to more quickly\nunderstand the presentational relationship between nodes in a DOM snippet,\nrather than trying to piece together the site’s architecture by switching\nback-and-forth between HTML, CSS, and JS files. The notation in the gist is\nprimarily influenced by the <a href=\"http://bem.github.com/bem-method/html/all.en.html\">BEM\nsystem</a>‘s approach to\nnaming, but adapted into a form that I found easier to scan.</p>\n<p>Since I first wrote this post, several other teams and frameworks have adopted\nthis approach. <a href=\"https://github.com/montagejs/montage\">MontageJS</a> modified the\nnotation into a different style, which I prefer and currently use in the <a href=\"https://github.com/suitcss/suit\">SUIT\nframework</a>:</p>\n<pre><code><span>/* Utility */</span>\n<span>.u-utilityName</span> <span>{<span>}</span></span>\n\n<span>/* Component */</span>\n<span>.ComponentName</span> <span>{<span>}</span></span>\n\n<span>/* Component modifier */</span>\n<span>.ComponentName--modifierName</span> <span>{<span>}</span></span>\n\n<span>/* Component descendant */</span>\n<span>.ComponentName-descendant</span> <span>{<span>}</span></span>\n\n<span>/* Component descendant modifier */</span>\n<span>.ComponentName-descendant--modifierName</span> <span>{<span>}</span></span>\n\n<span>/* Component state (scoped to component) */</span>\n<span>.ComponentName</span><span>.is-stateOfComponent</span> <span>{<span>}</span></span></code></pre>\n<p>This is merely a naming pattern that I’m finding helpful at the moment. It\ncould take any form. But the benefit lies in removing the ambiguity of class\nnames that rely <em>only</em> on (single) hyphens, or underscores, or camel case.</p>\n<h2>A note on raw file size and HTTP compression</h2>\n<p>Related to any discussion about modular/scalable CSS is a concern about file\nsize and “bloat”. <a href=\"http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us\">Nicole Sullivan’s\ntalks</a>\noften mention the file size savings (as well as maintenance improvements) that\ncompanies like Facebook experienced when adopting this kind of approach.\nFurther to that, I thought I’d share my anecdotes about the effects of HTTP\ncompression on pre-processor output and the extensive use of HTML classes.</p>\n<p>When Twitter Bootstrap first came out, I rewrote the compiled CSS to better\nreflect how I would author it by hand and to compare the file sizes. After\nminifying both files, the hand-crafted CSS was about 10% smaller than the\npre-processor output. But when both files were also gzipped, the pre-processor\noutput was about 5% smaller than the hand-crafted CSS.</p>\n<p>This highlights how important it is to <strong>compare the size of files <em>after</em> HTTP\ncompression</strong>, because minified file sizes do not tell the whole story. It\nsuggests that experienced CSS developers using pre-processors don’t need to be\noverly concerned about a certain degree of repetition in the compiled CSS\nbecause it can lend itself well to smaller file sizes after HTTP compression.\nThe benefits of more maintainable “CSS” code via pre-processors should trump\nconcerns about the aesthetics or size of the raw and minified output CSS.</p>\n<p>In another experiment, I removed <em>every</em> class attribute from a 60KB HTML file\npulled from a live site (already made up of many reusable components). Doing\nthis reduced the file size to 25KB. When the original and stripped files were\ngzipped, their sizes were 7.6KB and 6KB respectively – a difference of 1.6KB.\nThe actual file size consequences of liberal class use are rarely going to be\nworth stressing over.</p>\n<h2>How I learned to stop worrying…</h2>\n<p>The experience of many skilled developers, over many years, has led to a shift\nin how large-scale website and applications are developed. Despite this, for\nindividuals weaned on an ideology where “semantic HTML” means using\ncontent-derived class names (and even then, only as a last resort), it usually\nrequires you to work on a large application before you can become acutely aware\nof the impractical nature of that approach. You have to be prepared to disgard\nold ideas, look at alternatives, and even revisit ways that you may have\npreviously dismissed.</p>\n<p>Once you start writing non-trivial websites and applications that you and\nothers must not only maintain but actively iterate upon, you quickly realise\nthat despite your best efforts, your code starts to get harder and harder to\nmaintain. It’s well worth taking the time to explore the work of some people\nwho have proposed their own approaches to tackling these problems: Nicole’s\nblog and <a href=\"https://github.com/stubbornella/oocss/wiki\">Object Oriented CSS</a>\nproject, Jonathan Snook’s <a href=\"http://smacss.com/book/\">Scalable Modular Architecture\nCSS</a>, and the <a href=\"http://bem.github.com/bem-method/pages/beginning/beginning.en.html\">Block Element\nModifier</a>\nmethod that Yandex have developed.</p>\n<p>When you choose to author HTML and CSS in a way that seeks to reduce the amount\nof time you spend writing and editing CSS, it involves accepting that you must\ninstead spend more time changing HTML classes on elements if you want to change\ntheir styles. This turns out to be fairly practical, both for front-end and\nback-end developers – anyone can rearrange pre-built “lego blocks”; it turns\nout that no one can perform CSS-alchemy.</p></div>","tags":"html,semantics,architecture","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:49:57 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:49:57 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"naDd8IimKhr4mHUp"}
{"id":"0","category":"css","categoryId":"29","title":"Modular CSS with Sass & BEM","refSite":"http://www.mathayward.com/modular-css-with-sass-and-bem/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<section role=\"main\" data-large-period=\"\" data-no-widows=\"\">\n\n        <p>I wrote a feature for <a href=\"http://netmagazine.com/\">Net magazine</a>’s December issue about creating a living modular&nbsp;framework.</p>\n\n<figure>\n    <img src=\"http://www.mathayward.com/static/images/blog/write-modular-css-with-sass-and-bem.jpg\" alt=\"Net Magazine\" data-src=\"../database/uploads/images/article_images/write-modular-css-with-sass-and-bem_2_4_2015.jpg\">\n    <figcaption>How the featured appeared in Net magazine</figcaption>\n</figure>\n\n<p>Here it&nbsp;is.</p>\n\n<hr>\n\n<p>While there are already many frontend frameworks available for free, \nit’s often preferable to write the code yourself. In this tutorial, we \nwill explore how to use the <a href=\"http://www.sass-lang.com/\">Sass</a> CSS preprocessor and the <a href=\"http://bem.info/\">BEM</a> methodology to write a ‘living framework’ that can be adapted to suit any development&nbsp;project.</p>\n\n<p>Sass enables us to write CSS in small, easy-to-navigate modules, \nmeaning we can start with base styles and bolt on any components we \nmight need for the system we’re currently&nbsp;building.</p>\n\n<p>We can also make our code easier to understand using well-constructed\n comments and clear naming conventions for our classes and variables. \nThe BEM methodology gives us this clarity. BEM stands for \nBlock-Element-Modifier and is designed to help modularise frontend \ndevelopment by breaking everything into blocks containing elements, then\n using modifiers to tweak&nbsp;them.</p>\n\n<p>To apply the BEM methodology, we give each element within a block a class. Consider an unordered&nbsp;list:</p>\n\n<pre><code>&lt;ul class=\"list\"&gt;\n    &lt;li class=\"list__item\"&gt;Item 1&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Item 2&lt;/li&gt;\n    &lt;li class=\"list__item list__item--end\"&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<p>The unordered list has the block class list while each list item has the element class <strong>list__item</strong>. Only the final list item has the additional modifier class <strong>list__item—end</strong>. Each class follows the BEM&nbsp;syntax:</p>\n\n<pre><code>.BLOCK{__ELEMENT[--MODIFIER]}</code></pre>\n\n<h2>Get&nbsp;Started</h2>\n\n<p>Set up the project by creating two directories: <strong>assets</strong> and <strong>static</strong>.\n The static directory will contain the compiled CSS and everything else \nthat must be deployed, while the assets folder will contain any \nresources that don’t need to be deployed (in this instance, our \nSass&nbsp;files).</p>\n\n<p>With Sass installed on an environment, it’s necessary to ask it to <strong>watch</strong>\n for changes in the SCSS files and update the static CSS files \naccordingly. This is a pretty simple one-liner in a Terminal&nbsp;window:</p>\n\n<pre><code>sass --watch assets/sass:static/css</code></pre>\n\n<p>Sass should have created a <strong>screen.css</strong> file in our <strong>/static/css/</strong> directory. Although at this point the file is empty, we will link to it from our HTML. (The <strong>assets/sass</strong> directory must exist for this to&nbsp;work).</p>\n\n<p>Although we want our modules to be independent, there are always \nvariables, functions and mixins that are used by multiple modules: for \nexample, a mixin for outputting rems with a pixel fallback, or site-wide\n colour variables. With this in mind, we need to create <strong>_base.scss</strong> in our <strong>/assets/sass</strong> directory and include them&nbsp;there.</p>\n\n<p>Using BEM as a basis for variable names will reduce the number of \nvariables used and help other developers who might pick up the framework\n later on. By following this convention, we can add variables for colour\n and text size to our <strong>_base.scss</strong> file. For&nbsp;example:</p>\n\n<pre><code>$color__primary--light: #DD0000 !default;\n$color__primary: #C10000 !default;\n$color__primary--dark: #990000 !default;\n\n$base__font-size: 15 !default;\n$base__line: 20 !default;</code></pre>\n\n<p>And a simple function for calculating em&nbsp;sizes:</p>\n\n<pre><code>@function calc-em($target, $context: $base__font-size) {\n    @return ($target / $context) * 1em;\n}</code></pre>\n\n<p>Next, create <strong>_config.scss</strong>, which will later be used to override the default module variables, and <strong>screen.scss</strong>,\n the master Sass file. This will import the modules to be compiled into \nCSS for use on your website. Start by simply importing the <strong>base</strong> and <strong>config</strong>&nbsp;modules:</p>\n\n<pre><code>@import \"base\";\n@import \"config\";</code></pre>\n\n<p>Rather than asking Sass to create multiple CSS files and linking each one into our HTML document, use the Sass <strong>@import</strong>\n directive to combine all the modules into one master CSS file. This \nreduces the amount of HTTP requests required, thereby \nimproving&nbsp;performance.</p>\n\n<h2>Adding&nbsp;modules</h2>\n\n<p>Create a directory in <strong>/assets/sass</strong> called <strong>modules</strong>.\n This will house all the additional modules you add to your site for \nstyling different forms of content. First off, add a CSS reset module (<strong>_reset.scss</strong>). Paste in the reset code of your choice and import it into the master file in the same way as&nbsp;before.</p>\n\n<p>When you save the changes to the master file, notice that your Terminal process has detected changes and overwritten the <strong>screen.css</strong> file used by your web page. Opening the file, you can see the contents of the reset have been ported&nbsp;across.</p>\n\n<p>At this point, you can begin to see the workflow in action. Being \nable to import snippets of code into a master file means we can easily \ntoggle individual modules on or off as&nbsp;needed.</p>\n\n<p>We can create a module called <strong>_text.scss</strong> and then start adding base styles for headers, paragraphs, and so&nbsp;on:</p>\n\n<pre><code>h1 {\n    font-size: calc-em(36);\n    line-height: (40/36);\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    margin-bottom: calc-em(10, 40);\n    font-weight: bold;\n    color: $color__primary;\n}\n\nh2 {\n    font-size: calc-em(24);\n    line-height: (28/24);\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    margin-bottom: calc-em(15, 40);\n    color: $color__primary;\n}\n\nh3 {\n    font-size: calc-em(20);\n    line-height: (22/20);\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    margin-bottom: calc-em(15, 40);\n}\n\np {\n    font-size: calc-em(15);\n    line-height: (20/15);\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    margin-bottom: calc-em(10, 15);\n}</code></pre>\n\n<p>As there is quite a lot of repeated CSS here, we can abstract this \nout into variables and a mixin for text styling, reducing the amount of \ncode used and making any future tweaks&nbsp;quicker.</p>\n\n<pre><code>$text__family-sans:  \"Helvetica Neue\", Helvetica, Arial, sans-serif !default;\n\n$text__size--alpha: 36 !default;\n$text__size--beta: 30 !default;\n$text__size--gamma: 24 !default;\n$text__size--delta: 15 !default;\n\n$text__line--alpha: 40 !default;\n$text__line--beta: 36 !default;\n$text__line--gamma: 30 !default;\n$text__line--delta: 20 !default;\n\n$text__colour--base: #333333 !default;\n$text__colour--alpha: #990000 !default;\n$text__colour--beta: #990000 !default;\n$text__colour--gamma: #333333 !default;\n$text__colour--delta: #333333 !default;\n\n@mixin text($size, $line, $margin: 0, $family: $text__family-sans) {\n    font-size: calc-em($size);\n    line-height: ($line/$size);\n    font-family: $family;\n    margin-bottom: calc-em($margin, $size);\n}\n\nhtml {\n    font-size: $base__font-size * 1px;\n}\n\nbody {\n    @include text($base__font-size, $base__line);\n}\n\nh1 {\n    @include text($text__size--delta, $text__line--delta, 15);\n    font-weight: bold;\n    color: $color__primary;\n}\n\nh2 {\n    @include text($text__size--beta, $text__line--beta, 15);\n    color: $text__colour--beta;\n}\n\nh3 {\n    @include text($text__size--gamma, $text__line--gamma, 15);\n    color: $text__colour--gamma;\n}\n\np {\n    @include text($text__size--delta, $text__line--delta, 10);\n    color: $text__colour--delta;\n}</code></pre>\n\n<p>The approach we’re using for naming colour variables may not be \npractical when trying to remember which colours are used in context to a\n design. To counteract this we have used module variables with more \ncontextual names. Each variable is given a <strong>!default</strong> flag, which allows us to override them in our <strong>_config.scss</strong> file if we&nbsp;prefer:</p>\n\n<pre><code>$text__family-sans: \"Proxima Nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$text__size--beta: 30;\n$text__line--beta: 36;\n\n$text__colour--base: $color__neutral--dark;\n$text__colour--alpha: $color__primary;\n$text__colour--beta: $color__primary;\n$text__colour--gamma: $text__colour--base;\n$text__colour--delta: $text__colour--base;</code></pre>\n\n<p>You may ask what the point of declaring then overriding these \nvariables is, and, for one-off use, there isn’t one. But what we have \nnow is the beginnings of a modular framework that we can use as a basis \nfor any frontend project, adding and importing more modules as we add \nmore elements to our&nbsp;system.</p>\n\n<p>Redeclaring variables simply reduces the need for dependency between \nmodules and gives us a cleaner starting point for each new&nbsp;project.</p>\n\n<h2>Making code easier to&nbsp;understand</h2>\n\n<p>You could be forgiven for thinking that any developer could now pick \nup your work and understand italmost instantly, but that’s not always \nthe case. Fortunately, there are ways to make your code even easier to \nunderstand. Firstly, Sass comments are not compiled, so will not add any\n weight to our compiled CSS file, so we can write as much as we like to \nbe extra helpful. For instance, I always like to add comment blocks to \nmixins and&nbsp;functions.</p>\n\n<p>Secondly, we can use the BEM methodology. For example, we could create a Sass module for lists where inheritance is&nbsp;obvious:</p>\n\n<pre><code>.list {\n    padding-left: calc-em(10);\n}\n\n.list__item {\n    margin-bottom: calc-em(10);\n}\n\n.list__item--end {\n    margin-bottom: 0;\n}</code></pre>\n\n<p>To add more bullets to this list, we could then create a modifier and include that class on the unordered list&nbsp;element:</p>\n\n<pre><code>&lt;ul class=\"list list--bullet\"&gt;\n    &lt;li class=\"list__item\"&gt;Bulleted list item 1&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Bulleted list item 2&lt;/li&gt;\n    &lt;li class=\"list__item list__item--end\"&gt;Bulleted list item 3&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<pre><code>.list--bullet {\n    list-style-type: disc;\n    padding-left: calc-em(25);\n}</code></pre>\n\n<h2>Putting it all&nbsp;together</h2>\n\n<p>Using the styles we have created, let’s put together a very simple page based on one of my favourite subjects - the&nbsp;quiff:</p>\n\n<pre><code>&lt;article class=\"layout__container\"&gt;\n&lt;header&gt;\n    &lt;h1&gt;Hair styling for beginners&lt;/h1&gt;\n    &lt;h2&gt;Tips and tricks on creating a masterful quiff.&lt;/h2&gt;\n&lt;/header&gt;\n&lt;p&gt;Getting your hair to stand up, and stay up during a busy day in the office can be a bit of a hassle at times. But here&amp;rsquo;s a full-proof method to achieving follicular greatness.&lt;/p&gt;\n&lt;figure class=\"media media--full\"&gt;\n    &lt;img class=\"media__item\" src=\"http://static.fashionbeans.com/wp-content/uploads/2011/03/quiffmain1.jpg\" /&gt;\n    &lt;figcaption class=\"media__caption\"&gt;Young Elvis had a magnificent quiff.&lt;/figcaption&gt;\n&lt;/figure&gt;\n&lt;h3&gt;Requirements&lt;/h3&gt;\n&lt;ul class=\"list list--bullet\"&gt;\n    &lt;li class=\"list__item\"&gt;Hair dryer&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Styling putty&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Finishing spray&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Method&lt;/h3&gt;\n&lt;ol class=\"list list--number list--method\"&gt;\n    &lt;li class=\"list__item\"&gt;Wash and condition your hair as normal.&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Towel dry you hair until it is only slightly damp.&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Rub a small amount of styling putty between the tips of your fingers and style your quiff.&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Blow dry into shape, using a brush to pull your hair up.&lt;/li&gt;\n    &lt;li class=\"list__item\"&gt;Add shine and extra hold by applying some finishing spray.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/article&gt;</code></pre>\n\n<p>Our HTML page needs a bit of styling, so we can go ahead and create additional modules for layout and media,\nwhile including additional styles for the number and method list&nbsp;modifiers.</p>\n\n<p>The following code example shows how the modifiers in <strong>_lists.scss</strong> may look, with module-specific variables being included at the top.\nFor&nbsp;example:</p>\n\n<pre><code>$list__number-color: #CC0000 !default;\n\n.list--number {\n    counter-reset: items;\n    padding-top: calc-em(5);\n\n    .list__item {\n        margin-bottom calc-em(5);\n\n        &amp;:before {\n            counter-increment: items 1;\n            content: counter(items, decimal) \".\";\n            color: $list__number-color;\n            margin-right: calc-em(5);\n        }\n    }\n\n    .list__item--end {\n        margin-bottom: 0;\n    }\n}\n\n.list--method {\n    @extend .list--number;\n\n    .list__item {\n        margin-bottom: calc-em(15);\n\n        &amp;:before {\n            @include text($text__size--beta, $text__line--beta);\n            font-style: italic;\n        }\n    }\n\n    .list__item--end {\n        margin-bottom: 0;\n    }\n}</code></pre>\n\n<p>There are examples of a layout and a media module in the <a href=\"https://github.com/mathaywarduk/simple-sass-framework\">Github repository</a> that accompanies this tutorial, but I’ll let you be creative here and decide for yourself how to build&nbsp;them.</p>\n\n<figure>\n    <img src=\"http://www.mathayward.com/static/images/blog/BEM_Sass_3.png\" alt=\"Module files\" data-src=\"../database/uploads/images/article_images/bem_sass_3_2_4_2015.png\">\n    <figcaption>Self-contained module files set out base styles for content types. They’re used only when needed</figcaption>\n</figure>\n\n<h2>Converting to&nbsp;rems</h2>\n\n<p>In this framework we’ve been using em sizing units throughout, which \non smaller scale projects isn’t a problem. But issues surrounding \ncompounding font-sizes can crop up when we nest HTML elements. To combat\n this, we can use rem (root em) units. To do this, we’d set a base font \nsize on our HTML element. We already have a variable for this. \nFor&nbsp;example:</p>\n\n<pre><code>html {\n    font-size: $base-font-size;\n}</code></pre>\n\n<p>Then we would write a function to calculate rems and use that in place or our original <strong>calc-em()</strong>&nbsp;function:</p>\n\n<pre><code>@function calc-rem($target) {\n    @return ($target / $base_font-size) * 1 rem;\n}</code></pre>\n\n<p>Rems are supported in later versions of <a href=\"http://www.mathayward.com/modular-css-with-sass-and-bem/caniuse.com/rem\">all major browsers</a>, but for legacy support, we can use a pixel&nbsp;fallback.</p>\n\n<h2>Going&nbsp;further</h2>\n\n<p>This is a very simple example, but the potential of a Sass and BEM-based framework is&nbsp;enormous.</p>\n\n<p>Using the workflow outlined in this tutorial, you can create an \nessential building block that you can make use of for all your future \nprojects, no matter how large they are, simply by adding modules \nas&nbsp;necessary.</p>\n\n<p>It’s important to remember that while you are building one system, \nyou should make the base module as simple, and therefore reusable, as \npossible. Specificity can then be added using the <strong>_config.scss</strong> file and BEM modifiers<span&nbsp;class=\"period\">.</span&nbsp;class=\"period\"></p></section>","tags":"css,CSS Methods,BEM Methodology","isStarred":"false","articleImages":["http://www.mathayward.com/static/images/blog/write-modular-css-with-sass-and-bem.jpg","http://www.mathayward.com/static/images/blog/BEM_Sass_3.png"],"note":"","dateCreated":"Thu Apr 02 2015 20:54:59 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:54:59 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"76CNDoi3td8v5gkR"}
{"id":"0","category":"css","categoryId":"29","title":"Flexible CSS cover images","refSite":"http://nicolasgallagher.com/flexible-css-cover-images/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<div>\n      <p>I recently included the option to add a large cover image, like the one above,\nto my posts. The source image is cropped, and below specific maximum dimensions\nit’s displayed at a predetermined aspect ratio. This post describes the\nimplementation.</p>\n<ul>\n<li><strong>Demo: <a href=\"http://codepen.io/necolas/pen/Aksni\">Flexible CSS cover images</a></strong></li>\n</ul>\n<p><i>Known support</i>: Chrome, Firefox, Safari, Opera, IE 9+</p>\n<h2>Features</h2>\n<p>The way that the cover image scales, and changes aspect ratio, is illustrated\nin the following diagram.</p>\n<p><img src=\"http://nicolasgallagher.com/flexible-css-cover-images/diagram.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/diagram_2_4_2015.png\"></p>\n<p>The cover image component must:</p>\n<ul>\n<li>render at a fixed aspect ratio, unless specific maximum dimensions are exceeded;</li>\n<li>support different aspect ratios;</li>\n<li>support <code>max-height</code> and <code>max-width</code>;</li>\n<li>support different background images;</li>\n<li>display the image to either fill, or be contained within the component;</li>\n<li>center the image.</li>\n</ul>\n<h2>Aspect ratio</h2>\n<p>The aspect ratio of an empty, block-level element can be controlled by setting\na percentage value for its <code>padding-bottom</code> or <code>padding-top</code>. Given a\ndeclaration of <code>padding-bottom:50%</code> (and no explicit <code>height</code>), the rendered\nheight of the element will be 50% of its width.</p>\n<pre><code><span>.CoverImage</span> <span>{\n  <span><span>padding-bottom</span>:<span> <span>50</span>%</span></span>;\n<span>}</span></span></code></pre>\n<p>Changing that padding value will change the aspect ratio. For example, padding\nof <code>25%</code> results in an aspect ratio of <code>4:1</code>, padding of <code>33.333%</code> results in\nan aspect ratio of <code>3:1</code>, etc.</p>\n<h3>Maximum dimensions</h3>\n<p>The problem with using this aspect ratio hack is that if the element has a\n<code>max-height</code> declared, it will not be respected. To get around this, the hack\ncan be applied to a pseudo-element instead.</p>\n<pre><code><span>.CoverImage</span><span>:before</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>display</span>:<span> block</span></span>;\n  <span><span>padding-bottom</span>:<span> <span>50</span>%</span></span>;\n<span>}</span></span></code></pre>\n<p>Now the main element can take a <code>max-height</code>. It should also clip the\npseudo-element overflow.</p>\n<pre><code>.CoverImage {\n  display: block;\n  <mark>max-height: 300px;</mark>\n  max-width: 1000px;\n  <mark>overflow: hidden;</mark>\n}\n\n.CoverImage:before {\n  content: \"\";\n  display: block;\n  padding-bottom: 50%;\n}</code></pre>\n\n<p>This aspect ratio pattern is provided by the\n<a href=\"https://github.com/suitcss/flex-embed\">FlexEmbed</a> component for SUITCSS. That\ncomponent is primarily for responsive video embeds, but it’s flexible enough to\nbe useful whenever you need an element rendered at a predetermined aspect\nratio. It comes with modifiers for <code>2:1</code>, <code>3:1</code>, <code>16:9</code>, and <code>4:3</code> aspect\nratios. The cover image component can extend the FlexEmbed component.</p>\n<pre><code>&lt;div class=\"CoverImage <mark>FlexEmbed FlexEmbed--2by1</mark>\"&gt;&lt;/div&gt;</code></pre>\n\n<h2>Background image</h2>\n<p>The cover image is applied as a background image that is sized to cover the\nentire area of the element. This makes sure the image is clipped to fit the\naspect ratio of the element.</p>\n<pre><code>.CoverImage {\n  ...\n  background-repeat: no-repeat;\n  background-size: cover;\n}</code></pre>\n<p>If you want different cover images for different instances of the component,\nthey can be applied via the <code>style</code> attribute.</p>\n<pre><code>&lt;div class=\"...\" <mark>style=\"background-image: url(cover.jpg)\"</mark>&gt;&lt;/div&gt;</code></pre>\n\n<p>The image can be fully centered by using background positioning and block\ncentering. This makes sure that the image is centered in the element, and that\nthe element is centered within its parent (when it reaches the <code>max-width</code>\nvalue).</p>\n<pre><code>.CoverImage {\n  ...\n  <mark>background-position: 50%;</mark>\n  background-repeat: no-repeat;\n  background-size: cover;\n  <mark>margin: 0 auto;</mark>\n}</code></pre>\n\n<h2>Final result</h2>\n<p>If you depend on the FlexEmbed module, the amount of additional code required\nis minimal. (See the <a href=\"http://codepen.io/necolas/pen/Aksni\">demo</a> for all the\ncode, including the FlexEmbed dependency.)</p>\n<pre><code><span>/**\n * Requires: suitcss/flex-embed\n */</span>\n\n<span>.CoverImage</span> <span>{\n  <span><span>background-position</span>:<span> <span>50</span>%</span></span>;\n  <span><span>background-repeat</span>:<span> no-repeat</span></span>;\n  <span><span>background-size</span>:<span> cover</span></span>;\n  <span><span>margin</span>:<span> <span>0</span> auto</span></span>;\n  <span><span>max-height</span>:<span> <span>300</span>px</span></span>;\n  <span><span>max-width</span>:<span> <span>1000</span>px</span></span>;\n<span>}</span></span></code></pre>\n<pre><code>&lt;div class=\"CoverImage FlexEmbed FlexEmbed--3by1\"\n     style=\"background-image:url(cover.jpg)\"&gt;\n&lt;/div&gt;</code></pre>\n<p>You can add further customizations, such as setting the accompanying background\ncolor, or providing a means to switch between the <code>cover</code> and <code>contain</code>\nkeywords for <code>background-size</code>.</p></div>","tags":"css","isStarred":"false","articleImages":["http://nicolasgallagher.com/flexible-css-cover-images/diagram.png"],"note":"","dateCreated":"Thu Apr 02 2015 20:58:22 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:58:22 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"WmI6m6q1fXmK2TUo"}
{"id":"0","category":"css","categoryId":"29","title":"CSS: the cascade, specificity, and inheritance","refSite":"http://nicolasgallagher.com/css-cascade-specificity-inheritance/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<h2>What is the cascade?</h2>\n<p>The <a href=\"http://www.w3.org/TR/CSS2/cascade.html#cascade\">cascade</a> is a mechanism\nfor determining which styles should be applied to a given element, based on the\nrules that have cascaded down from various sources.</p>\n<p>The cascade takes importance, origin, specificity, and source order of style\nrules into account. It assigns a weight to each rule. When multiple rules apply\nto a given element, the rule with the greatest weight takes precedence. The\nresult is an unambiguous way to determine the value of a given element/property\ncombination.</p><p></p>\n<p>Browsers apply the following sorting logic:</p>\n<ul>\n<li>Find all declarations that apply to a given element/property combination, for\nthe target <code>media</code> type.</li>\n<li><p>Sort declarations according to their importance (normal or important) and\norigin (author, user, or user agent). From highest to lowest precedence:</p>\n<ol>\n<li>user <code>!important</code> declarations<br></li>\n<li>author <code>!important</code> declarations<br></li>\n<li>author normal declarations<br></li>\n<li>user normal declarations<br></li>\n<li>user agent declarations</li>\n</ol>\n</li>\n<li><p>If declarations have the same importance and source, sort them by selector\nspecificity.</p>\n</li>\n<li>Finally, if declarations have the same importance, source, and specificity,\nsort them by the order they are specified in the CSS. The last declaration\nwins.</li>\n</ul>\n<h2>What is specificity?</h2>\n<p><a href=\"http://www.w3.org/TR/CSS2/cascade.html#specificity\">Specificity</a> is a method\nof conflict resolution within the cascade.</p>\n<p>Specificity is calculated in a very particular way, based on the values of 4\ndistinct categories. For explanatory purposes, the CSS2 spec represents these\ncategories using the letters <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>.  Each has a value of <code>0</code>\nby default.</p>\n<ul>\n<li><code>a</code> is equal to <code>1</code> if the declaration comes from a <code>style</code> attribute in the\nHTML (“inline styles”) rather than a CSS rule with a selector.</li>\n<li><code>b</code> is equal to the number of ID attributes in a selector.</li>\n<li><code>c</code> is equal to the number of other attributes and pseudo-classes in a\nselector.</li>\n<li><code>d</code> is equal to the number of elements and pseudo-elements in a selector.</li>\n</ul>\n<p>The specificity is given by concatenating all 4 resulting numbers. More\nspecific selectors take precedence over less specific ones.</p>\n<p>For example, the selector <code>#id .class[href] element:hover</code> contains:</p>\n<ul>\n<li>1 ID (<code>b</code> is <code>1</code>)</li>\n<li>1 class, 1 attribute selector, and 1 pseudo-class (<code>c</code> is <code>3</code>)</li>\n<li>1 element (<code>d</code> is <code>1</code>)</li>\n</ul>\n<p>Therefore, it has a specificity of <code>0,1,3,1</code>. Note that a selector containing a\nsingle ID (<code>0,1,0,0</code>) will have a higher specificity than one containing any\nnumber of other attributes or elements (e.g., <code>0,0,10,20</code>). This is one of the\nreasons why many modern CSS architectural patterns avoid using IDs for styling\npurposes.</p>\n<h2>What is inheritance?</h2>\n<p><a href=\"http://www.w3.org/TR/CSS2/cascade.html#inheritance\">Inheritance</a> is distinct\nfrom the cascade and involves the DOM tree.</p>\n<p>Inheritance is the process by which elements inherit the the values of\nproperties from their ancestors in the DOM tree. Some properties, e.g.\n<code>color</code>, are automatically inherited by the children of the element to which\nthey are applied. Each property defines whether it will be automatically\ninherited.</p>\n<p>The <code>inherit</code> value can be set for any property and will force a given element\nto inherit its parent element’s property value, even if the property is not\nnormally inherited.</p>\n<h2>About <code>!important</code></h2>\n<p>The above should make it apparent that <code>!important</code> is a separate concept to\nspecificity. It has no effect on the specificity of a rule’s selector.</p>\n<p>An <code>!important</code> declaration has a greater precedence than a normal declaration\n(see the previously mentioned cascade sorting logic), even declarations\ncontained in an element’s <code>style</code> attribute.</p>\n<p>[<a href=\"http://www.xanthir.com/blog/b4E50\">CSS terminology reference</a>]</p>","tags":"css,css specificity","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 20:59:21 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 20:59:21 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"6JTfjbX7EGAlkpHb"}
{"id":"0","category":"css","categoryId":"29","title":"An introduction to CSS pseudo-element hacks","refSite":"http://nicolasgallagher.com/an-introduction-to-css-pseudo-element-hacks/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>CSS is a versatile style language that is most frequently used to control the\nlook and formatting of an HTML document based on information in the document\ntree. But there are some common publishing effects – such as formatting the\nfirst line of a paragraph – that would not be possible if you were <em>only</em> able\nto style elements based on this information. Fortunately, CSS has\n<em>pseudo-elements</em> and <em>pseudo-classes</em>.</p>\n<p>As their names imply, they are not part of the DOM in the way that ‘real’ HTML\nelements and classes are. Instead, they are CSS abstractions that provide\nadditional, and otherwise inaccessible, information about the document.</p>\n<p>This article will discuss the CSS pseudo-elements that are part of CSS 2.1 –\n<code>:first-letter</code>, <code>:first-line</code>, <code>:before</code>, and <code>:after</code> – and how the <code>:before</code>\nand <code>:after</code> pseudo-elements can be exploited to create some interesting\neffects, without compromising the simplicity of your HTML. But first, let’s\nlook at each type of pseudo-element and how to use them in their basic form.</p>\n<h2>The <code>:first-line</code> and <code>:first-letter</code> pseudo-elements</h2>\n<p>The <code>:first-line</code> pseudo-element lets you apply styles to the first formatted\nline of a block container element (i.e., elements with their <code>display</code> property\nset to <code>block</code>, <code>inline-block</code>, <code>list-item</code>, <code>table-caption</code>, or <code>table-cell</code>).\nFor example:</p>\n<pre><code><span>p</span><span>:first-line</span> <span>{ <span><span>font-weight</span>:<span> bold</span></span>; <span>}</span></span></code></pre>\n<p>…will change the first line of every paragraph to bold. The <code>:first-line</code>\npseudo-element can be treated <em>as if</em> it were an extra HTML inline element\nwrapping only the first line of text in the paragraph.</p>\n<p>The <code>:first-letter</code> pseudo-element lets you apply styles to the first letter\n(and any preceding punctuation) of the first formatted line of a block\ncontainer element. No other inline content (e.g. an image) can appear before\nthe text. For example:</p>\n<pre><code><span>p</span><span>:first-letter</span> <span>{ <span><span>float</span>:<span> left</span></span>; <span><span>font-size</span>:<span> <span>200</span>%</span></span>; <span>}</span></span></code></pre>\n<p>…will produce a basic ‘drop cap’ effect. The first letter of every paragraph\nwill be floated left, and twice as large as the other letters in the paragraph.\nThe <code>:first-letter</code> pseudo-element can be treated <em>as if</em> it were an extra HTML\ninline element wrapping only the first letter of text in the paragraph.</p>\n<p>The <code>:first-line</code> and <code>:first-letter</code> pseudo-elements can only be attached to\nblock container elements, but the first formatted line can be contained within\nany block-level descendant (e.g., elements with their <code>display</code> property set to\n<code>block</code> or <code>list-item</code>) in the same flow (i.e., not floated or positioned). For\nexample, the following HTML fragment and CSS:</p>\n<pre><code>&lt;div&gt;&lt;p&gt;An example of the first line of text being within a descendant element&lt;/p&gt;&lt;/div&gt;\n\ndiv:first-line { font-weight: bold; }</code></pre>\n<p>…would still result in a bold first line of text, because the paragraph’s text\nis the first formatted line of the <code>div</code>.</p>\n<h2>The <code>:before</code> and <code>:after</code> pseudo-elements</h2>\n<p>The <code>:before</code> and <code>:after</code> pseudo-elements are used to insert generated content\nbefore or after an element’s content. They can be treated <em>as if</em> they were\nextra HTML inline elements inserted just before and after the content of their\nassociated element.</p>\n<p>Generated content is specified using the <code>content</code> property which, in CSS 2.1,\ncan only be used in conjunction with the <code>:before</code> and <code>:after</code>\npseudo-elements. Furthermore, you must declare the <code>content</code> property in order\nto generate the <code>:before</code> and <code>:after</code> pseudo-elements.</p>\n<p>The <code>content</code> property can take string, <code>url()</code>, <code>attr()</code>, <code>counter()</code> and\n<code>counters()</code> values. The <code>url()</code> value is used to insert an image. The <code>attr()</code>\nfunction returns as a string the value of the specified attribute for the\nassociated element. The <code>counter()</code> and <code>counters()</code> functions can be used to\ndisplay the value of any CSS counters.</p>\n<p>For example, the following HTML fragment and CSS:</p>\n<pre><code>&lt;a href=\"http://wikipedia.org\"&gt;Wikipedia&lt;/a&gt;\n\na:after { content: \" (\" attr(href) \")\"; }</code></pre>\n<p>…would display the value of the <code>href</code> attribute after a link’s content,\nresulting in the following anchor text for the example above: <code>Wikipedia\n(http://wikipedia.org)</code>. This can be a helpful way to display the destination of\nspecific links in printed web documents.</p>\n<p>Keep in mind that CSS is meant for adding presentation and not content.\nTherefore, the <code>content</code> property should be used with caution.</p>\n<p>It’s also worth noting that the <code>:first-letter</code> and <code>:first-line</code>\npseudo-elements apply to the first letter and first line of an element\nincluding any generated content inserted using the <code>:before</code> and <code>:after</code>\npseudo-elements.</p>\n<h2>Browser support for pseudo-elements</h2>\n<p>The <code>:first-letter</code> and <code>:first-line</code> pseudo-elements were introduced in CSS1\nand there is wide basic support for them. However, IE 6 and IE 7 have\nparticularly buggy implementations; even modern browsers are not entirely\nconsistent in the way that they handle the <code>:first-line</code> and <code>:first-letter</code>\npseudo-elements (<a href=\"http://nicolasgallagher.com/css-typography-experiment/demo/bugs.html\">example bugs</a>).</p>\n<p>The <code>:before</code> and <code>:after</code> pseudo-elements were introduced in the CSS 2.1\nspecification and are fully implemented in Firefox 3.5+, IE 8+, Safari 3+,\nGoogle Chrome, and Opera. Modern versions of Firefox even support CSS\ntransitions and animations applied to pseudo-elements. However, legacy browsers\nlike IE 6 and IE 7 do not support the <code>:before</code> and <code>:after</code> pseudo-elements at\nall.</p>\n<p>For more detailed information on pseudo-element browser support, browser bugs,\nand workarounds, have a look at <a href=\"http://reference.sitepoint.com/css/pseudoelements\">Sitepoint’s\nreference</a> and <a href=\"http://satzansatz.de/cssd/pseudocss.html\">this article\non IE 6/7 issues</a>.</p>\n<p>In most cases, the <code>:before</code> and <code>:after</code> pseudo-elements can be used as part\nof a ‘progressive enhancement’ approach to design and development, because IE 6\nand IE 7 will simply ignore them altogether. Alternatively,\n<a href=\"http://modernizr.com/\">Modernizr</a> now includes a robust feature test for\ngenerated content, providing one way to specify fallbacks or enhancements\ndepending on browser support. The important thing is to remember to check what\nhappens in browsers where support is missing.</p>\n<h2>Alternative ways to use pseudo-elements</h2>\n<p>Let’s take a look at how the <code>:before</code> and <code>:after</code> pseudo-elements can be used\nas the basis for some interesting effects. Most of the time, this involves\ngenerating empty <code>:before</code> and <code>:after</code> pseudo-elements by declaring an empty\nstring as the value of the <code>content</code> property. They can then be manipulated as\nif they were empty inline HTML elements, keeping your HTML clean and giving you\nfull control of certain effects from within CSS style sheets.</p>\n<p>Simple visual enhancements, like speech bubbles and folded corners, can even be\ncreated without the need for images. This relies on the fact that you can\ncreate simple shapes using CSS.</p>\n<p>Several types of ‘CSS polygons’ can be created as a result of browsers\nrendering borders at an angle when they meet. This can be exploited to create\ntriangles. For example, the following HTML fragment and CSS:</p>\n<pre><code>&lt;div class=\"triangle\"&gt;&lt;/div&gt;\n\n.triangle {\n  width: 0;\n  height: 0;\n  border-width: 20px;\n  border-style: solid;\n  border-color: red transparent transparent;\n}</code></pre>\n<p>…will create a downward pointing, red triangle. By varying the width, height,\nborder-width, border-style, and border-color values you can produce different\nshapes and control their orientation and colour. For more information, be sure\nto read <a href=\"http://jonrohan.me/guide/css/creating-triangles-in-css/\">Jon Rogan’s summary of the\ntechnique</a>.</p>\n<p>The more advanced pseudo-element hacks use the extra background canvas afforded\nby each <code>:before</code> and <code>:after</code> pseudo-element. This can help you crop\nbackground images, control the opacity of background images, and ‘fake’\n<a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/\">multiple backgrounds and\nborders</a> in browsers without\nsupport for CSS3 multiple backgrounds (e.g., IE 8). Taken to ludicrous\nextremes, you can even build a whole <a href=\"http://nicolasgallagher.com/pure-css-gui-icons/\">CSS icon set</a>. To\nstart with, let’s look at some simple effects that can be created without\nimages or presentational HTML.</p>\n<h3>Creating CSS speech bubbles</h3>\n<p>In this example, a quote is styled to look like a <a href=\"http://nicolasgallagher.com/pure-css-speech-bubbles/\">speech bubble, using\nCSS</a>. This is done by creating a triangle using a\npseudo-element, and then absolutely positioning it in the desired place. By\nadding <code>position:relative</code> to the CSS styles for the HTML element, you can\nabsolutely position the <code>:after</code> pseudo-element relative to its associated\nelement.</p>\n<pre><code>&lt;div class=\"quote\"&gt;[Quoted text]&lt;/div&gt;\n\n.quote {\n  position: relative;\n  width: 300px;\n  padding: 15px 25px 20px;\n  margin: 20px auto;\n  font: italic 26px/1.4 Georgia, serif;\n  color: #fff;\n  background: #245991;\n}\n\n.quote:after {\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  right: 25px;\n  border-width: 30px 30px 0 0;\n  border-style: solid;\n  border-color: #245991 transparent;\n}</code></pre>\n<p>There’s nothing stopping you from adding some CSS3 to further enhance the\neffect for capable browsers. This could be adding rounded corners to the box or\napplying a skew transform to the triangle itself. <a href=\"http://jsfiddle.net/necolas/hjMqh/\">Fiddle with the code in this\nexample</a>.</p>\n<h3>Creating CSS ‘ribbons’</h3>\n<p>Using the same principle, you can create a CSS ribbon effect without images or\nextra HTML. This time the effect uses 2 pseudo-element triangles. The HTML\nfragment is still very simple.</p>\n<pre><code>&lt;div class=\"container\"&gt;\n    &lt;h1&gt;Simple CSS ribbon&lt;/h1&gt;\n    &lt;p&gt;[other content]&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n<p>You then need to use negative margins to pull the <code>h1</code> outwards so that it\nextends over the padding and beyond the boundaries of the container <code>div</code>. The\nHTML fragment above can be styled using the following CSS:</p>\n<pre><code><span>.container</span> <span>{\n  <span><span>width</span>:<span> <span>400</span>px</span></span>;\n  <span><span>padding</span>:<span> <span>20</span>px</span></span>;\n  <span><span>margin</span>:<span> <span>20</span>px auto</span></span>;\n  <span><span>background</span>:<span> <span>#fff</span></span></span>;\n<span>}</span></span>\n\n<span>.container</span> <span>h1</span> <span>{\n  <span><span>position</span>:<span> relative</span></span>;\n  <span><span>padding</span>:<span> <span>10</span>px <span>30</span>px</span></span>;\n  <span><span>margin</span>:<span> <span>0</span> -<span>30</span>px <span>20</span>px</span></span>;\n  <span><span>font-size</span>:<span> <span>20</span>px</span></span>;\n  <span><span>line-height</span>:<span> <span>24</span>px</span></span>;\n  <span><span>font-weight</span>:<span> bold</span></span>;\n  <span><span>color</span>:<span> <span>#fff</span></span></span>;\n  <span><span>background</span>:<span> <span>#87A800</span></span></span>;\n<span>}</span></span></code></pre>\n<p>From here, you only need to add the pseudo-element triangles to create the\n‘wrapping’ appearance associated with ribbons. The <code>:before</code> and <code>:after</code>\npseudo-elements share many styles, so you can simplify the code by only\noverriding the styles that differ between the two. In this case, the triangle\ncreated with the <code>:after</code> pseudo-element must appear on the opposite side of\nthe heading, and will be a mirror image of the other triangle. So you need to\noverride the shared styles that control its position and orientation.</p>\n<pre><code><span>.container</span> <span>h1</span><span>:before</span>,\n<span>.container</span> <span>h1</span><span>:after</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>position</span>:<span> absolute</span></span>;\n  <span><span>top</span>:<span> <span>100</span>%</span></span>;\n  <span><span>left</span>:<span> <span>0</span></span></span>;\n  <span><span>border-width</span>:<span> <span>0</span> <span>10</span>px <span>10</span>px <span>0</span></span></span>;\n  <span><span>border-style</span>:<span> solid</span></span>;\n  <span><span>border-color</span>:<span> transparent <span>#647D01</span></span></span>;\n<span>}</span></span>\n\n<span>/* override shared styles */</span>\n<span>.container</span> <span>h1</span><span>:after</span> <span>{\n  <span><span>left</span>:<span> auto</span></span>;\n  <span><span>right</span>:<span> <span>0</span></span></span>;\n  <span><span>border-width</span>:<span> <span>0</span> <span>0</span> <span>10</span>px <span>10</span>px</span></span>;\n<span>}</span></span></code></pre>\n<p><a href=\"http://jsfiddle.net/necolas/xCfeH/\">Fiddle with the code in this example</a>.</p>\n<h3>Creating CSS folded corners</h3>\n<p>The final example of this form of pseudo-element hack creates a simple <a href=\"http://nicolasgallagher.com/pure-css-folded-corner-effect/\">CSS\nfolded-corner effect</a>. A pseudo-element’s\n<code>border</code> properties are set to produce two differently-coloured touching\ntriangles. One triangle is a slightly darker or lighter shade of the box’s\nbackground colour. The other triangle matches the background colour of the\nbox’s parent (e.g. white). The pseudo-element is then positioned in the top\nright corner of its associated element to complete the effect.</p>\n<pre><code>.note {\n  position: relative;\n  padding: 20px;\n  margin: 2em 0;\n  color: #fff;\n  background: #97C02F;\n}\n\n.note:before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  border-width: 0 16px 16px 0;\n  border-style: solid;\n  border-color: #658E15 #fff;\n}</code></pre>\n<p>Varying the size of the borders will vary the size and angle of the\nfolded-corner. <a href=\"http://jsfiddle.net/necolas/uzaG9/\">Fiddle with the code in this\nexample</a>.</p>\n<h3>Pseudo background-crop</h3>\n<p>Although creating polygons with pseudo-elements can produce some popular\neffects without images, the possibilities are inherently limited. But this is\nonly one type of <code>:before</code> and <code>:after</code> pseudo-element hack. Treated as extra\nbackground canvases, they can be used to fill some gaps in existing browser\nsupport for CSS features.</p>\n<p>One of those features is the cropping of background images. In the future, it’s\nlikely that you’ll be able to crop background images using fragment\nidentifiers, as is proposed in the CSS Image Values Module Level 3 draft. But\nat the moment no browsers support the use of fragment identifiers with bitmap\nimages. Until they do, you can make use of this CSS 2.1 hack to emulate\nbackground image cropping in modern browsers.</p>\n<p>The principle behind a ‘<a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/crop.html\">pseudo\nbackground-crop</a>‘ is to apply a\nbackground-image to a pseudo-element rather than directly to an element in the\nHTML document. One of the applications of this technique is to crop icons that\nare part of a sprite.</p>\n<p>For example, a web app might allow users to ‘save’, ‘edit’, or ‘delete’ an\nitem. The HTML involved might look something like this:</p>\n<pre><code>&lt;ul class=\"actions\"&gt;\n  &lt;li class=\"save\"&gt;&lt;a href=\"#\"&gt;Save&lt;/a&gt;&lt;/li&gt;\n  &lt;li class=\"edit\"&gt;&lt;a href=\"#\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n  &lt;li class=\"delete\"&gt;&lt;a href=\"#\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>To enhance the appearance of these ‘action’ links, it is common to see icons\nsitting alongside the anchor text. For argument’s sake, let’s say that the\nrelevant icons are part of a sprite that is organised using a 16px × 16px grid.</p>\n<p>The <code>:before</code> pseudo-element – with dimensions that match the sprite’s grid\nunit – can be used to crop and display each icon. The sprite is referenced as a\nbackground image and the <code>background-position</code> property is used to control the\nprecise positioning of each icon to be shown.</p>\n<pre><code><span>.actions</span> <span>a</span><span>:before</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>float</span>:<span> left</span></span>;\n  <span><span>width</span>:<span> <span>16</span>px</span></span>;\n  <span><span>height</span>:<span> <span>16</span>px</span></span>;\n  <span><span>margin</span>:<span> <span>0</span> <span>5</span>px <span>0</span> <span>0</span></span></span>;\n  <span><span>background</span>:<span> <span>url(sprite.png)</span></span></span>;\n<span>}</span></span>\n\n<span>.save</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> <span>0</span> <span>0</span></span></span>; <span>}</span></span>\n<span>.edit</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> -<span>16</span>px <span>0</span></span></span>; <span>}</span></span>\n<span>.delete</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> -<span>32</span>px <span>0</span></span></span>; <span>}</span></span></code></pre>\n<p>Using pseudo-elements like this helps to avoid the need to either add liberal\namounts of white space to sprites or use empty HTML elements to do the\ncropping. <a href=\"http://jsfiddle.net/necolas/Zjtye/\">Fiddle with the code in this\nexample</a>.</p>\n<h3>Pseudo background-position</h3>\n<p>The CSS 2.1 specification limits the values of <code>background-position</code> to\nhorizontal and vertical offsets from the top-left corner of an element. The CSS\nBackgrounds and Borders Module Level 3 working draft includes an improvement to\nthe <code>background-position</code> property to allow offsets to be set from any side.\nHowever, Opera 11+ is currently the only browser to have implemented it.</p>\n<p>But by using pseudo-elements, it’s possible to emulate positioning a background\nimage from any side in any browser with adequate CSS 2.1 support –’<a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/position.html\">pseudo\nbackground-position</a>‘.</p>\n<p>Once a pseudo-element is created, it must be absolutely positioned in front of\nthe associated element’s background but behind its <em>content</em>, so as not to\nprevent users from being able to select text or click on links. This is done by\nsetting a positive <code>z-index</code> on the element and a negative <code>z-index</code> on the\npseudo-element.</p>\n<pre><code><span>#content</span> <span>{\n  <span><span>position</span>:<span> relative</span></span>;\n  <span><span>z-index</span>:<span> <span>1</span></span></span>;\n<span>}</span></span>\n\n<span>#content</span><span>:before</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>position</span>:<span> absolute</span></span>;\n  <span><span>z-index</span>:<span> -<span>1</span></span></span>;\n<span>}</span></span></code></pre>\n<p>Now the pseudo-element can be sized and positioned to sit over any area within\n(or beyond) the element itself, without affecting its content. This is achieved\nby using any combination of values for the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>\npositional offsets, as well as the <code>width</code>, and <code>height</code> properties. It is the\nkey to their flexibility.</p>\n<p>In this example, a 200px × 300px background image is applied to the\npseudo-element, which is also given dimensions that match those of the image.\nSince the pseudo-element is absolutely positioned, it can be offset from the\nbottom and right of the associated HTML element.</p>\n<pre><code><span>#content</span> <span>{\n  <span><span>position</span>:<span> relative</span></span>;\n  <span><span>z-index</span>:<span> <span>1</span></span></span>;\n<span>}</span></span>\n\n<span>#content</span><span>:before</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>position</span>:<span> absolute</span></span>;\n  <span><span>z-index</span>:<span> -<span>1</span></span></span>;\n  <span><span>bottom</span>:<span> <span>10</span>px</span></span>;\n  <span><span>right</span>:<span> <span>10</span>px</span></span>;\n  <span><span>width</span>:<span> <span>200</span>px</span></span>;\n  <span><span>height</span>:<span> <span>300</span>px</span></span>;\n  <span><span>background</span>:<span> <span>url(image.jpg)</span></span></span>;\n<span>}</span></span></code></pre>\n<p>Many other hacks and effects are possible using the <code>:before</code> and <code>:after</code>\npseudo-elements, especially when combined with CSS3. Hopefully this\nintroduction to pseudo-elements, and how they can be exploited, will have\ninspired you to experiment with them in your work.</p>\n<h2>The future of pseudo-elements</h2>\n<p>The way that pseudo-elements are used will continue to change as CSS does. Some\nnew applications will emerge, and existing ones will fade away as browser\nimplementation of ‘CSS3 modules’ continues to improve.</p>\n<p>Generated content and pseudo-elements themselves are likely to undergo changes\ntoo. The CSS3 Generated and Replaced Content Module introduced a two-colon\nformat for pseudo-elements (i.e., <code>::before</code>) to help distinguish between\npseudo-classes and pseudo-elements. But for compatibility with previous levels\nof CSS, pseudo-elements do not require two colons. Most modern browsers support\nboth formats, but it is not supported by IE 8 and the single-colon format\nensures greater backwards compatibility.</p>\n<p>The proposed extensions to pseudo-elements included the addition of nested\npseudo-elements (<code>::before::before</code>), multiple pseudo-elements (<code>::after(2)</code>),\nwrapping pseudo-elements (<code>::outside</code>), and the ability to insert\npseudo-elements into later parts of the document (<code>::alternate</code>). However, the\nCSS3 Generated and Replaced Content Module is undergoing significant changes.</p>","tags":"css,pseudo-element,hacks","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 21:01:09 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:01:09 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"5eVfnSKlxsXWqVHU"}
{"id":"0","category":"css","categoryId":"29","title":"Better conditional classnames for hack-free CSS","refSite":"http://nicolasgallagher.com/better-conditional-classnames-for-hack-free-css/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"html"}],"description":"<p>Applying conditional classnames to the <code>html</code> element is a popular way to help\ntarget specific versions of IE with CSS fixes. It was first described by Paul\nIrish and is a feature of the HTML5 Boilerplate. Despite all its benefits,\nthere are still a couple of niggling issues. Here are some hacky variants that\nside-step those issues.</p>\n<p>An article by Paul Irish, <a href=\"http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/\">Conditional stylesheets vs CSS hacks? Answer:\nNeither!</a>,\nfirst proposed that <a href=\"http://msdn.microsoft.com/en-us/library/ms537512.aspx\">conditional\ncomments</a> be used on the\nopening <code>html</code> tag to help target legacy versions of IE with CSS fixes. Since\nits inclusion in the <a href=\"http://html5boilerplate.com/\">HTML5 Boilerplate</a> project,\ncontributors have <a href=\"https://github.com/h5bp/html5-boilerplate/issues/425/\">further\nrefined</a> the technique.</p>\n<p>However, there are still some niggling issues with the “classic” conditional\ncomments approach, which Mathias Bynens summarized in a recent article on <a href=\"http://mathiasbynens.be/notes/safe-css-hacks\">safe\nCSS hacks</a>.</p>\n<ol>\n<li><strong>The Compatibility View icon is displayed in IE8 and IE9</strong> if you are not\nsetting the <code>X-UA-Compatible</code> header in a server config.</li>\n<li><strong>The <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#charset\">character encoding\ndeclaration</a>\nmight not be fully contained within the first 1024 bytes of the HTML document</strong>\nif you need to include several attributes on each version of the opening <code>html</code>\ntag (e.g. Facebook xmlns junk).</li>\n</ol>\n<p>You can read more about the related discussions in <a href=\"https://github.com/h5bp/html5-boilerplate/issues/286\">issue\n#286</a> and <a href=\"https://github.com/h5bp/html5-boilerplate/issues/378\">issue\n#378</a> at the <a href=\"https://github.com/h5bp/html5-boilerplate\">HTML5\nBoilerplate GitHub repository</a>.</p>\n<h2>The “bubble up” conditional comments method</h2>\n<p>Although not necessarily recommended, it looks like both of these issues can be\navoided with a bit of trickery. You can create an uncommented opening <code>html</code>\ntag upon which any shared attributes (so no <code>class</code> attribute) can be set. The\nconditional classes are then assigned in a second <code>html</code> tag that appears after\nthe <code>&lt;meta http-equiv=\"X-UA-Compatible\"&gt;</code> tag in the document. The classes will\n“bubble up” to the uncommented tag.</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\"\n          content=\"IE=edge,chrome=1\"&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;!--[if lt IE 7]&gt;&lt;html class=\"no-js ie6\"&gt;&lt;![endif]--&gt;\n    &lt;!--[if IE 7]&gt;&lt;html class=\"no-js ie7\"&gt;&lt;![endif]--&gt;\n    &lt;!--[if IE 8]&gt;&lt;html class=\"no-js ie8\"&gt;&lt;![endif]--&gt;\n    &lt;!--[if gt IE 8]&gt;&lt;!--&gt;&lt;html class=\"no-js\"&gt;&lt;!--&lt;![endif]--&gt;\n\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p><small><a href=\"https://gist.github.com/982797\">Fork the Gist</a></small></p>\n<p>The result is that IE8 and IE9 won’t ignore the <code>&lt;meta\nhttp-equiv=\"X-UA-Compatible\"&gt;</code> tag, the Compatibility View icon will not be\ndisplayed, and the amount of repeated code is reduced. Obviously, including a\nsecond <code>html</code> tag in the <code>head</code> isn’t pretty or valid HTML.</p>\n<p>If you’re using a server-side config to set the <code>X-UA-Compatible</code> header\n(instead of the <code>meta</code> tag), then you can still benefit from the DRYer nature\nof using two opening <code>html</code> tags and it isn’t necessary to include the\nconditional comments in the <code>head</code> of the document. However, you might still\nwant to do so if you risk not containing the character encoding declaration\nwithin the first 1024 bytes of the document.</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;!--[if lt IE 7]&gt;&lt;html class=\"no-js ie6\"&gt;&lt;![endif]--&gt;\n&lt;!--[if IE 7]&gt;&lt;html class=\"no-js ie7\"&gt;&lt;![endif]--&gt;\n&lt;!--[if IE 8]&gt;&lt;html class=\"no-js ie8\"&gt;&lt;![endif]--&gt;\n&lt;!--[if gt IE 8]&gt;&lt;!--&gt;&lt;html class=\"no-js\"&gt;&lt;!--&lt;![endif]--&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p><small><a href=\"https://gist.github.com/982797\">Fork the Gist</a></small></p>\n<h2>The “preemptive” conditional comments method</h2>\n<p>Another method to prevent the Compatibility View icon from showing was found by\n<a href=\"https://github.com/julienw\">Julien Wajsberg</a>. It relies on including a\nconditional comment before the DOCTYPE. Doing this seems to help IE recognise\nthe <code>&lt;meta http-equiv=\"X-UA-Compatible\"&gt;</code> tag. This method isn’t as DRY and\ndoesn’t have the character encoding declaration as high up in the document, but\nit also doesn’t use 2 opening <code>html</code> elements.</p>\n<pre><code>&lt;!--[if IE]&gt;&lt;![endif]--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;!--[if lt IE 7]&gt;&lt;html class=\"no-js ie6\"&gt;&lt;![endif]--&gt;\n&lt;!--[if IE 7]&gt;&lt;html class=\"no-js ie7\"&gt;&lt;![endif]--&gt;\n&lt;!--[if IE 8]&gt;&lt;html class=\"no-js ie8\"&gt;&lt;![endif]--&gt;\n&lt;!--[if gt IE 8]&gt;&lt;!--&gt;&lt;html class=\"no-js\"&gt;&lt;!--&lt;![endif]--&gt;\n  &lt;head&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p><small><a href=\"https://gist.github.com/982797\">Fork the Gist</a></small></p>\n<p>While it’s interesting to explore these possibilities, the “classic” method is\nstill generally the most understandable. It doesn’t create invalid HTML,\ndoesn’t risk throwing IE into quirks mode, and you won’t have a problem with\nthe Compatibility View icon if you use a server-side config.</p>\n<p>If you find any other approaches, or problems with those posted here, please\nleave a comment but also consider adding what you’ve found to the relevant\nissues in the <a href=\"https://github.com/h5bp/html5-boilerplate\">HTML5 Boilerplate GitHub\nrepository</a>.</p>","tags":"css,conditional css","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 21:02:15 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:02:15 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"QYZMalMLJY1pmldk"}
{"id":"0","category":"css","categoryId":"29","title":"CSS Speech Bubble","refSite":"http://jsfiddle.net/necolas/hjMqh/","codes":[{"code":"<div class=\"quote\">\n    <blockquote><p>If you spend too much time thinking about a thing, you will never get it done.</p></blockquote>\n    <p class=\"credit\">Bruce Lee</p>\n</div>","codeLanguage":"html"},{"code":"body {\n    background:#e5e5e5;   \n}\n\n.quote {\n    position:relative;\n    width:300px;\n    padding:15px 25px 20px;\n    margin:20px auto;\n    font:italic 26px/1.4 Georgia, serif;\n    color:#fff;\n    background:#245991;\n}\n\n.quote:after {\n    content:\"\";\n    position:absolute;\n    top:100%;\n    right:25px;\n    border-width:30px 30px 0 0;\n    border-style:solid;\n    border-color:#245991 transparent;\n    /* css3 extras */\n    -webkit-transform:skewX(-15deg);\n       -moz-transform:skewX(-15deg);\n        -ms-transform:skewX(-15deg);\n         -o-transform:skewX(-15deg);\n            transform:skewX(-15deg);\n}\n\n.credit {\n    margin:1em 0 0;\n    font:14px/1.2 Arial, sans-serif;\n}\n\n.credit:before {\n    content:\"— \";\n}\n\nblockquote, p {padding:0; margin:0;}","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"","tags":"css,Tricks,Tips & Tricks","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 21:03:41 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:03:41 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"VXM8DTI3JkZjuM1N"}
{"id":"0","category":"css","categoryId":"29","title":"CSS Ribbon","refSite":"http://jsfiddle.net/necolas/xCfeH/","codes":[{"code":"<div class=\"container\">\n    <h1>Simple CSS ribbon</h1>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing arcu vitae lacus porta ac pellentesque massa lobortis. In arcu tortor, sagittis ac laoreet sit amet, euismod a odio.</p>\n    <p>Vestibulum sit amet quam eu libero ultrices bibendum et quis massa. Quisque vestibulum semper neque a sollicitudin. Duis cursus volutpat dolor in dictum. Maecenas iaculis diam ut lacus hendrerit in fermentum augue interdum. Maecenas venenatis felis sapien, sit amet pulvinar massa.</p>\n</div>","codeLanguage":"html"},{"code":"/* \n\nNOTE 1\n\nIE 6 and IE 7 need hasLayout to be triggered on the h1.\nThis will tidy up some slightly ugly rendering that is\nconsequence of using the negative margins.\n\nThis CSS declaration could be moved into your\nconditional IE style sheet if you use one.\n\n\nNOTE 2\n\nThe {z-index:-1} declaration for the pseudo-elements is\nto push them behind the element they are generated from.\nThis is only necessary because in this enhanced example\na CSS box-shadow is being used to add a slight sense of\ndepth to the effect.\n\nHowever, this does introduce a slight problem that can\nbe corrected by the technique described in \"NOTE 3\".\n\n\nNOTE 3\n\nThe {position:relative; z-index:1} declarations used on\n.container are useful when also using z-index:-1 on the \npseudo-element. They will prevent the pseudo-elements \nfrom falling behind any ancestors further up the \ndocument tree that have background colours of their own.\n       \nAs an experiment:\n\n1. In the HTML above, wrap the .container div \n   with <div class=\"wrapper\"></div>.\n\n2. In the CSS to the right, add the following:\n\n   .wrapper {background:#e5e5e5;}\n\n   and remove the following from .container:\n\n   position:relative;\n   z-index:1;\n\n3. Click \"run\" in the toolbar above. You should notice\n   that the pseudo-elements have disappeared. This is \n   because they have fallen behind your \"wrapper\" div.\n   \n4. To bring them back, add the {position:relative; \n   z-index:1;} code back to .container. Click \"run\"\n\n*/\n\nbody {\n    padding:0;\n    font:15px/1.4 Arial, sans-serif;\n    background:#e5e5e5;\n}\n\np {\n    margin:1.4em 0 0;\n}\n\n.container {\n    /* See \"NOTE 3\" */\n    position:relative;\n    z-index:1;\n    width:300px;\n    padding:20px;\n    margin:20px auto;\n    background:#fff;\n}\n\n.container h1 {\n    position:relative;\n    padding:10px 30px;\n    margin:0 -30px 20px;\n    font-size:28px;\n    line-height:32px;\n    font-weight:bold;\n    text-align:center;\n    color:#fff;\n    background:#87A800;\n    /* css3 extras */\n    text-shadow:0 1px 1px rgba(0,0,0,0.2);\n    -webkit-box-shadow:0 1px 1px rgba(0,0,0,0.2);\n       -moz-box-shadow:0 1px 1px rgba(0,0,0,0.2);\n            box-shadow:0 1px 1px rgba(0,0,0,0.2);\n    /* See \"NOTE 1\" */\n    zoom:1;\n}\n\n.container h1:before,\n.container h1:after {\n    content:\"\";\n    position:absolute;\n    /* See \"NOTE 2\" */\n    z-index:-1;\n    top:100%;\n    left:0;\n    border-width:0 10px 10px 0;\n    border-style:solid;\n    border-color:transparent #647D01;\n}\n\n.container h1:after {\n    left:auto;\n    right:0;\n    border-width:0 0 10px 10px;\n}","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"","tags":"css,Tips & Tricks,Ribbon","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 21:05:06 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:05:06 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"Wfa5EtGqjXMddfN8"}
{"id":"0","category":"css","categoryId":"29","title":"A new micro clearfix hack","refSite":"http://nicolasgallagher.com/micro-clearfix-hack/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"<div>\n      <p>The clearfix hack is a popular way to contain floats without resorting to using\npresentational markup. This article presents an update to the clearfix method\nthat further reduces the amount of CSS required.</p>\n<p><strong>Demo: <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/demo/\">Micro clearfix hack</a></strong></p>\n<p><i>Known support</i>: Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+</p>\n<p>The “micro clearfix” method is suitable for modern browsers and builds upon\n<a href=\"http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified/\">Thierry Koblentz’s “clearfix\nreloaded”</a>,\nwhich introduced the use of both the <code>:before</code> and <code>:after</code> pseudo-elements.</p>\n<p>Here is the updated code (I’ve used a shorter class name too):</p>\n<pre><code><span>/**\n * For modern browsers\n * 1. The space content is one way to avoid an Opera bug when the\n *    contenteditable attribute is included anywhere else in the document.\n *    Otherwise it causes space to appear at the top and bottom of elements\n *    that are clearfixed.\n * 2. The use of `table` rather than `block` is only necessary if using\n *    `:before` to contain the top-margins of child elements.\n */</span>\n<span>.cf</span><span>:before</span>,\n<span>.cf</span><span>:after</span> <span>{\n    <span><span>content</span>:<span> <span>\" \"</span></span></span>; <span>/* 1 */</span>\n    <span><span>display</span>:<span> table</span></span>; <span>/* 2 */</span>\n<span>}</span></span>\n\n<span>.cf</span><span>:after</span> <span>{\n    <span><span>clear</span>:<span> both</span></span>;\n<span>}</span></span>\n\n<span>/**\n * For IE 6/7 only\n * Include this rule to trigger hasLayout and contain floats.\n */</span>\n<span>.cf</span> <span>{\n    <span>*<span>zoom</span>:<span> <span>1</span></span></span>;\n<span>}</span></span></code></pre>\n<p>This “micro clearfix” generates pseudo-elements and sets their <code>display</code> to\n<code>table</code>. This creates an <a href=\"http://www.w3.org/TR/CSS2/tables.html#anonymous-boxes\">anonymous\ntable-cell</a> and a new\nblock formatting context that means the <code>:before</code> pseudo-element prevents\ntop-margin collapse. The <code>:after</code> pseudo-element is used to clear the floats.\nAs a result, there is no need to hide any generated content and the total\namount of code needed is reduced.</p>\n<p>Including the <code>:before</code> selector is <em>not</em> necessary to clear the floats, but it\n<strong>prevents</strong> top-margins from collapsing in modern browsers. This has two\nbenefits:</p>\n<ul>\n<li>It ensures visual consistency with other float containment techniques that\ncreate a new block formatting context, e.g., <code>overflow:hidden</code></li>\n<li>It ensures visual consistency with IE 6/7 when <code>zoom:1</code> is applied.</li>\n</ul>\n<p><strong>N.B.</strong>: There are circumstances in which IE 6/7 will not contain the bottom\nmargins of floats within a new block formatting context. Further details can be\nfound here: <a href=\"http://nicolasgallagher.com/better-float-containment-in-ie/\">Better float containment in IE using CSS\nexpressions</a>.</p>\n<p>The use of <code>content:\" \"</code> (note the space in the content string) avoids an\n<a href=\"http://codepen.io/anon/full/9454/4\">Opera bug</a> that creates space around\nclearfixed elements if the <code>contenteditable</code> attribute is also present\nsomewhere in the HTML. Thanks to Sergio Cerrutti for spotting this fix. An\nalternative fix is to use <code>font:0/0 a</code>.</p>\n<h2>Legacy Firefox</h2>\n<p>Firefox &lt; 3.5 will benefit from using Thierry’s method with the addition of\n<code>visibility:hidden</code> to hide the inserted character. This is because legacy\nversions of Firefox need <code>content:\".\"</code> to avoid extra space appearing between\nthe <code>body</code> and its first child element, in certain circumstances (e.g.,\n<a href=\"http://jsfiddle.net/necolas/K538S/\">jsfiddle.net/necolas/K538S/</a>.)</p>\n<p>Alternative float-containment methods that create a new block formatting\ncontext, such as applying <code>overflow:hidden</code> or <code>display:inline-block</code> to the\ncontainer element, will also avoid this behaviour in legacy versions of\nFirefox.</p></div>","tags":"css,Clearfix","isStarred":"false","note":"","dateCreated":"Thu Apr 02 2015 21:06:40 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:06:40 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"X5XndJ8URbePFuCs"}
{"id":"0","category":"css","categoryId":"29","title":"CSS background image hacks","refSite":"http://nicolasgallagher.com/css-background-image-hacks/","codes":[{"code":"","codeLanguage":"html"},{"code":"","codeLanguage":"css"},{"code":"","codeLanguage":"html"}],"description":"<div>\n      <p>Emulating background image crop, background image opacity, background\ntransforms, and improved background positioning. A few hacks relying on CSS\npseudo-elements to emulate features unavailable or not yet widely supported by\nmodern browsers.</p>\n<p><strong>Demos: <a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/\">Example CSS background image hacks</a></strong></p>\n<p>Pseudo-element hacks can fill some gaps in existing browser support for CSS\nfeatures, without resorting to presentational HTML. In some cases, they even\nmake it possible to emulate things that are not currently part of any W3C\nworking draft, like background transforms and background image opacity.</p>\n<p>Most of the hacks in this article tie in with the pseudo-element hack described\nin an earlier article – <a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2\">Multiple Backgrounds and Borders with CSS\n2.1</a>. That article already\ndescribes how to emulate multiple background support and its demo page shows\nseveral other uses of the basic principle. This article presents a few of those\neffects and applications in greater detail.</p>\n<h2>Emulating background-crop</h2>\n<p><em>Known support</em>: Firefox 3.5+, Opera 10+, Safari 4+, Chrome 4+, IE 8+</p>\n<p><strong>Demo: <a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/crop.html\">Pseudo background-crop</a></strong></p>\n<p>Background image cropping can be emulated in modern browsers using only CSS\n2.1. The principle behind a <strong>pseudo background-crop</strong> is to apply a\n<code>background-image</code> to a pseudo-element rather than the element itself. One\nexample would be to crop an image to display in the background. Another would\nbe to crop an image sprite to display icons alongside text in links.</p>\n<p><img src=\"http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-crop.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/css-pseudo-background-crop_2_4_2015.png\"></p>\n<p>In several cases, using pseudo-elements may have advantages over existing,\nalternative techniques because it combines their strengths and avoids some of\ntheir weaknesses.</p>\n<p>Google, Facebook, and Twitter all make use of empty DOM elements to crop dense\nsprites and display icons next to certain links in their interfaces. The\nalternative is not to use empty elements but be forced into using multiple\nimages and/or to design sub-optimal image sprites that have their component\nimages spaced out.</p>\n<p>Pseudo-elements can be used in much the same way as empty DOM elements. This\nsimultaneously eliminates the need for presentational HTML and doesn’t depend\nso heavily on an image sprite’s design. Using pseudo-elements for this purpose\ndoes have its own drawback – a lack of support in legacy browsers like IE6 and\nIE7. However, the technique will progressively enhance capable browsers while\nleaving a perfectly usable experience for incapable browsers.</p>\n<h3>Example code: cropping a sprite</h3>\n<p>This example shows how to crop icons that are part of a dense image sprite that\nuses a 16px × 16px grid. It uses a simple list and specifies a <code>class</code> for\neach type of action.</p>\n<pre><code>&lt;ul class=\"actions\"&gt;\n  &lt;li class=\"save\"&gt;&lt;a href=\"#\"&gt;Save&lt;/a&gt;&lt;/li&gt;\n  &lt;li class=\"delete\"&gt;&lt;a href=\"#\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n  &lt;li class=\"share\"&gt;&lt;a href=\"#\"&gt;Share&lt;/a&gt;&lt;/li&gt;\n  &lt;li class=\"comment\"&gt;&lt;a href=\"#\"&gt;Comment&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>Styling can be applied to present this list in whatever way is needed. From\nthat base, a pseudo-element can be created and then treated as you would an\nempty, inline DOM element (e.g. <code>&lt;span&gt;</code>).</p>\n<p>In this case, the <code>:before</code> pseudo-element is used and sized to match the\nsprite’s grid unit. It could be sized to whatever dimensions are required to\nmatch a section of the sprite that needs to be cropped.</p>\n<pre><code><span>.actions</span> <span>a</span><span>:before</span> <span>{\n  <span><span>content</span>:<span> <span>\"\"</span></span></span>;\n  <span><span>float</span>:<span> left</span></span>;\n  <span><span>width</span>:<span> <span>16</span>px</span></span>;\n  <span><span>height</span>:<span> <span>16</span>px</span></span>;\n  <span><span>margin</span>:<span> <span>0</span> <span>5</span>px <span>0</span> <span>0</span></span></span>;\n  <span><span>background</span>:<span> <span>url(sprite.png)</span></span></span>;\n<span>}</span></span>\n\n<span>.save</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> <span>0</span> -<span>16</span>px</span></span>; <span>}</span></span>\n<span>.delete</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> <span>0</span> -<span>32</span>px</span></span>; <span>}</span></span>\n<span>.share</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> <span>0</span> -<span>48</span>px</span></span>; <span>}</span></span>\n<span>.comment</span> <span>a</span><span>:before</span> <span>{ <span><span>background-position</span>:<span> <span>0</span> -<span>64</span>px</span></span>; <span>}</span></span></code></pre>\n<p>Providing hover, focus, active, and “saved” states is just a case of declaring\nthe correct background position in each case.</p>\n<pre><code><span>.save</span> <span>a</span><span>:hover</span><span>:before</span>,\n<span>.save</span> <span>a</span><span>:focus</span><span>:before</span>,\n<span>.save</span> <span>a</span><span>:active</span><span>:before</span> <span>{\n  <span><span>background-position</span>:<span> -<span>16</span>px -<span>16</span>px</span></span>;\n<span>}</span></span>\n\n<span>.saved</span> <span>a</span><span>:before</span> <span>{\n  <span><span>background-position</span>:<span> -<span>32</span>px -<span>16</span>px</span></span>;\n<span>}</span></span></code></pre>\n<h3>Future alternatives</h3>\n<p>In the future, there will be other alternatives. <a href=\"http://www.css3.info/firefox-3-6-adds-background-clipping/\">Firefox 3.6 added\n-moz-image-rect</a> to\nallow background images to be cropped. But this is not supported by other\nbrowsers and looks likely to be replaced by an alternative proposal (to use\nfragment identifiers) that is part of the <a href=\"http://dev.w3.org/csswg/css3-images/#url\">CSS Image Values Module Level\n3</a> specification. As far as I know,\nno stable release of any modern browser supports the use of fragment\nidentifiers with bitmap images at the time of writing.</p>\n<h2>Emulating background-transform</h2>\n<p><em>Known support</em>: Firefox 3.6+, Opera 10.5+, Safari 4+, Chrome 4+, IE 9+</p>\n<p><strong>Demo: <a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/transform.html\">Pseudo background-transform</a></strong></p>\n<p>Combining pseudo-elements and transforms makes it possible to emulate\nbackground transforms. A <strong>pseudo background-transform</strong> can be used to rotate,\nscale, and skew background images and sprites. There is no proposal for\n<code>background-image</code> transforms, so a pseudo-element hack is one way to emulate\nit.</p>\n<h3>Example: rotating a background image</h3>\n<p>The example of cropping sprites can be further developed by reducing the number\nof different images used in the sprite. Rather than applying transforms to\nimages in a graphics package, they can be applied in the CSS.</p>\n<p><img src=\"http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-transform.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/css-pseudo-background-transform_2_4_2015.png\"></p>\n<p>The code to do this is relatively simple and might look something like:</p>\n<pre><code>.accordion a:before {\n  content: \"\";\n  float: left;\n  width: 16px;\n  height: 16px;\n  margin: 0 5px 0 0;\n  background: url(sprite.png) no-repeat 0 0;\n}\n\n.accordion.open a:before {\n  <mark>transform: rotate(90deg);</mark>\n}</code></pre>\n\n<p>To apply a transform to a more conventional background image (e.g., a large\ngraphic sitting behind some content that doesn’t affect the positioning of\nother components) requires use of the positioning technique detailed in the\narticle <a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/\">Multiple Backgrounds and Borders with CSS\n2.1</a>.</p>\n<p>It involves setting the background image on a pseudo-element which is then\npositioned behind the content layer of an element using absolute positioning\nand <code>z-index</code>.</p>\n<h3>Example: mirroring a background image</h3>\n<p>There are instances when mirroring a background image might be desired. The\napproach is similar to that for rotating an image, but this time uses\n<code>transform:scale()</code>.</p>\n<p><img src=\"http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-mirror.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/css-pseudo-background-mirror_2_4_2015.png\"></p>\n<p>Producing an exact mirror of an element or pseudo-element can be done using\n<code>transform:scaleX(-1)</code>, <code>transform:scaleY(-1)</code>, and <code>transform:scale(-1,-1)</code> to\nmirror along the x-axis, y-axis, and both axes, respectively.</p>\n<p>The following code is an example of how a pseudo background-transform might be\nused for pagination links. A pseudo-element displays a single image (or region\nof a sprite) and is then mirrored. The image’s appearance is such that a\nrotation cannot produce the desired counterpart. Only a scale operation can do\nit.</p>\n<pre><code>.prev a:before,\n.next a:before {\n  content: \"\";\n  float: left;\n  width: 16px;\n  height: 16px;\n  margin: 0 5px 0 0;\n  background: url(sprite.png) no-repeat 0 0;\n}\n\n.next a:before {\n  float: right;\n  margin: 0 0 0 5px;\n  <mark>transform: scaleX(-1);</mark>\n}</code></pre>\n\n<p>There is no support for this in IE 8. Even if you’re a fan of using IE filters\nto work around some missing CSS support, they won’t work on pseudo-elements.</p>\n<h3>Future alternatives</h3>\n<p>There don’t seem to be any future alternatives in any CSS working draft. For\nthe moment, it looks like pseudo-element hacks will be needed to emulate\neffects like background transforms and background perspective without resorting\nto presentational HTML.</p>\n<h2>Emulating background-position</h2>\n<p><em>Known support</em>: Firefox 3.5+, Opera 10+, Safari 4+, Chrome 4+, IE 8+</p>\n<p><strong>Demo: <a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/position.html\">Pseudo background-position</a></strong></p>\n<p>The CSS 2.1 specification limits the values of <code>background-position</code> to offsets\nfrom the left and top sides. It’s possible to emulate positioning a background\nimage from the right and bottom sides by applying the background image to a\npseudo-element and using it as an additional background layer.</p>\n<p><img src=\"http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-position.png\" alt=\"\" data-src=\"../database/uploads/images/article_images/css-pseudo-background-position_2_4_2015.png\"></p>\n<p>This hack is easily combined with the other hacks in this article. More details\non the <strong>pseudo background-position</strong> hack can be found in the article on\n<a href=\"http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/\">Multiple Backgrounds and Borders with CSS\n2.1</a>.</p>\n<h3>Example code</h3>\n<p>In this example, a pseudo-element is created and placed behind the element’s\ncontent layer. The background image is 500px × 300px and declared for the\npseudo-element, which is also given dimensions that match those of the image.\nSince the pseudo-element is absolutely positioned, it can be positioned from\nthe bottom and right of the element using offsets.</p>\n<pre><code>#content {\n  position: relative;\n  z-index: 1;\n}\n\n#content:before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  <mark>bottom: 10px;</mark>\n  <mark>right: 10px;</mark>\n  width: 500px;\n  height: 300px;\n  background: url(image.jpg);\n}</code></pre>\n\n<h3>Future alternatives</h3>\n<p>There is a part of the <a href=\"http://www.w3.org/TR/css3-background/#the-background-position\">CSS Backgrounds and Borders\nmodule</a> working\ndraft that describes an improvement to the <code>background-position</code> property to\nallow positions to be set from any side. At the moment, Opera 11 is the only\nstable release of a browser that has implemented it.</p>\n<h2>Emulating background-opacity</h2>\n<p><em>Known support</em>: Firefox 3.5+, Opera 10+, Safari 4+, Chrome 4+, IE 9+</p>\n<p><strong>Demo: <a href=\"http://nicolasgallagher.com/css-background-image-hacks/demo/opacity.html\">Pseudo background-opacity</a></strong></p>\n<p>Changing the opacity of a pseudo-background is as simple as modifying the value\nof the <code>opacity</code> property. There is no IE 8 support for <code>opacity</code> and IE\nfilters will not work on pseudo-elements.</p>\n<h3>Example code</h3>\n<p>This example code shows a pseudo-element being created and positioned behind\nthe rest of the element’s content so as not to interfere with it. The\npseudo-element is then sized to fit the element using offsets (but could be\noffset by other values or given an explicit size), given a background image,\nand has its opacity changed.</p>\n<pre><code>#content {\n  position: relative;\n  z-index: 1;\n}\n\n#content:before {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: url(image.jpg);\n  <mark>opacity: 0.7;</mark>\n}</code></pre>\n\n<h2>Notes</h2>\n<p>For now, and as far as I am aware, using CSS 2.1 pseudo-elements is the only\nwidely supported (and backwards compatible) way to emulate background image\ncrop, background transform, background opacity, and improved background\npositioning with semantic HTML.</p>\n<p>Even when alternatives in CSS working drafts (e.g., the improved\n<code>background-position</code> and use of fragment identifiers) are widely implemented,\npseudo-element background-image hacks will still have the advantage of letting\nyou use other CSS properties like <code>opacity</code>, <code>border-radius</code>, <code>border-image</code>,\n<code>box-shadow</code>, <code>transforms</code>, etc., which <em>may</em> prove useful in certain\nsituations. It can’t hurt to be aware of these options.</p>\n<p>It’s worth mentioning that although you can only generate 2 pseudo-elements\nfrom a DOM element, in many cases you can easily use descendant elements to\nprovide more pseudo-elements to play with. This idea was used to help create\nthe rotated example on the <a href=\"http://nicolasgallagher.com/css-drop-shadows-without-images/demo/\">CSS drop-shadows demo\npage</a> and several of the CSS3 examples\nat the bottom of the <a href=\"http://nicolasgallagher.com/pure-css-speech-bubbles/demo/\">pure CSS speech bubbles demo\npage</a>.</p>\n<p><small><small>Thanks to <a href=\"http://mathiasbynens.be/\">Mathias Bynens</a> for reading\nand giving feedback on a draft of this article.</small></small></p></div>","tags":"css,hacks","isStarred":"false","articleImages":["http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-crop.png","http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-transform.png","http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-mirror.png","http://nicolasgallagher.com/css-background-image-hacks/css-pseudo-background-position.png"],"note":"","dateCreated":"Thu Apr 02 2015 21:09:20 GMT+0530 (India Standard Time)","dateModified":"Thu Apr 02 2015 21:09:20 GMT+0530 (India Standard Time)","mode":"add","comments":[],"images":[],"_id":"cOhYOgPPJ83PIn5f"}
